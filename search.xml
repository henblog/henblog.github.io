<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Oracle归档日志总结</title>
      <link href="/2022/08/01/oracle-gui-dang-ri-zhi-zong-jie/"/>
      <url>/2022/08/01/oracle-gui-dang-ri-zhi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle归档日志总结"><a href="#Oracle归档日志总结" class="headerlink" title="Oracle归档日志总结"></a>Oracle归档日志总结</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>归档日志(Archive Log)是<strong>非活动的重做日志备份</strong>.通过使用归档日志,可以保留所有重做历史记录,当数据库处于<code>ARCHIVELOG</code>模式并进行日志切换时,后台进程ARCH会将重做日志的内容保存到归档日志中.当数据库出现介质失败时,使用数据文件备份,归档日志和重做日志可以完全恢复数据库。</p><h2 id="归档模式开启与关闭"><a href="#归档模式开启与关闭" class="headerlink" title="归档模式开启与关闭"></a>归档模式开启与关闭</h2><ul><li><p>查询是否开启归档</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">[oracle@osc ~]$ sqlplus &#x2F; as sysdbaSQL*Plus: Release 11.2.0.4.0 Production on Mon Nov 12 17:36:13 2018Copyright (c) 1982, 2013, Oracle.  All rights reserved.Connected to:Oracle Database 11g Enterprise Edition Release 11.2.0.4.0 - 64bit ProductionWith the Partitioning, OLAP, Data Mining and Real Application Testing optionsSQL&gt; archive log list; Database log mode              No Archive ModeAutomatic archival             DisabledArchive destination            USE_DB_RECOVERY_FILE_DESTOldest online log sequence     1124Current log sequence           1126<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>No Archive Mode</code>、<code>Disabled</code> 表示未开启归档</p></li><li><p>开启归档</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SQL</span><span class="token operator">></span> <span class="token keyword">shutdown</span> immediate<span class="token punctuation">;</span><span class="token keyword">Database</span> closed<span class="token punctuation">.</span><span class="token keyword">Database</span> dismounted<span class="token punctuation">.</span>ORACLE instance shut down<span class="token punctuation">.</span><span class="token keyword">SQL</span><span class="token operator">></span>  startup mount<span class="token punctuation">;</span>ORACLE instance started<span class="token punctuation">.</span>Total System <span class="token keyword">Global</span> Area <span class="token number">2421825536</span> bytes<span class="token keyword">Fixed</span> Size                  <span class="token number">2255632</span> bytesVariable Size             <span class="token number">620758256</span> bytes<span class="token keyword">Database</span> Buffers         <span class="token number">1778384896</span> bytesRedo Buffers               <span class="token number">20426752</span> bytes<span class="token keyword">Database</span> mounted<span class="token punctuation">.</span><span class="token keyword">SQL</span><span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">database</span> archivelog<span class="token punctuation">;</span><span class="token keyword">Database</span> altered<span class="token punctuation">.</span><span class="token keyword">SQL</span><span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">database</span> <span class="token keyword">open</span><span class="token punctuation">;</span><span class="token keyword">Database</span> altered<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>关闭归档</p></li></ul><h2 id="归档日志空间不足解决方法"><a href="#归档日志空间不足解决方法" class="headerlink" title="归档日志空间不足解决方法"></a>归档日志空间不足解决方法</h2><p>如果归档空间不足，将无法正常登入ORACLE，通过错误日志 <code>oracle_ora_错误码.trc</code> </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> parameter background_dump_dest <span class="token comment">--获取错误日志</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>ORA-01034</code></li><li><code>ORA-27101</code></li><li><code>ORA-00257: archiver error. Connect internal only, until freed</code></li></ul><p>由于归档日志太多，占用了全部日志存储空间。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>1、先cmd命令连接到数据库：有多个数据库需要指定连接的实例SID</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">sqlplus <span class="token operator">/</span><span class="token variable">@orcl</span> <span class="token keyword">as</span> sysdba <span class="token comment">--最高权限连接到orcl实例</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、连接到实例后，确定下是否是我们所需要处理的数据库实例：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> instance_name <span class="token keyword">from</span> v$instance<span class="token punctuation">;</span> <span class="token comment">--查看当前连接的数据库的sid</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、确认是后，先关闭例程，再启动例程（相当于初始化环境，排除干扰）</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">shutdown</span> abort<span class="token punctuation">;</span>startup mount<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4、查看下归档日志空间情况：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span>  v$recovery_file_dest<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-关闭归档"><a href="#1-关闭归档" class="headerlink" title="1.关闭归档"></a>1.关闭归档</h4><p>如果业务不需要用到归档日志，可以选择关闭归档日志</p><h4 id="2-增大归档空间"><a href="#2-增大归档空间" class="headerlink" title="2.增大归档空间"></a>2.增大归档空间</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">sqlplus <span class="token operator">/</span> <span class="token keyword">as</span> sysdba<span class="token keyword">shutdown</span> abort     <span class="token comment">----关闭进程</span>startup mount       <span class="token comment">---- 装载数据库</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> v$recovery_file_dest<span class="token punctuation">;</span> <span class="token comment">---查询归档日志</span>db_recovery_file_dest_size<span class="token operator">=</span><span class="token number">10737418240</span><span class="token punctuation">;</span> <span class="token comment">--设置归档日志空间为10G</span><span class="token keyword">Exit</span> <span class="token comment">---到这里空间大小已经设置完成</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-删除归档日志"><a href="#3-删除归档日志" class="headerlink" title="3.删除归档日志"></a>3.删除归档日志</h4><p><strong>注意提前备份</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">sqlplus <span class="token operator">/</span>nolog  <span class="token comment">--登录Oracle</span><span class="token keyword">SQL</span><span class="token operator">></span> <span class="token keyword">connect</span> <span class="token operator">/</span><span class="token keyword">as</span> sysdba  <span class="token comment">--连接用户</span><span class="token keyword">show</span> parameter recover<span class="token punctuation">;</span>  <span class="token comment">--查询日志目录位置</span><span class="token comment">-- 将日志目录指向的归档文件删除</span>rman target sys<span class="token operator">/</span>pass  <span class="token comment">--用RMAN维护控制文件</span>RMAN<span class="token operator">></span> crosscheck archivelog <span class="token keyword">all</span><span class="token punctuation">;</span>  <span class="token comment">--检查一些无用的archivelog</span>RMAN<span class="token operator">></span> <span class="token keyword">delete</span> archivelog until <span class="token keyword">time</span> <span class="token string">'sysdate-1'</span> <span class="token punctuation">;</span>  <span class="token comment">--删除截止到前一天的所有archivelog</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Windows自动删除归档日志，设置定时任务："><a href="#Windows自动删除归档日志，设置定时任务：" class="headerlink" title="Windows自动删除归档日志，设置定时任务："></a>Windows自动删除归档日志，设置定时任务：</h4><ol><li><p>创建一个删除归档日志的脚本（delete_arch.txt）：</p> <pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">connect target /run&#123;DELETE ARCHIVELOG ALL COMPLETED BEFORE 'SYSDATE-7'; //删除7天前的归档日志,怕哪天DG有问题，有日志没有及时应用crosscheck archivelog all;delete expired archivelog all;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>2.创建批处理任务（delete_archive.bat）</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">rman cmdfile=e:\delete_arch.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.创建一个windows任务定时调用批处理任务</p><pre><code>**开始 =&gt; 所有程序 =&gt; 附件 =&gt; 系统工具 =&gt; 任务计划**</code></pre><p>新建个任务计划了，然后根据要求配置下即可。</p><h3 id="优化建议："><a href="#优化建议：" class="headerlink" title="优化建议："></a>优化建议：</h3><p>对于出现这种情况，归根结底是磁盘无法放下过多的归档日志，可以考虑：</p><p>1、挂接单独的磁盘组存储归档日志，并同步进行备份（推荐）。</p><p>2、对当前磁盘组进行扩容。</p><p>3、定期进行人工检查，删除部分归档日志以保证磁盘空间保持有剩余状态，或者设置自动删除较早的归档日志。</p>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Oracle </tag>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于license3j实现简单的License验证</title>
      <link href="/2022/07/28/ji-yu-license3j-dui-license-shou-quan-de-yi-chong-shi-xian/"/>
      <url>/2022/07/28/ji-yu-license3j-dui-license-shou-quan-de-yi-chong-shi-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="基于license3j实现简单的License验证"><a href="#基于license3j实现简单的License验证" class="headerlink" title="基于license3j实现简单的License验证"></a>基于license3j实现简单的License验证</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>所谓license，百度百科译为<code>执照，许可证</code> 。也就是说，当我们需要对软件进行授权管理，但不想投入太多，只是希望借用License机制提供基本的限制或提醒功能。如果需要强悍而又稳定的<code>许可证机制</code>还是需要去找专业团队。</p><p>本文是基于License3j进行开发，实现了简单的License验证。[License3j是一个免费开源](<a href="https://github.com/verhas/License3j">verhas&#x2F;License3j: Free Licence Management Library (github.com)</a>) 的Java 库，你可以借助它在项目中实现基本的License验证功能。</p><p><strong>许可证管理本身并不能保证程序不会被盗，盗版或以任何非法方式使用。但是，许可证管理可能会增加非法使用该程序的难度，因此可能会促使用户成为客户。许可证管理还有另一个影响，即法律方面。如果有足够的许可证管理，非法用户成功声称其使用是基于缺乏许可条件或虚假了解的可能性较小。</strong></p><h2 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h2><p>我们需要将自己的软件装到用户的电脑中，但又不想让用户一直<code>白嫖</code>，所以需要一个权限机制来限制用户，要实现的功能包括以下几点：</p><ol><li>软件有使用天数，并且会提示什么时候到期；</li><li>软件需要和硬件绑定，不能随意拷贝；</li><li>软件在私网下使用，在软件入口处限制出入；</li></ol><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>为实现以上目标，得出以下流程图：</p><p><img src="/../pic/%E5%9F%BA%E4%BA%8Elicense3j%E5%AF%B9License%E6%8E%88%E6%9D%83%E7%9A%84%E4%B8%80%E7%A7%8D%E5%AE%9E%E7%8E%B0/1658997375608.png" alt="1658997375608"></p><ol><li>用户使用软件将自己的信息封装（可以包括但不限于<code>用户名</code>、<code>本机ID</code>）成文件，发送到开发商，下面实例中将<code>过期时间</code>默认为已经过期的时间以增加文件鲁棒性；</li><li>开发商得到用户的信息后，将<code>过期时间</code>等信息添加后，生成文件发送给用户，用户得到文件后软件就可以使用了；</li></ol><p>上面的过程相当于用户将<code>可以识别为他本人的id</code>发送给开发商，开发商使用<strong>私钥</strong>对用户的id进行加密，软件使用<strong>公钥</strong>识别以获得信息。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul><li>在项目中导入依赖(注意是jdk11)</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.javax0.license3j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>license3j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>用户端生成LICENSE文件</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax0<span class="token punctuation">.</span>license3j<span class="token punctuation">.</span></span><span class="token class-name">Feature</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax0<span class="token punctuation">.</span>license3j<span class="token punctuation">.</span></span><span class="token class-name">HardwareBinder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax0<span class="token punctuation">.</span>license3j<span class="token punctuation">.</span></span><span class="token class-name">License</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax0<span class="token punctuation">.</span>license3j<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">LicenseWriter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">NoSuchAlgorithmException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">ParseException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">UUID</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LicenseFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// licence 文件验证</span>        <span class="token class-name">File</span> licensefile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\09_test\\license\\LICENSE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">License</span> license <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">License</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>licensefile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//获取本机硬件id</span>                <span class="token class-name">UUID</span> machineId <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HardwareBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMachineId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//新建特征</span>                <span class="token class-name">Feature</span> f1 <span class="token operator">=</span> <span class="token class-name">Feature<span class="token punctuation">.</span>Create</span><span class="token punctuation">.</span><span class="token function">stringFeature</span><span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token string">"tl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Feature</span> f2 <span class="token operator">=</span> <span class="token class-name">Feature<span class="token punctuation">.</span>Create</span><span class="token punctuation">.</span><span class="token function">intFeature</span><span class="token punctuation">(</span><span class="token string">"version"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Feature</span> f3 <span class="token operator">=</span> <span class="token class-name">Feature<span class="token punctuation">.</span>Create</span><span class="token punctuation">.</span><span class="token function">stringFeature</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"hen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//指定uuid</span>                license<span class="token punctuation">.</span><span class="token function">setLicenseId</span><span class="token punctuation">(</span>machineId<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//增加特征</span>                license<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span>                license<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span>                license<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>f3<span class="token punctuation">)</span><span class="token punctuation">;</span>                license<span class="token punctuation">.</span><span class="token function">setExpiry</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:ss:mm.SSS"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1980-01-01 00:00:00.00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>license<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//license文件生成</span>                <span class="token keyword">new</span> <span class="token class-name">LicenseWriter</span><span class="token punctuation">(</span><span class="token string">"D:\\09_test\\license\\LICENSE"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>license<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"license build succ!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchAlgorithmException</span> <span class="token operator">|</span> <span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>开发商端对用户的LICENSE加工</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax0<span class="token punctuation">.</span>license3j<span class="token punctuation">.</span></span><span class="token class-name">Feature</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax0<span class="token punctuation">.</span>license3j<span class="token punctuation">.</span></span><span class="token class-name">License</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax0<span class="token punctuation">.</span>license3j<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">LicenseReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax0<span class="token punctuation">.</span>license3j<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">LicenseWriter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">ParseException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LicenseParseFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> pathName <span class="token operator">=</span> <span class="token string">"D:\\09_test\\license\\LICENSE"</span><span class="token punctuation">;</span>        <span class="token comment">// licence 文件验证</span>        <span class="token class-name">File</span> licensefile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>pathName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>licensefile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"license build unsucc! please check your licensefile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//读取license文件获得信息</span>                <span class="token class-name">License</span> ls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LicenseReader</span><span class="token punctuation">(</span>pathName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//定义结束时间</span>                <span class="token class-name">String</span> expiry <span class="token operator">=</span> <span class="token string">"2022-08-21 20:00:00.00"</span><span class="token punctuation">;</span>                <span class="token class-name">SimpleDateFormat</span> df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:ss:mm.SSS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Date</span> end <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>expiry<span class="token punctuation">)</span><span class="token punctuation">;</span>                ls<span class="token punctuation">.</span><span class="token function">setExpiry</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Feature</span> f1 <span class="token operator">=</span> <span class="token class-name">Feature<span class="token punctuation">.</span>Create</span><span class="token punctuation">.</span><span class="token function">dateFeature</span><span class="token punctuation">(</span><span class="token string">"endtime"</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Feature</span> f2 <span class="token operator">=</span> <span class="token class-name">Feature<span class="token punctuation">.</span>Create</span><span class="token punctuation">.</span><span class="token function">intFeature</span><span class="token punctuation">(</span><span class="token string">"version"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span>                ls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ls.toString() = "</span> <span class="token operator">+</span> ls<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">LicenseWriter</span><span class="token punctuation">(</span>pathName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"license.bin build succ!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>用户将LICENSE添加到目录后读取信息</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax0<span class="token punctuation">.</span>license3j<span class="token punctuation">.</span></span><span class="token class-name">HardwareBinder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax0<span class="token punctuation">.</span>license3j<span class="token punctuation">.</span></span><span class="token class-name">License</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax0<span class="token punctuation">.</span>license3j<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">LicenseReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">NoSuchAlgorithmException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LicenseController</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//LICENSE文件路径</span>    <span class="token class-name">String</span> pathName <span class="token operator">=</span> <span class="token string">"D:\\09_test\\license\\LICENSE"</span><span class="token punctuation">;</span>    <span class="token comment">//license是否可用(是否过期</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> licenseAble <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">//记录到期时间</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> expire <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//是否为本机</span>    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> isMachine <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">//判断是否可用</span>    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">getLicenseAble</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// licence 文件验证</span>        <span class="token class-name">File</span> licensefile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>pathName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>licensefile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//license文件丢失</span>                licenseAble <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//读取license文件获得信息</span>                <span class="token class-name">License</span> ls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LicenseReader</span><span class="token punctuation">(</span>pathName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                licenseAble <span class="token operator">=</span> <span class="token operator">!</span>ls<span class="token punctuation">.</span><span class="token function">isExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> licenseAble<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回距离到期还有多少天</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getExpire</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLicenseAble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">License</span> ls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LicenseReader</span><span class="token punctuation">(</span>pathName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Date</span> end <span class="token operator">=</span> ls<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"endtime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//计算当前时间与文件中的时间差</span>                <span class="token class-name">Date</span> start <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                expire <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>end<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> expire<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//是否是本机</span>    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">getIsMachine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLicenseAble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//获取本机硬件id</span>                <span class="token class-name">String</span> machineId <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HardwareBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMachineIdString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">License</span> ls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LicenseReader</span><span class="token punctuation">(</span>pathName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//判断本机硬件id和文件中id是否一致</span>                <span class="token class-name">String</span> lsMachineId <span class="token operator">=</span> ls<span class="token punctuation">.</span><span class="token function">getLicenseId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                isMachine <span class="token operator">=</span> lsMachineId<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>machineId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchAlgorithmException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> isMachine<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在用户登录或软件开始处使用方法判断</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LicenseController</span> lc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LicenseController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lc.getIsMachine() = "</span> <span class="token operator">+</span> lc<span class="token punctuation">.</span><span class="token function">getIsMachine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断mac地址有没有改变</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lc.getExpire() = "</span> <span class="token operator">+</span> lc<span class="token punctuation">.</span><span class="token function">getExpire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出过期时间还有多久</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lc.getLicenseAble() = "</span> <span class="token operator">+</span> lc<span class="token punctuation">.</span><span class="token function">getLicenseAble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断有没有过期</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>代码中很多常量以及用户输入的数据没有封装，可以读取配置文件然后获取信息，感兴趣的可以尝试一下。</p>]]></content>
      
      
      <categories>
          
          <category> license </category>
          
      </categories>
      
      
        <tags>
            
            <tag> license </tag>
            
            <tag> 授权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL日志及恢复</title>
      <link href="/2022/07/26/mysql-ri-zhi-yu-bei-fen-pian/"/>
      <url>/2022/07/26/mysql-ri-zhi-yu-bei-fen-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="第17章-其他数据库日志"><a href="#第17章-其他数据库日志" class="headerlink" title="第17章_其他数据库日志"></a>第17章_其他数据库日志</h1><img src="../pic/MySQL日志与备份篇/image-20220715141705004.png" alt="image-20220715141705004" style="float:left;" /><p><strong>千万不要小看日志</strong>。很多看似奇怪的问题，答案往往就藏在日志里。很多情况下，只有通过查看日志才 能发现问题的原因，真正解决问题。所以，一定要学会查看日志，养成检查日志的习惯，对提升你的数 据库应用开发能力至关重要。</p><p>MySQL8.0 官网日志地址：“ <a href="https://dev.mysql.com/doc/refman/8.0/en/server-logs.html">https://dev.mysql.com/doc/refman/8.0/en/server-logs.html</a> ”</p><h2 id="1-MySQL支持的日志"><a href="#1-MySQL支持的日志" class="headerlink" title="1. MySQL支持的日志"></a>1. MySQL支持的日志</h2><h3 id="1-1-日志类型"><a href="#1-1-日志类型" class="headerlink" title="1.1 日志类型"></a>1.1 日志类型</h3><p>MySQL有不同类型的日志文件，用来存储不同类型的日志，分为 <code>二进制日志</code> 、 <code>错误日志</code> 、 <code>通用查询日志</code> 和 <code>慢查询日志</code> ，这也是常用的4种。MySQL 8又新增两种支持的日志： 中继日志 和 数据定义语句日志 。使 用这些日志文件，可以查看MySQL内部发生的事情。</p><p>这6类日志分别为：</p><ul><li><strong>慢查询日志</strong>：记录所有执行时间超过long_query_time的所有查询，方便我们对查询进行优化。 </li><li><strong>通用查询日志</strong>：记录所有连接的起始时间和终止时间，以及连接发送给数据库服务器的所有指令， 对我们复原操作的实际场景、发现问题，甚至是对数据库操作的审计都有很大的帮助。 </li><li><strong>错误日志</strong>：记录MySQL服务的启动、运行或停止MySQL服务时出现的问题，方便我们了解服务器的 状态，从而对服务器进行维护。 </li><li><strong>二进制日志</strong>：记录所有更改数据的语句，可以用于主从服务器之间的数据同步，以及服务器遇到故 障时数据的无损失恢复。 </li><li><strong>中继日志</strong>：用于主从服务器架构中，从服务器用来存放主服务器二进制日志内容的一个中间文件。 从服务器通过读取中继日志的内容，来同步主服务器上的操作。 </li><li><strong>数据定义语句日志</strong>：记录数据定义语句执行的元数据操作。</li></ul><p>除二进制日志外，其他日志都是 <code>文本文件</code> 。默认情况下，所有日志创建于 <code>MySQL数据目录</code> 中。</p><h3 id="1-2-日志的弊端"><a href="#1-2-日志的弊端" class="headerlink" title="1.2 日志的弊端"></a>1.2 日志的弊端</h3><ul><li>日志功能会 <code>降低MySQL数据库的性能</code> 。例如，在查询非常频繁的MySQL数据库系统中，如果开启了通用查询日志和慢查询日志，MySQL数据库会花费很多时间记录日志。</li><li>日志会 <code>占用大量的磁盘空间</code> 。对于用户量非常大，操作非常频繁的数据库，日志文件需要的存储空间设置比数据库文件需要的存储空间还要大。</li></ul><h2 id="2-慢查询日志-slow-query-log"><a href="#2-慢查询日志-slow-query-log" class="headerlink" title="2. 慢查询日志(slow query log)"></a>2. 慢查询日志(slow query log)</h2><p>前面章节《第09章_性能分析工具的使用》已经详细讲述。</p><h2 id="3-通用查询日志-general-query-log"><a href="#3-通用查询日志-general-query-log" class="headerlink" title="3. 通用查询日志(general query log)"></a>3. 通用查询日志(general query log)</h2><p>通用查询日志用来 <code>记录用户的所有操作</code> ，包括启动和关闭MySQL服务、所有用户的连接开始时间和截止 时间、发给 MySQL 数据库服务器的所有 SQL 指令等。当我们的数据发生异常时，<strong>查看通用查询日志， 还原操作时的具体场景</strong>，可以帮助我们准确定位问题。</p><h3 id="3-1-问题场景"><a href="#3-1-问题场景" class="headerlink" title="3.1 问题场景"></a>3.1 问题场景</h3><img src="../pic/MySQL日志与备份篇/image-20220715145650406.png" alt="image-20220715145650406" style="float:left;" /><h3 id="3-2-查看当前状态"><a href="#3-2-查看当前状态" class="headerlink" title="3.2 查看当前状态"></a>3.2 查看当前状态</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SHOW VARIABLES LIKE &#39;%general%&#39;;+------------------+------------------------------+| Variable_name    | Value                        |+------------------+------------------------------+| general_log      | OFF                          | #通用查询日志处于关闭状态| general_log_file | &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;atguigu01.log | #通用查询日志文件的名称是atguigu01.log+------------------+------------------------------+2 rows in set (0.03 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="../pic/MySQL日志与备份篇/image-20220715155010381.png" alt="image-20220715155010381" style="float:left;" /><h3 id="3-3-启动日志"><a href="#3-3-启动日志" class="headerlink" title="3.3 启动日志"></a>3.3 启动日志</h3><p><strong>方式1：永久性方式</strong></p><p>修改my.cnf或者my.ini配置文件来设置。在[mysqld]组下加入log选项，并重启MySQL服务。格式如下：</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">[mysqld]<span class="token key attr-name">general_log</span><span class="token punctuation">=</span><span class="token value attr-value">ON</span><span class="token key attr-name">general_log_file</span><span class="token punctuation">=</span><span class="token value attr-value">[path[filename]] #日志文件所在目录路径，filename为日志文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果不指定目录和文件名，通用查询日志将默认存储在MySQL数据目录中的hostname.log文件中， hostname表示主机名。</p><p><strong>方式2：临时性方式</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SET GLOBAL general_log&#x3D;on; # 开启通用查询日志<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SET GLOBAL general_log_file&#x3D;’path&#x2F;filename’; # 设置日志文件保存位置<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应的，关闭操作SQL命令如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SET GLOBAL general_log&#x3D;off; # 关闭通用查询日志<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看设置后情况：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW VARIABLES LIKE &#39;general_log%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-4-查看日志"><a href="#3-4-查看日志" class="headerlink" title="3.4 查看日志"></a>3.4 查看日志</h3><p>通用查询日志是以 <code>文本文件</code> 的形式存储在文件系统中的，可以使用 <code>文本编辑器</code> 直接打开日志文件。每台 MySQL服务器的通用查询日志内容是不同的。</p><ul><li>在Windows操作系统中，使用文本文件查看器； </li><li>在Linux系统中，可以使用vi工具或者gedit工具查看； </li><li>在Mac OSX系统中，可以使用文本文件查看器或者vi等工具查看。</li></ul><p>从 <code>SHOW VARIABLES LIKE &#39;general_log%&#39;</code>; 结果中可以看到通用查询日志的位置。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;usr&#x2F;sbin&#x2F;mysqld, Version: 8.0.26 (MySQL Community Server - GPL). started with:Tcp port: 3306 Unix socket: &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sockTime Id Command Argument2022-01-04T07:44:58.052890Z 10 Query SHOW VARIABLES LIKE &#39;%general%&#39;2022-01-04T07:45:15.666672Z 10 Query SHOW VARIABLES LIKE &#39;general_log%&#39;2022-01-04T07:45:28.970765Z 10 Query select * from student2022-01-04T07:47:38.706804Z 11 Connect root@localhost on using Socket2022-01-04T07:47:38.707435Z 11 Query select @@version_comment limit 12022-01-04T07:48:21.384886Z 12 Connect root@172.16.210.1 on using TCP&#x2F;IP2022-01-04T07:48:21.385253Z 12 Query SET NAMES utf82022-01-04T07:48:21.385640Z 12 Query USE &#96;atguigu12&#96;2022-01-04T07:48:21.386179Z 12 Query SHOW FULL TABLES WHERE Table_Type !&#x3D;&#39;VIEW&#39;2022-01-04T07:48:23.901778Z 13 Connect root@172.16.210.1 on using TCP&#x2F;IP2022-01-04T07:48:23.902128Z 13 Query SET NAMES utf82022-01-04T07:48:23.905179Z 13 Query USE &#96;atguigu&#96;2022-01-04T07:48:23.905825Z 13 Query SHOW FULL TABLES WHERE Table_Type !&#x3D;&#39;VIEW&#39;2022-01-04T07:48:32.163833Z 14 Connect root@172.16.210.1 on using TCP&#x2F;IP2022-01-04T07:48:32.164451Z 14 Query SET NAMES utf82022-01-04T07:48:32.164840Z 14 Query USE &#96;atguigu&#96;2022-01-04T07:48:40.006687Z 14 Query select * from account<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在通用查询日志里面，我们可以清楚地看到，什么时候开启了新的客户端登陆数据库，登录之后做了什么 SQL 操作，针对的是哪个数据表等信息。</p><h3 id="3-5-停止日志"><a href="#3-5-停止日志" class="headerlink" title="3.5 停止日志"></a>3.5 停止日志</h3><p><strong>方式1：永久性方式</strong></p><p>修改 <code>my.cnf</code> 或者 <code>my.ini</code> 文件，把[mysqld]组下的 <code>general_log</code> 值设置为 <code>OFF</code> 或者把general_log一项 注释掉。修改保存后，再<code>重启MySQL服务</code> ，即可生效。 </p><p>举例1：</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">[mysqld]<span class="token key attr-name">general_log</span><span class="token punctuation">=</span><span class="token value attr-value">OFF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>举例2：</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">[mysqld]<span class="token comment">#general_log=ON</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>方式2：临时性方式</strong></p><p>使用SET语句停止MySQL通用查询日志功能：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SET GLOBAL general_log&#x3D;off;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询通用日志功能：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW VARIABLES LIKE &#39;general_log%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-6-删除-刷新日志"><a href="#3-6-删除-刷新日志" class="headerlink" title="3.6 删除\刷新日志"></a>3.6 删除\刷新日志</h3><p>如果数据的使用非常频繁，那么通用查询日志会占用服务器非常大的磁盘空间。数据管理员可以删除很长时间之前的查询日志，以保证MySQL服务器上的硬盘空间。</p><p><strong>手动删除文件</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW VARIABLES LIKE &#39;general_log%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看出，通用查询日志的目录默认为MySQL数据目录。在该目录下手动删除通用查询日志 atguigu01.log</p><p>使用如下命令重新生成查询日志文件，具体命令如下。刷新MySQL数据目录，发现创建了新的日志文 件。前提一定要开启通用日志。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqladmin -uroot -p flush-logs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果希望备份旧的通用查询日志，就必须先将旧的日志文件复制出来或者改名，然后执行上面的mysqladmin命令。正确流程如下：</p><pre class="line-numbers language-liunx" data-language="liunx"><code class="language-liunx">cd mysql-data-directory # 输入自己的通用日志文件所在目录mv mysql.general.log mysql.general.log.old # 指定旧的文件名 以及 新的文件名mysqladmin -uroot -p flush-logs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4-错误日志-error-log"><a href="#4-错误日志-error-log" class="headerlink" title="4. 错误日志(error log)"></a>4. 错误日志(error log)</h2><img src="../pic/MySQL日志与备份篇/image-20220715160249271.png" alt="image-20220715160249271" style="float:left;" /><h3 id="4-1-启动日志"><a href="#4-1-启动日志" class="headerlink" title="4.1 启动日志"></a>4.1 启动日志</h3><p>在MySQL数据库中，错误日志功能是 <code>默认开启</code> 的。而且，错误日志 <code>无法被禁止</code> 。</p><p>默认情况下，错误日志存储在MySQL数据库的数据文件夹下，名称默认为 <code>mysqld.log</code> （Linux系统）或 <code>hostname.err</code> （mac系统）。如果需要制定文件名，则需要在my.cnf或者my.ini中做如下配置：</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">[mysqld]<span class="token key attr-name">log-error</span><span class="token punctuation">=</span><span class="token value attr-value">[path/[filename]] #path为日志文件所在的目录路径，filename为日志文件名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改配置项后，需要重启MySQL服务以生效。</p><h3 id="4-2-查看日志"><a href="#4-2-查看日志" class="headerlink" title="4.2 查看日志"></a>4.2 查看日志</h3><p>MySQL错误日志是以文本文件形式存储的，可以使用文本编辑器直接查看。</p><p>查询错误日志的存储路径：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SHOW VARIABLES LIKE &#39;log_err%&#39;;+----------------------------+----------------------------------------+| Variable_name              | Value                                  |+----------------------------+----------------------------------------+| log_error                  | &#x2F;var&#x2F;log&#x2F;mysqld.log                    || log_error_services         | log_filter_internal; log_sink_internal || log_error_suppression_list |                                        || log_error_verbosity        | 2                                      |+----------------------------+----------------------------------------+4 rows in set (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果中可以看到错误日志文件是mysqld.log，位于MySQL默认的数据目录下。</p><img src="../pic/MySQL日志与备份篇/image-20220715160657093.png" alt="image-20220715160657093" style="float:left;" /><h3 id="4-3-删除-刷新日志"><a href="#4-3-删除-刷新日志" class="headerlink" title="4.3 删除\刷新日志"></a>4.3 删除\刷新日志</h3><p>对于很久以前的错误日志，数据库管理员查看这些错误日志的可能性不大，可以将这些错误日志删除， 以保证MySQL服务器上的 <code>硬盘空间</code> 。MySQL的错误日志是以文本文件的形式存储在文件系统中的，可以 <code>直接删除</code> 。</p><ul><li><p>第一步（方式1）：删除操作</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">rm -f &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysqld.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在运行状态下删除错误日志文件后，MySQL并不会自动创建日志文件。</p></li><li><p>第一步（方式2）：重命名文件</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mv &#x2F;var&#x2F;log&#x2F;mysqld.log &#x2F;var&#x2F;log&#x2F;mysqld.log.old<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>第二步：重建日志</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqladmin -uroot -p flush-logs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可能会报错</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">[root@atguigu01 log]# mysqladmin -uroot -p flush-logsEnter password:mysqladmin: refresh failed; error: &#39;Could not open file &#39;&#x2F;var&#x2F;log&#x2F;mysqld.log&#39; forerror logging.&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>官网提示：</p><p><img src="/../pic/MySQL%E6%97%A5%E5%BF%97%E4%B8%8E%E5%A4%87%E4%BB%BD%E7%AF%87/image-20220715161132368.png" alt="image-20220715161132368"></p></li></ul><p>补充操作：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">install -omysql -gmysql -m0644 &#x2F;dev&#x2F;null &#x2F;var&#x2F;log&#x2F;mysqld.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="../pic/MySQL日志与备份篇/image-20220715161216556.png" alt="image-20220715161216556" style="float:left;" /><h3 id="4-4-MySQL-8-0-新特性"><a href="#4-4-MySQL-8-0-新特性" class="headerlink" title="4.4 MySQL 8.0 新特性"></a>4.4 MySQL 8.0 新特性</h3><img src="../pic/MySQL日志与备份篇/image-20220715161321565.png" alt="image-20220715161321565" style="float:left;" /><blockquote><p>小结：</p><p>通常情况下，管理员不需要查看错误日志。但是，MySQL服务器发生异常时，管理员可以从错误日志中找到发生异常的时间、原因，然后根据这些信息来解决异常。</p></blockquote><h2 id="5-二进制日志-bin-log"><a href="#5-二进制日志-bin-log" class="headerlink" title="5. 二进制日志(bin log)"></a>5. 二进制日志(bin log)</h2><p>binlog可以说是MySQL中比较 <code>重要</code> 的日志了，在日常开发及运维过程中，经常会遇到。</p><p>binlog即binary log，二进制日志文件，也叫作变更日志（update log）。它记录了数据库所有执行的 <code>DDL</code> 和 <code>DML</code> 等数据库更新事件的语句，但是不包含没有修改任何数据的语句（如数据查询语句select、 show等）。</p><p>它以<code>事件形式</code>记录并保存在<code>二进制文件</code>中。通过这些信息，我们可以再现数据更新操作的全过程。</p><blockquote><p>如果想要记录所有语句（例如，为了识别有问题的查询），需要使用通用查询日志。</p></blockquote><p>binlog主要应用场景：</p>  <img src="../pic/MySQL日志与备份篇/image-20220715161800635.png" alt="image-20220715161800635" style="zoom:100%;" /><p><img src="/../pic/MySQL%E6%97%A5%E5%BF%97%E4%B8%8E%E5%A4%87%E4%BB%BD%E7%AF%87/image-20220715161842703.png" alt="image-20220715161842703"></p><h3 id="5-1-查看默认情况"><a href="#5-1-查看默认情况" class="headerlink" title="5.1 查看默认情况"></a>5.1 查看默认情况</h3><p>查看记录二进制日志是否开启：在MySQL8中默认情况下，二进制文件是开启的。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show variables like &#39;%log_bin%&#39;;+---------------------------------+----------------------------------+| Variable_name                   | Value                            |+---------------------------------+----------------------------------+| log_bin                         | ON                               || log_bin_basename                | &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;binlog            || log_bin_index                   | &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;binlog.index      || log_bin_trust_function_creators | OFF                              || log_bin_use_v1_row_events       | OFF                              || sql_log_bin                     | ON                               |+---------------------------------+----------------------------------+6 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="../pic/MySQL日志与备份篇/image-20220715163520596.png" alt="image-20220715163520596" style="float:left;" /><h3 id="5-2-日志参数设置"><a href="#5-2-日志参数设置" class="headerlink" title="5.2 日志参数设置"></a>5.2 日志参数设置</h3><p><strong>方式1：永久性方式</strong></p><p>修改MySQL的 <code>my.cnf</code> 或 <code>my.ini</code> 文件可以设置二进制日志的相关参数：</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">[mysqld]<span class="token comment">#启用二进制日志</span><span class="token key attr-name">log-bin</span><span class="token punctuation">=</span><span class="token value attr-value">atguigu-bin</span><span class="token key attr-name">binlog_expire_logs_seconds</span><span class="token punctuation">=</span><span class="token value attr-value">600</span><span class="token key attr-name">max_binlog_size</span><span class="token punctuation">=</span><span class="token value attr-value">100M</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="../pic/MySQL日志与备份篇/image-20220715163811664.png" alt="image-20220715163811664" style="float:left;" /><p>重新启动MySQL服务，查询二进制日志的信息，执行结果：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show variables like &#39;%log_bin%&#39;;+---------------------------------+----------------------------------+| Variable_name                   | Value                            |+---------------------------------+----------------------------------+| log_bin                         | ON                               || log_bin_basename                | &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;atguigu-bin       || log_bin_index                   | &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;atguigu-bin.index || log_bin_trust_function_creators | OFF                              || log_bin_use_v1_row_events       | OFF                              || sql_log_bin                     | ON                               |+---------------------------------+----------------------------------+6 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>设置带文件夹的bin-log日志存放目录</strong></p><p>如果想改变日志文件的目录和名称，可以对my.cnf或my.ini中的log_bin参数修改如下：</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">[mysqld]<span class="token key attr-name">log-bin</span><span class="token punctuation">=</span><span class="token value attr-value">"/var/lib/mysql/binlog/atguigu-bin"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意：新建的文件夹需要使用mysql用户，使用下面的命令即可。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">chown -R -v mysql:mysql binlog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="../pic/MySQL日志与备份篇/image-20220715164107352.png" alt="image-20220715164107352" style="float:left;" /><p><strong>方式2：临时性方式</strong></p><p>如果不希望通过修改配置文件并重启的方式设置二进制日志的话，还可以使用如下指令，需要注意的是 在mysql8中只有 <code>会话级别</code> 的设置，没有了global级别的设置。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># global 级别mysql&gt; set global sql_log_bin&#x3D;0;ERROR 1228 (HY000): Variable &#39;sql_log_bin&#39; is a SESSION variable and can&#96;t be usedwith SET GLOBAL# session级别mysql&gt; SET sql_log_bin&#x3D;0;Query OK, 0 rows affected (0.01 秒)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-查看日志"><a href="#5-3-查看日志" class="headerlink" title="5.3 查看日志"></a>5.3 查看日志</h3><p>当MySQL创建二进制日志文件时，先创建一个以“filename”为名称、以“.index”为后缀的文件，再创建一 个以“filename”为名称、以“.000001”为后缀的文件。</p><p>MySQL服务 <code>重新启动一次</code> ，以“.000001”为后缀的文件就会增加一个，并且后缀名按1递增。即日志文件的 个数与MySQL服务启动的次数相同；如果日志长度超过了 <code>max_binlog_size</code> 的上限（默认是1GB），就会创建一个新的日志文件。</p><p>查看当前的二进制日志文件列表及大小。指令如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SHOW BINARY LOGS;+--------------------+-----------+-----------+| Log_name           | File_size | Encrypted |+--------------------+-----------+-----------+| atguigu-bin.000001 | 156       | No        |+--------------------+-----------+-----------+1 行于数据集 (0.02 秒)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有对数据库的修改都会记录在binlog中。但binlog是二进制文件，无法直接查看，想要更直观的观测它就要借助<code>mysqlbinlog</code>命令工具了。指令如下：在查看执行，先执行一条SQL语句，如下</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">update student set name&#x3D;&#39;张三_back&#39; where id&#x3D;1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>开始查看binlog</p><img src="../pic/MySQL日志与备份篇/image-20220715164718970.png" alt="image-20220715164718970" style="float:left;" /><img src="../pic/MySQL日志与备份篇/image-20220715164743351.png" alt="image-20220715164743351" style="float:left;" /><img src="../pic/MySQL日志与备份篇/image-20220715164809401.png" alt="image-20220715164809401" style="float:left;" /><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqlbinlog -v &quot;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;binlog&#x2F;atguigu-bin.000002&quot;#220105 9:16:37 server id 1 end_log_pos 324 CRC32 0x6b31978b Query thread_id&#x3D;10exec_time&#x3D;0 error_code&#x3D;0SET TIMESTAMP&#x3D;1641345397&#x2F;*!*&#x2F;;SET @@session.pseudo_thread_id&#x3D;10&#x2F;*!*&#x2F;;SET @@session.foreign_key_checks&#x3D;1, @@session.sql_auto_is_null&#x3D;0,@@session.unique_checks&#x3D;1, @@session.autocommit&#x3D;1&#x2F;*!*&#x2F;;SET @@session.sql_mode&#x3D;1168113696&#x2F;*!*&#x2F;;SET @@session.auto_increment_increment&#x3D;1, @@session.auto_increment_offset&#x3D;1&#x2F;*!*&#x2F;;&#x2F;*!\C utf8mb3 *&#x2F;&#x2F;*!*&#x2F;;SET@@session.character_set_client&#x3D;33,@@session.collation_connection&#x3D;33,@@session.collation_server&#x3D;255&#x2F;*!*&#x2F;;SET @@session.lc_time_names&#x3D;0&#x2F;*!*&#x2F;;SET @@session.collation_database&#x3D;DEFAULT&#x2F;*!*&#x2F;;&#x2F;*!80011 SET @@session.default_collation_for_utf8mb4&#x3D;255*&#x2F;&#x2F;*!*&#x2F;;BEGIN&#x2F;*!*&#x2F;;# at 324#220105 9:16:37 server id 1 end_log_pos 391 CRC32 0x74f89890 Table_map:&#96;atguigu14&#96;.&#96;student&#96; mapped to number 85# at 391#220105 9:16:37 server id 1 end_log_pos 470 CRC32 0xc9920491 Update_rows: table id85 flags: STMT_END_FBINLOG &#39;dfHUYRMBAAAAQwAAAIcBAAAAAFUAAAAAAAEACWF0Z3VpZ3UxNAAHc3R1ZGVudAADAw8PBDwAHgAGAQEAAgEhkJj4dA&#x3D;&#x3D;dfHUYR8BAAAATwAAANYBAAAAAFUAAAAAAAEAAgAD&#x2F;&#x2F;8AAQAAAAblvKDkuIkG5LiA54+tAAEAAAAL5byg5LiJX2JhY2sG5LiA54+tkQSSyQ&#x3D;&#x3D;&#39;&#x2F;*!*&#x2F;;### UPDATE &#96;atguigu&#96;.&#96;student&#96;### WHERE### @1&#x3D;1### @2&#x3D;&#39;张三&#39;### @3&#x3D;&#39;一班&#39;### SET### @1&#x3D;1### @2&#x3D;&#39;张三_back&#39;### @3&#x3D;&#39;一班&#39;# at 470#220105 9:16:37 server id 1 end_log_pos 501 CRC32 0xca01d30f Xid &#x3D; 15COMMIT&#x2F;*!*&#x2F;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前面的命令同时显示binlog格式的语句，使用如下命令不显示它</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqlbinlog -v --base64-output&#x3D;DECODE-ROWS &quot;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;binlog&#x2F;atguigu-bin.000002&quot;#220105 9:16:37 server id 1 end_log_pos 324 CRC32 0x6b31978b Query thread_id&#x3D;10exec_time&#x3D;0 error_code&#x3D;0SET TIMESTAMP&#x3D;1641345397&#x2F;*!*&#x2F;;SET @@session.pseudo_thread_id&#x3D;10&#x2F;*!*&#x2F;;SET @@session.foreign_key_checks&#x3D;1, @@session.sql_auto_is_null&#x3D;0,@@session.unique_checks&#x3D;1, @@session.autocommit&#x3D;1&#x2F;*!*&#x2F;;SET @@session.sql_mode&#x3D;1168113696&#x2F;*!*&#x2F;;SET @@session.auto_increment_increment&#x3D;1, @@session.auto_increment_offset&#x3D;1&#x2F;*!*&#x2F;;&#x2F;*!\C utf8mb3 *&#x2F;&#x2F;*!*&#x2F;;SET@@session.character_set_client&#x3D;33,@@session.collation_connection&#x3D;33,@@session.collation_server&#x3D;255&#x2F;*!*&#x2F;;SET @@session.lc_time_names&#x3D;0&#x2F;*!*&#x2F;;SET @@session.collation_database&#x3D;DEFAULT&#x2F;*!*&#x2F;;&#x2F;*!80011 SET @@session.default_collation_for_utf8mb4&#x3D;255*&#x2F;&#x2F;*!*&#x2F;;BEGIN&#x2F;*!*&#x2F;;# at 324#220105 9:16:37 server id 1 end_log_pos 391 CRC32 0x74f89890 Table_map:&#96;atguigu14&#96;.&#96;student&#96; mapped to number 85# at 391#220105 9:16:37 server id 1 end_log_pos 470 CRC32 0xc9920491 Update_rows: table id85 flags: STMT_END_F### UPDATE &#96;atguigu14&#96;.&#96;student&#96;### WHERE### @1&#x3D;1### @2&#x3D;&#39;张三&#39;### @3&#x3D;&#39;一班&#39;### SET### @1&#x3D;1### @2&#x3D;&#39;张三_back&#39;### @3&#x3D;&#39;一班&#39;# at 470#220105 9:16:37 server id 1 end_log_pos 501 CRC32 0xca01d30f Xid &#x3D; 15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于mysqlbinlog工具的使用技巧还有很多，例如只解析对某个库的操作或者某个时间段内的操作等。简单分享几个常用的语句，更多操作可以参考官方文档。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 可查看参数帮助mysqlbinlog --no-defaults --help# 查看最后100行mysqlbinlog --no-defaults --base64-output&#x3D;decode-rows -vv atguigu-bin.000002 |tail-100# 根据position查找mysqlbinlog --no-defaults --base64-output&#x3D;decode-rows -vv atguigu-bin.000002 |grep -A20 &#39;4939002&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这种办法读取出binlog日志的全文内容比较多，不容易分辨查看到pos点信息，下面介绍一种更为方便的查询命令：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show binlog events [IN &#39;log_name&#39;] [FROM pos] [LIMIT [offset,] row_count];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>IN &#39;log_name&#39;</code> ：指定要查询的binlog文件名（不指定就是第一个binlog文件）　 </li><li><code>FROM pos</code> ：指定从哪个pos起始点开始查起（不指定就是从整个文件首个pos点开始算） </li><li><code>LIMIT [offset]</code> ：偏移量(不指定就是0) </li><li><code>row_count</code> :查询总条数（不指定就是所有行）</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show binlog events in &#39;atguigu-bin.000002&#39;;+--------------------+-----+----------------+-----------+-------------+--------------------------------------------------------+| Log_name           | Pos | Event_type     | Server_id | End_log_pos | Info                                                   |+--------------------+-----+----------------+-----------+-------------+--------------------------------------------------------+| atguigu-bin.000002 | 4   | Format_desc    | 1         | 125         | Server ver: 8.0.26, Binlog ver: 4                      || atguigu-bin.000002 | 125 | Previous_gtids | 1         | 156         |                                                        || atguigu-bin.000002 | 156 | Anonymous_Gtid | 1         | 235         | SET @@SESSION.GTID_NEXT&#x3D; &#39;ANONYMOUS&#39;                   || atguigu-bin.000002 | 235 | Query          | 1         | 324         | BEGIN                                                  || atguigu-bin.000002 | 324 | Table_map      | 1         | 391         | table_id: 85(atguigu14.student)                        || atguigu-bin.000002 | 391 | Update_rows    | 1         | 470         | table_id: 85flags: STMT_END_F                          || atguigu-bin.000002 | 470 | Xid            | 1         | 501         | COMMIT &#x2F;*xid&#x3D;15 *&#x2F;                                     || atguigu-bin.000002 | 501 | Anonymous_Gtid | 1         | 578         | SET @@SESSION.GTID_NEXT&#x3D; &#39;ANONYMOUS&#39;                   || atguigu-bin.000002 | 578 | Query     | 1 | 721 | use &#96;atguigu14&#96;; create table test(id int, title varchar(100)) &#x2F;* xid&#x3D;19 *&#x2F; || atguigu-bin.000002 | 721 | Anonymous_Gtid | 1         | 800         | SET @@SESSION.GTID_NEXT&#x3D; &#39;ANONYMOUS&#39;                   || atguigu-bin.000002 | 800 | Query          | 1         | 880         | BEGIN                                                  || atguigu-bin.000002 | 880 | Table_map      | 1         | 943         | table_id: 89(atguigu14.test)                           || atguigu-bin.000002 | 943 | Write_rows     | 1         | 992         | table_id: 89 flags: STMT_END_F                         || atguigu-bin.000002 | 992 | Xid            | 1         | 1023        | COMMIT &#x2F;*xid&#x3D;21 *&#x2F;                                     |+--------------------+-----+----------------+-----------+-------------+--------------------------------------------------------+14 行于数据集 (0.02 秒)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="../pic/MySQL日志与备份篇/image-20220715165603879.png" alt="image-20220715165603879" style="float:left;" /><p>上面我们讲了这么多都是基于binlog的默认格式，binlog格式查看</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show variables like &#39;binlog_format&#39;;+---------------+-------+| Variable_name | Value |+---------------+-------+| binlog_format | ROW   |+---------------+-------+1 行于数据集 (0.02 秒)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除此之外，binlog还有2种格式，分别是<code>Statement</code>和<code>Mixed</code></p><ul><li><p>Statement</p><p>每一条会修改数据的sql都会记录在binlog中。</p><p>优点：不需要记录每一行的变化，减少了binlog日志量，节约了IO，提高性能。</p></li><li><p>Row</p><p>5.1.5版本的MySQL才开始支持row level 的复制，它不记录sql语句上下文相关信息，仅保存哪条记录被修改。</p><p>优点：row level 的日志内容会非常清楚的记录下每一行数据修改的细节。而且不会出现某些特定情况下 的存储过程，或function，以及trigger的调用和触发无法被正确复制的问题。</p></li><li><p>Mixed</p><p>从5.1.8版本开始，MySQL提供了Mixed格式，实际上就是Statement与Row的结合。</p><p>详细情况，下章讲解。</p></li></ul><h3 id="5-4-使用日志恢复数据"><a href="#5-4-使用日志恢复数据" class="headerlink" title="5.4 使用日志恢复数据"></a>5.4 使用日志恢复数据</h3><p>如果MySQL服务器启用了二进制日志，在数据库出现意外丢失数据时，可以使用MySQLbinlog工具从指定的时间点开始（例如，最后一次备份）直到现在或另一个指定的时间点的日志中回复数据。</p><p>mysqlbinlog恢复数据的语法如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqlbinlog [option] filename|mysql –uuser -ppass;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个命令可以这样理解：使用mysqlbinlog命令来读取filename中的内容，然后使用mysql命令将这些内容恢复到数据库中。</p><ul><li><p><code>filename</code> ：是日志文件名。</p></li><li><p><code>option</code> ：可选项，比较重要的两对option参数是–start-date、–stop-date 和 –start-position、– stop-position。</p><ul><li><code>--start-date</code> 和<code> --stop-date</code> ：可以指定恢复数据库的起始时间点和结束时间点。</li><li><code>--start-position</code>和<code>--stop-position</code> ：可以指定恢复数据的开始位置和结束位置。</li></ul></li></ul><blockquote><p>注意：使用mysqlbinlog命令进行恢复操作时，必须是编号小的先恢复，例如atguigu-bin.000001必须在atguigu-bin.000002之前恢复。</p></blockquote><p>详见p189，由于翻页过快，这部分没办法记录。</p><h3 id="5-5-删除二进制日志"><a href="#5-5-删除二进制日志" class="headerlink" title="5.5 删除二进制日志"></a>5.5 删除二进制日志</h3><p>MySQL的二进制文件可以配置自动删除，同时MySQL也提供了安全的手动删除二进制文件的方法。 <code>PURGE MASTER LOGS</code> 只删除指定部分的二进制日志文件， <code>RESET MASTER</code> 删除所有的二进制日志文 件。具体如下：</p><p><strong>1. PURGE MASTER LOGS：删除指定日志文件</strong></p><p>PURGE MASTER LOGS语法如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">PURGE &#123;MASTER | BINARY&#125; LOGS TO ‘指定日志文件名’PURGE &#123;MASTER | BINARY&#125; LOGS BEFORE ‘指定日期’<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="../pic/MySQL日志与备份篇/image-20220715171712026.png" alt="image-20220715171712026" style="float:left;" /><img src="../pic/MySQL日志与备份篇/image-20220715172015185.png" alt="image-20220715172015185" style="float:left;" /><p><strong>2. RESET MASTER: 删除所有二进制日志文件</strong></p><img src="../pic/MySQL日志与备份篇/image-20220715172104967.png" alt="image-20220715172104967" style="float:left;" /><h3 id="5-6-其它场景"><a href="#5-6-其它场景" class="headerlink" title="5.6 其它场景"></a>5.6 其它场景</h3><p>二进制日志可以通过数据库的 <code>全量备份</code> 和二进制日志中保存的 <code>增量信息</code> ，完成数据库的 <code>无损失恢复</code> 。 但是，如果遇到数据量大、数据库和数据表很多（比如分库分表的应用）的场景，用二进制日志进行数据恢复，是很有挑战性的，因为起止位置不容易管理。</p><p>在这种情况下，一个有效的解决办法是 <code>配置主从数据库服务器</code> ，甚至是 <code>一主多从</code> 的架构，把二进制日志文件的内容通过中继日志，同步到从数据库服务器中，这样就可以有效避免数据库故障导致的数据异常等问题。</p><h2 id="6-再谈二进制日志-binlog"><a href="#6-再谈二进制日志-binlog" class="headerlink" title="6. 再谈二进制日志(binlog)"></a>6. 再谈二进制日志(binlog)</h2><h3 id="6-1-写入机制"><a href="#6-1-写入机制" class="headerlink" title="6.1 写入机制"></a>6.1 写入机制</h3><p>binlog的写入时机也非常简单，事务执行过程中，先把日志写到 <code>binlog cache</code> ，事务提交的时候，再把binlog cache写到binlog文件中。因为一个事务的binlog不能被拆开，无论这个事务多大，也要确保一次性写入，所以系统会给每个线程分配一个块内存作为binlog cache。</p><p>我们可以通过<code>binlog_cache_size</code>参数控制单个线程 binlog cache 大小，如果存储内容超过了这个参数，就要暂存到磁盘（Swap）。binlog日志刷盘流程如下：</p><p><img src="/../pic/MySQL%E6%97%A5%E5%BF%97%E4%B8%8E%E5%A4%87%E4%BB%BD%E7%AF%87/image-20220715172958729.png" alt="image-20220715172958729"></p><blockquote><ul><li>上图的write，是指把日志写入到文件系统的page cache，并没有把数据持久化到磁盘，所以速度比较快</li><li>上图的fsync，才是将数据持久化到磁盘的操作</li></ul></blockquote><p>write和fsync的时机，可以由参数 <code>sync_binlog</code> 控制，默认是 <code>0</code> 。为0的时候，表示每次提交事务都只 write，由系统自行判断什么时候执行fsync。虽然性能得到提升，但是机器宕机，page cache里面的 binglog 会丢失。如下图：</p><p><img src="/../pic/MySQL%E6%97%A5%E5%BF%97%E4%B8%8E%E5%A4%87%E4%BB%BD%E7%AF%87/image-20220715193749462.png" alt="image-20220715193749462"></p><p>为了安全起见，可以设置为 <code>1</code> ，表示每次提交事务都会执行fsync，就如同<strong>redo log 刷盘流程</strong>一样。 最后还有一种折中方式，可以设置为N(N&gt;1)，表示每次提交事务都write，但累积N个事务后才fsync。</p><p><img src="/../pic/MySQL%E6%97%A5%E5%BF%97%E4%B8%8E%E5%A4%87%E4%BB%BD%E7%AF%87/image-20220715194624080.png" alt="image-20220715194624080"></p><p>在出现IO瓶颈的场景里，将sync_binlog设置成一个比较大的值，可以提升性能。同样的，如果机器宕机，会丢失最近N个事务的binlog日志。</p><h3 id="6-2-binlog与redolog对比"><a href="#6-2-binlog与redolog对比" class="headerlink" title="6.2 binlog与redolog对比"></a>6.2 binlog与redolog对比</h3><ul><li>redo log 它是 <code>物理日志</code> ，记录内容是“在某个数据页上做了什么修改”，属于 InnoDB 存储引擎层产生的。</li><li>而 binlog 是 <code>逻辑日志</code> ，记录内容是语句的原始逻辑，类似于“给 ID&#x3D;2 这一行的 c 字段加 1”，属于 MySQL Server 层。</li><li>虽然它们都属于持久化的保证，但是侧重点不同。<ul><li>redo log让InnoDB存储引擎拥有了崩溃恢复能力。</li><li>binlog保证了MySQL集群架构的数据一致性。</li></ul></li></ul><h3 id="6-3-两阶段提交"><a href="#6-3-两阶段提交" class="headerlink" title="6.3 两阶段提交"></a>6.3 两阶段提交</h3><p>在执行更新语句过程，会记录redo log与binlog两块日志，以基本的事务为单位，redo log在事务执行过程中可以不断写入，而binlog只有在提交事务时才写入，所以redo log与binlog的 <code>写入时机</code> 不一样。</p><p><img src="/../pic/MySQL%E6%97%A5%E5%BF%97%E4%B8%8E%E5%A4%87%E4%BB%BD%E7%AF%87/image-20220715194959405.png" alt="image-20220715194959405"></p><p><strong>redo log与binlog两份日志之间的逻辑不一致，会出现什么问题？</strong></p><p>以update语句为例，假设<code>id=2</code>的记录，字段<code>c</code>值是<code>0</code>，把字段c值更新为<code>1</code>，SQL语句为update T set c &#x3D; 1 where id &#x3D; 2。</p><p>假设执行过程中写完redo log日志后，binlog日志写期间发生了异常，会出现什么情况呢？</p><p><img src="/../pic/MySQL%E6%97%A5%E5%BF%97%E4%B8%8E%E5%A4%87%E4%BB%BD%E7%AF%87/image-20220715195016492.png" alt="image-20220715195016492"></p><p>由于binlog没写完就异常，这时候binlog里面没有对应的修改记录。因此，之后用binlog日志恢复数据时，就会少这一次更新，恢复出来的这一行c值为0，而原库因为redo log日志恢复，这一行c的值是1，最终数据不一致。</p><p><img src="/../pic/MySQL%E6%97%A5%E5%BF%97%E4%B8%8E%E5%A4%87%E4%BB%BD%E7%AF%87/image-20220715195521986.png" alt="image-20220715195521986"></p><p>为了解决两份日志之间的逻辑一致问题，InnoDB存储引擎使用<strong>两阶段提交</strong>方案。原理很简单，将redo log的写入拆成了两个步骤prepare和commit，这就是<strong>两阶段提交</strong>。</p><p><img src="/../pic/MySQL%E6%97%A5%E5%BF%97%E4%B8%8E%E5%A4%87%E4%BB%BD%E7%AF%87/image-20220715195635196.png" alt="image-20220715195635196"></p><p>使用两阶段提交后，写入binlog时发生异常也不会有影响，因为MySQL根据redo log日志恢复数据时，发现redo log还处于prepare阶段，并且没有对应binlog日志，就会回滚该事务。</p><p><img src="/../pic/MySQL%E6%97%A5%E5%BF%97%E4%B8%8E%E5%A4%87%E4%BB%BD%E7%AF%87/image-20220715200248193.png" alt="image-20220715200248193"></p><p>另一个场景，redo log设置commit阶段发生异常，那会不会回滚事务呢？</p><p><img src="/../pic/MySQL%E6%97%A5%E5%BF%97%E4%B8%8E%E5%A4%87%E4%BB%BD%E7%AF%87/image-20220715200321717.png" alt="image-20220715200321717"></p><p>并不会回滚事务，它会执行上图框住的逻辑，虽然redo log是处于prepare阶段，但是能通过事务id找到对应的binlog日志，所以MySQL认为是完整的，就会提交事务恢复数据。</p><h2 id="7-中继日志-relay-log"><a href="#7-中继日志-relay-log" class="headerlink" title="7. 中继日志(relay log)"></a>7. 中继日志(relay log)</h2><h3 id="7-1-介绍"><a href="#7-1-介绍" class="headerlink" title="7.1 介绍"></a>7.1 介绍</h3><p><strong>中继日志只在主从服务器架构的从服务器上存在</strong>。从服务器为了与主服务器保持一致，要从主服务器读取二进制日志的内容，并且把读取到的信息写入 <code>本地的日志文件</code> 中，这个从服务器本地的日志文件就叫 <code>中继日志</code> 。然后，从服务器读取中继日志，并根据中继日志的内容对从服务器的数据进行更新，完成主 从服务器的 数据同步 。</p><p>搭建好主从服务器之后，中继日志默认会保存在从服务器的数据目录下。</p><p>文件名的格式是：<code> 从服务器名 -relay-bin.序号</code> 。中继日志还有一个索引文件：<code>从服务器名 -relaybin.index</code> ，用来定位当前正在使用的中继日志。</p><h3 id="7-2-查看中继日志"><a href="#7-2-查看中继日志" class="headerlink" title="7.2 查看中继日志"></a>7.2 查看中继日志</h3><p>中继日志与二进制日志的格式相同，可以用 <code>mysqlbinlog</code> 工具进行查看。下面是中继日志的一个片段：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SET TIMESTAMP&#x3D;1618558728&#x2F;*!*&#x2F;;BEGIN&#x2F;*!*&#x2F;;# at 950#210416 15:38:48 server id 1 end_log_pos 832 CRC32 0xcc16d651 Table_map:&#96;atguigu&#96;.&#96;test&#96; mapped to number 91# at 1000#210416 15:38:48 server id 1 end_log_pos 872 CRC32 0x07e4047c Delete_rows: table id91 flags: STMT_END_F -- server id 1 是主服务器，意思是主服务器删了一行数据BINLOG &#39;CD95YBMBAAAAMgAAAEADAAAAAFsAAAAAAAEABGRlbW8ABHRlc3QAAQMAAQEBAFHWFsw&#x3D;CD95YCABAAAAKAAAAGgDAAAAAFsAAAAAAAEAAgAB&#x2F;wABAAAAfATkBw&#x3D;&#x3D;&#39;&#x2F;*!*&#x2F;;# at 1040<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一段的意思是，主服务器（“server id 1”）对表 atguigu.test 进行了 2 步操作：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">定位到表 atguigu.test 编号是 91 的记录，日志位置是 832；删除编号是 91 的记录，日志位置是 872<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-3-恢复的典型错误"><a href="#7-3-恢复的典型错误" class="headerlink" title="7.3 恢复的典型错误"></a>7.3 恢复的典型错误</h3><p>如果从服务器宕机，有的时候为了系统恢复，要重装操作系统，这样就可能会导致你的 <code>服务器名称</code> 与之前 <code>不同</code> 。而中继日志里是 <code>包含从服务器名</code> 的。在这种情况下，就可能导致你恢复从服务器的时候，无法 从宕机前的中继日志里读取数据，以为是日志文件损坏了，其实是名称不对了。</p><p>解决的方法也很简单，把从服务器的名称改回之前的名称。</p><h1 id="第18章-主从复制"><a href="#第18章-主从复制" class="headerlink" title="第18章_主从复制"></a>第18章_主从复制</h1><h2 id="1-主从复制概述"><a href="#1-主从复制概述" class="headerlink" title="1. 主从复制概述"></a>1. 主从复制概述</h2><h3 id="1-1-如何提升数据库并发能力"><a href="#1-1-如何提升数据库并发能力" class="headerlink" title="1.1 如何提升数据库并发能力"></a>1.1 如何提升数据库并发能力</h3><p>在实际工作中，我们常常将<code>Redis</code>作为缓存与<code>MySQL</code>配合来使用，当有请求的时候，首先会从缓存中进行查找，如果存在就直接取出。如果不存在再访问数据库，这样就<code>提升了读取的效率</code>，也减少了对后端数据库的<code>访问压力</code>。Redis的缓存架构是<code>高并发架构</code>中非常重要的一环。</p><p><img src="/../pic/MySQL%E6%97%A5%E5%BF%97%E4%B8%8E%E5%A4%87%E4%BB%BD%E7%AF%87/image-20220715202237535.png" alt="image-20220715202237535"></p><p>此外，一般应用对数据库而言都是“ <code>读多写少</code> ”，也就说对数据库读取数据的压力比较大，有一个思路就是采用数据库集群的方案，做 <code>主从架构</code> 、进行 <code>读写分离</code> ，这样同样可以提升数据库的并发处理能力。但并不是所有的应用都需要对数据库进行主从架构的设置，毕竟设置架构本身是有成本的。</p><p>如果我们的目的在于提升数据库高并发访问的效率，那么首先考虑的是如何 <code>优化SQL和索引</code> ，这种方式 简单有效；其次才是采用 <code>缓存的策略</code> ，比如使用 Redis将热点数据保存在内存数据库中，提升读取的效率；最后才是对数据库采用 <code>主从架构</code> ，进行读写分离。</p><p>按照上面的方式进行优化，使用和维护的成本是由低到高的。</p><h3 id="1-2-主从复制的作用"><a href="#1-2-主从复制的作用" class="headerlink" title="1.2 主从复制的作用"></a>1.2 主从复制的作用</h3><p>主从同步设计不仅可以提高数据库的吞吐量，还有以下 3 个方面的作用。</p><p><strong>第1个作用：读写分离。</strong>我们可以通过主从复制的方式来<code>同步数据</code>，然后通过读写分离提高数据库并发处理能力。</p><p><img src="/../pic/MySQL%E6%97%A5%E5%BF%97%E4%B8%8E%E5%A4%87%E4%BB%BD%E7%AF%87/image-20220715212521601.png" alt="image-20220715212521601"></p><p>其中一个是Master主库，负责写入数据，我们称之为：写库。</p><p>其他都是Slave从库，负责读取数据，我们称之为：读库。</p><p>当主库进行更新的时候，会自动将数据复制到从库中，而我们在客户端读取数据的时候，会从从库进行读取。</p><p>面对“读多写少”的需求，采用读写分离的方式，可以实现<code>更高的并发访问</code>。同时，我们还能对从服务器进行<code>负载均衡</code>，让不同的读请求按照策略均匀地分发到不同的从服务器上，让<code>读取更加顺畅</code>。读取顺畅的另一个原因，就是<code>减少了锁表</code>的影响，比如我们让主库负责写，当主库出现写锁的时候，不会影响到从库进行SELECT的读取。</p><p><strong>第2个作用就是数据备份。</strong>我们通过主从复制将主库上的数据复制到从库上，相当于一种<code>热备份机制</code>，也就是在主库正常运行的情况下进行的备份，不会影响到服务。</p><p><strong>第3个作用是具有高可用性。</strong>数据备份实际上是一种冗余的机制，通过这种冗余的方式可以换取数据库的高可用性，也就是当服务器出现故障或宕机的情况下，可以切换到从服务器上，保证服务的正常运行。</p><img src="../pic/MySQL日志与备份篇/image-20220715214055057.png" alt="image-20220715214055057" style="float:left;" /><h2 id="2-主从复制的原理"><a href="#2-主从复制的原理" class="headerlink" title="2. 主从复制的原理"></a>2. 主从复制的原理</h2><p><code>Slave</code> 会从 <code>Master</code> 读取 <code>binlog</code> 来进行数据同步。</p><h3 id="2-1-原理剖析"><a href="#2-1-原理剖析" class="headerlink" title="2.1 原理剖析"></a>2.1 原理剖析</h3><p><strong>三个线程</strong></p><p>实际上主从同步的原理就是基于 binlog 进行数据同步的。在主从复制过程中，会基于 <code>3 个线程</code> 来操 作，一个主库线程，两个从库线程。</p><p><img src="/../pic/MySQL%E6%97%A5%E5%BF%97%E4%B8%8E%E5%A4%87%E4%BB%BD%E7%AF%87/image-20220715215944767.png" alt="image-20220715215944767"></p><p><code>二进制日志转储线程</code> （Binlog dump thread）是一个主库线程。当从库线程连接的时候， 主库可以将二进 制日志发送给从库，当主库读取事件（Event）的时候，会在 Binlog 上 <code>加锁</code> ，读取完成之后，再将锁释放掉。</p><p><code>从库 I/O 线程</code> 会连接到主库，向主库发送请求更新 Binlog。这时从库的 I&#x2F;O 线程就可以读取到主库的二进制日志转储线程发送的 Binlog 更新部分，并且拷贝到本地的中继日志 （Relay log）。</p><p><code>从库 SQL 线程</code> 会读取从库中的中继日志，并且执行日志中的事件，将从库中的数据与主库保持同步。</p><p><img src="/../pic/MySQL%E6%97%A5%E5%BF%97%E4%B8%8E%E5%A4%87%E4%BB%BD%E7%AF%87/image-20220715220037213.png" alt="image-20220715220037213"></p><blockquote><p>注意：</p><p>不是所有版本的MySQL都默认开启服务器的二进制日志。在进行主从同步的时候，我们需要先检查服务器是否已经开启了二进制日志。</p><p>除非特殊指定，默认情况下从服务器会执行所有主服务器中保存的事件。也可以通过配置，使从服务器执行特定的事件。</p></blockquote><p><strong>复制三步骤</strong></p><p>步骤1： <code>Master</code> 将写操作记录到二进制日志（ <code>binlog</code> ）。</p><p>步骤2： <code>Slave</code> 将 <code>Master</code> 的binary log events拷贝到它的中继日志（ <code>relay log</code> ）；</p><p>步骤3： <code>Slave</code> 重做中继日志中的事件，将改变应用到自己的数据库中。 MySQL复制是异步的且串行化的，而且重启后从 <code>接入点</code> 开始复制。</p><p><strong>复制的问题</strong></p><p>复制的最大问题： <code>延时</code></p><h3 id="2-2-复制的基本原则"><a href="#2-2-复制的基本原则" class="headerlink" title="2.2 复制的基本原则"></a>2.2 复制的基本原则</h3><ul><li>每个 <code>Slave</code> 只有一个 <code>Master</code></li><li>每个 <code>Slave</code> 只能有一个唯一的服务器ID</li><li>每个 <code>Master</code> 可以有多个 <code>Slave</code></li></ul><h2 id="3-一主一从架构搭建"><a href="#3-一主一从架构搭建" class="headerlink" title="3. 一主一从架构搭建"></a>3. 一主一从架构搭建</h2><p>一台 <code>主机</code> 用于处理所有 <code>写请求</code> ，一台 <code>从机</code> 负责所有 <code>读请求</code> ，架构图如下:</p><p><img src="/../pic/MySQL%E6%97%A5%E5%BF%97%E4%B8%8E%E5%A4%87%E4%BB%BD%E7%AF%87/image-20220715220852836.png" alt="image-20220715220852836"></p><h3 id="3-1-准备工作"><a href="#3-1-准备工作" class="headerlink" title="3.1 准备工作"></a>3.1 准备工作</h3><p>1、准备 2台 CentOS 虚拟机 （具体设置内容在P192）</p><p>2、每台虚拟机上需要安装好MySQL (可以是MySQL8.0 )</p><p>说明：前面我们讲过如何克隆一台CentOS。大家可以在一台CentOS上安装好MySQL，进而通过克隆的方式复制出1台包含MySQL的虚拟机。</p><p>注意：克隆的方式需要修改新克隆出来主机的：① <code>MAC地址</code> ② <code>hostname</code> ③<code> IP 地址</code> ④ <code>UUID</code> 。</p><p>此外，克隆的方式生成的虚拟机（包含MySQL Server），则克隆的虚拟机MySQL Server的UUID相同，必须修改，否则在有些场景会报错。比如： <code>show slave status\G</code> ，报如下的错误：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">Last_IO_Error: Fatal error: The slave I&#x2F;O thread stops because master and slave haveequal MySQL server UUIDs; these UUIDs must be different for replication to work.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改MySQL Server 的UUID方式：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">vim &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;auto.cnfsystemctl restart mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-2-主机配置文件"><a href="#3-2-主机配置文件" class="headerlink" title="3.2 主机配置文件"></a>3.2 主机配置文件</h3><p>建议mysql版本一致且后台以服务运行，主从所有配置项都配置在 <code>[mysqld]</code> 节点下，且都是小写字母。</p><p>具体参数配置如下：</p><ul><li>必选</li></ul><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#[必须]主服务器唯一ID</span><span class="token key attr-name">server-id</span><span class="token punctuation">=</span><span class="token value attr-value">1</span><span class="token comment">#[必须]启用二进制日志,指名路径。比如：自己本地的路径/log/mysqlbin</span><span class="token key attr-name">log-bin</span><span class="token punctuation">=</span><span class="token value attr-value">atguigu-bin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可选</li></ul><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#[可选] 0（默认）表示读写（主机），1表示只读（从机）</span><span class="token key attr-name">read-only</span><span class="token punctuation">=</span><span class="token value attr-value">0</span><span class="token comment">#设置日志文件保留的时长，单位是秒</span><span class="token key attr-name">binlog_expire_logs_seconds</span><span class="token punctuation">=</span><span class="token value attr-value">6000</span><span class="token comment">#控制单个二进制日志大小。此参数的最大和默认值是1GB</span><span class="token key attr-name">max_binlog_size</span><span class="token punctuation">=</span><span class="token value attr-value">200M</span><span class="token comment">#[可选]设置不要复制的数据库</span><span class="token key attr-name">binlog-ignore-db</span><span class="token punctuation">=</span><span class="token value attr-value">test</span><span class="token comment">#[可选]设置需要复制的数据库,默认全部记录。比如：binlog-do-db=atguigu_master_slave</span><span class="token key attr-name">binlog-do-db</span><span class="token punctuation">=</span><span class="token value attr-value">需要复制的主数据库名字</span><span class="token comment">#[可选]设置binlog格式</span><span class="token key attr-name">binlog_format</span><span class="token punctuation">=</span><span class="token value attr-value">STATEMENT</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启后台mysql服务，使配置生效。</p><blockquote><p>注意：</p><p>先搭建完主从复制，再创建数据库。</p><p>MySQL主从复制起始时，从机不继承主机数据。</p></blockquote><p><strong>① binlog格式设置：</strong></p><p>格式1： <code>STATEMENT模式</code> （基于SQL语句的复制(statement-based replication, SBR)）</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">binlog_format</span><span class="token punctuation">=</span><span class="token value attr-value">STATEMENT</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每一条会修改数据的sql语句会记录到binlog中。这是默认的binlog格式。</p><ul><li>SBR 的优点：<ul><li>历史悠久，技术成熟 </li><li>不需要记录每一行的变化，减少了binlog日志量，文件较小 </li><li>binlog中包含了所有数据库更改信息，可以据此来审核数据库的安全等情况 </li><li>binlog可以用于实时的还原，而不仅仅用于复制 </li><li>主从版本可以不一样，从服务器版本可以比主服务器版本高</li></ul></li><li>SBR 的缺点：<ul><li>不是所有的UPDATE语句都能被复制，尤其是包含不确定操作的时候</li></ul></li><li>使用以下函数的语句也无法被复制：LOAD_FILE()、UUID()、USER()、FOUND_ROWS()、SYSDATE() (除非启动时启用了 –sysdate-is-now 选项)<ul><li>INSERT … SELECT 会产生比 RBR 更多的行级锁 </li><li>复制需要进行全表扫描(WHERE 语句中没有使用到索引)的 UPDATE 时，需要比 RBR 请求更多的行级锁 </li><li>对于有 AUTO_INCREMENT 字段的 InnoDB表而言，INSERT 语句会阻塞其他 INSERT 语句 </li><li>对于一些复杂的语句，在从服务器上的耗资源情况会更严重，而 RBR 模式下，只会对那个发 生变化的记录产生影响 </li><li>执行复杂语句如果出错的话，会消耗更多资源</li><li>数据表必须几乎和主服务器保持一致才行，否则可能会导致复制出错</li></ul></li></ul><p><strong>② ROW模式（基于行的复制(row-based replication, RBR)）</strong></p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">binlog_format</span><span class="token punctuation">=</span><span class="token value attr-value">ROW</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.1.5版本的MySQL才开始支持，不记录每条sql语句的上下文信息，仅记录哪条数据被修改了，修改成什么样了。</p><ul><li>RBR 的优点：<ul><li>任何情况都可以被复制，这对复制来说是最 <code>安全可靠</code> 的。（比如：不会出现某些特定情况下 的存储过程、function、trigger的调用和触发无法被正确复制的问题） </li><li>多数情况下，从服务器上的表如果有主键的话，复制就会快了很多 </li><li>复制以下几种语句时的行锁更少：INSERT … SELECT、包含 AUTO_INCREMENT 字段的 INSERT、 没有附带条件或者并没有修改很多记录的 UPDATE 或 DELETE 语句 </li><li>执行 INSERT，UPDATE，DELETE 语句时锁更少 </li><li>从服务器上采用 多线程 来执行复制成为可能</li></ul></li><li>RBR 的缺点：<ul><li>binlog 大了很多 </li><li>复杂的回滚时 binlog 中会包含大量的数据 </li><li>主服务器上执行 UPDATE 语句时，所有发生变化的记录都会写到 binlog 中，而 SBR 只会写一次，这会导致频繁发生 binlog 的并发写问题 </li><li>无法从 binlog 中看到都复制了些什么语句</li></ul></li></ul><p><strong>③ MIXED模式（混合模式复制(mixed-based replication, MBR)）</strong></p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">binlog_format</span><span class="token punctuation">=</span><span class="token value attr-value">MIXED</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从5.1.8版本开始，MySQL提供了Mixed格式，实际上就是Statement与Row的结合。</p><p>在Mixed模式下，一般的语句修改使用statment格式保存binlog。如一些函数，statement无法完成主从复制的操作，则采用row格式保存binlog。</p><p>MySQL会根据执行的每一条具体的sql语句来区分对待记录的日志形式，也就是在Statement和Row之间选择一种。</p><h3 id="3-3-从机配置文件"><a href="#3-3-从机配置文件" class="headerlink" title="3.3 从机配置文件"></a>3.3 从机配置文件</h3><p>要求主从所有配置项都配置在 <code>my.cnf</code> 的 <code>[mysqld]</code> 栏位下，且都是小写字母。</p><ul><li><p>必选</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#[必须]从服务器唯一IDserver-id&#x3D;2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>可选</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#[可选]启用中继日志relay-log&#x3D;mysql-relay<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>重启后台mysql服务，使配置生效。</p><blockquote><p>注意：主从机都关闭防火墙<br>service iptables stop #CentOS 6<br>systemctl stop firewalld.service #CentOS 7</p></blockquote><h3 id="3-4-主机：建立账户并授权"><a href="#3-4-主机：建立账户并授权" class="headerlink" title="3.4 主机：建立账户并授权"></a>3.4 主机：建立账户并授权</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#在主机MySQL里执行授权主从复制的命令GRANT REPLICATION SLAVE ON *.* TO &#39;slave1&#39;@&#39;从机器数据库IP&#39; IDENTIFIED BY &#39;abc123&#39;; #5.5,5.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>注意：如果使用的是MySQL8，需要如下的方式建立账户，并授权slave:</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE USER &#39;slave1&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;;GRANT REPLICATION SLAVE ON *.* TO &#39;slave1&#39;@&#39;%&#39;;#此语句必须执行。否则见下面。ALTER USER &#39;slave1&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;123456&#39;;flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：在从机执行show slave status\G时报错： </p><p>Last_IO_Error: error connecting to master ‘<a href="mailto:&#x73;&#108;&#x61;&#118;&#x65;&#49;&#x40;&#49;&#x39;&#x32;&#46;&#x31;&#54;&#x38;&#46;&#x31;&#46;&#49;&#53;&#48;">&#x73;&#108;&#x61;&#118;&#x65;&#49;&#x40;&#49;&#x39;&#x32;&#46;&#x31;&#54;&#x38;&#46;&#x31;&#46;&#49;&#53;&#48;</a>:3306’ - retry-time: 60 retries: 1 message: </p><p>Authentication plugin ‘caching_sha2_password’ reported error: Authentication requires secure connection.</p></blockquote><p>查询Master的状态，并记录下File和Position的值。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show master status;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E6%97%A5%E5%BF%97%E4%B8%8E%E5%A4%87%E4%BB%BD%E7%AF%87/image-20220718140722740.png" alt="image-20220718140722740"></p><ul><li>记录下File和Position的值</li></ul><blockquote><p>注意：执行完此步骤后<strong>不要再操作主服务器MySQL</strong>，防止主服务器状态值变化。</p></blockquote><h3 id="3-5-从机：配置需要复制的主机"><a href="#3-5-从机：配置需要复制的主机" class="headerlink" title="3.5 从机：配置需要复制的主机"></a>3.5 从机：配置需要复制的主机</h3><p><strong>步骤1：</strong>从机上复制主机的命令</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CHANGE MASTER TOMASTER_HOST&#x3D;&#39;主机的IP地址&#39;,MASTER_USER&#x3D;&#39;主机用户名&#39;,MASTER_PASSWORD&#x3D;&#39;主机用户名的密码&#39;,MASTER_LOG_FILE&#x3D;&#39;mysql-bin.具体数字&#39;,MASTER_LOG_POS&#x3D;具体值;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CHANGE MASTER TOMASTER_HOST&#x3D;&#39;192.168.1.150&#39;,MASTER_USER&#x3D;&#39;slave1&#39;,MASTER_PASSWORD&#x3D;&#39;123456&#39;,MASTER_LOG_FILE&#x3D;&#39;atguigu-bin.000007&#39;,MASTER_LOG_POS&#x3D;154;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/MySQL%E6%97%A5%E5%BF%97%E4%B8%8E%E5%A4%87%E4%BB%BD%E7%AF%87/image-20220718140946747.png" alt="image-20220718140946747"></p><p><strong>步骤2：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#启动slave同步START SLAVE;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../pic/MySQL%E6%97%A5%E5%BF%97%E4%B8%8E%E5%A4%87%E4%BB%BD%E7%AF%87/image-20220718141825228.png" alt="image-20220718141825228"></p><p>如果报错：</p><p><img src="/../pic/MySQL%E6%97%A5%E5%BF%97%E4%B8%8E%E5%A4%87%E4%BB%BD%E7%AF%87/image-20220718141841862.png" alt="image-20220718141841862"></p><p>可以执行如下操作，删除之前的relay_log信息。然后重新执行 CHANGE MASTER TO …语句即可。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; reset slave; #删除SLAVE数据库的relaylog日志文件，并重新启用新的relaylog文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着，查看同步状态：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW SLAVE STATUS\G;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E6%97%A5%E5%BF%97%E4%B8%8E%E5%A4%87%E4%BB%BD%E7%AF%87/image-20220718141951374.png" alt="image-20220718141951374"></p><blockquote><p>上面两个参数都是Yes，则说明主从配置成功！</p></blockquote><p>显式如下的情况，就是不正确的。可能错误的原因有：</p><pre class="line-numbers language-none"><code class="language-none">1. 网络不通2. 账户密码错误3. 防火墙4. mysql配置文件问题5. 连接服务器时语法6. 主服务器mysql权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="../pic/MySQL日志与备份篇/image-20220718142045114.png" alt="image-20220718142045114" style="zoom:80%;" /><h3 id="3-6-测试"><a href="#3-6-测试" class="headerlink" title="3.6 测试"></a>3.6 测试</h3><p>主机新建库、新建表、insert记录，从机复制：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE DATABASE atguigu_master_slave;CREATE TABLE mytbl(id INT,NAME VARCHAR(16));INSERT INTO mytbl VALUES(1, &#39;zhang3&#39;);INSERT INTO mytbl VALUES(2,@@hostname);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-7-停止主从同步"><a href="#3-7-停止主从同步" class="headerlink" title="3.7 停止主从同步"></a>3.7 停止主从同步</h3><ul><li><p>停止主从同步命令：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">stop slave;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>如何重新配置主从</p><p>如果停止从服务器复制功能，再使用需要重新配置主从。否则会报错如下：</p><p><img src="/../pic/MySQL%E6%97%A5%E5%BF%97%E4%B8%8E%E5%A4%87%E4%BB%BD%E7%AF%87/image-20220718142549168.png" alt="image-20220718142549168"></p></li></ul><p>重新配置主从，需要在从机上执行：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">stop slave;reset master; #删除Master中所有的binglog文件，并将日志索引文件清空，重新开始所有新的日志文件(慎用)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-8-后续"><a href="#3-8-后续" class="headerlink" title="3.8 后续"></a>3.8 后续</h3><p><strong>搭建主从复制：双主双从</strong></p><p>一个主机m1用于处理所有写请求，它的从机s1和另一台主机m2还有它的从机s2负责所有读请求。当m1主机宕机后，m2主机负责写请求，m1、m2互为备机。结构图如下：</p><p><img src="/../pic/MySQL%E6%97%A5%E5%BF%97%E4%B8%8E%E5%A4%87%E4%BB%BD%E7%AF%87/image-20220718143705843.png" alt="image-20220718143705843"></p><p><img src="/../pic/MySQL%E6%97%A5%E5%BF%97%E4%B8%8E%E5%A4%87%E4%BB%BD%E7%AF%87/image-20220718143716620.png" alt="image-20220718143716620"></p><h2 id="4-同步数据一致性问题"><a href="#4-同步数据一致性问题" class="headerlink" title="4. 同步数据一致性问题"></a>4. 同步数据一致性问题</h2><p><strong>主从同步的要求：</strong></p><ul><li>读库和写库的数据一致(最终一致)； </li><li>写数据必须写到写库； </li><li>读数据必须到读库(不一定)；</li></ul><h3 id="4-1-理解主从延迟问题"><a href="#4-1-理解主从延迟问题" class="headerlink" title="4.1 理解主从延迟问题"></a>4.1 理解主从延迟问题</h3><p>进行主从同步的内容是二进制日志，它是一个文件，在进行 <code>网络传输</code> 的过程中就一定会 <code>存在主从延迟</code> （比如 500ms），这样就可能造成用户在从库上读取的数据不是最新的数据，也就是主从同步中的 <code>数据不一致性</code> 问题。</p><img src="../pic/MySQL日志与备份篇/image-20220718144051094.png" alt="image-20220718144051094" style="float:left;" /><h3 id="4-2-主从延迟问题原因"><a href="#4-2-主从延迟问题原因" class="headerlink" title="4.2 主从延迟问题原因"></a>4.2 主从延迟问题原因</h3><p>在网络正常的时候，日志从主库传给从库所需的时间是很短的，即T2-T1的值是非常小的。即，网络正常情况下，主备延迟的主要来源是备库接收完binlog和执行完这个事务之间的时间差。</p><p><strong>主备延迟最直接的表现是，从库消费中继日志（relay log）的速度，比主库生产binlog的速度要慢。</strong>造成原因：</p><p>1、从库的机器性能比主库要差 </p><p>2、从库的压力大 </p><p>3、大事务的执行</p><p><strong>举例1：</strong>一次性用delete语句删除太多数据 </p><p>结论：后续再删除数据的时候，要控制每个事务删除的数据量，分成多次删除。 </p><p><strong>举例2：</strong>一次性用insert…select插入太多数据 </p><p><strong>举例3：</strong>大表DDL </p><p>比如在主库对一张500W的表添加一个字段耗费了10分钟，那么从节点上也会耗费10分钟。</p><h3 id="4-3-如何减少主从延迟"><a href="#4-3-如何减少主从延迟" class="headerlink" title="4.3 如何减少主从延迟"></a>4.3 如何减少主从延迟</h3><p>若想要减少主从延迟的时间，可以采取下面的办法：</p><ol><li>降低多线程大事务并发的概率，优化业务逻辑 </li><li>优化SQL，避免慢SQL， <code>减少批量操作</code> ，建议写脚本以update-sleep这样的形式完成。 </li><li><code>提高从库机器的配置</code> ，减少主库写binlog和从库读binlog的效率差。 </li><li>尽量采用 <code>短的链路</code> ，也就是主库和从库服务器的距离尽量要短，提升端口带宽，减少binlog传输的网络延时。 </li><li>实时性要求的业务读强制走主库，从库只做灾备，备份。</li></ol><h3 id="4-4-如何解决一致性问题"><a href="#4-4-如何解决一致性问题" class="headerlink" title="4.4 如何解决一致性问题"></a>4.4 如何解决一致性问题</h3><p>如果操作的数据存储在同一个数据库中，那么对数据进行更新的时候，可以对记录加写锁，这样在读取的时候就不会发生数据不一致的情况。但这时从库的作用就是 <code>备份</code> ，并没有起到 <code>读写分离</code> ，分担主库 <code>读压力</code> 的作用。</p><p><img src="/../pic/MySQL%E6%97%A5%E5%BF%97%E4%B8%8E%E5%A4%87%E4%BB%BD%E7%AF%87/image-20220718144341584.png" alt="image-20220718144341584"></p><p>读写分离情况下，解决主从同步中数据不一致的问题， 就是解决主从之间 <code>数据复制方式</code> 的问题，如果按照数据一致性 <code>从弱到强</code> 来进行划分，有以下 3 种复制方式。</p><h4 id="方法-1：异步复制"><a href="#方法-1：异步复制" class="headerlink" title="方法 1：异步复制"></a>方法 1：异步复制</h4><p>异步模式就是客户端提交 COMMIT 之后不需要等从库返回任何结果，而是直接将结果返回给客户端，这样做的好处是不会影响主库写的效率，但可能会存在主库宕机，而Binlog还没有同步到从库的情况，也就是此时的主库和从库数据不一致。这时候从从库中选择一个作为新主，那么新主则可能缺少原来主服务器中已提交的事务。所以，这种复制模式下的数据一致性是最弱的。</p><p><img src="/../pic/MySQL%E6%97%A5%E5%BF%97%E4%B8%8E%E5%A4%87%E4%BB%BD%E7%AF%87/image-20220718144410731.png" alt="image-20220718144410731"></p><h4 id="方法-2：半同步复制"><a href="#方法-2：半同步复制" class="headerlink" title="方法 2：半同步复制"></a>方法 2：半同步复制</h4><img src="../pic/MySQL日志与备份篇/image-20220718144926758.png" alt="image-20220718144926758" style="float:left;" /><p><img src="/../pic/MySQL%E6%97%A5%E5%BF%97%E4%B8%8E%E5%A4%87%E4%BB%BD%E7%AF%87/image-20220718144958357.png" alt="image-20220718144958357"></p><h4 id="方法-3：组复制"><a href="#方法-3：组复制" class="headerlink" title="方法 3：组复制"></a>方法 3：组复制</h4><p>异步复制和半同步复制都无法最终保证数据的一致性问题，半同步复制是通过判断从库响应的个数来决定是否返回给客户端，虽然数据一致性相比于异步复制有提升，但仍然无法满足对数据一致性要求高的场景，比如金融领域。MGR 很好地弥补了这两种复制模式的不足。</p><p>组复制技术，简称 MGR（MySQL Group Replication）。是 MySQL 在 5.7.17 版本中推出的一种新的数据复制技术，这种复制技术是基于 Paxos 协议的状态机复制。</p><p><strong>MGR 是如何工作的</strong></p><p>首先我们将多个节点共同组成一个复制组，在 <code>执行读写（RW）事务</code> 的时候，需要通过一致性协议层 （Consensus 层）的同意，也就是读写事务想要进行提交，必须要经过组里“大多数人”（对应 Node 节 点）的同意，大多数指的是同意的节点数量需要大于 （N&#x2F;2+1），这样才可以进行提交，而不是原发起方一个说了算。而针对 <code>只读（RO）事务</code> 则不需要经过组内同意，直接 COMMIT 即可。</p><p>在一个复制组内有多个节点组成，它们各自维护了自己的数据副本，并且在一致性协议层实现了原子消 息和全局有序消息，从而保证组内数据的一致性。</p><p><img src="/../pic/MySQL%E6%97%A5%E5%BF%97%E4%B8%8E%E5%A4%87%E4%BB%BD%E7%AF%87/image-20220718145235499.png" alt="image-20220718145235499"></p><p>MGR 将 MySQL 带入了数据强一致性的时代，是一个划时代的创新，其中一个重要的原因就是MGR 是基 于 Paxos 协议的。Paxos 算法是由 2013 年的图灵奖获得者 Leslie Lamport 于 1990 年提出的，有关这个算法的决策机制可以搜一下。事实上，Paxos 算法提出来之后就作为 <code>分布式一致性算法</code> 被广泛应用，比如 Apache 的 ZooKeeper 也是基于 Paxos 实现的。</p><h2 id="5-知识延伸"><a href="#5-知识延伸" class="headerlink" title="5. 知识延伸"></a>5. 知识延伸</h2><p>在主从架构的配置中，如果想要采取读写分离的策略，我们可以<code> 自己编写程序</code> ，也可以通过 <code>第三方的中间件</code> 来实现。</p><ul><li>自己编写程序的好处就在于比较自主，我们可以自己判断哪些查询在从库上来执行，针对实时性要 求高的需求，我们还可以考虑哪些查询可以在主库上执行。同时，程序直接连接数据库，减少了中间件层，相当于减少了性能损耗。</li><li>采用中间件的方法有很明显的优势，<code> 功能强大</code> ， <code>使用简单</code> 。但因为在客户端和数据库之间增加了 中间件层会有一些 <code>性能损耗</code> ，同时商业中间件也是有使用成本的。我们也可以考虑采取一些优秀的开源工具。</li></ul><p><img src="/../pic/MySQL%E6%97%A5%E5%BF%97%E4%B8%8E%E5%A4%87%E4%BB%BD%E7%AF%87/image-20220718145428456.png" alt="image-20220718145428456"></p><p>① <code>Cobar</code> 属于阿里B2B事业群，始于2008年，在阿里服役3年多，接管3000+个MySQL数据库的 schema,集群日处理在线SQL请求50亿次以上。由于Cobar发起人的离职，Cobar停止维护。 </p><p>② <code>Mycat</code> 是开源社区在阿里cobar基础上进行二次开发，解决了cobar存在的问题，并且加入了许 多新的功能在其中。青出于蓝而胜于蓝。</p><p>③ <code>OneProxy</code> 基于MySQL官方的proxy思想利用c语言进行开发的，OneProxy是一款商业 收费 的中 间件。舍弃了一些功能，专注在 性能和稳定性上 。 </p><p>④ <code>kingshard</code> 由小团队用go语言开发，还需要发展，需要不断完善。 </p><p>⑤ <code>Vitess</code> 是Youtube生产在使用，架构很复杂。不支持MySQL原生协议，使用 需要大量改造成 本 。 </p><p>⑥ <code>Atlas</code> 是360团队基于mysql proxy改写，功能还需完善，高并发下不稳定。 </p><p>⑦ <code>MaxScale</code> 是mariadb（MySQL原作者维护的一个版本） 研发的中间件 </p><p>⑧ <code>MySQLRoute</code> 是MySQL官方Oracle公司发布的中间件</p><p><img src="/../pic/MySQL%E6%97%A5%E5%BF%97%E4%B8%8E%E5%A4%87%E4%BB%BD%E7%AF%87/image-20220718145523643.png" alt="image-20220718145523643"></p><p><img src="/../pic/MySQL%E6%97%A5%E5%BF%97%E4%B8%8E%E5%A4%87%E4%BB%BD%E7%AF%87/image-20220718145534856.png" alt="image-20220718145534856"></p><p>主备切换：</p><p><img src="/../pic/MySQL%E6%97%A5%E5%BF%97%E4%B8%8E%E5%A4%87%E4%BB%BD%E7%AF%87/image-20220718145548526.png" alt="image-20220718145548526"></p><ul><li>主动切换 </li><li>被动切换</li><li>如何判断主库出问题了？如何解决过程中的数据不一致性问题 ?</li></ul><h1 id="第19章-数据库备份与恢复"><a href="#第19章-数据库备份与恢复" class="headerlink" title="第19章_数据库备份与恢复"></a>第19章_数据库备份与恢复</h1><img src="../pic/MySQL日志与备份篇/image-20220718145936444.png" alt="image-20220718145936444" style="float:left;" /><h2 id="1-物理备份与逻辑备份"><a href="#1-物理备份与逻辑备份" class="headerlink" title="1. 物理备份与逻辑备份"></a>1. 物理备份与逻辑备份</h2><p><strong>物理备份：</strong>备份数据文件，转储数据库物理文件到某一目录。物理备份恢复速度比较快，但占用空间比较大，MySQL中可以用 <code>xtrabackup</code> 工具来进行物理备份。</p><p><strong>逻辑备份：</strong>对数据库对象利用工具进行导出工作，汇总入备份文件内。逻辑备份恢复速度慢，但占用空间小，更灵活。MySQL 中常用的逻辑备份工具为 <code>mysqldump</code> 。逻辑备份就是 <code>备份sql语句</code> ，在恢复的 时候执行备份的sql语句实现数据库数据的重现。</p><h2 id="2-mysqldump实现逻辑备份"><a href="#2-mysqldump实现逻辑备份" class="headerlink" title="2. mysqldump实现逻辑备份"></a>2. mysqldump实现逻辑备份</h2><p>mysqldump是MySQL提供的一个非常有用的数据库备份工具。</p><h3 id="2-1-备份一个数据库"><a href="#2-1-备份一个数据库" class="headerlink" title="2.1 备份一个数据库"></a>2.1 备份一个数据库</h3><p>mysqldump命令执行时，可以将数据库备份成一个<code>文本文件</code>，该文件中实际上包含多个<code>CREATE</code>和<code>INSERT</code>语句，使用这些语句可以重新创建表和插入数据。</p><ul><li>查出需要备份的表的结构，在文本文件中生成一个CREATE语句</li><li>将表中的所有记录转换为一条INSERT语句。</li></ul><p><strong>基本语法：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqldump –u 用户名称 –h 主机名称 –p密码 待备份的数据库名称[tbname, [tbname...]]&gt; 备份文件名称.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>说明： 备份的文件并非一定要求后缀名为.sql，例如后缀名为.txt的文件也是可以的。</p></blockquote><p>举例：使用root用户备份atguigu数据库：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqldump -uroot -p atguigu&gt;atguigu.sql #备份文件存储在当前目录下<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqldump -uroot -p atguigudb1 &gt; &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;atguigu.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>备份文件剖析：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- MySQL dump 10.13 Distrib 8.0.26, for Linux (x86_64)---- Host: localhost Database: atguigu-- -------------------------------------------------------- Server version 8.0.26&#x2F;*!40101 SET @OLD_CHARACTER_SET_CLIENT&#x3D;@@CHARACTER_SET_CLIENT *&#x2F;;&#x2F;*!40101 SET @OLD_CHARACTER_SET_RESULTS&#x3D;@@CHARACTER_SET_RESULTS *&#x2F;;&#x2F;*!40101 SET @OLD_COLLATION_CONNECTION&#x3D;@@COLLATION_CONNECTION *&#x2F;;&#x2F;*!50503 SET NAMES utf8mb4 *&#x2F;;&#x2F;*!40103 SET @OLD_TIME_ZONE&#x3D;@@TIME_ZONE *&#x2F;;&#x2F;*!40103 SET TIME_ZONE&#x3D;&#39;+00:00&#39; *&#x2F;;&#x2F;*!40014 SET @OLD_UNIQUE_CHECKS&#x3D;@@UNIQUE_CHECKS, UNIQUE_CHECKS&#x3D;0 *&#x2F;;&#x2F;*!40014 SET @OLD_FOREIGN_KEY_CHECKS&#x3D;@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS&#x3D;0 *&#x2F;;&#x2F;*!40101 SET @OLD_SQL_MODE&#x3D;@@SQL_MODE, SQL_MODE&#x3D;&#39;NO_AUTO_VALUE_ON_ZERO&#39; *&#x2F;;&#x2F;*!40111 SET @OLD_SQL_NOTES&#x3D;@@SQL_NOTES, SQL_NOTES&#x3D;0 *&#x2F;;---- Current Database: &#96;atguigu&#96;--CREATE DATABASE &#x2F;*!32312 IF NOT EXISTS*&#x2F; &#96;atguigu&#96; &#x2F;*!40100 DEFAULT CHARACTER SETutf8mb4 COLLATE utf8mb4_0900_ai_ci *&#x2F; &#x2F;*!80016 DEFAULT ENCRYPTION&#x3D;&#39;N&#39; *&#x2F;;USE &#96;atguigu&#96;;---- Table structure for table &#96;student&#96;--DROP TABLE IF EXISTS &#96;student&#96;;&#x2F;*!40101 SET @saved_cs_client &#x3D; @@character_set_client *&#x2F;;&#x2F;*!50503 SET character_set_client &#x3D; utf8mb4 *&#x2F;;CREATE TABLE &#96;student&#96; (&#96;studentno&#96; int NOT NULL,&#96;name&#96; varchar(20) DEFAULT NULL,&#96;class&#96; varchar(20) DEFAULT NULL,PRIMARY KEY (&#96;studentno&#96;)) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb3;&#x2F;*!40101 SET character_set_client &#x3D; @saved_cs_client *&#x2F;;INSERT INTO &#96;student&#96; VALUES (1,&#39;张三_back&#39;,&#39;一班&#39;),(3,&#39;李四&#39;,&#39;一班&#39;),(8,&#39;王五&#39;,&#39;二班&#39;),(15,&#39;赵六&#39;,&#39;二班&#39;),(20,&#39;钱七&#39;,&#39;&gt;三班&#39;),(22,&#39;zhang3_update&#39;,&#39;1ban&#39;),(24,&#39;wang5&#39;,&#39;2ban&#39;);&#x2F;*!40000 ALTER TABLE &#96;student&#96; ENABLE KEYS *&#x2F;;UNLOCK TABLES;        .        .        .        .&#x2F;*!40101 SET SQL_MODE&#x3D;@OLD_SQL_MODE *&#x2F;;&#x2F;*!40014 SET FOREIGN_KEY_CHECKS&#x3D;@OLD_FOREIGN_KEY_CHECKS *&#x2F;;&#x2F;*!40014 SET UNIQUE_CHECKS&#x3D;@OLD_UNIQUE_CHECKS *&#x2F;;&#x2F;*!40101 SET CHARACTER_SET_CLIENT&#x3D;@OLD_CHARACTER_SET_CLIENT *&#x2F;;&#x2F;*!40101 SET CHARACTER_SET_RESULTS&#x3D;@OLD_CHARACTER_SET_RESULTS *&#x2F;;&#x2F;*!40101 SET COLLATION_CONNECTION&#x3D;@OLD_COLLATION_CONNECTION *&#x2F;;&#x2F;*!40111 SET SQL_NOTES&#x3D;@OLD_SQL_NOTES *&#x2F;;-- Dump completed on 2022-01-07 9:58:23<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-备份全部数据库"><a href="#2-2-备份全部数据库" class="headerlink" title="2.2 备份全部数据库"></a>2.2 备份全部数据库</h3><p>若想用mysqldump备份整个实例，可以使用 –all-databases 或 -A 参数：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqldump -uroot -pxxxxxx --all-databases &gt; all_database.sqlmysqldump -uroot -pxxxxxx -A &gt; all_database.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-3-备份部分数据库"><a href="#2-3-备份部分数据库" class="headerlink" title="2.3 备份部分数据库"></a>2.3 备份部分数据库</h3><p>使用 <code>--databases</code> 或 <code>-B</code> 参数了，该参数后面跟数据库名称，多个数据库间用空格隔开。如果指定 databases参数，备份文件中会存在创建数据库的语句，如果不指定参数，则不存在。语法如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqldump –u user –h host –p --databases [数据库的名称1 [数据库的名称2...]] &gt; 备份文件名称.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqldump -uroot -p --databases atguigu atguigu12 &gt;two_database.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqldump -uroot -p -B atguigu atguigu12 &gt; two_database.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-4-备份部分表"><a href="#2-4-备份部分表" class="headerlink" title="2.4 备份部分表"></a>2.4 备份部分表</h3><p>比如，在表变更前做个备份。语法如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqldump –u user –h host –p 数据库的名称 [表名1 [表名2...]] &gt; 备份文件名称.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例：备份atguigu数据库下的book表</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqldump -uroot -p atguigu book&gt; book.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>book.sql文件内容如下</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqldump -uroot -p atguigu book&gt; book.sql^C[root@node1 ~]# lskk kubekey kubekey-v1.1.1-linux-amd64.tar.gz README.md test1.sql two_database.sql[root@node1 ~]# mysqldump -uroot -p atguigu book&gt; book.sqlEnter password:[root@node1 ~]# lsbook.sql kk kubekey kubekey-v1.1.1-linux-amd64.tar.gz README.md test1.sqltwo_database.sql[root@node1 ~]# vi book.sql-- MySQL dump 10.13 Distrib 8.0.26, for Linux (x86_64)---- Host: localhost Database: atguigu-- -------------------------------------------------------- Server version 8.0.26&#x2F;*!40101 SET @OLD_CHARACTER_SET_CLIENT&#x3D;@@CHARACTER_SET_CLIENT *&#x2F;;&#x2F;*!40101 SET @OLD_CHARACTER_SET_RESULTS&#x3D;@@CHARACTER_SET_RESULTS *&#x2F;;&#x2F;*!40101 SET @OLD_COLLATION_CONNECTION&#x3D;@@COLLATION_CONNECTION *&#x2F;;&#x2F;*!50503 SET NAMES utf8mb4 *&#x2F;;&#x2F;*!40103 SET @OLD_TIME_ZONE&#x3D;@@TIME_ZONE *&#x2F;;&#x2F;*!40103 SET TIME_ZONE&#x3D;&#39;+00:00&#39; *&#x2F;;&#x2F;*!40014 SET @OLD_UNIQUE_CHECKS&#x3D;@@UNIQUE_CHECKS, UNIQUE_CHECKS&#x3D;0 *&#x2F;;&#x2F;*!40014 SET @OLD_FOREIGN_KEY_CHECKS&#x3D;@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS&#x3D;0 *&#x2F;;&#x2F;*!40101 SET @OLD_SQL_MODE&#x3D;@@SQL_MODE, SQL_MODE&#x3D;&#39;NO_AUTO_VALUE_ON_ZERO&#39; *&#x2F;;&#x2F;*!40111 SET @OLD_SQL_NOTES&#x3D;@@SQL_NOTES, SQL_NOTES&#x3D;0 *&#x2F;;---- Table structure for table &#96;book&#96;--DROP TABLE IF EXISTS &#96;book&#96;;&#x2F;*!40101 SET @saved_cs_client &#x3D; @@character_set_client *&#x2F;;&#x2F;*!50503 SET character_set_client &#x3D; utf8mb4 *&#x2F;;CREATE TABLE &#96;book&#96; (&#96;bookid&#96; int unsigned NOT NULL AUTO_INCREMENT,&#96;card&#96; int unsigned NOT NULL,&#96;test&#96; varchar(255) COLLATE utf8_bin DEFAULT NULL,PRIMARY KEY (&#96;bookid&#96;),KEY &#96;Y&#96; (&#96;card&#96;)) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;101 DEFAULT CHARSET&#x3D;utf8mb3 COLLATE&#x3D;utf8_bin;&#x2F;*!40101 SET character_set_client &#x3D; @saved_cs_client *&#x2F;;---- Dumping data for table &#96;book&#96;--LOCK TABLES &#96;book&#96; WRITE;&#x2F;*!40000 ALTER TABLE &#96;book&#96; DISABLE KEYS *&#x2F;;INSERT INTO &#96;book&#96; VALUES (1,9,NULL),(2,10,NULL),(3,4,NULL),(4,8,NULL),(5,7,NULL),(6,10,NULL),(7,11,NULL),(8,3,NULL),(9,1,NULL),(10,17,NULL),(11,19,NULL),(12,4,NULL),(13,1,NULL),(14,14,NULL),(15,5,NULL),(16,5,NULL),(17,8,NULL),(18,3,NULL),(19,12,NULL),(20,11,NULL),(21,9,NULL),(22,20,NULL),(23,13,NULL),(24,3,NULL),(25,18,NULL),(26,20,NULL),(27,5,NULL),(28,6,NULL),(29,15,NULL),(30,15,NULL),(31,12,NULL),(32,11,NULL),(33,20,NULL),(34,5,NULL),(35,4,NULL),(36,6,NULL),(37,17,NULL),(38,5,NULL),(39,16,NULL),(40,6,NULL),(41,18,NULL),(42,12,NULL),(43,6,NULL),(44,12,NULL),(45,2,NULL),(46,12,NULL),(47,15,NULL),(48,17,NULL),(49,2,NULL),(50,16,NULL),(51,13,NULL),(52,17,NULL),(53,7,NULL),(54,2,NULL),(55,9,NULL),(56,1,NULL),(57,14,NULL),(58,7,NULL),(59,15,NULL),(60,12,NULL),(61,13,NULL),(62,8,NULL),(63,2,NULL),(64,6,NULL),(65,2,NULL),(66,12,NULL),(67,12,NULL),(68,4,NULL),(69,5,NULL),(70,10,NULL),(71,16,NULL),(72,8,NULL),(73,14,NULL),(74,5,NULL),(75,4,NULL),(76,3,NULL),(77,2,NULL),(78,2,NULL),(79,2,NULL),(80,3,NULL),(81,8,NULL),(82,14,NULL),(83,5,NULL),(84,4,NULL),(85,2,NULL),(86,20,NULL),(87,12,NULL),(88,1,NULL),(89,8,NULL),(90,18,NULL),(91,3,NULL),(92,3,NULL),(93,6,NULL),(94,1,NULL),(95,4,NULL),(96,17,NULL),(97,15,NULL),(98,1,NULL),(99,20,NULL),(100,15,NULL);&#x2F;*!40000 ALTER TABLE &#96;book&#96; ENABLE KEYS *&#x2F;;UNLOCK TABLES;&#x2F;*!40103 SET TIME_ZONE&#x3D;@OLD_TIME_ZONE *&#x2F;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，book文件和备份的库文件类似。不同的是，book文件只包含book表的DROP、CREATE和 INSERT语句。</p><p>备份多张表使用下面的命令，比如备份book和account表：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#备份多张表mysqldump -uroot -p atguigu book account &gt; 2_tables_bak.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-5-备份单表的部分数据"><a href="#2-5-备份单表的部分数据" class="headerlink" title="2.5 备份单表的部分数据"></a>2.5 备份单表的部分数据</h3><p>有些时候一张表的数据量很大，我们只需要部分数据。这时就可以使用 –where 选项了。where后面附带需要满足的条件。</p><p>举例：备份student表中id小于10的数据：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqldump -uroot -p atguigu student --where&#x3D;&quot;id &lt; 10 &quot; &gt; student_part_id10_low_bak.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>内容如下所示，insert语句只有id小于10的部分</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">LOCK TABLES &#96;student&#96; WRITE;&#x2F;*!40000 ALTER TABLE &#96;student&#96; DISABLE KEYS *&#x2F;;INSERT INTO &#96;student&#96; VALUES (1,100002,&#39;JugxTY&#39;,157,280),(2,100003,&#39;QyUcCJ&#39;,251,277),(3,100004,&#39;lATUPp&#39;,80,404),(4,100005,&#39;BmFsXI&#39;,240,171),(5,100006,&#39;mkpSwJ&#39;,388,476),(6,100007,&#39;ujMgwN&#39;,259,124),(7,100008,&#39;HBJTqX&#39;,429,168),(8,100009,&#39;dvQSQA&#39;,61,504),(9,100010,&#39;HljpVJ&#39;,234,185);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-排除某些表的备份"><a href="#2-6-排除某些表的备份" class="headerlink" title="2.6 排除某些表的备份"></a>2.6 排除某些表的备份</h3><p>如果我们想备份某个库，但是某些表数据量很大或者与业务关联不大，这个时候可以考虑排除掉这些表，同样的，选项 <code>--ignore-table</code> 可以完成这个功能。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqldump -uroot -p atguigu --ignore-table&#x3D;atguigu.student &gt; no_stu_bak.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过如下指定判定文件中没有student表结构：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">grep &quot;student&quot; no_stu_bak.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-7-只备份结构或只备份数据"><a href="#2-7-只备份结构或只备份数据" class="headerlink" title="2.7 只备份结构或只备份数据"></a>2.7 只备份结构或只备份数据</h3><p>只备份结构的话可以使用 <code>--no-data</code> 简写为 <code>-d</code> 选项；只备份数据可以使用 <code>--no-create-info</code> 简写为 <code>-t</code>选项。</p><ul><li><p>只备份结构</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqldump -uroot -p atguigu --no-data &gt; atguigu_no_data_bak.sql#使用grep命令，没有找到insert相关语句，表示没有数据备份。[root@node1 ~]# grep &quot;INSERT&quot; atguigu_no_data_bak.sql[root@node1 ~]#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>只备份数据</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqldump -uroot -p atguigu --no-create-info &gt; atguigu_no_create_info_bak.sql#使用grep命令，没有找到create相关语句，表示没有数据结构。[root@node1 ~]# grep &quot;CREATE&quot; atguigu_no_create_info_bak.sql[root@node1 ~]#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-8-备份中包含存储过程、函数、事件"><a href="#2-8-备份中包含存储过程、函数、事件" class="headerlink" title="2.8 备份中包含存储过程、函数、事件"></a>2.8 备份中包含存储过程、函数、事件</h3><p>mysqldump备份默认是不包含存储过程，自定义函数及事件的。可以使用 <code>--routines</code> 或 <code>-R</code> 选项来备份存储过程及函数，使用 <code>--events</code> 或 <code>-E</code> 参数来备份事件。</p><p>举例：备份整个atguigu库，包含存储过程及事件：</p><ul><li>使用下面的SQL可以查看当前库有哪些存储过程或者函数</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT SPECIFIC_NAME,ROUTINE_TYPE ,ROUTINE_SCHEMA FROMinformation_schema.Routines WHERE ROUTINE_SCHEMA&#x3D;&quot;atguigu&quot;;+---------------+--------------+----------------+| SPECIFIC_NAME | ROUTINE_TYPE | ROUTINE_SCHEMA |+---------------+--------------+----------------+| rand_num      | FUNCTION     | atguigu        || rand_string   | FUNCTION     | atguigu        || BatchInsert   | PROCEDURE    | atguigu        || insert_class  | PROCEDURE    | atguigu        || insert_order  | PROCEDURE    | atguigu        || insert_stu    | PROCEDURE    | atguigu        || insert_user   | PROCEDURE    | atguigu        || ts_insert     | PROCEDURE    | atguigu        |+---------------+--------------+----------------+9 rows in set (0.02 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面备份atguigu库的数据，函数以及存储过程。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqldump -uroot -p -R -E --databases atguigu &gt; fun_atguigu_bak.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询备份文件中是否存在函数，如下所示，可以看到确实包含了函数。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">grep -C 5 &quot;rand_num&quot; fun_atguigu_bak.sql------ Dumping routines for database &#39;atguigu&#39;--&#x2F;*!50003 DROP FUNCTION IF EXISTS &#96;rand_num&#96; *&#x2F;;&#x2F;*!50003 SET @saved_cs_client &#x3D; @@character_set_client *&#x2F; ;&#x2F;*!50003 SET @saved_cs_results &#x3D; @@character_set_results *&#x2F; ;&#x2F;*!50003 SET @saved_col_connection &#x3D; @@collation_connection *&#x2F; ;&#x2F;*!50003 SET character_set_client &#x3D; utf8mb3 *&#x2F; ;&#x2F;*!50003 SET character_set_results &#x3D; utf8mb3 *&#x2F; ;&#x2F;*!50003 SET collation_connection &#x3D; utf8_general_ci *&#x2F; ;&#x2F;*!50003 SET @saved_sql_mode &#x3D; @@sql_mode *&#x2F; ;&#x2F;*!50003 SET sql_mode &#x3D;&#39;ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&#39; *&#x2F; ;DELIMITER ;;CREATE DEFINER&#x3D;&#96;root&#96;@&#96;%&#96; FUNCTION &#96;rand_num&#96;(from_num BIGINT ,to_num BIGINT) RETURNSbigintBEGINDECLARE i BIGINT DEFAULT 0;SET i &#x3D; FLOOR(from_num +RAND()*(to_num - from_num+1)) ;RETURN i;END ;;--BEGINDECLARE i INT DEFAULT 0;    SET autocommit &#x3D; 0;    REPEAT    SET i &#x3D; i + 1;    INSERT INTO class ( classname,address,monitor ) VALUES    (rand_string(8),rand_string(10),rand_num());    UNTIL i &#x3D; max_num    END REPEAT;    COMMIT;END ;;DELIMITER ;--BEGINDECLARE i INT DEFAULT 0;    SET autocommit &#x3D; 0; #设置手动提交事务    REPEAT #循环    SET i &#x3D; i + 1; #赋值    INSERT INTO order_test (order_id, trans_id ) VALUES    (rand_num(1,7000000),rand_num(100000000000000000,700000000000000000));    UNTIL i &#x3D; max_num    END REPEAT;    COMMIT; #提交事务END ;;DELIMITER ;--BEGINDECLARE i INT DEFAULT 0;    SET autocommit &#x3D; 0; #设置手动提交事务    REPEAT #循环    SET i &#x3D; i + 1; #赋值    INSERT INTO student (stuno, name ,age ,classId ) VALUES    ((START+i),rand_string(6),rand_num(),rand_num());    UNTIL i &#x3D; max_num    END REPEAT;    COMMIT; #提交事务END ;;DELIMITER ;--BEGINDECLARE i INT DEFAULT 0;    SET autocommit &#x3D; 0;    REPEAT    SET i &#x3D; i + 1;    INSERT INTO &#96;user&#96; ( name,age,sex ) VALUES (&quot;atguigu&quot;,rand_num(1,20),&quot;male&quot;);    UNTIL i &#x3D; max_num    END REPEAT;    COMMIT;END ;;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-9-mysqldump常用选项"><a href="#2-9-mysqldump常用选项" class="headerlink" title="2.9 mysqldump常用选项"></a>2.9 mysqldump常用选项</h3><p>mysqldump其他常用选项如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">--add-drop-database：在每个CREATE DATABASE语句前添加DROP DATABASE语句。--add-drop-tables：在每个CREATE TABLE语句前添加DROP TABLE语句。--add-locking：用LOCK TABLES和UNLOCK TABLES语句引用每个表转储。重载转储文件时插入得更快。--all-database, -A：转储所有数据库中的所有表。与使用--database选项相同，在命令行中命名所有数据库。--comment[&#x3D;0|1]：如果设置为0，禁止转储文件中的其他信息，例如程序版本、服务器版本和主机。--skipcomments与--comments&#x3D;0的结果相同。默认值为1，即包括额外信息。--compact：产生少量输出。该选项禁用注释并启用--skip-add-drop-tables、--no-set-names、--skipdisable-keys和--skip-add-locking选项。--compatible&#x3D;name：产生与其他数据库系统或旧的MySQL服务器更兼容的输出，值可以为ansi、MySQL323、MySQL40、postgresql、oracle、mssql、db2、maxdb、no_key_options、no_table_options或者no_field_options。--complete_insert, -c：使用包括列名的完整的INSERT语句。--debug[&#x3D;debug_options], -#[debug_options]：写调试日志。--delete，-D：导入文本文件前清空表。--default-character-set&#x3D;charset：使用charsets默认字符集。如果没有指定，就使用utf8。--delete--master-logs：在主复制服务器上，完成转储操作后删除二进制日志。该选项自动启用-masterdata。--extended-insert，-e：使用包括几个VALUES列表的多行INSERT语法。这样使得转储文件更小，重载文件时可以加速插入。--flush-logs，-F：开始转储前刷新MySQL服务器日志文件。该选项要求RELOAD权限。--force，-f：在表转储过程中，即使出现SQL错误也继续。--lock-all-tables，-x：对所有数据库中的所有表加锁。在整体转储过程中通过全局锁定来实现。该选项自动关闭--single-transaction和--lock-tables。--lock-tables，-l：开始转储前锁定所有表。用READ LOCAL锁定表以允许并行插入MyISAM表。对于事务表（例如InnoDB和BDB），--single-transaction是一个更好的选项，因为它根本不需要锁定表。--no-create-db，-n：该选项禁用CREATE DATABASE &#x2F;*!32312 IF NOT EXIST*&#x2F;db_name语句，如果给出--database或--all-database选项，就包含到输出中。--no-create-info，-t：只导出数据，而不添加CREATE TABLE语句。--no-data，-d：不写表的任何行信息，只转储表的结构。--opt：该选项是速记，它可以快速进行转储操作并产生一个能很快装入MySQL服务器的转储文件。该选项默认开启，但可以用--skip-opt禁用。--password[&#x3D;password]，-p[password]：当连接服务器时使用的密码。-port&#x3D;port_num，-P port_num：用于连接的TCP&#x2F;IP端口号。--protocol&#x3D;&#123;TCP|SOCKET|PIPE|MEMORY&#125;：使用的连接协议。--replace，-r –replace和--ignore：控制替换或复制唯一键值已有记录的输入记录的处理。如果指定--replace，新行替换有相同的唯一键值的已有行；如果指定--ignore，复制已有的唯一键值的输入行被跳过。如果不指定这两个选项，当发现一个复制键值时会出现一个错误，并且忽视文本文件的剩余部分。--silent，-s：沉默模式。只有出现错误时才输出。--socket&#x3D;path，-S path：当连接localhost时使用的套接字文件（为默认主机）。--user&#x3D;user_name，-u user_name：当连接服务器时MySQL使用的用户名。--verbose，-v：冗长模式，打印出程序操作的详细信息。--xml，-X：产生XML输出。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行帮助命令 <code>mysqldump --help</code> ，可以获得特定版本的完整选项列表。</p><blockquote><p>提示 如果运行mysqldump没有–quick或–opt选项，mysqldump在转储结果前将整个结果集装入内 存。如果转储大数据库可能会出现问题，该选项默认启用，但可以用–skip-opt禁用。如果使用最 新版本的mysqldump程序备份数据，并用于恢复到比较旧版本的MySQL服务器中，则不要使用–opt 或-e选项。</p></blockquote><h2 id="3-mysql命令恢复数据"><a href="#3-mysql命令恢复数据" class="headerlink" title="3. mysql命令恢复数据"></a>3. mysql命令恢复数据</h2><p>使用mysqldump命令将数据库中的数据备份成一个文本文件。需要恢复时，可以使用<code>mysql命令</code>来恢复备份的数据。</p><p>mysql命令可以执行备份文件中的<code>CREATE语句</code>和<code>INSERT语句</code>。通过CREATE语句来创建数据库和表。通过INSERT语句来插入备份的数据。</p><p>基本语法：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql –u root –p [dbname] &lt; backup.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，dbname参数表示数据库名称。该参数是可选参数，可以指定数据库名，也可以不指定。指定数据库名时，表示还原该数据库下的表。此时需要确保MySQL服务器中已经创建了该名的数据库。不指定数据库名，表示还原文件中所有的数据库。此时sql文件中包含有CREATE DATABASE语句，不需要MySQL服务器中已存在的这些数据库。</p><h3 id="3-1-单库备份中恢复单库"><a href="#3-1-单库备份中恢复单库" class="headerlink" title="3.1 单库备份中恢复单库"></a>3.1 单库备份中恢复单库</h3><p>使用root用户，将之前练习中备份的atguigu.sql文件中的备份导入数据库中，命令如下：</p><p>如果备份文件中包含了创建数据库的语句，则恢复的时候不需要指定数据库名称，如下所示</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql -uroot -p &lt; atguigu.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>否则需要指定数据库名称，如下所示</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql -uroot -p atguigu4&lt; atguigu.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-全量备份恢复"><a href="#3-2-全量备份恢复" class="headerlink" title="3.2 全量备份恢复"></a>3.2 全量备份恢复</h3><p>如果我们现在有昨天的全量备份，现在想整个恢复，则可以这样操作：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql –u root –p &lt; all.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql -uroot -pxxxxxx &lt; all.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行完后，MySQL数据库中就已经恢复了all.sql文件中的所有数据库。</p><h3 id="3-3-全量备份恢复"><a href="#3-3-全量备份恢复" class="headerlink" title="3.3 全量备份恢复"></a>3.3 全量备份恢复</h3><p>可能有这样的需求，比如说我们只想恢复某一个库，但是我们有的是整个实例的备份，这个时候我们可以从全量备份中分离出单个库的备份。</p><p>举例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">sed -n &#39;&#x2F;^-- Current Database: &#96;atguigu&#96;&#x2F;,&#x2F;^-- Current Database: &#96;&#x2F;p&#39; all_database.sql &gt; atguigu.sql#分离完成后我们再导入atguigu.sql即可恢复单个库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-4-从单库备份中恢复单表"><a href="#3-4-从单库备份中恢复单表" class="headerlink" title="3.4 从单库备份中恢复单表"></a>3.4 从单库备份中恢复单表</h3><p>这个需求还是比较常见的。比如说我们知道哪个表误操作了，那么就可以用单表恢复的方式来恢复。</p><p>举例：我们有atguigu整库的备份，但是由于class表误操作，需要单独恢复出这张表。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">cat atguigu.sql | sed -e &#39;&#x2F;.&#x2F;&#123;H;$!d;&#125;&#39; -e &#39;x;&#x2F;CREATE TABLE &#96;class&#96;&#x2F;!d;q&#39; &gt; class_structure.sqlcat atguigu.sql | grep --ignore-case &#39;insert into &#96;class&#96;&#39; &gt; class_data.sql#用shell语法分离出创建表的语句及插入数据的语句后 再依次导出即可完成恢复use atguigu;mysql&gt; source class_structure.sql;Query OK, 0 rows affected, 1 warning (0.00 sec)mysql&gt; source class_data.sql;Query OK, 1 row affected (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-物理备份：直接复制整个数据库"><a href="#4-物理备份：直接复制整个数据库" class="headerlink" title="4. 物理备份：直接复制整个数据库"></a>4. 物理备份：直接复制整个数据库</h2><p>直接将MySQL中的数据库文件复制出来。这种方法最简单，速度也最快。MySQL的数据库目录位置不一 定相同：</p><ul><li>在Windows平台下，MySQL 8.0存放数据库的目录通常默认为 “ C:\ProgramData\MySQL\MySQL Server 8.0\Data ”或者其他用户自定义目录； </li><li>在Linux平台下，数据库目录位置通常为&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;； </li><li>在MAC OSX平台下，数据库目录位置通常为“&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data”</li></ul><p>但为了保证备份的一致性。需要保证：</p><ul><li>方式1：备份前，将服务器停止。</li><li>方式2：备份前，对相关表执行 FLUSH TABLES WITH READ LOCK 操作。这样当复制数据库目录中 的文件时，允许其他客户继续查询表。同时，FLUSH TABLES语句来确保开始备份前将所有激活的索 引页写入硬盘。</li></ul><p>这种方式方便、快速，但不是最好的备份方法，因为实际情况可能 <code>不允许停止MySQL服务器</code> 或者 <code>锁住表</code> ，而且这种方法 对InnoDB存储引擎 的表不适用。对于MyISAM存储引擎的表，这样备份和还原很方便，但是还原时最好是相同版本的MySQL数据库，否则可能会存在文件类型不同的情况。</p><p>注意，物理备份完毕后，执行 UNLOCK TABLES 来结算其他客户对表的修改行为。</p><blockquote><p>说明： 在MySQL版本号中，第一个数字表示主版本号，主版本号相同的MySQL数据库文件格式相同。</p></blockquote><p>此外，还可以考虑使用相关工具实现备份。比如， <code>MySQLhotcopy</code> 工具。MySQLhotcopy是一个Perl脚本，它使用LOCK TABLES、FLUSH TABLES和cp或scp来快速备份数据库。它是备份数据库或单个表最快的途径，但它只能运行在数据库目录所在的机器上，并且只能备份MyISAM类型的表。多用于mysql5.5之前。</p><h2 id="5-物理恢复：直接复制到数据库目录"><a href="#5-物理恢复：直接复制到数据库目录" class="headerlink" title="5. 物理恢复：直接复制到数据库目录"></a>5. 物理恢复：直接复制到数据库目录</h2><p><strong>步骤：</strong></p><p>1）演示删除备份的数据库中指定表的数据 </p><p>2）将备份的数据库数据拷贝到数据目录下，并重启MySQL服务器</p><p>3）查询相关表的数据是否恢复。需要使用下面的<code> chown</code> 操作。</p><p><strong>要求：</strong></p><ul><li>必须确保备份数据的数据库和待恢复的数据库服务器的主版本号相同。<ul><li>因为只有MySQL数据库主版本号相同时，才能保证这两个MySQL数据库文件类型是相同的。</li></ul></li><li>这种方式对 <code>MyISAM类型的表比较有效</code> ，对于InnoDB类型的表则不可用。<ul><li>因为InnoDB表的表空间不能直接复制。</li></ul></li><li>在Linux操作系统下，复制到数据库目录后，一定要将数据库的用户和组变成mysql，命令如下：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">chown -R mysql.mysql &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;dbname<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，两个mysql分别表示组和用户；“-R”参数可以改变文件夹下的所有子文件的用户和组；“dbname”参数表示数据库目录。</p><blockquote><p>提示 Linux操作系统下的权限设置非常严格。通常情况下，MySQL数据库只有root用户和mysql用户 组下的mysql用户才可以访问，因此将数据库目录复制到指定文件夹后，一定要使用chown命令将 文件夹的用户组变为mysql，将用户变为mysql。</p></blockquote><h2 id="6-表的导出与导入"><a href="#6-表的导出与导入" class="headerlink" title="6. 表的导出与导入"></a>6. 表的导出与导入</h2><h3 id="6-1-表的导出"><a href="#6-1-表的导出" class="headerlink" title="6.1 表的导出"></a>6.1 表的导出</h3><h4 id="1-使用SELECT…INTO-OUTFILE导出文本文件"><a href="#1-使用SELECT…INTO-OUTFILE导出文本文件" class="headerlink" title="1. 使用SELECT…INTO OUTFILE导出文本文件"></a>1. 使用SELECT…INTO OUTFILE导出文本文件</h4><p>在MySQL中，可以使用SELECT…INTO OUTFILE语句将表的内容导出成一个文本文件。</p><p><strong>举例：</strong>使用SELECT…INTO OUTFILE将atguigu数据库中account表中的记录导出到文本文件。 </p><p>（1）选择数据库atguigu，并查询account表，执行结果如下所示。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">use atguigu;select * from account;mysql&gt; select * from account;+----+--------+---------+| id | name | balance |+----+--------+---------+| 1 | 张三 | 90 || 2 | 李四 | 100 || 3 | 王五 | 0 |+----+--------+---------+3 rows in set (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）mysql默认对导出的目录有权限限制，也就是说使用命令行进行导出的时候，需要指定目录进行操作。</p><p>查询secure_file_priv值：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SHOW GLOBAL VARIABLES LIKE &#39;%secure%&#39;;+--------------------------+-----------------------+| Variable_name            | Value                 |+--------------------------+-----------------------+| require_secure_transport | OFF                   || secure_file_priv         | &#x2F;var&#x2F;lib&#x2F;mysql-files&#x2F; |+--------------------------+-----------------------+2 rows in set (0.02 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="../pic/MySQL日志与备份篇/image-20220718163627669.png" alt="image-20220718163627669" style="float:left;" /><p>（3）上面结果中显示，secure_file_priv变量的值为&#x2F;var&#x2F;lib&#x2F;mysql-files&#x2F;，导出目录设置为该目录，SQL语句如下。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM account INTO OUTFILE &quot;&#x2F;var&#x2F;lib&#x2F;mysql-files&#x2F;account.txt&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（4）查看 &#x2F;var&#x2F;lib&#x2F;mysql-files&#x2F;account.txt&#96;文件。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">1 张三 902 李四 1003 王五 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-使用mysqldump命令导出文本文件"><a href="#2-使用mysqldump命令导出文本文件" class="headerlink" title="2. 使用mysqldump命令导出文本文件"></a>2. 使用mysqldump命令导出文本文件</h4><p><strong>举例1：</strong>使用mysqldump命令将将atguigu数据库中account表中的记录导出到文本文件：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqldump -uroot -p -T &quot;&#x2F;var&#x2F;lib&#x2F;mysql-files&#x2F;&quot; atguigu account<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>mysqldump命令执行完毕后，在指定的目录&#x2F;var&#x2F;lib&#x2F;mysql-files&#x2F;下生成了account.sql和account.txt文件。</p><p>打开account.sql文件，其内容包含创建account表的CREATE语句。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">[root@node1 mysql-files]# cat account.sql-- MySQL dump 10.13 Distrib 8.0.26, for Linux (x86_64)---- Host: localhost Database: atguigu-- -------------------------------------------------------- Server version 8.0.26&#x2F;*!40101 SET @OLD_CHARACTER_SET_CLIENT&#x3D;@@CHARACTER_SET_CLIENT *&#x2F;;&#x2F;*!40101 SET @OLD_CHARACTER_SET_RESULTS&#x3D;@@CHARACTER_SET_RESULTS *&#x2F;;&#x2F;*!40101 SET @OLD_COLLATION_CONNECTION&#x3D;@@COLLATION_CONNECTION *&#x2F;;&#x2F;*!50503 SET NAMES utf8mb4 *&#x2F;;&#x2F;*!40103 SET @OLD_TIME_ZONE&#x3D;@@TIME_ZONE *&#x2F;;&#x2F;*!40103 SET TIME_ZONE&#x3D;&#39;+00:00&#39; *&#x2F;;&#x2F;*!40101 SET @OLD_SQL_MODE&#x3D;@@SQL_MODE, SQL_MODE&#x3D;&#39;&#39; *&#x2F;;&#x2F;*!40111 SET @OLD_SQL_NOTES&#x3D;@@SQL_NOTES, SQL_NOTES&#x3D;0 *&#x2F;;---- Table structure for table &#96;account&#96;--DROP TABLE IF EXISTS &#96;account&#96;;&#x2F;*!40101 SET @saved_cs_client &#x3D; @@character_set_client *&#x2F;;&#x2F;*!50503 SET character_set_client &#x3D; utf8mb4 *&#x2F;;CREATE TABLE &#96;account&#96; (&#96;id&#96; int NOT NULL AUTO_INCREMENT,&#96;name&#96; varchar(255) NOT NULL,&#96;balance&#96; int NOT NULL,PRIMARY KEY (&#96;id&#96;)) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;4 DEFAULT CHARSET&#x3D;utf8mb3;&#x2F;*!40101 SET character_set_client &#x3D; @saved_cs_client *&#x2F;;&#x2F;*!40103 SET TIME_ZONE&#x3D;@OLD_TIME_ZONE *&#x2F;;&#x2F;*!40101 SET SQL_MODE&#x3D;@OLD_SQL_MODE *&#x2F;;&#x2F;*!40101 SET CHARACTER_SET_CLIENT&#x3D;@OLD_CHARACTER_SET_CLIENT *&#x2F;;&#x2F;*!40101 SET CHARACTER_SET_RESULTS&#x3D;@OLD_CHARACTER_SET_RESULTS *&#x2F;;&#x2F;*!40101 SET COLLATION_CONNECTION&#x3D;@OLD_COLLATION_CONNECTION *&#x2F;;&#x2F;*!40111 SET SQL_NOTES&#x3D;@OLD_SQL_NOTES *&#x2F;;-- Dump completed on 2022-01-07 23:19:27<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开account.txt文件，其内容只包含account表中的数据。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">[root@node1 mysql-files]# cat account.txt1 张三 902 李四 1003 王五 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>举例2：</strong>使用mysqldump将atguigu数据库中的account表导出到文本文件，使用FIELDS选项，要求字段之 间使用逗号“，”间隔，所有字符类型字段值用双引号括起来：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqldump -uroot -p -T &quot;&#x2F;var&#x2F;lib&#x2F;mysql-files&#x2F;&quot; atguigu account --fields-terminatedby&#x3D;&#39;,&#39; --fields-optionally-enclosed-by&#x3D;&#39;\&quot;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>语句mysqldump语句执行成功之后，指定目录下会出现两个文件account.sql和account.txt。</p><p>打开account.sql文件，其内容包含创建account表的CREATE语句。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">[root@node1 mysql-files]# cat account.sql-- MySQL dump 10.13 Distrib 8.0.26, for Linux (x86_64)---- Host: localhost Database: atguigu-- -------------------------------------------------------- Server version 8.0.26&#x2F;*!40101 SET @OLD_CHARACTER_SET_CLIENT&#x3D;@@CHARACTER_SET_CLIENT *&#x2F;;&#x2F;*!40101 SET @OLD_CHARACTER_SET_RESULTS&#x3D;@@CHARACTER_SET_RESULTS *&#x2F;;&#x2F;*!40101 SET @OLD_COLLATION_CONNECTION&#x3D;@@COLLATION_CONNECTION *&#x2F;;&#x2F;*!50503 SET NAMES utf8mb4 *&#x2F;;&#x2F;*!40103 SET @OLD_TIME_ZONE&#x3D;@@TIME_ZONE *&#x2F;;&#x2F;*!40103 SET TIME_ZONE&#x3D;&#39;+00:00&#39; *&#x2F;;&#x2F;*!40101 SET @OLD_SQL_MODE&#x3D;@@SQL_MODE, SQL_MODE&#x3D;&#39;&#39; *&#x2F;;&#x2F;*!40111 SET @OLD_SQL_NOTES&#x3D;@@SQL_NOTES, SQL_NOTES&#x3D;0 *&#x2F;;---- Table structure for table &#96;account&#96;--DROP TABLE IF EXISTS &#96;account&#96;;&#x2F;*!40101 SET @saved_cs_client &#x3D; @@character_set_client *&#x2F;;&#x2F;*!50503 SET character_set_client &#x3D; utf8mb4 *&#x2F;;CREATE TABLE &#96;account&#96; (&#96;id&#96; int NOT NULL AUTO_INCREMENT,&#96;name&#96; varchar(255) NOT NULL,&#96;balance&#96; int NOT NULL,PRIMARY KEY (&#96;id&#96;)) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;4 DEFAULT CHARSET&#x3D;utf8mb3;&#x2F;*!40101 SET character_set_client &#x3D; @saved_cs_client *&#x2F;;&#x2F;*!40103 SET TIME_ZONE&#x3D;@OLD_TIME_ZONE *&#x2F;;&#x2F;*!40101 SET SQL_MODE&#x3D;@OLD_SQL_MODE *&#x2F;;&#x2F;*!40101 SET CHARACTER_SET_CLIENT&#x3D;@OLD_CHARACTER_SET_CLIENT *&#x2F;;&#x2F;*!40101 SET CHARACTER_SET_RESULTS&#x3D;@OLD_CHARACTER_SET_RESULTS *&#x2F;;&#x2F;*!40101 SET COLLATION_CONNECTION&#x3D;@OLD_COLLATION_CONNECTION *&#x2F;;&#x2F;*!40111 SET SQL_NOTES&#x3D;@OLD_SQL_NOTES *&#x2F;;-- Dump completed on 2022-01-07 23:36:39<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开account.txt文件，其内容包含创建account表的数据。从文件中可以看出，字段之间用逗号隔开，字 符类型的值被双引号括起来。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">[root@node1 mysql-files]# cat account.txt1,&quot;张三&quot;,902,&quot;李四&quot;,1003,&quot;王五&quot;,0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-使用mysql命令导出文本文件"><a href="#3-使用mysql命令导出文本文件" class="headerlink" title="3. 使用mysql命令导出文本文件"></a>3. 使用mysql命令导出文本文件</h4><p><strong>举例1：</strong>使用mysql语句导出atguigu数据中account表中的记录到文本文件：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql -uroot -p --execute&#x3D;&quot;SELECT * FROM account;&quot; atguigu&gt; &quot;&#x2F;var&#x2F;lib&#x2F;mysql-files&#x2F;account.txt&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开account.txt文件，其内容包含创建account表的数据。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">[root@node1 mysql-files]# cat account.txtid name balance1 张三 902 李四 1003 王五 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>举例2：</strong>将atguigu数据库account表中的记录导出到文本文件，使用–veritcal参数将该条件记录分为多行显示：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql -uroot -p --vertical --execute&#x3D;&quot;SELECT * FROM account;&quot; atguigu &gt; &quot;&#x2F;var&#x2F;lib&#x2F;mysql-files&#x2F;account_1.txt&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开account_1.txt文件，其内容包含创建account表的数据。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">[root@node1 mysql-files]# cat account_1.txt*************************** 1. row ***************************id: 1name: 张三balance: 90*************************** 2. row ***************************id: 2name: 李四balance: 100*************************** 3. row ***************************id: 3name: 王五balance: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>举例3：</strong>将atguigu数据库account表中的记录导出到xml文件，使用–xml参数，具体语句如下。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql -uroot -p --xml --execute&#x3D;&quot;SELECT * FROM account;&quot; atguigu&gt;&quot;&#x2F;var&#x2F;lib&#x2F;mysqlfiles&#x2F;account_3.xml&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">[root@node1 mysql-files]# cat account_3.xml&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;resultset statement&#x3D;&quot;SELECT * FROM account&quot;xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;&gt;&lt;row&gt;&lt;field name&#x3D;&quot;id&quot;&gt;1&lt;&#x2F;field&gt;&lt;field name&#x3D;&quot;name&quot;&gt;张三&lt;&#x2F;field&gt;&lt;field name&#x3D;&quot;balance&quot;&gt;90&lt;&#x2F;field&gt;&lt;&#x2F;row&gt;&lt;row&gt;&lt;field name&#x3D;&quot;id&quot;&gt;2&lt;&#x2F;field&gt;&lt;field name&#x3D;&quot;name&quot;&gt;李四&lt;&#x2F;field&gt;&lt;field name&#x3D;&quot;balance&quot;&gt;100&lt;&#x2F;field&gt;&lt;&#x2F;row&gt;&lt;row&gt;&lt;field name&#x3D;&quot;id&quot;&gt;3&lt;&#x2F;field&gt;&lt;field name&#x3D;&quot;name&quot;&gt;王五&lt;&#x2F;field&gt;&lt;field name&#x3D;&quot;balance&quot;&gt;0&lt;&#x2F;field&gt;&lt;&#x2F;row&gt;&lt;&#x2F;resultset&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：如果要将表数据导出到html文件中，可以使用 <code>--html</code> 选项。然后可以使用浏览器打开。</p><h3 id="6-2-表的导入"><a href="#6-2-表的导入" class="headerlink" title="6.2 表的导入"></a>6.2 表的导入</h3><h4 id="1-使用LOAD-DATA-INFILE方式导入文本文件"><a href="#1-使用LOAD-DATA-INFILE方式导入文本文件" class="headerlink" title="1. 使用LOAD DATA INFILE方式导入文本文件"></a>1. 使用LOAD DATA INFILE方式导入文本文件</h4><p><strong>举例1：</strong></p><p>使用SELECT…INTO OUTFILE将atguigu数据库中account表的记录导出到文本文件</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM atguigu.account INTO OUTFILE &#39;&#x2F;var&#x2F;lib&#x2F;mysql-files&#x2F;account_0.txt&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除account表中的数据：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELETE FROM atguigu.account;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从文本文件account.txt中恢复数据：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">LOAD DATA INFILE &#39;&#x2F;var&#x2F;lib&#x2F;mysql-files&#x2F;account_0.txt&#39; INTO TABLE atguigu.account;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询account表中的数据：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select * from account;+----+--------+---------+| id | name   | balance |+----+--------+---------+| 1 | 张三     | 90      || 2 | 李四     | 100     || 3 | 王五     | 0       |+----+--------+---------+3 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>举例2：</strong> 选择数据库atguigu，使用SELECT…INTO OUTFILE将atguigu数据库account表中的记录导出到文本文件，使用FIELDS选项和LINES选项，要求字段之间使用逗号”，”间隔，所有字段值用双引号括起来：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM atguigu.account INTO OUTFILE &#39;&#x2F;var&#x2F;lib&#x2F;mysql-files&#x2F;account_1.txt&#39; FIELDS TERMINATED BY &#39;,&#39; ENCLOSED BY &#39;\&quot;&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除account表中的数据：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELETE FROM atguigu.account;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从&#x2F;var&#x2F;lib&#x2F;mysql-files&#x2F;account.txt中导入数据到account表中：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">LOAD DATA INFILE &#39;&#x2F;var&#x2F;lib&#x2F;mysql-files&#x2F;account_1.txt&#39; INTO TABLE atguigu.account FIELDS TERMINATED BY &#39;,&#39; ENCLOSED BY &#39;\&quot;&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询account表中的数据，具体SQL如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from account;mysql&gt; select * from account;+----+--------+---------+| id | name   | balance |+----+--------+---------+| 1 | 张三     | 90      || 2 | 李四     | 100     || 3 | 王五     | 0       |+----+--------+---------+3 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-使用mysqlimport方式导入文本文件"><a href="#2-使用mysqlimport方式导入文本文件" class="headerlink" title="2. 使用mysqlimport方式导入文本文件"></a>2. 使用mysqlimport方式导入文本文件</h4><p><strong>举例：</strong></p><p>导出文件account.txt，字段之间使用逗号”，”间隔，字段值用双引号括起来：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM atguigu.account INTO OUTFILE &#39;&#x2F;var&#x2F;lib&#x2F;mysql-files&#x2F;account.txt&#39; FIELDS TERMINATED BY &#39;,&#39; ENCLOSED BY &#39;\&quot;&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除account表中的数据：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELETE FROM atguigu.account;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用mysqlimport命令将account.txt文件内容导入到数据库atguigu的account表中：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqlimport -uroot -p atguigu &#39;&#x2F;var&#x2F;lib&#x2F;mysql-files&#x2F;account.txt&#39; --fields-terminated-by&#x3D;&#39;,&#39; --fields-optionally-enclosed-by&#x3D;&#39;\&quot;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询account表中的数据：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from account;mysql&gt; select * from account;+----+--------+---------+| id | name   | balance |+----+--------+---------+| 1 | 张三     | 90      || 2 | 李四     | 100     || 3 | 王五     | 0       |+----+--------+---------+3 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-数据库迁移"><a href="#7-数据库迁移" class="headerlink" title="7. 数据库迁移"></a>7. 数据库迁移</h2><h3 id="7-1-概述"><a href="#7-1-概述" class="headerlink" title="7.1 概述"></a>7.1 概述</h3><p>数据迁移（data migration）是指选择、准备、提取和转换数据，并<strong>将数据从一个计算机存储系统永久地传输到另一个计算机存储系统的过程</strong>。此外，<code> 验证迁移数据的完整性</code> 和 <code>退役原来旧的数据存储</code> ，也被认为是整个数据迁移过程的一部分。</p><p>数据库迁移的原因是多样的，包括服务器或存储设备更换、维护或升级，应用程序迁移，网站集成，灾难恢复和数据中心迁移。</p><p>根据不同的需求可能要采取不同的迁移方案，但总体来讲，MySQL 数据迁移方案大致可以分为<code>物理迁移</code>和 <code>逻辑迁移</code> 两类。通常以尽可能 <code>自动化</code> 的方式执行，从而将人力资源从繁琐的任务中解放出来。</p><h3 id="7-2-迁移方案"><a href="#7-2-迁移方案" class="headerlink" title="7.2 迁移方案"></a>7.2 迁移方案</h3><ul><li>物理迁移</li></ul><p>物理迁移适用于大数据量下的整体迁移。使用物理迁移方案的优点是比较快速，但需要停机迁移并且要 求 MySQL 版本及配置必须和原服务器相同，也可能引起未知问题。</p><p>物理迁移包括拷贝数据文件和使用 XtraBackup 备份工具两种。</p><p>不同服务器之间可以采用物理迁移，我们可以在新的服务器上安装好同版本的数据库软件，创建好相同目录，建议配置文件也要和原数据库相同，然后从原数据库方拷贝来数据文件及日志文件，配置好文件组权限，之后在新服务器这边使用 mysqld 命令启动数据库。</p><ul><li>逻辑迁移</li></ul><p>逻辑迁移适用范围更广，无论是 <code>部分迁移</code> 还是 <code>全量迁移</code> ，都可以使用逻辑迁移。逻辑迁移中使用最多的就是通过 mysqldump 等备份工具。</p><h3 id="7-3-迁移注意点"><a href="#7-3-迁移注意点" class="headerlink" title="7.3 迁移注意点"></a>7.3 迁移注意点</h3><p><strong>1. 相同版本的数据库之间迁移注意点</strong></p><p>指的是在主版本号相同的MySQL数据库之间进行数据库移动。</p><p><code>方式1</code>： 因为迁移前后MySQL数据库的 <code>主版本号相同</code> ，所以可以通过复制数据库目录来实现数据库迁移，但是物理迁移方式只适用于MyISAM引擎的表。对于InnoDB表，不能用直接复制文件的方式备份数据库。</p><p><code>方式2</code>： 最常见和最安全的方式是使用 <code>mysqldump命令</code> 导出数据，然后在目标数据库服务器中使用 MySQL命令导入。</p><p>举例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#host1的机器中备份所有数据库,并将数据库迁移到名为host2的机器上mysqldump –h host1 –uroot –p –-all-databases|mysql –h host2 –uroot –p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在上述语句中，“|”符号表示管道，其作用是将mysqldump备份的文件给mysql命令；“–all-databases”表示要迁移所有的数据库。通过这种方式可以直接实现迁移。</p><p><strong>2. 不同版本的数据库之间迁移注意点</strong></p><p>例如，原来很多服务器使用5.7版本的MySQL数据库，在8.0版本推出来以后，改进了5.7版本的很多缺陷， 因此需要把数据库升级到8.0版本</p><p>旧版本与新版本的MySQL可能使用不同的默认字符集，例如有的旧版本中使用latin1作为默认字符集，而最新版本的MySQL默认字符集为utf8mb4。如果数据库中有中文数据，那么迁移过程中需要对 <code>默认字符集</code> 进行修改 ，不然可能无法正常显示数据。</p><p>高版本的MySQL数据库通常都会 <code>兼容低版本</code> ，因此可以从低版本的MySQL数据库迁移到高版本的MySQL 数据库。</p><p><strong>3. 不同数据库之间迁移注意点</strong></p><p>不同数据库之间迁移是指从其他类型的数据库迁移到MySQL数据库，或者从MySQL数据库迁移到其他类 型的数据库。这种迁移没有普适的解决方法。</p><p>迁移之前，需要了解不同数据库的架构， <code>比较它们之间的差异</code> 。不同数据库中定义相同类型的数据的 <code>关键字可能会不同</code> 。例如，MySQL中日期字段分为DATE和TIME两种，而ORACLE日期字段只有DATE；SQL Server数据库中有ntext、Image等数据类型，MySQL数据库没有这些数据类型；MySQL支持的ENUM和SET 类型，这些SQL Server数据库不支持。</p><p>另外，数据库厂商并没有完全按照SQL标准来设计数据库系统，导致不同的数据库系统的 <code>SQL语句</code> 有差别。例如，微软的SQL Server软件使用的是T-SQL语句，T-SQL中包含了非标准的SQL语句，不能和MySQL的SQL语句兼容。</p><p>不同类型数据库之间的差异造成了互相 <code>迁移的困难</code> ，这些差异其实是商业公司故意造成的技术壁垒。但 是不同类型的数据库之间的迁移并 <code>不是完全不可能</code> 。例如，可以使用<code> MyODBC</code> 实现MySQL和SQL Server之 间的迁移。MySQL官方提供的工具 <code>MySQL Migration Toolkit</code> 也可以在不同数据之间进行数据迁移。 MySQL迁移到Oracle时，需要使用mysqldump命令导出sql文件，然后， <code>手动更改</code> sql文件中的CREATE语句。</p><h3 id="7-4-迁移小结"><a href="#7-4-迁移小结" class="headerlink" title="7.4 迁移小结"></a>7.4 迁移小结</h3><p><img src="/../pic/MySQL%E6%97%A5%E5%BF%97%E4%B8%8E%E5%A4%87%E4%BB%BD%E7%AF%87/image-20220718165515965.png" alt="image-20220718165515965"></p><h2 id="8-删库了不敢跑，能干点啥？"><a href="#8-删库了不敢跑，能干点啥？" class="headerlink" title="8. 删库了不敢跑，能干点啥？"></a>8. 删库了不敢跑，能干点啥？</h2><img src="../pic/MySQL日志与备份篇/image-20220718165738367.png" alt="image-20220718165738367" style="float:left;" /><h3 id="8-1-delete：误删行"><a href="#8-1-delete：误删行" class="headerlink" title="8.1 delete：误删行"></a>8.1 delete：误删行</h3><img src="../pic/MySQL日志与备份篇/image-20220718165909464.png" alt="image-20220718165909464" style="float:left;" /><h3 id="8-2-truncate-x2F-drop-：误删库-x2F-表"><a href="#8-2-truncate-x2F-drop-：误删库-x2F-表" class="headerlink" title="8.2 truncate&#x2F;drop ：误删库&#x2F;表"></a>8.2 truncate&#x2F;drop ：误删库&#x2F;表</h3><img src="../pic/MySQL日志与备份篇/image-20220718170026929.png" alt="image-20220718170026929" style="float:left;" /><h3 id="8-3-预防使用truncate-x2F-drop误删库-x2F-表"><a href="#8-3-预防使用truncate-x2F-drop误删库-x2F-表" class="headerlink" title="8.3 预防使用truncate&#x2F;drop误删库&#x2F;表"></a>8.3 预防使用truncate&#x2F;drop误删库&#x2F;表</h3><img src="../pic/MySQL日志与备份篇/image-20220718170132339.png" alt="image-20220718170132339" style="float:left;" /><img src="../pic/MySQL日志与备份篇/image-20220718170215247.png" alt="image-20220718170215247" style="float:left;" /><h3 id="8-4-rm：误删MySQL实例"><a href="#8-4-rm：误删MySQL实例" class="headerlink" title="8.4 rm：误删MySQL实例"></a>8.4 rm：误删MySQL实例</h3><p>对于一个有高可用机制的MySQL集群来说，不用担心 rm删除数据 了。只是删掉了其中某一个节点的数据的话，HA系统就会开始工作，选出一个新的主库，从而保证整个集群的正常工作。我们要做的就是在这个节点上把数据恢复回来，再接入整个集群。</p><p>但如果是恶意地把整个集群删除，那就需要考虑跨机房备份，跨城市备份。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据迁移 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 数据库日志 </tag>
            
            <tag> 主从复制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL事务</title>
      <link href="/2022/07/26/mysql-shi-wu-pian/"/>
      <url>/2022/07/26/mysql-shi-wu-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="第13章-事务基础知识"><a href="#第13章-事务基础知识" class="headerlink" title="第13章_事务基础知识"></a>第13章_事务基础知识</h1><h2 id="1-数据库事务概述"><a href="#1-数据库事务概述" class="headerlink" title="1. 数据库事务概述"></a>1. 数据库事务概述</h2><h3 id="1-1-存储引擎支持情况"><a href="#1-1-存储引擎支持情况" class="headerlink" title="1.1 存储引擎支持情况"></a>1.1 存储引擎支持情况</h3><p><code>SHOW ENGINES</code> 命令来查看当前 MySQL 支持的存储引擎都有哪些，以及这些存储引擎是否支持事务。</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220708124306444.png" alt="image-20220708124306444"></p><p>能看出在 MySQL 中，只有InnoDB 是支持事务的。</p><h3 id="1-2-基本概念"><a href="#1-2-基本概念" class="headerlink" title="1.2 基本概念"></a>1.2 基本概念</h3><p><strong>事务：</strong>一组逻辑操作单元，使数据从一种状态变换到另一种状态。</p><p><strong>事务处理的原则：</strong>保证所有事务都作为 <code>一个工作单元</code> 来执行，即使出现了故障，都不能改变这种执行方 式。当在一个事务中执行多个操作时，要么所有的事务都被提交( <code>commit</code> )，那么这些修改就 <code>永久</code> 地保 <code>存下来</code>；要么数据库管理系统将 <code>放弃</code> 所作的所有 <code>修改</code> ，整个事务回滚( rollback )到最初状态。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 案例：AA用户给BB用户转账100update account set money &#x3D; money - 100 where name &#x3D; &#39;AA&#39;;# 服务器宕机update account set money &#x3D; money + 100 where name &#x3D; &#39;BB&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-事物的ACID特性"><a href="#1-3-事物的ACID特性" class="headerlink" title="1.3 事物的ACID特性"></a>1.3 事物的ACID特性</h3><ul><li><strong>原子性（atomicity）：</strong></li></ul><p>原子性是指事务是一个不可分割的工作单位，要么全部提交，要么全部失败回滚。即要么转账成功，要么转账失败，是不存在中间的状态。如果无法保证原子性会怎么样？就会出现数据不一致的情形，A账户减去100元，而B账户增加100元操作失败，系统将无故丢失100元。</p><ul><li><strong>一致性（consistency）：</strong></li></ul><p>（国内很多网站上对一致性的阐述有误，具体你可以参考 Wikipedia 对Consistency的阐述）</p><p>根据定义，一致性是指事务执行前后，数据从一个 <code>合法性状态</code> 变换到另外一个 <code>合法性状态</code> 。这种状态是 <code>语义上</code> 的而不是语法上的，跟具体的业务有关。</p><p>那什么是合法的数据状态呢？满足 <code>预定的约束</code> 的状态就叫做合法的状态。通俗一点，这状态是由你自己来定义的（比如满足现实世界中的约束）。满足这个状态，数据就是一致的，不满足这个状态，数据就 是不一致的！如果事务中的某个操作失败了，系统就会自动撤销当前正在执行的事务，返回到事务操作 之前的状态。</p><p><strong>举例1：</strong>A账户有200元，转账300元出去，此时A账户余额为-100元。你自然就发现此时数据是不一致的，为什么呢？因为你定义了一个状态，余额这列必须&gt;&#x3D;0。</p><p><strong>举例2：</strong>A账户有200元，转账50元给B账户，A账户的钱扣了，但是B账户因为各种意外，余额并没有增加。你也知道此时的数据是不一致的，为什么呢？因为你定义了一个状态，要求A+B的总余额必须不变。</p><p><strong>举例3：</strong>在数据表中我们将<code>姓名</code>字段设置为<code>唯一性约束</code>，这时当事务进行提交或者事务发生回滚的时候，如果数据表的姓名不唯一，就破坏了事物的一致性要求。</p><ul><li><strong>隔离型（isolation）：</strong></li></ul><p>事务的隔离性是指一个事务的执行<code>不能被其他事务干扰</code>，即一个事务内部的操作及使用的数据对<code>并发</code>的其他事务是隔离的，并发执行的各个事务之间不能相互干扰。</p><p>如果无法保证隔离性会怎么样？假设A账户有200元，B账户0元。A账户往B账户转账两次，每次金额为50 元，分别在两个事务中执行。如果无法保证隔离性，会出现下面的情形：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">UPDATE accounts SET money &#x3D; money - 50 WHERE NAME &#x3D; &#39;AA&#39;;UPDATE accounts SET money &#x3D; money + 50 WHERE NAME &#x3D; &#39;BB&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220708164610193.png" alt="image-20220708164610193"></p><p><strong>持久性（durability）：</strong></p><p>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是 永久性的 ，接下来的其他操作和数据库 故障不应该对其有任何影响。</p><p>持久性是通过 <code>事务日志</code> 来保证的。日志包括了 <code>重做日志</code> 和 <code>回滚日志</code> 。当我们通过事务对数据进行修改 的时候，首先会将数据库的变化信息记录到重做日志中，然后再对数据库中对应的行进行修改。这样做 的好处是，即使数据库系统崩溃，数据库重启后也能找到没有更新到数据库系统中的重做日志，重新执 行，从而使事务具有持久性。</p><blockquote><p>总结</p><p>ACID是事务的四大特征，在这四个特性中，原子性是基础，隔离性是手段，一致性是约束条件， 而持久性是我们的目的。</p><p>数据库事务，其实就是数据库设计者为了方便起见，把需要保证<code>原子性</code>、<code>隔离性</code>、<code>一致性</code>和<code>持久性</code>的一个或多个数据库操作称为一个事务。</p></blockquote><h3 id="1-4-事务的状态"><a href="#1-4-事务的状态" class="headerlink" title="1.4 事务的状态"></a>1.4 事务的状态</h3><p>我们现在知道 <code>事务</code> 是一个抽象的概念，它其实对应着一个或多个数据库操作，MySQL根据这些操作所执 行的不同阶段把 <code>事务</code> 大致划分成几个状态：</p><ul><li><p><strong>活动的（active）</strong></p><p>事务对应的数据库操作正在执行过程中时，我们就说该事务处在 <code>活动的</code> 状态。</p></li><li><p><strong>部分提交的（partially committed）</strong></p><p>当事务中的最后一个操作执行完成，但由于操作都在内存中执行，所造成的影响并 <code>没有刷新到磁盘</code> 时，我们就说该事务处在 <code>部分提交的</code> 状态。</p></li><li><p><strong>失败的（failed）</strong></p><p>当事务处在 <code>活动的</code> 或者 部分提交的 状态时，可能遇到了某些错误（数据库自身的错误、操作系统 错误或者直接断电等）而无法继续执行，或者人为的停止当前事务的执行，我们就说该事务处在 失 败的 状态。</p></li><li><p><strong>中止的（aborted）</strong></p><p>如果事务执行了一部分而变为 <code>失败的</code> 状态，那么就需要把已经修改的事务中的操作还原到事务执 行前的状态。换句话说，就是要撤销失败事务对当前数据库造成的影响。我们把这个撤销的过程称之为 <code>回滚</code> 。当 <code>回滚</code> 操作执行完毕时，也就是数据库恢复到了执行事务之前的状态，我们就说该事 务处在了 <code>中止的</code> 状态。</p><p>举例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">UPDATE accounts SET money &#x3D; money - 50 WHERE NAME &#x3D; &#39;AA&#39;;UPDATE accounts SET money &#x3D; money + 50 WHERE NAME &#x3D; &#39;BB&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>提交的（committed）</strong></p><p>当一个处在 <code>部分提交的</code> 状态的事务将修改过的数据都 <code>同步到磁盘</code> 上之后，我们就可以说该事务处在了 <code>提交的</code> 状态。</p><p>一个基本的状态转换图如下所示：</p><img src="../pic/MySQL事务篇/image-20220708171859055.png" alt="image-20220708171859055" style="zoom:80%;" /><p>图中可见，只有当事物处于<code>提交的</code>或者<code>中止的</code>状态时，一个事务的生命周期才算是结束了。对于已经提交的事务来说，该事务对数据库所做的修改将永久生效，对于处于中止状态的事物，该事务对数据库所做的所有修改都会被回滚到没执行该事物之前的状态。</p></li></ul><h2 id="2-如何使用事务"><a href="#2-如何使用事务" class="headerlink" title="2. 如何使用事务"></a>2. 如何使用事务</h2><p>使用事务有两种方式，分别为 <code>显式事务</code> 和 <code>隐式事务</code> 。</p><h3 id="2-1-显式事务"><a href="#2-1-显式事务" class="headerlink" title="2.1 显式事务"></a>2.1 显式事务</h3><p><strong>步骤1：</strong> START TRANSACTION 或者 BEGIN ，作用是显式开启一个事务。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; BEGIN;#或者mysql&gt; START TRANSACTION;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>START TRANSACTION</code> 语句相较于 <code>BEGIN</code> 特别之处在于，后边能跟随几个 <code>修饰符</code> ：</p><p>① <code>READ ONLY</code> ：标识当前事务是一个 <code>只读事务</code> ，也就是属于该事务的数据库操作只能读取数据，而不能修改数据。</p><blockquote><p>补充：只读事务中只是不允许修改那些其他事务也能访问到的表中的数据，对于临时表来说（我们使用 CREATE TMEPORARY TABLE 创建的表），由于它们只能再当前会话中可见，所有只读事务其实也是可以对临时表进行增、删、改操作的。</p></blockquote><p>② <code>READ WRITE</code> ：标识当前事务是一个 <code>读写事务</code> ，也就是属于该事务的数据库操作既可以读取数据， 也可以修改数据。</p><p>③ <code>WITH CONSISTENT SNAPSHOT</code> ：启动一致性读。</p><p>比如：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">START TRANSACTION READ ONLY; # 开启一个只读事务<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">START TRANSACTION READ ONLY, WITH CONSISTENT SNAPSHOT # 开启只读事务和一致性读<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">START TRANSACTION READ WRITE, WITH CONSISTENT SNAPSHOT # 开启读写事务和一致性读<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：</p><ul><li><code>READ ONLY</code>和<code>READ WRITE</code>是用来设置所谓的事物<code>访问模式</code>的，就是以只读还是读写的方式来访问数据库中的数据，一个事务的访问模式不能同时即设置为<code>只读</code>的也设置为<code>读写</code>的，所以不能同时把<code>READ ONLY</code>和<code>READ WRITE</code>放到<code>START TRANSACTION</code>语句后边。</li><li>如果我们不显式指定事务的访问模式，那么该事务的访问模式就是<code>读写</code>模式</li></ul><p><strong>步骤2：</strong>一系列事务中的操作（主要是DML，不含DDL）</p><p><strong>步骤3：</strong>提交事务 或 中止事务（即回滚事务）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 提交事务。当提交事务后，对数据库的修改是永久性的。mysql&gt; COMMIT;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 回滚事务。即撤销正在进行的所有没有提交的修改mysql&gt; ROLLBACK;# 将事务回滚到某个保存点。mysql&gt; ROLLBACK TO [SAVEPOINT]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中关于SAVEPOINT相关操作有：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 在事务中创建保存点，方便后续针对保存点进行回滚。一个事务中可以存在多个保存点。SAVEPOINT 保存点名称;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 删除某个保存点RELEASE SAVEPOINT 保存点名称;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-2-隐式事务"><a href="#2-2-隐式事务" class="headerlink" title="2.2 隐式事务"></a>2.2 隐式事务</h3><p>MySQL中有一个系统变量 <code>autocommit</code> ：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SHOW VARIABLES LIKE &#39;autocommit&#39;;+---------------+-------+| Variable_name | Value |+---------------+-------+| autocommit    |  ON   |+---------------+-------+1 row in set (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，如果我们想关闭这种 <code>自动提交</code> 的功能，可以使用下边两种方法之一：</p><ul><li><p>显式的的使用 <code>START TRANSACTION</code> 或者 <code>BEGIN</code> 语句开启一个事务。这样在本次事务提交或者回滚前会暂时关闭掉自动提交的功能。</p></li><li><p>把系统变量 <code>autocommit</code> 的值设置为 <code>OFF</code> ，就像这样：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SET autocommit &#x3D; OFF;#或SET autocommit &#x3D; 0;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-3-隐式提交数据的情况"><a href="#2-3-隐式提交数据的情况" class="headerlink" title="2.3 隐式提交数据的情况"></a>2.3 隐式提交数据的情况</h3><ul><li><p>数据定义语言（Data definition language，缩写为：DDL）</p><p>数据库对象，指的就是<code>数据库、表、视图、存储过程</code>等结构。当我们<code>CREATE、ALTER、DROP</code>等语句去修改数据库对象时，就会隐式的提交前边语句所属于的事物。即：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">BEGIN;SELECT ... # 事务中的一条语句UPDATE ... # 事务中的一条语句... # 事务中的其他语句CREATE TABLE ... # 此语句会隐式的提交前边语句所属于的事务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>隐式使用或修改mysql数据库中的表</p><p>当我们使用<code>ALTER USER</code>、<code>CREATE USER</code>、<code>DROP USER</code>、<code>GRANT</code>、<code>RENAME USER</code>、<code>REVOKE</code>、<code>SET PASSWORD</code>等语句时也会隐式的提交前边语句所属于的事务。</p></li><li><p>事务控制或关于锁定的语句</p><p>① 当我们在一个事务还没提交或者回滚时就又使用 START TRANSACTION 或者 BEGIN 语句开启了另一个事务时，会隐式的提交上一个事务。即：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">BEGIN;SELECT ... # 事务中的一条语句UPDATE ... # 事务中的一条语句... # 事务中的其他语句BEGIN; # 此语句会隐式的提交前边语句所属于的事务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>② 当前的 autocommit 系统变量的值为 OFF ，我们手动把它调为 ON 时，也会 隐式的提交前边语句所属的事务。</p><p>③ 使用 LOCK TABLES 、 UNLOCK TABLES 等关于锁定的语句也会 隐式的提交 前边语句所属的事务。</p></li><li><p>加载数据的语句</p><p>使用<code>LOAD DATA</code>语句来批量往数据库中导入数据时，也会<code>隐式的提交</code>前边语句所属的事务。</p></li><li><p>关于MySQL复制的一些语句</p><p>使用<code>START SLAVE、STOP SLAVE、RESET SLAVE、CHANGE MASTER TO</code>等语句会隐式的提交前边语句所属的事务</p></li><li><p>其他的一些语句</p><p>使用<code>ANALYZE TABLE、CACHE INDEX、CAECK TABLE、FLUSH、LOAD INDEX INTO CACHE、OPTIMIZE TABLE、REPAIR TABLE、RESET</code>等语句也会隐式的提交前边语句所属的事务。</p></li></ul><h3 id="2-4-使用举例1：提交与回滚"><a href="#2-4-使用举例1：提交与回滚" class="headerlink" title="2.4 使用举例1：提交与回滚"></a>2.4 使用举例1：提交与回滚</h3><p>我们看下在 MySQL 的默认状态下，下面这个事务最后的处理结果是什么。</p><p><strong>情况1：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE user(name varchar(20), PRIMARY KEY (name)) ENGINE&#x3D;InnoDB;BEGIN;INSERT INTO user SELECT &#39;张三&#39;;COMMIT;BEGIN;INSERT INTO user SELECT &#39;李四&#39;;INSERT INTO user SELECT &#39;李四&#39;;ROLLBACK;SELECT * FROM user;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果（1 行数据）：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; commit;Query OK, 0 rows affected (0.00 秒)mysql&gt; BEGIN;Query OK, 0 rows affected (0.00 秒)mysql&gt; INSERT INTO user SELECT &#39;李四&#39;;Query OK, 1 rows affected (0.00 秒)mysql&gt; INSERT INTO user SELECT &#39;李四&#39;;Duplicate entry &#39;李四&#39; for key &#39;user.PRIMARY&#39;mysql&gt; ROLLBACK;Query OK, 0 rows affected (0.01 秒)mysql&gt; select * from user;+--------+| name   |+--------+| 张三    |+--------+1 行于数据集 (0.01 秒)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>情况2：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE user (name varchar(20), PRIMARY KEY (name)) ENGINE&#x3D;InnoDB;BEGIN;INSERT INTO user SELECT &#39;张三&#39;;COMMIT;INSERT INTO user SELECT &#39;李四&#39;;INSERT INTO user SELECT &#39;李四&#39;;ROLLBACK;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果（2 行数据）：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT * FROM user;+--------+| name   |+--------+| 张三    || 李四    |+--------+2 行于数据集 (0.01 秒)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>情况3：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE user(name varchar(255), PRIMARY KEY (name)) ENGINE&#x3D;InnoDB;SET @@completion_type &#x3D; 1;BEGIN;INSERT INTO user SELECT &#39;张三&#39;;COMMIT;INSERT INTO user SELECT &#39;李四&#39;;INSERT INTO user SELECT &#39;李四&#39;;ROLLBACK;SELECT * FROM user;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果（1 行数据）：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT * FROM user;+--------+| name   |+--------+| 张三    |+--------+1 行于数据集 (0.01 秒)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="../pic/MySQL事务篇/image-20220708201221316.png" alt="image-20220708201221316" style="float:left;" /><blockquote><p>当我们设置 autocommit&#x3D;0 时，不论是否采用 START TRANSACTION 或者 BEGIN 的方式来开启事 务，都需要用 COMMIT 进行提交，让事务生效，使用 ROLLBACK 对事务进行回滚。</p><p>当我们设置 autocommit&#x3D;1 时，每条 SQL 语句都会自动进行提交。 不过这时，如果你采用 START TRANSACTION 或者 BEGIN 的方式来显式地开启事务，那么这个事务只有在 COMMIT 时才会生效， 在 ROLLBACK 时才会回滚。</p></blockquote><h3 id="2-5-使用举例2：测试不支持事务的engine"><a href="#2-5-使用举例2：测试不支持事务的engine" class="headerlink" title="2.5 使用举例2：测试不支持事务的engine"></a>2.5 使用举例2：测试不支持事务的engine</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE test1(i INT) ENGINE&#x3D;InnoDB;CREATE TABLE test2(i INT) ENGINE&#x3D;MYISAM;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>针对于InnoDB表</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">BEGIN;INSERT INTO test1 VALUES(1);ROLLBACK;SELECT * FROM test1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：没有数据</p><p>针对于MYISAM表：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">BEGIN;INSERT INTO test1 VALUES(1);ROLLBACK;SELECT * FROM test2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：有一条数据</p><h3 id="2-6-使用举例3：SAVEPOINT"><a href="#2-6-使用举例3：SAVEPOINT" class="headerlink" title="2.6 使用举例3：SAVEPOINT"></a>2.6 使用举例3：SAVEPOINT</h3><p>创建表并添加数据：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE account(id INT PRIMARY KEY AUTO_INCREMENT,NAME VARCHAR(15),balance DECIMAL(10,2));INSERT INTO account(NAME,balance)VALUES(&#39;张三&#39;,1000),(&#39;李四&#39;,1000);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">BEGIN;UPDATE account SET balance &#x3D; balance - 100 WHERE NAME &#x3D; &#39;张三&#39;;UPDATE account SET balance &#x3D; balance - 100 WHERE NAME &#x3D; &#39;张三&#39;;SAVEPOINT s1; # 设置保存点UPDATE account SET balance &#x3D; balance + 1 WHERE NAME &#x3D; &#39;张三&#39;;ROLLBACK TO s1; # 回滚到保存点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：张三：800.00</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ROLLBACK;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果：张三：1000.00</p><h2 id="3-事务隔离级别"><a href="#3-事务隔离级别" class="headerlink" title="3. 事务隔离级别"></a>3. 事务隔离级别</h2><p>MySQL是一个 <code>客户端／服务器</code> 架构的软件，对于同一个服务器来说，可以有若干个客户端与之连接，每 个客户端与服务器连接上之后，就可以称为一个会话（ <code>Session</code> ）。每个客户端都可以在自己的会话中 向服务器发出请求语句，一个请求语句可能是某个事务的一部分，也就是对于服务器来说可能同时处理多个事务。事务有 <code>隔离性</code> 的特性，理论上在某个事务 <code>对某个数据进行访问</code> 时，其他事务应该进行<code>排队</code> ，当该事务提交之后，其他事务才可以继续访问这个数据。但是这样对 <code>性能影响太大</code> ，我们既想保持事务的隔离性，又想让服务器在处理访问同一数据的多个事务时 <code>性能尽量高些</code> ，那就看二者如何权衡取 舍了。</p><h3 id="3-1-数据准备"><a href="#3-1-数据准备" class="headerlink" title="3.1 数据准备"></a>3.1 数据准备</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE student (    studentno INT,    name VARCHAR(20),    class varchar(20),    PRIMARY KEY (studentno)) Engine&#x3D;InnoDB CHARSET&#x3D;utf8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后向这个表里插入一条数据：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO student VALUES(1, &#39;小谷&#39;, &#39;1班&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在表里的数据就是这样的：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select * from student;+-----------+--------+-------+| studentno | name   | class |+-----------+--------+-------+|      1    |   小谷  | 1班   |+-----------+--------+-------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-数据并发问题"><a href="#3-2-数据并发问题" class="headerlink" title="3.2 数据并发问题"></a>3.2 数据并发问题</h3><p>针对事务的隔离性和并发性，我们怎么做取舍呢？先看一下访问相同数据的事务在 不保证串行执行 （也 就是执行完一个再执行另一个）的情况下可能会出现哪些问题：</p><p><strong>1. 脏写（ Dirty Write ）</strong></p><p>对于两个事务 Session A、Session B，如果事务Session A <code>修改了</code> 另一个 <code>未提交</code> 事务Session B <code>修改过</code> 的数据，那就意味着发生了 <code>脏写</code>，示意图如下：</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220708214453902.png" alt="image-20220708214453902"></p><p>Session A 和 Session B 各开启了一个事务，Sesssion B 中的事务先将studentno列为1的记录的name列更新为’李四’，然后Session A中的事务接着又把这条studentno列为1的记录的name列更新为’张三’。如果之后Session B中的事务进行了回滚，那么Session A中的更新也将不复存在，这种现象称之为脏写。这时Session A中的事务就没有效果了，明明把数据更新了，最后也提交事务了，最后看到的数据什么变化也没有。这里大家对事务的隔离性比较了解的话，会发现默认隔离级别下，上面Session A中的更新语句会处于等待状态，这里只是跟大家说明一下会出现这样的现象。</p><p><strong>2. 脏读（ Dirty Read ）</strong></p><p> 对于两个事务 Session A、Session B，Session A <code>读取</code> 了已经被 Session B <code>更新</code> 但还 <code>没有被提交</code> 的字段。 之后若 Session B <code>回滚</code> ，Session A <code>读取 </code>的内容就是 <code>临时且无效</code> 的。</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220708215109480.png" alt="image-20220708215109480"></p><p>Session A和Session B各开启了一个事务，Session B中的事务先将studentno列为1的记录的name列更新 为’张三’，然后Session A中的事务再去查询这条studentno为1的记录，如果读到列name的值为’张三’，而 Session B中的事务稍后进行了回滚，那么Session A中的事务相当于读到了一个不存在的数据，这种现象就称之为 <code>脏读</code> 。</p><p><strong>3. 不可重复读（ Non-Repeatable Read ）</strong></p><p>对于两个事务Session A、Session B，Session A <code>读取</code>了一个字段，然后 Session B <code>更新</code>了该字段。 之后 Session A <code>再次读取</code> 同一个字段， <code>值就不同</code> 了。那就意味着发生了不可重复读。</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220708215626435.png" alt="image-20220708215626435"></p><p>我们在Session B中提交了几个 <code>隐式事务</code> （注意是隐式事务，意味着语句结束事务就提交了），这些事务 都修改了studentno列为1的记录的列name的值，每次事务提交之后，如果Session A中的事务都可以查看到最新的值，这种现象也被称之为 <code>不可重复读 </code>。</p><p><strong>4. 幻读（ Phantom ）</strong></p><p>对于两个事务Session A、Session B, Session A 从一个表中 <code>读取</code> 了一个字段, 然后 Session B 在该表中 插 入 了一些新的行。 之后, 如果 Session A <code>再次读取</code> 同一个表, 就会多出几行。那就意味着发生了<code>幻读</code>。</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220708220102342.png" alt="image-20220708220102342"></p><p>Session A中的事务先根据条件 studentno &gt; 0这个条件查询表student，得到了name列值为’张三’的记录； 之后Session B中提交了一个 <code>隐式事务</code> ，该事务向表student中插入了一条新记录；之后Session A中的事务 再根据相同的条件 studentno &gt; 0查询表student，得到的结果集中包含Session B中的事务新插入的那条记 录，这种现象也被称之为 幻读 。我们把新插入的那些记录称之为 <code>幻影记录</code> 。</p><img src="../pic/MySQL事务篇/image-20220708220228436.png" alt="image-20220708220228436" style="float:left;" /><h3 id="3-3-SQL中的四种隔离级别"><a href="#3-3-SQL中的四种隔离级别" class="headerlink" title="3.3 SQL中的四种隔离级别"></a>3.3 SQL中的四种隔离级别</h3><p>上面介绍了几种并发事务执行过程中可能遇到的一些问题，这些问题有轻重缓急之分，我们给这些问题 按照严重性来排一下序：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">脏写 &gt; 脏读 &gt; 不可重复读 &gt; 幻读<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们愿意舍弃一部分隔离性来换取一部分性能在这里就体现在：设立一些隔离级别，隔离级别越低，并发问题发生的就越多。 <code>SQL标准</code> 中设立了4个 <code>隔离级别</code> ：</p><ul><li><code>READ UNCOMMITTED</code> ：读未提交，在该隔离级别，所有事务都可以看到其他未提交事务的执行结 果。不能避免脏读、不可重复读、幻读。 </li><li><code>READ COMMITTED</code> ：读已提交，它满足了隔离的简单定义：一个事务只能看见已经提交事务所做 的改变。这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。可以避免脏读，但不可 重复读、幻读问题仍然存在。 </li><li><code>REPEATABLE READ</code> ：可重复读，事务A在读到一条数据之后，此时事务B对该数据进行了修改并提 交，那么事务A再读该数据，读到的还是原来的内容。可以避免脏读、不可重复读，但幻读问题仍 然存在。这是MySQL的默认隔离级别。 </li><li><code>SERIALIZABLE</code> ：可串行化，确保事务可以从一个表中读取相同的行。在这个事务持续期间，禁止 其他事务对该表执行插入、更新和删除操作。所有的并发问题都可以避免，但性能十分低下。能避 免脏读、不可重复读和幻读。</li></ul><p><code>SQL标准</code> 中规定，针对不同的隔离级别，并发事务可以发生不同严重程度的问题，具体情况如下：</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220708220917267.png" alt="image-20220708220917267"></p><p><code>脏写 </code>怎么没涉及到？因为脏写这个问题太严重了，不论是哪种隔离级别，都不允许脏写的情况发生。</p><p>不同的隔离级别有不同的现象，并有不同的锁和并发机制，隔离级别越高，数据库的并发性能就越差，4 种事务隔离级别与并发性能的关系如下：</p><img src="../pic/MySQL事务篇/image-20220708220957108.png" alt="image-20220708220957108" style="zoom:80%;" /><h3 id="3-4-MySQL支持的四种隔离级别"><a href="#3-4-MySQL支持的四种隔离级别" class="headerlink" title="3.4 MySQL支持的四种隔离级别"></a>3.4 MySQL支持的四种隔离级别</h3><img src="../pic/MySQL事务篇/image-20220708221639979.png" alt="image-20220708221639979" style="float:left;" /><p>MySQL的默认隔离级别为REPEATABLE READ，我们可以手动修改一下事务的隔离级别。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 查看隔离级别，MySQL 5.7.20的版本之前：mysql&gt; SHOW VARIABLES LIKE &#39;tx_isolation&#39;;+---------------+-----------------+| Variable_name | Value           |+---------------+-----------------+| tx_isolation  | REPEATABLE-READ |+---------------+-----------------+1 row in set (0.00 sec)# MySQL 5.7.20版本之后，引入transaction_isolation来替换tx_isolation# 查看隔离级别，MySQL 5.7.20的版本及之后：mysql&gt; SHOW VARIABLES LIKE &#39;transaction_isolation&#39;;+-----------------------+-----------------+| Variable_name         | Value           |+-----------------------+-----------------+| transaction_isolation | REPEATABLE-READ |+-----------------------+-----------------+1 row in set (0.02 sec)#或者不同MySQL版本中都可以使用的：SELECT @@transaction_isolation;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-5-如何设置事务的隔离级别"><a href="#3-5-如何设置事务的隔离级别" class="headerlink" title="3.5 如何设置事务的隔离级别"></a>3.5 如何设置事务的隔离级别</h3><p><strong>通过下面的语句修改事务的隔离级别：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SET [GLOBAL|SESSION] TRANSACTION ISOLATION LEVEL 隔离级别;#其中，隔离级别格式：&gt; READ UNCOMMITTED&gt; READ COMMITTED&gt; REPEATABLE READ&gt; SERIALIZABLE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SET [GLOBAL|SESSION] TRANSACTION_ISOLATION &#x3D; &#39;隔离级别&#39;#其中，隔离级别格式：&gt; READ-UNCOMMITTED&gt; READ-COMMITTED&gt; REPEATABLE-READ&gt; SERIALIZABLE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>关于设置时使用GLOBAL或SESSION的影响：</strong></p><ul><li><p>使用 GLOBAL 关键字（在全局范围影响）：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SET GLOBAL TRANSACTION ISOLATION LEVEL SERIALIZABLE;#或SET GLOBAL TRANSACTION_ISOLATION &#x3D; &#39;SERIALIZABLE&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>则：</p><ul><li>当前已经存在的会话无效</li><li>只对执行完该语句之后产生的会话起作用</li></ul></li><li><p>使用 <code>SESSION</code> 关键字（在会话范围影响）：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SET SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE;#或SET SESSION TRANSACTION_ISOLATION &#x3D; &#39;SERIALIZABLE&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>则：</p><ul><li>对当前会话的所有后续的事务有效</li><li>如果在事务之间执行，则对后续的事务有效</li><li>该语句可以在已经开启的事务中间执行，但不会影响当前正在执行的事务</li></ul></li></ul><p>如果在服务器启动时想改变事务的默认隔离级别，可以修改启动参数<code>transaction_isolation</code>的值。比如，在启动服务器时指定了<code>transaction_isolation=SERIALIZABLE</code>，那么事务的默认隔离界别就从原来的<code>REPEATABLE-READ</code>变成了<code>SERIALIZABLE</code>。</p><blockquote><p>小结： </p><p>数据库规定了多种事务隔离级别，不同隔离级别对应不同的干扰程度，隔离级别越高，数据一致性就越好，但并发性越弱。</p></blockquote><h3 id="3-6-不同隔离级别举例"><a href="#3-6-不同隔离级别举例" class="headerlink" title="3.6 不同隔离级别举例"></a>3.6 不同隔离级别举例</h3><p>初始化数据：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">TRUNCATE TABLE account;INSERT INTO account VALUES (1,&#39;张三&#39;,&#39;100&#39;), (2,&#39;李四&#39;,&#39;0&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="../pic/MySQL事务篇/image-20220708223250773.png" alt="image-20220708223250773" style="float:left;" /><p><strong>演示1. 读未提交之脏读</strong></p><p>设置隔离级别为未提交读：</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220710193920008.png" alt="image-20220710193920008"></p><p>脏读就是指当前事务就在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问了这个数据，然后使用了这个数据。</p><p><strong>演示2：读已提交</strong></p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220710194440101.png" alt="image-20220710194440101"></p><p><strong>演示3. 不可重复读</strong></p><p>设置隔离级别为可重复读，事务的执行流程如下：</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220710194144826.png" alt="image-20220710194144826"></p><p>当我们将当前会话的隔离级别设置为可重复读的时候，当前会话可以重复读，就是每次读取的结果集都相同，而不管其他事务有没有提交。但是在可重复读的隔离级别上会出现幻读的问题。</p><p><strong>演示4：幻读</strong></p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220710194042096.png" alt="image-20220710194042096"></p><img src="../pic/MySQL事务篇/image-20220710194612317.png" alt="image-20220710194612317" style="float:left;" /><h2 id="4-事务的常见分类"><a href="#4-事务的常见分类" class="headerlink" title="4. 事务的常见分类"></a>4. 事务的常见分类</h2><p>从事务理论的角度来看，可以把事务分为以下几种类型：</p><ul><li>扁平事务（Flat Transactions） </li><li>带有保存点的扁平事务（Flat Transactions with Savepoints） </li><li>链事务（Chained Transactions） </li><li>嵌套事务（Nested Transactions） </li><li>分布式事务（Distributed Transactions）</li></ul><h1 id="第14章-MySQL事务日志"><a href="#第14章-MySQL事务日志" class="headerlink" title="第14章_MySQL事务日志"></a>第14章_MySQL事务日志</h1><p>事务有4种特性：原子性、一致性、隔离性和持久性。那么事务的四种特性到底是基于什么机制实现呢？</p><ul><li>事务的隔离性由 <code>锁机制</code> 实现。</li><li>而事务的原子性、一致性和持久性由事务的 redo 日志和undo 日志来保证。<ul><li>REDO LOG 称为 <code>重做日志 </code>，提供再写入操作，恢复提交事务修改的页操作，用来保证事务的持久性。</li><li>UNDO LOG 称为 <code>回滚日志</code> ，回滚行记录到某个特定版本，用来保证事务的原子性、一致性。</li></ul></li></ul><p>有的DBA或许会认为 UNDO 是 REDO 的逆过程，其实不然。REDO 和 UNDO都可以视为是一种 <code>恢复操作</code>，但是：</p><ul><li>redo log: 是存储引擎层 (innodb) 生成的日志，记录的是<code>&quot;物理级别&quot;</code>上的页修改操作，比如页号xxx，偏移量yyy写入了’zzz’数据。主要为了保证数据的可靠性。</li><li>undo log: 是存储引擎层 (innodb) 生成的日志，记录的是 <code>逻辑操作</code> 日志，比如对某一行数据进行了INSERT语句操作，那么undo log就记录一条与之相反的DELETE操作。主要用于 <code>事务的回滚</code> (undo log 记录的是每个修改操作的 <code>逆操作</code>) 和 <code>一致性非锁定读</code> (undo log 回滚行记录到某种特定的版本——MVCC，即多版本并发控制)。</li></ul><h2 id="1-redo日志"><a href="#1-redo日志" class="headerlink" title="1. redo日志"></a>1. redo日志</h2><p>InnoDB存储引擎是以<code>页为单位</code>来管理存储空间的。在真正访问页面之前，需要把在<code>磁盘上</code>的页缓存到内存中的<code>Buffer Pool</code>之后才可以访问。所有的变更都必须<code>先更新缓冲池</code>中的数据，然后缓冲池中的<code>脏页</code>会以一定的频率被刷入磁盘 (<code>checkPoint</code>机制)，通过缓冲池来优化CPU和磁盘之间的鸿沟，这样就可以保证整体的性能不会下降太快。</p><h3 id="1-1-为什么需要REDO日志"><a href="#1-1-为什么需要REDO日志" class="headerlink" title="1.1 为什么需要REDO日志"></a>1.1 为什么需要REDO日志</h3><p>一方面，缓冲池可以帮助我们消除CPU和磁盘之间的鸿沟，checkpoint机制可以保证数据的最终落盘，然 而由于checkpoint <code>并不是每次变更的时候就触发</code> 的，而是master线程隔一段时间去处理的。所以最坏的情 况就是事务提交后，刚写完缓冲池，数据库宕机了，那么这段数据就是丢失的，无法恢复。</p><p>另一方面，事务包含 <code>持久性</code> 的特性，就是说对于一个已经提交的事务，在事务提交后即使系统发生了崩溃，这个事务对数据库中所做的更改也不能丢失。</p><p>那么如何保证这个持久性呢？ <code>一个简单的做法</code> ：在事务提交完成之前把该事务所修改的所有页面都刷新 到磁盘，但是这个简单粗暴的做法有些问题:</p><ul><li><p><strong>修改量与刷新磁盘工作量严重不成比例</strong></p><p>有时候我们仅仅修改了某个页面中的一个字节，但是我们知道在InnoDB中是以页为单位来进行磁盘IO的，也就是说我们在该事务提交时不得不将一个完整的页面从内存中刷新到磁盘，我们又知道一个默认页面时16KB大小，只修改一个字节就要刷新16KB的数据到磁盘上显然是小题大做了。</p></li><li><p><strong>随机IO刷新较慢</strong></p><p>一个事务可能包含很多语句，即使是一条语句也可能修改许多页面，假如该事务修改的这些页面可能并不相邻，这就意味着在将某个事务修改的Buffer Pool中的页面<code>刷新到磁盘</code>时，需要进行很多的<code>随机IO</code>，随机IO比顺序IO要慢，尤其对于传统的机械硬盘来说。</p></li></ul><p><code>另一个解决的思路</code> ：我们只是想让已经提交了的事务对数据库中数据所做的修改永久生效，即使后来系 统崩溃，在重启后也能把这种修改恢复出来。所以我们其实没有必要在每次事务提交时就把该事务在内 存中修改过的全部页面刷新到磁盘，只需要把 修改 了哪些东西 记录一下 就好。比如，某个事务将系统 表空间中 第10号 页面中偏移量为 100 处的那个字节的值 1 改成 2 。我们只需要记录一下：将第0号表 空间的10号页面的偏移量为100处的值更新为 2 </p><p>InnoDB引擎的事务采用了WAL技术 (<code>Write-Ahead Logging</code>)，这种技术的思想就是先写日志，再写磁盘，只有日志写入成功，才算事务提交成功，这里的日志就是redo log。当发生宕机且数据未刷到磁盘的时候，可以通过redo log来恢复，保证ACID中的D，这就是redo log的作用。</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220710202517977.png" alt="image-20220710202517977"></p><h3 id="1-2-REDO日志的好处、特点"><a href="#1-2-REDO日志的好处、特点" class="headerlink" title="1.2 REDO日志的好处、特点"></a>1.2 REDO日志的好处、特点</h3><h4 id="1-好处"><a href="#1-好处" class="headerlink" title="1. 好处"></a>1. 好处</h4><ul><li>redo日志降低了刷盘频率 </li><li>redo日志占用的空间非常小</li></ul><p>存储表空间ID、页号、偏移量以及需要更新的值，所需的存储空间是很小的，刷盘快。</p><h4 id="2-特点"><a href="#2-特点" class="headerlink" title="2. 特点"></a>2. 特点</h4><ul><li><p><strong>redo日志是顺序写入磁盘的</strong></p><p>在执行事务的过程中，每执行一条语句，就可能产生若干条redo日志，这些日志是按照<code>产生的顺序写入磁盘的</code>，也就是使用顺序ID，效率比随机IO快。</p></li><li><p><strong>事务执行过程中，redo log不断记录</strong></p><p>redo log跟bin log的区别，redo log是<code>存储引擎层</code>产生的，而bin log是<code>数据库层</code>产生的。假设一个事务，对表做10万行的记录插入，在这个过程中，一直不断的往redo log顺序记录，而bin log不会记录，直到这个事务提交，才会一次写入到bin log文件中。</p></li></ul><h3 id="1-3-redo的组成"><a href="#1-3-redo的组成" class="headerlink" title="1.3 redo的组成"></a>1.3 redo的组成</h3><p>Redo log可以简单分为以下两个部分：</p><ul><li><code>重做日志的缓冲 (redo log buffer)</code> ，保存在内存中，是易失的。</li></ul><p>在服务器启动时就会向操作系统申请了一大片称之为 redo log buffer 的 <code>连续内存</code> 空间，翻译成中文就是redo日志缓冲区。这片内存空间被划分为若干个连续的<code>redo log block</code>。一个redo log block占用<code>512字节</code>大小。</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220710204114543.png" alt="image-20220710204114543"></p><p><strong>参数设置：innodb_log_buffer_size：</strong></p><p>redo log buffer 大小，默认 <code>16M</code> ，最大值是4096M，最小值为1M。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show variables like &#39;%innodb_log_buffer_size%&#39;;+------------------------+----------+| Variable_name          | Value    |+------------------------+----------+| innodb_log_buffer_size | 16777216 |+------------------------+----------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>重做日志文件 (redo log file) </code>，保存在硬盘中，是持久的。</li></ul><p>REDO日志文件如图所示，其中<code>ib_logfile0</code>和<code>ib_logfile1</code>即为REDO日志。</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220710204427616.png" alt="image-20220710204427616"></p><h3 id="1-4-redo的整体流程"><a href="#1-4-redo的整体流程" class="headerlink" title="1.4 redo的整体流程"></a>1.4 redo的整体流程</h3><p>以一个更新事务为例，redo log 流转过程，如下图所示：</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220710204810264-16574572910841.png" alt="image-20220710204810264"></p><pre class="line-numbers language-none"><code class="language-none">第1步：先将原始数据从磁盘中读入内存中来，修改数据的内存拷贝第2步：生成一条重做日志并写入redo log buffer，记录的是数据被修改后的值第3步：当事务commit时，将redo log buffer中的内容刷新到 redo log file，对 redo log file采用追加写的方式第4步：定期将内存中修改的数据刷新到磁盘中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>体会： Write-Ahead Log(预先日志持久化)：在持久化一个数据页之前，先将内存中相应的日志页持久化。</p></blockquote><h3 id="1-5-redo-log的刷盘策略"><a href="#1-5-redo-log的刷盘策略" class="headerlink" title="1.5 redo log的刷盘策略"></a>1.5 redo log的刷盘策略</h3><p>redo log的写入并不是直接写入磁盘的，InnoDB引擎会在写redo log的时候先写redo log buffer，之后以<code>一 定的频率</code>刷入到真正的redo log file 中。这里的一定频率怎么看待呢？这就是我们要说的刷盘策略。</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220710205015302.png" alt="image-20220710205015302"></p><p>注意，redo log buffer刷盘到redo log file的过程并不是真正的刷到磁盘中去，只是刷入到 <code>文件系统缓存 （page cache）</code>中去（这是现代操作系统为了提高文件写入效率做的一个优化），真正的写入会交给系统自己来决定（比如page cache足够大了）。那么对于InnoDB来说就存在一个问题，如果交给系统来同 步，同样如果系统宕机，那么数据也丢失了（虽然整个系统宕机的概率还是比较小的）。</p><p>针对这种情况，InnoDB给出 <code>innodb_flush_log_at_trx_commit</code> 参数，该参数控制 commit提交事务 时，如何将 redo log buffer 中的日志刷新到 redo log file 中。它支持三种策略：</p><ul><li><code>设置为0</code> ：表示每次事务提交时不进行刷盘操作。（系统默认master thread每隔1s进行一次重做日 志的同步） 第1步：先将原始数据从磁盘中读入内存中来，修改数据的内存拷贝 第2步：生成一条重做日志并写入redo log buffer，记录的是数据被修改后的值 第3步：当事务commit时，将redo log buffer中的内容刷新到 redo log file，对 redo log file采用追加 写的方式 第4步：定期将内存中修改的数据刷新到磁盘中 </li><li><code>设置为1</code> ：表示每次事务提交时都将进行同步，刷盘操作（ 默认值 ） </li><li><code>设置为2</code> ：表示每次事务提交时都只把 redo log buffer 内容写入 page cache，不进行同步。由os自 己决定什么时候同步到磁盘文件。</li></ul><img src="../pic/MySQL事务篇/image-20220710205948156.png" alt="image-20220710205948156" style="float:left;" /><p>另外，InnoDB存储引擎有一个后台线程，每隔<code>1秒</code>，就会把<code>redo log buffer</code>中的内容写到文件系统缓存(<code>page cache</code>)，然后调用刷盘操作。</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220710210339724.png" alt="image-20220710210339724"></p><p>也就是说，一个没有提交事务的<code>redo log</code>记录，也可能会刷盘。因为在事务执行过程 redo log 记录是会写入 <code>redo log buffer</code>中，这些redo log 记录会被<code>后台线程</code>刷盘。</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220710210532805.png" alt="image-20220710210532805"></p><p>除了后台线程每秒<code>1次</code>的轮询操作，还有一种情况，当<code>redo log buffer</code>占用的空间即将达到<code>innodb_log_buffer_size</code>（这个参数默认是16M）的一半的时候，后台线程会主动刷盘。</p><h3 id="1-6-不同刷盘策略演示"><a href="#1-6-不同刷盘策略演示" class="headerlink" title="1.6 不同刷盘策略演示"></a>1.6 不同刷盘策略演示</h3><h4 id="1-流程图"><a href="#1-流程图" class="headerlink" title="1. 流程图"></a>1. 流程图</h4><img src="../pic/MySQL事务篇/image-20220710210751414.png" alt="image-20220710210751414" style="float:left;" /><img src="../pic/MySQL事务篇/image-20220710211318120.png" alt="image-20220710211318120" style="float:left;" /><img src="../pic/MySQL事务篇/image-20220710211335379.png" alt="image-20220710211335379" style="float:left;" /><img src="../pic/MySQL事务篇/image-20220710211618789.png" alt="image-20220710211618789" style="float:left;" /><img src="../pic/MySQL事务篇/image-20220710211831675.png" alt="image-20220710211831675" style="float:left;" /><img src="../pic/MySQL事务篇/image-20220710212041563.png" alt="image-20220710212041563" style="float:left;" /><h4 id="2-举例"><a href="#2-举例" class="headerlink" title="2. 举例"></a>2. 举例</h4><p>比较innodb_flush_log_at_trx_commit对事务的影响。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE test_load(a INT,b CHAR(80))ENGINE&#x3D;INNODB;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER&#x2F;&#x2F;CREATE PROCEDURE p_load(COUNT INT UNSIGNED)BEGINDECLARE s INT UNSIGNED DEFAULT 1;DECLARE c CHAR(80) DEFAULT REPEAT(&#39;a&#39;,80);WHILE s&lt;&#x3D;COUNT DOINSERT INTO test_load SELECT NULL, c;COMMIT;SET s&#x3D;s+1;END WHILE;END &#x2F;&#x2F;DELIMITER;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="../pic/MySQL事务篇/image-20220710215001482.png" alt="image-20220710215001482" style="float:left;" /><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; CALL p_load(30000);Query OK, 0 rows affected(1 min 23 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>1 min 23 sec</code>的时间显然是不能接受的。而造成时间比较长的原因就在于fsync操作所需要的时间。</p><p>修改参数innodb_flush_log_at_trx_commit，设置为0：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; set global innodb_flush_log_at_trx_commit &#x3D; 0;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; CALL p_load(30000);Query OK, 0 rows affected(38 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改参数innodb_flush_log_at_trx_commit，设置为2：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; set global innodb_flush_log_at_trx_commit &#x3D; 2;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; CALL p_load(30000);Query OK, 0 rows affected(46 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="../pic/MySQL事务篇/image-20220710215353893.png" alt="image-20220710215353893" style="float:left;" /><h3 id="1-7-写入redo-log-buffer-过程"><a href="#1-7-写入redo-log-buffer-过程" class="headerlink" title="1.7 写入redo log buffer 过程"></a>1.7 写入redo log buffer 过程</h3><h4 id="1-补充概念：Mini-Transaction"><a href="#1-补充概念：Mini-Transaction" class="headerlink" title="1. 补充概念：Mini-Transaction"></a>1. 补充概念：Mini-Transaction</h4><p>MySQL把对底层页面中的一次原子访问过程称之为一个<code>Mini-Transaction</code>，简称<code>mtr</code>，比如，向某个索引对应的B+树中插入一条记录的过程就是一个<code>Mini-Transaction</code>。一个所谓的<code>mtr</code>可以包含一组redo日志，在进行崩溃恢复时这一组<code>redo</code>日志可以作为一个不可分割的整体。</p><p>一个事务可以包含若干条语句，每一条语句其实是由若干个 <code>mtr</code> 组成，每一个 <code>mtr</code> 又可以包含若干条 redo日志，画个图表示它们的关系就是这样：</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220710220653131.png" alt="image-20220710220653131"></p><h4 id="2-redo-日志写入log-buffer"><a href="#2-redo-日志写入log-buffer" class="headerlink" title="2. redo 日志写入log buffer"></a>2. redo 日志写入log buffer</h4><img src="../pic/MySQL事务篇/image-20220710220838744.png" alt="image-20220710220838744" style="float:left;" /><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220710220919271.png" alt="image-20220710220919271"></p><img src="../pic/MySQL事务篇/image-20220710221221981.png" alt="image-20220710221221981" style="float:left;" /><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220710221318271.png" alt="image-20220710221318271"></p><p>不同的事务可能是 <code>并发</code> 执行的，所以 T1 、 T2 之间的 mtr 可能是 <code>交替执行</code> 的。没当一个mtr执行完成时，伴随该mtr生成的一组redo日志就需要被复制到log buffer中，也就是说不同事务的mtr可能是交替写入log buffer的，我们画个示意图（为了美观，我们把一个mtr中产生的所有redo日志当做一个整体来画）：</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220710221620291.png" alt="image-20220710221620291"></p><p>有的mtr产生的redo日志量非常大，比如<code>mtr_t1_2</code>产生的redo日志占用空间比较大，占用了3个block来存储。</p><h4 id="3-redo-log-block的结构图"><a href="#3-redo-log-block的结构图" class="headerlink" title="3. redo log block的结构图"></a>3. redo log block的结构图</h4><p>一个redo log block是由<code>日志头、日志体、日志尾</code>组成。日志头占用12字节，日志尾占用8字节，所以一个block真正能存储的数据是512-12-8&#x3D;492字节。</p><img src="../pic/MySQL事务篇/image-20220710223117420.png" alt="image-20220710223117420" style="float:left;" /><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220710223135374.png" alt="image-20220710223135374"></p><p>真正的redo日志都是存储到占用<code>496</code>字节大小的<code>log block body</code>中，图中的<code>log block header</code>和<code>log block trailer</code>存储的是一些管理信息。我们来看看这些所谓<code>管理信息</code>都有什么。</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220711144546439.png" alt="image-20220711144546439"></p><img src="../pic/MySQL事务篇/image-20220711144608223.png" alt="image-20220711144608223" style="float:left;" /><h3 id="1-8-redo-log-file"><a href="#1-8-redo-log-file" class="headerlink" title="1.8 redo log file"></a>1.8 redo log file</h3><h4 id="1-相关参数设置"><a href="#1-相关参数设置" class="headerlink" title="1. 相关参数设置"></a>1. 相关参数设置</h4><ul><li><p><code>innodb_log_group_home_dir</code> ：指定 redo log 文件组所在的路径，默认值为 <code>./</code> ，表示在数据库 的数据目录下。MySQL的默认数据目录（ <code>var/lib/mysql</code>）下默认有两个名为 <code>ib_logfile0</code> 和 <code>ib_logfile1</code> 的文件，log buffer中的日志默认情况下就是刷新到这两个磁盘文件中。此redo日志 文件位置还可以修改。</p></li><li><p><code>innodb_log_files_in_group</code>：指明redo log file的个数，命名方式如：ib_logfile0，iblogfile1… iblogfilen。默认2个，最大100个。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show variables like &#39;innodb_log_files_in_group&#39;;+---------------------------+-------+| Variable_name             | Value |+---------------------------+-------+| innodb_log_files_in_group | 2     |+---------------------------+-------+#ib_logfile0#ib_logfile1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>innodb_flush_log_at_trx_commit</code>：控制 redo log 刷新到磁盘的策略，默认为1。</p></li><li><p><code>innodb_log_file_size</code>：单个 redo log 文件设置大小，默认值为 <code>48M</code> 。最大值为512G，注意最大值 指的是整个 redo log 系列文件之和，即（innodb_log_files_in_group * innodb_log_file_size ）不能大 于最大值512G。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show variables like &#39;innodb_log_file_size&#39;;+----------------------+----------+| Variable_name        | Value    |+----------------------+----------+| innodb_log_file_size | 50331648 |+----------------------+----------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>根据业务修改其大小，以便容纳较大的事务。编辑my.cnf文件并重启数据库生效，如下所示</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">[root@localhost ~]# vim &#x2F;etc&#x2F;my.cnfinnodb_log_file_size&#x3D;200M<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>在数据库实例更新比较频繁的情况下，可以适当加大 redo log 数组和大小。但也不推荐 redo log 设置过大，在MySQL崩溃时会重新执行REDO日志中的记录。</p></blockquote><h4 id="2-日志文件组"><a href="#2-日志文件组" class="headerlink" title="2. 日志文件组"></a>2. 日志文件组</h4><img src="../pic/MySQL事务篇/image-20220711152137012.png" alt="image-20220711152137012" style="float:left;" /><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220711152242300.png" alt="image-20220711152242300"></p><p>总共的redo日志文件大小其实就是： <code>innodb_log_file_size × innodb_log_files_in_group</code> 。</p><p>采用循环使用的方式向redo日志文件组里写数据的话，会导致后写入的redo日志覆盖掉前边写的redo日志？当然！所以InnoDB的设计者提出了checkpoint的概念。</p><h4 id="3-checkpoint"><a href="#3-checkpoint" class="headerlink" title="3. checkpoint"></a>3. checkpoint</h4><p>在整个日志文件组中还有两个重要的属性，分别是 write pos、checkpoint</p><ul><li><code>write pos</code>是当前记录的位置，一边写一边后移</li><li><code>checkpoint</code>是当前要擦除的位置，也是往后推移</li></ul><p>每次刷盘 redo log 记录到日志文件组中，write pos 位置就会后移更新。每次MySQL加载日志文件组恢复数据时，会清空加载过的 redo log 记录，并把check point后移更新。write pos 和 checkpoint 之间的还空着的部分可以用来写入新的 redo log 记录。</p><img src="../pic/MySQL事务篇/image-20220711152631108.png" alt="image-20220711152631108" style="zoom:80%;" /><p>如果 write pos 追上 checkpoint ，表示<code>日志文件组</code>满了，这时候不能再写入新的 redo log记录，MySQL 得 停下来，清空一些记录，把 checkpoint 推进一下。</p><img src="../pic/MySQL事务篇/image-20220711152802294.png" alt="image-20220711152802294" style="zoom:80%;" /><h3 id="1-9-redo-log-小结"><a href="#1-9-redo-log-小结" class="headerlink" title="1.9 redo log 小结"></a>1.9 redo log 小结</h3><img src="../pic/MySQL事务篇/image-20220711152930911.png" alt="image-20220711152930911" style="float:left;" /><h2 id="2-Undo日志"><a href="#2-Undo日志" class="headerlink" title="2. Undo日志"></a>2. Undo日志</h2><p>redo log是事务持久性的保证，undo log是事务原子性的保证。在事务中 <code>更新数据</code> 的 <code>前置操作</code> 其实是要先写入一个 <code>undo log</code> 。</p><h3 id="2-1-如何理解Undo日志"><a href="#2-1-如何理解Undo日志" class="headerlink" title="2.1 如何理解Undo日志"></a>2.1 如何理解Undo日志</h3><p>事务需要保证 <code>原子性 </code>，也就是事务中的操作要么全部完成，要么什么也不做。但有时候事务执行到一半会出现一些情况，比如：</p><ul><li>情况一：事务执行过程中可能遇到各种错误，比如<code> 服务器本身的错误</code> ， <code>操作系统错误</code> ，甚至是突然 <code>断电</code> 导致的错误。</li><li>情况二：程序员可以在事务执行过程中手动输入 <code>ROLLBACK</code> 语句结束当前事务的执行。</li></ul><p>以上情况出现，我们需要把数据改回原先的样子，这个过程称之为 <code>回滚</code> ，这样就可以造成一个假象：这 个事务看起来什么都没做，所以符合 <code>原子性</code> 要求。</p><img src="../pic/MySQL事务篇/image-20220711153523704.png" alt="image-20220711153523704" style="float:left;" /><h3 id="2-2-Undo日志的作用"><a href="#2-2-Undo日志的作用" class="headerlink" title="2.2 Undo日志的作用"></a>2.2 Undo日志的作用</h3><ul><li><strong>作用1：回滚数据</strong></li></ul><img src="../pic/MySQL事务篇/image-20220711153645204.png" alt="image-20220711153645204" style="float:left;" /><ul><li><strong>作用2：MVCC</strong></li></ul><p>undo的另一个作用是MVCC，即在InnoDB存储引擎中MVCC的实现是通过undo来完成。当用户读取一行记录时，若该记录以及被其他事务占用，当前事务可以通过undo读取之前的行版本信息，以此实现非锁定读取。</p><h3 id="2-3-undo的存储结构"><a href="#2-3-undo的存储结构" class="headerlink" title="2.3 undo的存储结构"></a>2.3 undo的存储结构</h3><h4 id="1-回滚段与undo页"><a href="#1-回滚段与undo页" class="headerlink" title="1. 回滚段与undo页"></a>1. 回滚段与undo页</h4><p>InnoDB对undo log的管理采用段的方式，也就是 <code>回滚段（rollback segment）</code> 。每个回滚段记录了 <code>1024</code> 个 <code>undo log segment</code> ，而在每个undo log segment段中进行 <code>undo页</code> 的申请。</p><ul><li>在<code> InnoDB1.1版本之前</code> （不包括1.1版本），只有一个rollback segment，因此支持同时在线的事务限制为 <code>1024</code> 。虽然对绝大多数的应用来说都已经够用。 </li><li>从1.1版本开始InnoDB支持最大 <code>128个rollback segment</code> ，故其支持同时在线的事务限制提高到 了 <code>128*1024</code> 。</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show variables like &#39;innodb_undo_logs&#39;;+------------------+-------+| Variable_name    | Value |+------------------+-------+| innodb_undo_logs | 128   |+------------------+-------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="../pic/MySQL事务篇/image-20220711154936382.png" alt="image-20220711154936382" style="float:left;" /><img src="../pic/MySQL事务篇/image-20220711155044078.png" alt="image-20220711155044078" style="float:left;" /><h4 id="2-回滚段与事务"><a href="#2-回滚段与事务" class="headerlink" title="2. 回滚段与事务"></a>2. 回滚段与事务</h4><ol><li><p>每个事务只会使用一个回滚段，一个回滚段在同一时刻可能会服务于多个事务。</p></li><li><p>当一个事务开始的时候，会制定一个回滚段，在事务进行的过程中，当数据被修改时，原始的数 据会被复制到回滚段。</p></li><li><p>在回滚段中，事务会不断填充盘区，直到事务结束或所有的空间被用完。如果当前的盘区不够 用，事务会在段中请求扩展下一个盘区，如果所有已分配的盘区都被用完，事务会覆盖最初的盘 区或者在回滚段允许的情况下扩展新的盘区来使用。</p></li><li><p>回滚段存在于undo表空间中，在数据库中可以存在多个undo表空间，但同一时刻只能使用一个 undo表空间。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show variables like &#39;innodb_undo_tablespaces&#39;;+-------------------------+-------+| Variable_name           | Value |+-------------------------+-------+| innodb_undo_tablespaces | 2     |+-------------------------+-------+# undo log的数量，最少为2. undo log的truncate操作有purge协调线程发起。在truncate某个undo log表空间的过程中，保证有一个可用的undo log可用。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当事务提交时，InnoDB存储引擎会做以下两件事情：</p><ul><li>将undo log放入列表中，以供之后的purge操作 </li><li>判断undo log所在的页是否可以重用，若可以分配给下个事务使用</li></ul></li></ol><h4 id="3-回滚段中的数据分类"><a href="#3-回滚段中的数据分类" class="headerlink" title="3. 回滚段中的数据分类"></a>3. 回滚段中的数据分类</h4><ol><li><code>未提交的回滚数据(uncommitted undo information)</code>：该数据所关联的事务并未提交，用于实现读一致性，所以该数据不能被其他事务的数据覆盖。</li><li><code>已经提交但未过期的回滚数据(committed undo information)</code>：该数据关联的事务已经提交，但是仍受到undo retention参数的保持时间的影响。</li><li><code>事务已经提交并过期的数据(expired undo information)</code>：事务已经提交，而且数据保存时间已经超过 undo retention参数指定的时间，属于已经过期的数据。当回滚段满了之后，就优先覆盖“事务已经提交并过期的数据”。</li></ol><p>事务提交后不能马上删除undo log及undo log所在的页。这是因为可能还有其他事务需要通过undo log来得到行记录之前的版本。故事务提交时将undo log放入一个链表中，是否可以最终删除undo log以undo log所在页由purge线程来判断。</p><h3 id="2-4-undo的类型"><a href="#2-4-undo的类型" class="headerlink" title="2.4 undo的类型"></a>2.4 undo的类型</h3><p>在InnoDB存储引擎中，undo log分为：</p><ul><li><p>insert undo log</p><p>insert undo log是指insert操作中产生的undo log。因为insert操作的记录，只对事务本身可见，对其他事务不可见（这是事务隔离性的要求），故该undo log可以在事务提交后直接删除。不需要进行purge操作。</p></li><li><p>update undo log</p><p>update undo log记录的是对delete和update操作产生的undo log。该undo log可能需要提供MVCC机制，因此不能在事务提交时就进行删除。提交时放入undo log链表，等待purge线程进行最后的删除。</p></li></ul><h3 id="2-5-undo-log的生命周期"><a href="#2-5-undo-log的生命周期" class="headerlink" title="2.5 undo log的生命周期"></a>2.5 undo log的生命周期</h3><h4 id="1-简要生成过程"><a href="#1-简要生成过程" class="headerlink" title="1. 简要生成过程"></a>1. 简要生成过程</h4><p>以下是undo+redo事务的简化过程</p><p>假设有两个数值，分别为A&#x3D;1和B&#x3D;2，然后将A修改为3，B修改为4</p><img src="../pic/MySQL事务篇/image-20220711162414928.png" alt="image-20220711162414928" style="float:left;" /><p><strong>只有Buffer Pool的流程：</strong></p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220711162505008.png" alt="image-20220711162505008"></p><p><strong>有了Redo Log和Undo Log之后：</strong></p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220711162642305.png" alt="image-20220711162642305"></p><p>在更新Buffer Pool中的数据之前，我们需要先将该数据事务开始之前的状态写入Undo Log中。假设更新到一半出错了，我们就可以通过Undo Log来回滚到事务开始前。</p><h4 id="2-详细生成过程"><a href="#2-详细生成过程" class="headerlink" title="2. 详细生成过程"></a>2. 详细生成过程</h4><img src="../pic/MySQL事务篇/image-20220711162919157.png" alt="image-20220711162919157" style="float:left;" /><p><strong>当我们执行INSERT时：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">begin;INSERT INTO user (name) VALUES (&quot;tom&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>插入的数据都会生成一条insert undo log，并且数据的回滚指针会指向它。undo log会记录undo log的序号、插入主键的列和值…，那么在进行rollback的时候，通过主键直接把对应的数据删除即可。</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220711163725129.png" alt="image-20220711163725129"></p><p><strong>当我们执行UPDATE时：</strong></p><p>对应更新的操作会产生update undo log，并且会分更新主键和不更新主键的，假设现在执行：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">UPDATE user SET name&#x3D;&quot;Sun&quot; WHERE id&#x3D;1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220711164138414.png" alt="image-20220711164138414"></p><p>这时会把老的记录写入新的undo log，让回滚指针指向新的undo log，它的undo no是1，并且新的undo log会指向老的undo log（undo no&#x3D;0）。</p><p>假设现在执行：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">UPDATE user SET id&#x3D;2 WHERE id&#x3D;1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220711164421494.png" alt="image-20220711164421494"></p><p>对于更新主键的操作，会先把原来的数据deletemark标识打开，这时并没有真正的删除数据，真正的删除会交给清理线程去判断，然后在后面插入一条新的数据，新的数据也会产生undo log，并且undo log的序号会递增。</p><p>可以发现每次对数据的变更都会产生一个undo log，当一条记录被变更多次时，那么就会产生多条undo log，undo log记录的是变更前的日志，并且每个undo log的序号是递增的，那么当要回滚的时候，按照序号<code>依次向前推</code>，就可以找到我们的原始数据了。</p><h4 id="3-undo-log是如何回滚的"><a href="#3-undo-log是如何回滚的" class="headerlink" title="3. undo log是如何回滚的"></a>3. undo log是如何回滚的</h4><p>以上面的例子来说，假设执行rollback，那么对应的流程应该是这样：</p><ol><li>通过undo no&#x3D;3的日志把id&#x3D;2的数据删除 </li><li>通过undo no&#x3D;2的日志把id&#x3D;1的数据的deletemark还原成0 </li><li>通过undo no&#x3D;1的日志把id&#x3D;1的数据的name还原成Tom </li><li>通过undo no&#x3D;0的日志把id&#x3D;1的数据删除</li></ol><h4 id="4-undo-log的删除"><a href="#4-undo-log的删除" class="headerlink" title="4. undo log的删除"></a>4. undo log的删除</h4><ul><li><p>针对于insert undo log</p><p>因为insert操作的记录，只对事务本身可见，对其他事务不可见。故该undo log可以在事务提交后直接删除，不需要进行purge操作。</p></li><li><p>针对于update undo log</p><p>该undo log可能需要提供MVCC机制，因此不能在事务提交时就进行删除。提交时放入undo log链表，等待purge线程进行最后的删除。</p></li></ul><blockquote><p>补充：</p><p>purge线程两个主要作用是：<code>清理undo页</code>和<code>清理page里面带有Delete_Bit标识的数据行</code>。在InnoDB中，事务中的Delete操作实际上并不是真正的删除掉数据行，而是一种Delete Mark操作，在记录上标识Delete_Bit，而不删除记录。是一种“假删除”，只是做了个标记，真正的删除工作需要后台purge线程去完成。</p></blockquote><h3 id="2-6-小结"><a href="#2-6-小结" class="headerlink" title="2.6 小结"></a>2.6 小结</h3><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220711165612956.png" alt="image-20220711165612956"></p><p>undo log是逻辑日志，对事务回滚时，只是将数据库逻辑地恢复到原来的样子。</p><p>redo log是物理日志，记录的是数据页的物理变化，undo log不是redo log的逆过程。</p><h1 id="第15章-锁"><a href="#第15章-锁" class="headerlink" title="第15章_锁"></a>第15章_锁</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><img src="../pic/MySQL事务篇/image-20220711165954976.png" alt="image-20220711165954976" style="float:left;" /><p>在数据库中，除传统的计算资源（如CPU、RAM、I&#x2F;O等）的争用以外，数据也是一种供许多用户共享的 资源。为保证数据的一致性，需要对 <code>并发操作进行控制</code> ，因此产生了 <code>锁</code> 。同时 <code>锁机制</code> 也为实现MySQL 的各个隔离级别提供了保证。 <code>锁冲突</code> 也是影响数据库 <code>并发访问性能</code> 的一个重要因素。所以锁对数据库而言显得尤其重要，也更加复杂。</p><h2 id="2-MySQL并发事务访问相同记录"><a href="#2-MySQL并发事务访问相同记录" class="headerlink" title="2. MySQL并发事务访问相同记录"></a>2. MySQL并发事务访问相同记录</h2><p>并发事务访问相同记录的情况大致可以划分为3种：</p><h3 id="2-1-读-读情况"><a href="#2-1-读-读情况" class="headerlink" title="2.1 读-读情况"></a>2.1 读-读情况</h3><p><code>读-读</code>情况，即并发事务相继<code>读取相同的记录</code>。读取操作本身不会对记录有任何影响，并不会引起什么问题，所以允许这种情况的发生。</p><h3 id="2-2-写-写情况"><a href="#2-2-写-写情况" class="headerlink" title="2.2 写-写情况"></a>2.2 写-写情况</h3><p><code>写-写</code> 情况，即并发事务相继对相同的记录做出改动。</p><p>在这种情况下会发生 <code>脏写</code> 的问题，任何一种隔离级别都不允许这种问题的发生。所以在多个未提交事务相继对一条记录做改动时，需要让它们 <code>排队执行</code> ，这个排队的过程其实是通过 <code>锁</code> 来实现的。这个所谓的锁其实是一个内存中的结构 ，在事务执行前本来是没有锁的，也就是说一开始是没有 锁结构 和记录进 行关联的，如图所示：</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220711181120639.png" alt="image-20220711181120639"></p><p>当一个事务想对这条记录做改动时，首先会看看内存中有没有与这条记录关联的 <code>锁结构</code> ，当没有的时候 就会在内存中生成一个 <code>锁结构</code> 与之关联。比如，事务<code> T1</code> 要对这条记录做改动，就需要生成一个 <code>锁结构</code> 与之关联：</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220711192633239.png" alt="image-20220711192633239"></p><p>在<code>锁结构</code>里有很多信息，为了简化理解，只把两个比较重要的属性拿了出来：</p><ul><li><code>trx信息</code>：代表这个锁结构是哪个事务生成的。</li><li><code>is_waiting</code>：代表当前事务是否在等待。</li></ul><p>在事务<code>T1</code>改动了这条记录后，就生成了一个<code>锁结构</code>与该记录关联，因为之前没有别的事务为这条记录加锁，所以<code>is_waiting</code>属性就是<code>false</code>，我们把这个场景就称值为<code>获取锁成功</code>，或者<code>加锁成功</code>，然后就可以继续执行操作了。</p><p>在事务<code>T1</code>提交之前，另一个事务<code>T2</code>也想对该记录做改动，那么先看看有没有<code>锁结构</code>与这条记录关联，发现有一个<code>锁结构</code>与之关联后，然后也生成了一个锁结构与这条记录关联，不过锁结构的<code>is_waiting</code>属性值为<code>true</code>，表示当前事务需要等待，我们把这个场景就称之为<code>获取锁失败</code>，或者<code>加锁失败</code>，图示：</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220711193732567.png" alt="image-20220711193732567"></p><p>在事务T1提交之后，就会把该事务生成的<code>锁结构释放</code>掉，然后看看还有没有别的事务在等待获取锁，发现了事务T2还在等待获取锁，所以把事务T2对应的锁结构的<code>is_waiting</code>属性设置为<code>false</code>，然后把该事务对应的线程唤醒，让它继续执行，此时事务T2就算获取到锁了。效果就是这样。</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220711194904328.png" alt="image-20220711194904328"></p><p>小结几种说法：</p><ul><li><p>不加锁</p><p>意思就是不需要在内存中生成对应的 <code>锁结构</code> ，可以直接执行操作。</p></li><li><p>获取锁成功，或者加锁成功</p><p>意思就是在内存中生成了对应的 <code>锁结构</code> ，而且锁结构的 <code>is_waiting</code> 属性为 <code>false</code> ，也就是事务 可以继续执行操作。</p></li><li><p>获取锁失败，或者加锁失败，或者没有获取到锁</p><p>意思就是在内存中生成了对应的 <code>锁结构</code> ，不过锁结构的 <code>is_waiting</code> 属性为 <code>true</code> ，也就是事务 需要等待，不可以继续执行操作。</p></li></ul><h3 id="2-3-读-写或写-读情况"><a href="#2-3-读-写或写-读情况" class="headerlink" title="2.3 读-写或写-读情况"></a>2.3 读-写或写-读情况</h3><p><code>读-写</code> 或 <code>写-读 </code>，即一个事务进行读取操作，另一个进行改动操作。这种情况下可能发生 <code>脏读 、 不可重 复读 、 幻读</code> 的问题。</p><p>各个数据库厂商对 <code>SQL标准</code> 的支持都可能不一样。比如MySQL在 <code>REPEATABLE READ</code> 隔离级别上就已经解决了 <code>幻读</code> 问题。</p><h3 id="2-4-并发问题的解决方案"><a href="#2-4-并发问题的解决方案" class="headerlink" title="2.4 并发问题的解决方案"></a>2.4 并发问题的解决方案</h3><p>怎么解决 <code>脏读 、 不可重复读 、 幻读</code> 这些问题呢？其实有两种可选的解决方案：</p><ul><li>方案一：读操作利用多版本并发控制（ <code>MVCC</code> ，下章讲解），写操作进行 <code>加锁</code> 。</li></ul><img src="../pic/MySQL事务篇/image-20220711202206405.png" alt="image-20220711202206405" style="float:left;" /><blockquote><p>普通的SELECT语句在READ COMMITTED和REPEATABLE READ隔离级别下会使用到MVCC读取记录。</p><ul><li>在 <code>READ COMMITTED</code> 隔离级别下，一个事务在执行过程中每次执行SELECT操作时都会生成一 个ReadView，ReadView的存在本身就保证了<code>事务不可以读取到未提交的事务所做的更改</code> ，也就是避免了脏读现象；</li><li>在 <code>REPEATABLE READ</code> 隔离级别下，一个事务在执行过程中只有 <code>第一次执行SELECT操作</code> 才会生成一个ReadView，之后的SELECT操作都 <code>复用</code> 这个ReadView，这样也就避免了不可重复读和幻读的问题。</li></ul></blockquote><ul><li>方案二：读、写操作都采用 <code>加锁</code> 的方式。</li></ul><img src="../pic/MySQL事务篇/image-20220711203250284.png" alt="image-20220711203250284" style="float:left;" /><ul><li><p>小结对比发现：</p><ul><li>采用 <code>MVCC</code> 方式的话， 读-写 操作彼此并不冲突， 性能更高 。</li><li>采用 <code>加锁</code> 方式的话， 读-写 操作彼此需要 <code>排队执行</code> ，影响性能。</li></ul><p>一般情况下我们当然愿意采用 <code>MVCC</code> 来解决 <code>读-写</code> 操作并发执行的问题，但是业务在某些特殊情况下，要求必须采用 <code>加锁 </code>的方式执行。下面就讲解下MySQL中不同类别的锁。</p></li></ul><h2 id="3-锁的不同角度分类"><a href="#3-锁的不同角度分类" class="headerlink" title="3. 锁的不同角度分类"></a>3. 锁的不同角度分类</h2><p>锁的分类图，如下：</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220711203519162.png" alt="image-20220711203519162"></p><h3 id="3-1-从数据操作的类型划分：读锁、写锁"><a href="#3-1-从数据操作的类型划分：读锁、写锁" class="headerlink" title="3.1 从数据操作的类型划分：读锁、写锁"></a>3.1 从数据操作的类型划分：读锁、写锁</h3><img src="../pic/MySQL事务篇/image-20220711203723941.png" alt="image-20220711203723941" style="float:left;" /><ul><li><code>读锁</code> ：也称为 <code>共享锁</code> 、英文用 S 表示。针对同一份数据，多个事务的读操作可以同时进行而不会互相影响，相互不阻塞的。</li><li><code>写锁</code> ：也称为 <code>排他锁</code> 、英文用 X 表示。当前写操作没有完成前，它会阻断其他写锁和读锁。这样 就能确保在给定的时间里，只有一个事务能执行写入，并防止其他用户读取正在写入的同一资源。</li></ul><p><strong>需要注意的是对于 InnoDB 引擎来说，读锁和写锁可以加在表上，也可以加在行上。</strong></p><img src="../pic/MySQL事务篇/image-20220711204843684.png" alt="image-20220711204843684" style="float:left;" /><h4 id="1-锁定读"><a href="#1-锁定读" class="headerlink" title="1. 锁定读"></a>1. 锁定读</h4><img src="../pic/MySQL事务篇/image-20220711212931912.png" alt="image-20220711212931912" style="float:left;" /><img src="../pic/MySQL事务篇/image-20220711213741630.png" alt="image-20220711213741630" style="float:left;" /><img src="../pic/MySQL事务篇/image-20220711214013208.png" alt="image-20220711214013208" style="float:left;" /><h4 id="2-写操作"><a href="#2-写操作" class="headerlink" title="2. 写操作"></a>2. 写操作</h4><img src="../pic/MySQL事务篇/image-20220711214412163.png" alt="image-20220711214412163" style="float:left;" /><h3 id="3-2-从数据操作的粒度划分：表级锁、页级锁、行锁"><a href="#3-2-从数据操作的粒度划分：表级锁、页级锁、行锁" class="headerlink" title="3.2 从数据操作的粒度划分：表级锁、页级锁、行锁"></a>3.2 从数据操作的粒度划分：表级锁、页级锁、行锁</h3><img src="../pic/MySQL事务篇/image-20220711214719510.png" alt="image-20220711214719510" style="float:left;" /><h4 id="1-表锁（Table-Lock）"><a href="#1-表锁（Table-Lock）" class="headerlink" title="1. 表锁（Table Lock）"></a>1. 表锁（Table Lock）</h4><img src="../pic/MySQL事务篇/image-20220711214805088.png" alt="image-20220711214805088" style="float:left;" /><h5 id="①-表级别的S锁、X锁"><a href="#①-表级别的S锁、X锁" class="headerlink" title="① 表级别的S锁、X锁"></a>① 表级别的S锁、X锁</h5><p>在对某个表执行SELECT、INSERT、DELETE、UPDATE语句时，InnoDB存储引擎是不会为这个表添加表级别的 <code>S锁</code> 或者 <code>X锁</code> 的。在对某个表执行一些诸如 <code>ALTER TABLE 、 DROP TABLE</code> 这类的 DDL 语句时，其 他事务对这个表并发执行诸如SELECT、INSERT、DELETE、UPDATE的语句会发生阻塞。同理，某个事务中对某个表执行SELECT、INSERT、DELETE、UPDATE语句时，在其他会话中对这个表执行 <code>DDL</code> 语句也会 发生阻塞。这个过程其实是通过在 server层使用一种称之为 <code>元数据锁</code> （英文名： Metadata Locks ， 简称 MDL ）结构来实现的。</p><p>一般情况下，不会使用InnoDB存储引擎提供的表级别的 <code>S锁</code> 和 <code>X锁</code> 。只会在一些特殊情况下，比方说 <code>崩溃恢复</code> 过程中用到。比如，在系统变量 <code>autocommit=0，innodb_table_locks = 1</code> 时， 手动 获取 InnoDB存储引擎提供的表t 的 <code>S锁</code> 或者 <code>X锁</code> 可以这么写：</p><ul><li><p><code>LOCK TABLES t READ</code> ：InnoDB存储引擎会对表 t 加表级别的 <code>S锁 </code>。</p></li><li><p><code>LOCK TABLES t WRITE</code> ：InnoDB存储引擎会对表 t 加表级别的 <code>X锁</code> 。</p></li></ul><p>不过尽量避免在使用InnoDB存储引擎的表上使用 <code>LOCK TABLES</code> 这样的手动锁表语句，它们并不会提供 什么额外的保护，只是会降低并发能力而已。InnoDB的厉害之处还是实现了更细粒度的 <code>行锁</code> ，关于 InnoDB表级别的 <code>S锁</code> 和<code> X锁</code> 大家了解一下就可以了。</p><p><strong>举例：</strong>下面我们讲解MyISAM引擎下的表锁。</p><p>步骤1：创建表并添加数据</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE mylock(id INT NOT NULL PRIMARY KEY auto_increment,NAME VARCHAR(20))ENGINE myisam;# 插入一条数据INSERT INTO mylock(NAME) VALUES(&#39;a&#39;);# 查询表中所有数据SELECT * FROM mylock;+----+------+| id | Name |+----+------+| 1  | a    |+----+------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>步骤二：查看表上加过的锁</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW OPEN TABLES; # 主要关注In_use字段的值或者SHOW OPEN TABLES where In_use &gt; 0;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="../pic/MySQL事务篇/image-20220711220342251.png" alt="image-20220711220342251" style="float:left;" /><p>或者</p><img src="../pic/MySQL事务篇/image-20220711220418859.png" alt="image-20220711220418859" style="float:left;" /><p>上面的结果表明，当前数据库中没有被锁定的表</p><p>步骤3：手动增加表锁命令</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">LOCK TABLES t READ; # 存储引擎会对表t加表级别的共享锁。共享锁也叫读锁或S锁（Share的缩写）LOCK TABLES t WRITE; # 存储引擎会对表t加表级别的排他锁。排他锁也叫独占锁、写锁或X锁（exclusive的缩写）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>比如：</p><img src="../pic/MySQL事务篇/image-20220711220442269.png" alt="image-20220711220442269" style="float:left;" /><p>步骤4：释放表锁</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">UNLOCK TABLES; # 使用此命令解锁当前加锁的表<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>比如：</p><img src="../pic/MySQL事务篇/image-20220711220502141.png" alt="image-20220711220502141" style="float:left;" /><p>步骤5：加读锁</p><p>我们为mylock表加read锁（读阻塞写），观察阻塞的情况，流程如下：</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220711220553225.png" alt="image-20220711220553225"></p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220711220616537.png" alt="image-20220711220616537"></p><p>步骤6：加写锁</p><p>为mylock表加write锁，观察阻塞的情况，流程如下：</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220711220711630.png" alt="image-20220711220711630"></p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220711220730112.png" alt="image-20220711220730112"></p><p>总结：</p><p>MyISAM在执行查询语句（SELECT）前，会给涉及的所有表加读锁，在执行增删改操作前，会给涉及的表加写锁。InnoDB存储引擎是不会为这个表添加表级别的读锁和写锁的。</p><p>MySQL的表级锁有两种模式：（以MyISAM表进行操作的演示）</p><ul><li><p>表共享读锁（Table Read Lock）</p></li><li><p>表独占写锁（Table Write Lock）</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220711220929248.png" alt="image-20220711220929248"></p></li></ul><h5 id="②-意向锁-（intention-lock）"><a href="#②-意向锁-（intention-lock）" class="headerlink" title="② 意向锁 （intention lock）"></a>② 意向锁 （intention lock）</h5><p>InnoDB 支持 <code>多粒度锁（multiple granularity locking）</code> ，它允许 <code>行级锁</code> 与 <code>表级锁</code> 共存，而<code>意向锁</code>就是其中的一种 <code>表锁</code> 。</p><ol><li>意向锁的存在是为了协调行锁和表锁的关系，支持多粒度（表锁和行锁）的锁并存。</li><li>意向锁是一种<code>不与行级锁冲突表级锁</code>，这一点非常重要。</li><li>表明“某个事务正在某些行持有了锁或该事务准备去持有锁”</li></ol><p>意向锁分为两种：</p><ul><li><p><strong>意向共享锁</strong>（intention shared lock, IS）：事务有意向对表中的某些行加<strong>共享锁</strong>（S锁）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 事务要获取某些行的 S 锁，必须先获得表的 IS 锁。SELECT column FROM table ... LOCK IN SHARE MODE;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>意向排他锁</strong>（intention exclusive lock, IX）：事务有意向对表中的某些行加<strong>排他锁</strong>（X锁）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 事务要获取某些行的 X 锁，必须先获得表的 IX 锁。SELECT column FROM table ... FOR UPDATE;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>即：意向锁是由存储引擎 <code>自己维护的</code> ，用户无法手动操作意向锁，在为数据行加共享 &#x2F; 排他锁之前， InooDB 会先获取该数据行 <code>所在数据表的对应意向锁</code> 。</p><p><strong>1. 意向锁要解决的问题</strong></p><img src="../pic/MySQL事务篇/image-20220711222132300.png" alt="image-20220711222132300" style="float:left;" /><p><strong>举例：</strong>创建表teacher,插入6条数据，事务的隔离级别默认为<code>Repeatable-Read</code>，如下所示。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE &#96;teacher&#96; (&#96;id&#96; int NOT NULL,    &#96;name&#96; varchar(255) NOT NULL,    PRIMARY KEY (&#96;id&#96;))ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci;INSERT INTO &#96;teacher&#96; VALUES(&#39;1&#39;, &#39;zhangsan&#39;),(&#39;2&#39;, &#39;lisi&#39;),(&#39;3&#39;, &#39;wangwu&#39;),(&#39;4&#39;, &#39;zhaoliu&#39;),(&#39;5&#39;, &#39;songhongkang&#39;),(&#39;6&#39;, &#39;leifengyang&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT @@transaction_isolation;+-------------------------+| @@transaction_isolation |+-------------------------+| REPEATABLE-READ         |+-------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假设事务A获取了某一行的排他锁，并未提交，语句如下所示:</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">BEGIN;SELECT * FROM teacher WHERE id &#x3D; 6 FOR UPDATE;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>事务B想要获取teacher表的表读锁，语句如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">BEGIN;LOCK TABLES teacher READ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="../pic/MySQL事务篇/image-20220712124209006.png" alt="image-20220712124209006" style="float:left;" /><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">BEGIN;SELECT * FROM teacher WHERE id &#x3D; 6 FOR UPDATE;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时teacher表存在两把锁：teacher表上的意向排他锁与id未6的数据行上的排他锁。事务B想要获取teacher表的共享锁。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">BEGIN;LOCK TABLES teacher READ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时事务B检测事务A持有teacher表的意向排他锁，就可以得知事务A必须持有该表中某些数据行的排他锁，那么事务B对teacher表的加锁请求就会被排斥（阻塞），而无需去检测表中的每一行数据是否存在排他锁。</p><p><strong>意向锁的并发性</strong></p><p>意向锁不会与行级的共享 &#x2F; 排他锁互斥！正因为如此，意向锁并不会影响到多个事务对不同数据行加排他锁时的并发性。（不然我们直接用普通的表锁就行了）</p><p>我们扩展一下上面 teacher表的例子来概括一下意向锁的作用（一条数据从被锁定到被释放的过程中，可 能存在多种不同锁，但是这里我们只着重表现意向锁）。</p><p>事务A先获得了某一行的排他锁，并未提交：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">BEGIN;SELECT * FROM teacher WHERE id &#x3D; 6 FOR UPDATE;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>事务A获取了teacher表上的意向排他锁。事务A获取了id为6的数据行上的排他锁。之后事务B想要获取teacher表上的共享锁。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">BEGIN;LOCK TABLES teacher READ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>事务B检测到事务A持有teacher表的意向排他锁。事务B对teacher表的加锁请求被阻塞（排斥）。最后事务C也想获取teacher表中某一行的排他锁。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">BEGIN;SELECT * FROM teacher WHERE id &#x3D; 5 FOR UPDATE;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>事务C申请teacher表的意向排他锁。事务C检测到事务A持有teacher表的意向排他锁。因为意向锁之间并不互斥，所以事务C获取到了teacher表的意向排他锁。因为id为5的数据行上不存在任何排他锁，最终事务C成功获取到了该数据行上的排他锁。</p><p><strong>从上面的案例可以得到如下结论：</strong></p><ol><li>InnoDB 支持 <code>多粒度锁</code> ，特定场景下，行级锁可以与表级锁共存。 </li><li>意向锁之间互不排斥，但除了 IS 与 S 兼容外， <code>意向锁会与 共享锁 / 排他锁 互斥</code> 。 </li><li>IX，IS是表级锁，不会和行级的X，S锁发生冲突。只会和表级的X，S发生冲突。 </li><li>意向锁在保证并发性的前提下，实现了 <code>行锁和表锁共存</code> 且 <code>满足事务隔离性</code> 的要求。</li></ol><h5 id="③-自增锁（AUTO-INC锁）"><a href="#③-自增锁（AUTO-INC锁）" class="headerlink" title="③ 自增锁（AUTO-INC锁）"></a>③ 自增锁（AUTO-INC锁）</h5><p>在使用MySQL过程中，我们可以为表的某个列添加 <code>AUTO_INCREMENT</code> 属性。举例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE &#96;teacher&#96; (&#96;id&#96; int NOT NULL AUTO_INCREMENT,&#96;name&#96; varchar(255) NOT NULL,PRIMARY KEY (&#96;id&#96;)) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于这个表的id字段声明了AUTO_INCREMENT，意味着在书写插入语句时不需要为其赋值，SQL语句修改 如下所示。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO &#96;teacher&#96; (name) VALUES (&#39;zhangsan&#39;), (&#39;lisi&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上边的插入语句并没有为id列显式赋值，所以系统会自动为它赋上递增的值，结果如下所示。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select * from teacher;+----+----------+| id | name     |+----+----------+| 1  | zhangsan || 2  | lisi     |+----+----------+2 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们看到的上面插入数据只是一种简单的插入模式，所有插入数据的方式总共分为三类，分别是 “ <code>Simple inserts</code> ”，“ <code>Bulk inserts</code> ”和“ <code>Mixed-mode inserts </code>”。</p><p><strong>1. “Simple inserts” （简单插入）</strong></p><p>可以 <code>预先确定要插入的行数</code> （当语句被初始处理时）的语句。包括没有嵌套子查询的单行和多行<code>INSERT...VALUES()</code>和 <code>REPLACE</code> 语句。比如我们上面举的例子就属于该类插入，已经确定要插入的行 数。</p><p><strong>2. “Bulk inserts” （批量插入）</strong></p><p><code>事先不知道要插入的行数</code> （和所需自动递增值的数量）的语句。比如 <code>INSERT ... SELECT</code> ， <code>REPLACE ... SELECT</code> 和 <code>LOAD DATA</code> 语句，但不包括纯INSERT。 InnoDB在每处理一行，为AUTO_INCREMENT列</p><p><strong>3. “Mixed-mode inserts” （混合模式插入）</strong></p><p>这些是“Simple inserts”语句但是指定部分新行的自动递增值。例如 <code>INSERT INTO teacher (id,name) VALUES (1,&#39;a&#39;), (NULL,&#39;b&#39;), (5,&#39;c&#39;), (NULL,&#39;d&#39;);</code> 只是指定了部分id的值。另一种类型的“混合模式插入”是 <code>INSERT ... ON DUPLICATE KEY UPDATE</code> 。</p><img src="../pic/MySQL事务篇/image-20220712175552985.png" alt="image-20220712175552985" style="float:left;" /><p>innodb_autoinc_lock_mode有三种取值，分别对应与不同锁定模式：</p><p><code>（1）innodb_autoinc_lock_mode = 0(“传统”锁定模式)</code></p><p>在此锁定模式下，所有类型的insert语句都会获得一个特殊的表级AUTO-INC锁，用于插入具有 AUTO_INCREMENT列的表。这种模式其实就如我们上面的例子，即每当执行insert的时候，都会得到一个 表级锁(AUTO-INC锁)，使得语句中生成的auto_increment为顺序，且在binlog中重放的时候，可以保证 master与slave中数据的auto_increment是相同的。因为是表级锁，当在同一时间多个事务中执行insert的 时候，对于AUTO-INC锁的争夺会 <code>限制并发</code> 能力。</p><p><code>（2）innodb_autoinc_lock_mode = 1(“连续”锁定模式)</code></p><p>在 MySQL 8.0 之前，连续锁定模式是 <code>默认</code> 的。</p><p>在这个模式下，“bulk inserts”仍然使用AUTO-INC表级锁，并保持到语句结束。这适用于所有INSERT … SELECT，REPLACE … SELECT和LOAD DATA语句。同一时刻只有一个语句可以持有AUTO-INC锁。</p><p>对于“Simple inserts”（要插入的行数事先已知），则通过在 <code>mutex（轻量锁）</code> 的控制下获得所需数量的自动递增值来避免表级AUTO-INC锁， 它只在分配过程的持续时间内保持，而不是直到语句完成。不使用表级AUTO-INC锁，除非AUTO-INC锁由另一个事务保持。如果另一个事务保持AUTO-INC锁，则“Simple inserts”等待AUTO-INC锁，如同它是一个“bulk inserts”。</p><p><code>（3）innodb_autoinc_lock_mode = 2(“交错”锁定模式)</code></p><p>从 MySQL 8.0 开始，交错锁模式是 <code>默认</code> 设置。</p><p>在此锁定模式下，自动递增值 <code>保证</code> 在所有并发执行的所有类型的insert语句中是 <code>唯一</code> 且 <code>单调递增</code> 的。但是，由于多个语句可以同时生成数字（即，跨语句交叉编号），<strong>为任何给定语句插入的行生成的值可能不是连续的。</strong></p><p>如果执行的语句是“simple inserts”，其中要插入的行数已提前知道，除了”Mixed-mode inserts”之外，为单个语句生成的数字不会有间隙。然后，当执行”bulk inserts”时，在由任何给定语句分配的自动递增值中可能存在间隙。</p><h5 id="④-元数据锁（MDL锁）"><a href="#④-元数据锁（MDL锁）" class="headerlink" title="④ 元数据锁（MDL锁）"></a>④ 元数据锁（MDL锁）</h5><p>MySQL5.5引入了meta data lock，简称MDL锁，属于表锁范畴。MDL 的作用是，保证读写的正确性。比 如，如果一个查询正在遍历一个表中的数据，而执行期间另一个线程对这个 <code>表结构做变更</code> ，增加了一 列，那么查询线程拿到的结果跟表结构对不上，肯定是不行的。</p><p>因此，<strong>当对一个表做增删改查操作的时候，加 MDL读锁；当要对表做结构变更操作的时候，加 MDL 写锁</strong>。</p><p>读锁之间不互斥，因此你可以有多个线程同时对一张表增删查改。读写锁之间、写锁之间都是互斥的，用来保证变更表结构操作的安全性，解决了DML和DDL操作之间的一致性问题。<code>不需要显式使用</code>，在访问一个表的时候会被自动加上。</p><p><strong>举例：元数据锁的使用场景模拟</strong></p><p><strong>会话A：</strong>从表中查询数据</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; BEGIN;Query OK, 0 rows affected (0.00 sec)mysql&gt; SELECT COUNT(1) FROM teacher;+----------+| COUNT(1) |+----------+| 2        |+----------+1 row int set (7.46 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>会话B：</strong>修改表结构，增加新列</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; BEGIN;Query OK, 0 rows affected (0.00 sec)mysql&gt; alter table teacher add age int not null;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>会话C：</strong>查看当前MySQL的进程</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show processlist;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220713142808924.png" alt="image-20220713142808924"></p><p>通过会话C可以看出会话B被阻塞，这是由于会话A拿到了teacher表的元数据读锁，会话B想申请teacher表的元数据写锁，由于读写锁互斥，会话B需要等待会话A释放元数据锁才能执行。</p><img src="../pic/MySQL事务篇/image-20220713143156759.png" alt="image-20220713143156759" style="float:left;" /><h4 id="2-InnoDB中的行锁"><a href="#2-InnoDB中的行锁" class="headerlink" title="2. InnoDB中的行锁"></a>2. InnoDB中的行锁</h4><p>行锁（Row Lock）也称为记录锁，顾名思义，就是锁住某一行（某条记录 row）。需要注意的是，MySQL服务器层并没有实现行锁机制，<strong>行级锁只在存储引擎层实现</strong>。</p><p><strong>优点：</strong>锁定力度小，发生<code>锁冲突概率低</code>，可以实现的<code>并发度高</code>。</p><p><strong>缺点：</strong>对于<code>锁的开销比较大</code>，加锁会比较慢，容易出现<code>死锁</code>情况。</p><p>InnoDB与MyISAM的最大不同有两点：一是支持事物（TRANSACTION）；二是采用了行级锁。</p><p>首先我们创建表如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE student (id INT,    name VARCHAR(20),    class VARCHAR(10),    PRIMARY KEY (id)) Engine&#x3D;InnoDB CHARSET&#x3D;utf8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>向这个表里插入几条记录：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO student VALUES(1, &#39;张三&#39;, &#39;一班&#39;),(3, &#39;李四&#39;, &#39;一班&#39;),(8, &#39;王五&#39;, &#39;二班&#39;),(15, &#39;赵六&#39;, &#39;二班&#39;),(20, &#39;钱七&#39;, &#39;三班&#39;);mysql&gt; SELECT * FROM student;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="../pic/MySQL事务篇/image-20220713161549241.png" alt="image-20220713161549241" style="float:left;" /><p>student表中的聚簇索引的简图如下所示。</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220713163353648.png" alt="image-20220713163353648"></p><p>这里把B+树的索引结构做了超级简化，只把索引中的记录给拿了出来，下面看看都有哪些常用的行锁类型。</p><h5 id="①-记录锁（Record-Locks）"><a href="#①-记录锁（Record-Locks）" class="headerlink" title="① 记录锁（Record Locks）"></a>① 记录锁（Record Locks）</h5><p>记录锁也就是仅仅把一条记录锁，官方的类型名称为：<code>LOCK_REC_NOT_GAP</code>。比如我们把id值为8的那条记录加一个记录锁的示意图如果所示。仅仅是锁住了id值为8的记录，对周围的数据没有影响。</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220713164811567.png" alt="image-20220713164811567"></p><p>举例如下：</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220713164948405.png" alt="image-20220713164948405"></p><p>记录锁是有S锁和X锁之分的，称之为 <code>S型记录锁</code> 和 <code>X型记录锁</code> 。</p><ul><li>当一个事务获取了一条记录的S型记录锁后，其他事务也可以继续获取该记录的S型记录锁，但不可以继续获取X型记录锁；</li><li>当一个事务获取了一条记录的X型记录锁后，其他事务既不可以继续获取该记录的S型记录锁，也不可以继续获取X型记录锁。</li></ul><h5 id="②-间隙锁（Gap-Locks）"><a href="#②-间隙锁（Gap-Locks）" class="headerlink" title="② 间隙锁（Gap Locks）"></a>② 间隙锁（Gap Locks）</h5><p><code>MySQL</code> 在 <code>REPEATABLE READ</code> 隔离级别下是可以解决幻读问题的，解决方案有两种，可以使用 <code>MVCC</code> 方 案解决，也可以采用 <code>加锁 </code>方案解决。但是在使用加锁方案解决时有个大问题，就是事务在第一次执行读取操作时，那些幻影记录尚不存在，我们无法给这些 <code>幻影记录</code> 加上 <code>记录锁</code> 。InnoDB提出了一种称之为 <code>Gap Locks</code> 的锁，官方的类型名称为：<code> LOCK_GAP</code> ，我们可以简称为 <code>gap锁</code> 。比如，把id值为8的那条 记录加一个gap锁的示意图如下。</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220713171650888.png" alt="image-20220713171650888"></p><p>图中id值为8的记录加了gap锁，意味着 <code>不允许别的事务在id值为8的记录前边的间隙插入新记录</code> ，其实就是 id列的值(3, 8)这个区间的新记录是不允许立即插入的。比如，有另外一个事务再想插入一条id值为4的新 记录，它定位到该条新记录的下一条记录的id值为8，而这条记录上又有一个gap锁，所以就会阻塞插入 操作，直到拥有这个gap锁的事务提交了之后，id列的值在区间(3, 8)中的新记录才可以被插入。</p><p><strong>gap锁的提出仅仅是为了防止插入幻影记录而提出的。</strong>虽然有<code>共享gap锁</code>和<code>独占gap锁</code>这样的说法，但是它们起到的作用是相同的。而且如果对一条记录加了gap锁（不论是共享gap锁还是独占gap锁），并不会限制其他事务对这条记录加记录锁或者继续加gap锁。</p><p><strong>举例：</strong></p><table><thead><tr><th>Session1</th><th>Session2</th></tr></thead><tbody><tr><td>select * from student where id&#x3D;5 lock in share mode;</td><td></td></tr><tr><td></td><td>select * from student where id&#x3D;5 for update;</td></tr></tbody></table><p>这里session2并不会被堵住。因为表里并没有id&#x3D;5这条记录，因此session1嘉的是间隙锁(3,8)。而session2也是在这个间隙加的间隙锁。它们有共同的目标，即：保护这个间隙锁，不允许插入值。但，它们之间是不冲突的。</p><img src="../pic/MySQL事务篇/image-20220713174726264.png" alt="image-20220713174726264" style="float:left;" /><ul><li><code>Infimum</code>记录，表示该页面中最小的记录。</li><li><code>Supremun</code>记录，表示该页面中最大的记录。</li></ul><p>为了实现阻止其他事务插入id值再(20,正无穷)这个区间的新纪录，我们可以给索引中的最后一条记录，也就是id值为20的那条记录所在页面的Supremun记录加上一个gap锁，如图所示。</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220713174108634.png" alt="image-20220713174108634"></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select * from student where id &gt; 20 lock in share mode;Empty set (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>检测：</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220713174551814.png" alt="image-20220713174551814"></p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220713174602102.png" alt="image-20220713174602102"></p><img src="../pic/MySQL事务篇/image-20220713175032619.png" alt="image-20220713175032619" style="float:left;" /><img src="../pic/MySQL事务篇/image-20220713192418730.png" alt="image-20220713192418730" style="float:left;" /><h5 id="③-临键锁（Next-Key-Locks）"><a href="#③-临键锁（Next-Key-Locks）" class="headerlink" title="③ 临键锁（Next-Key Locks）"></a>③ 临键锁（Next-Key Locks）</h5><p>有时候我们既想 <code>锁住某条记录</code> ，又想 阻止 其他事务在该记录前边的 间隙插入新记录 ，所以InnoDB就提 出了一种称之为 Next-Key Locks 的锁，官方的类型名称为： LOCK_ORDINARY ，我们也可以简称为 next-key锁 。Next-Key Locks是在存储引擎 innodb 、事务级别在 可重复读 的情况下使用的数据库锁， innodb默认的锁就是Next-Key locks。比如，我们把id值为8的那条记录加一个next-key锁的示意图如下：</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220713192549340.png" alt="image-20220713192549340"></p><p><code>next-key锁</code>的本质就是一个<code>记录锁</code>和一个<code>gap锁</code>的合体，它既能保护该条记录，又能阻止别的事务将新记录插入被保护记录前边的<code>间隙</code>。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">begin;select * from student where id &lt;&#x3D;8 and id &gt; 3 for update;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="../pic/MySQL事务篇/image-20220713203124889.png" alt="image-20220713203124889" style="float:left;" /><img src="../pic/MySQL事务篇/image-20220713203532124.png" alt="image-20220713203532124" style="float:left;" /><img src="../pic/MySQL事务篇/image-20220713203619704.png" alt="image-20220713203619704" style="float:left;" /><img src="../pic/MySQL事务篇/image-20220713203714577.png" alt="image-20220713203714577" style="float:left;" /><h4 id="3-页锁"><a href="#3-页锁" class="headerlink" title="3. 页锁"></a>3. 页锁</h4><p>页锁就是在 <code>页的粒度</code> 上进行锁定，锁定的数据资源比行锁要多，因为一个页中可以有多个行记录。当我 们使用页锁的时候，会出现数据浪费的现象，但这样的浪费最多也就是一个页上的数据行。<strong>页锁的开销介于表锁和行锁之间，会出现死锁。锁定粒度介于表锁和行锁之间，并发度一般。</strong></p><p>每个层级的锁数量是有限制的，因为锁会占用内存空间， <code>锁空间的大小是有限的</code> 。当某个层级的锁数量 超过了这个层级的阈值时，就会进行 <code>锁升级</code> 。锁升级就是用更大粒度的锁替代多个更小粒度的锁，比如 InnoDB 中行锁升级为表锁，这样做的好处是占用的锁空间降低了，但同时数据的并发度也下降了。</p><h3 id="3-3-从对待锁的态度划分-乐观锁、悲观锁"><a href="#3-3-从对待锁的态度划分-乐观锁、悲观锁" class="headerlink" title="3.3 从对待锁的态度划分:乐观锁、悲观锁"></a>3.3 从对待锁的态度划分:乐观锁、悲观锁</h3><p>从对待锁的态度来看锁的话，可以将锁分成乐观锁和悲观锁，从名字中也可以看出这两种锁是两种看待 <code>数据并发的思维方式</code> 。需要注意的是，乐观锁和悲观锁并不是锁，而是锁的 <code>设计思想</code> 。</p><h4 id="1-悲观锁（Pessimistic-Locking）"><a href="#1-悲观锁（Pessimistic-Locking）" class="headerlink" title="1. 悲观锁（Pessimistic Locking）"></a>1. 悲观锁（Pessimistic Locking）</h4><p>悲观锁是一种思想，顾名思义，就是很悲观，对数据被其他事务的修改持保守态度，会通过数据库自身的锁机制来实现，从而保证数据操作的排它性。</p><p>悲观锁总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会 <code>阻塞</code> 直到它拿到锁（<strong>共享资源每次只给一个线程使用，其它线程阻塞， 用完后再把资源转让给其它线程</strong>）。比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁，当其他线程想要访问数据时，都需要阻塞挂起。Java中 <code>synchronized</code> 和 <code>ReentrantLock</code> 等独占锁就是悲观锁思想的实现。</p><p><strong>秒杀案例1：</strong></p><img src="../pic/MySQL事务篇/image-20220713204544767.png" alt="image-20220713204544767" style="float:left;" /><img src="../pic/MySQL事务篇/image-20220713205010502.png" alt="image-20220713205010502" style="float:left;" /><img src="../pic/MySQL事务篇/image-20220713205135694.png" alt="image-20220713205135694" style="float:left;" /><h4 id="2-乐观锁（Optimistic-Locking）"><a href="#2-乐观锁（Optimistic-Locking）" class="headerlink" title="2. 乐观锁（Optimistic Locking）"></a>2. 乐观锁（Optimistic Locking）</h4><p>乐观锁认为对同一数据的并发操作不会总发生，属于小概率事件，不用每次都对数据上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，也就是<strong>不采用数据库自身的锁机制，而是通过程序来实现</strong>。在程序上，我们可以采用 <code>版本号机制</code> 或者 <code>CAS机制</code> 实现。<strong>乐观锁适用于多读的应用类型， 这样可以提高吞吐量</strong>。在Java中<code> java.util.concurrent.atomic</code> 包下的原子变量类就是使用了乐观锁的一种实现方式：CAS实现的。</p><p><strong>1. 乐观锁的版本号机制</strong></p><p>在表中设计一个 <code>版本字段 version</code> ，第一次读的时候，会获取 version 字段的取值。然后对数据进行更新或删除操作时，会执行 <code>UPDATE ... SET version=version+1 WHERE version=version</code> 。此时 如果已经有事务对这条数据进行了更改，修改就不会成功。</p><p>这种方式类似我们熟悉的SVN、CVS版本管理系统，当我们修改了代码进行提交时，首先会检查当前版本号与服务器上的版本号是否一致，如果一致就可以直接提交，如果不一致就需要更新服务器上的最新代码，然后再进行提交。</p><p><strong>2. 乐观锁的时间戳机制</strong></p><p>时间戳和版本号机制一样，也是在更新提交的时候，将当前数据的时间戳和更新之前取得的时间戳进行 比较，如果两者一致则更新成功，否则就是版本冲突。</p><p>你能看到乐观锁就是程序员自己控制数据并发操作的权限，基本是通过给数据行增加一个戳（版本号或 者时间戳），从而证明当前拿到的数据是否最新。</p><img src="../pic/MySQL事务篇/image-20220713210951100.png" alt="image-20220713210951100" style="float:left;" /><img src="../pic/MySQL事务篇/image-20220713211139670.png" alt="image-20220713211139670" style="float:left;" /><h4 id="3-两种锁的适用场景"><a href="#3-两种锁的适用场景" class="headerlink" title="3. 两种锁的适用场景"></a>3. 两种锁的适用场景</h4><p>从这两种锁的设计思想中，我们总结一下乐观锁和悲观锁的适用场景：</p><ol><li><code>乐观锁</code> 适合 <code>读操作多</code> 的场景，相对来说写的操作比较少。它的优点在于 <code>程序实现</code> ， <code>不存在死锁</code> 问题，不过适用场景也会相对乐观，因为它阻止不了除了程序以外的数据库操作。</li><li><code>悲观锁</code> 适合 <code>写操作多</code> 的场景，因为写的操作具有 <code>排它性</code> 。采用悲观锁的方式，可以在数据库层 面阻止其他事务对该数据的操作权限，防止 <code>读 - 写</code> 和 <code>写 - 写</code> 的冲突。</li></ol><img src="../pic/MySQL事务篇/image-20220713211417909.png" alt="image-20220713211417909" style="float:left;" /><h3 id="3-4-按加锁的方式划分：显式锁、隐式锁"><a href="#3-4-按加锁的方式划分：显式锁、隐式锁" class="headerlink" title="3.4 按加锁的方式划分：显式锁、隐式锁"></a>3.4 按加锁的方式划分：显式锁、隐式锁</h3><h4 id="1-隐式锁"><a href="#1-隐式锁" class="headerlink" title="1. 隐式锁"></a>1. 隐式锁</h4><img src="../pic/MySQL事务篇/image-20220713211525845.png" alt="image-20220713211525845" style="float:left;" /><ul><li><strong>情景一</strong>：对于聚簇索引记录来说，有一个 <code>trx_id</code> 隐藏列，该隐藏列记录着最后改动该记录的 <code>事务 id</code> 。那么如果在当前事务中新插入一条聚簇索引记录后，该记录的 trx_id 隐藏列代表的的就是 当前事务的 事务id ，如果其他事务此时想对该记录添加 S锁 或者 X锁 时，首先会看一下该记录的 trx_id 隐藏列代表的事务是否是当前的活跃事务，如果是的话，那么就帮助当前事务创建一个 X 锁 （也就是为当前事务创建一个锁结构， is_waiting 属性是 false ），然后自己进入等待状态 （也就是为自己也创建一个锁结构， is_waiting 属性是 true ）。</li><li><strong>情景二</strong>：对于二级索引记录来说，本身并没有 trx_id 隐藏列，但是在二级索引页面的 Page Header 部分有一个 <code>PAGE_MAX_TRX_ID</code> 属性，该属性代表对该页面做改动的最大的 <code>事务id</code> ，如 果 PAGE_MAX_TRX_ID 属性值小于当前最小的活跃 事务id ，那么说明对该页面做修改的事务都已 经提交了，否则就需要在页面中定位到对应的二级索引记录，然后回表找到它对应的聚簇索引记 录，然后再重复 情景一 的做法。</li></ul><img src="../pic/MySQL事务篇/image-20220713214522709.png" alt="image-20220713214522709" style="float:left;" /><p><strong>session 1:</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; begin;Query OK, 0 rows affected (0.00 sec)mysql&gt; insert INTO student VALUES(34,&quot;周八&quot;,&quot;二班&quot;);Query OK, 1 row affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>session 2:</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; begin;Query OK, 0 rows affected (0.00 sec)mysql&gt; select * from student lock in share mode; #执行完，当前事务被阻塞<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行下述语句，输出结果：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT * FROM performance_schema.data_lock_waits\G;*************************** 1. row ***************************ENGINE: INNODBREQUESTING_ENGINE_LOCK_ID: 140562531358232:7:4:9:140562535668584REQUESTING_ENGINE_TRANSACTION_ID: 422037508068888REQUESTING_THREAD_ID: 64REQUESTING_EVENT_ID: 6REQUESTING_OBJECT_INSTANCE_BEGIN: 140562535668584BLOCKING_ENGINE_LOCK_ID: 140562531351768:7:4:9:140562535619104BLOCKING_ENGINE_TRANSACTION_ID: 15902BLOCKING_THREAD_ID: 64BLOCKING_EVENT_ID: 6BLOCKING_OBJECT_INSTANCE_BEGIN: 1405625356191041 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>隐式锁的逻辑过程如下：</p><p>A. InnoDB的每条记录中都一个隐含的trx_id字段，这个字段存在于聚簇索引的B+Tree中。 </p><p>B. 在操作一条记录前，首先根据记录中的trx_id检查该事务是否是活动的事务(未提交或回滚)。如果是活动的事务，首先将 <code>隐式锁</code> 转换为 <code>显式锁</code> (就是为该事务添加一个锁)。 </p><p>C. 检查是否有锁冲突，如果有冲突，创建锁，并设置为waiting状态。如果没有冲突不加锁，跳到E。 </p><p>D. 等待加锁成功，被唤醒，或者超时。 </p><p>E. 写数据，并将自己的trx_id写入trx_id字段。</p><h4 id="2-显式锁"><a href="#2-显式锁" class="headerlink" title="2. 显式锁"></a>2. 显式锁</h4><p>通过特定的语句进行加锁，我们一般称之为显示加锁，例如：</p><p>显示加共享锁：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select .... lock in share mode<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示加排它锁：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select .... for update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-5-其它锁之：全局锁"><a href="#3-5-其它锁之：全局锁" class="headerlink" title="3.5 其它锁之：全局锁"></a>3.5 其它锁之：全局锁</h3><p>全局锁就是对 <code>整个数据库实例</code> 加锁。当你需要让整个库处于 <code>只读状态</code> 的时候，可以使用这个命令，之后 其他线程的以下语句会被阻塞：数据更新语句（数据的增删改）、数据定义语句（包括建表、修改表结 构等）和更新类事务的提交语句。全局锁的典型使用 <code>场景</code> 是：做 <code>全库逻辑备份</code> 。</p><p>全局锁的命令：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">Flush tables with read lock<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-6-其它锁之：死锁"><a href="#3-6-其它锁之：死锁" class="headerlink" title="3.6 其它锁之：死锁"></a>3.6 其它锁之：死锁</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h4><p>两个事务都持有对方需要的锁，并且在等待对方释放，并且双方都不会释放自己的锁。</p><p><strong>举例1：</strong></p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220713220714098.png" alt="image-20220713220714098"></p><p><strong>举例2：</strong></p><p>用户A给用户B转账100，再次同时，用户B也给用户A转账100。这个过程，可能导致死锁。</p><img src="../pic/MySQL事务篇/image-20220713220936236.png" alt="image-20220713220936236" style="float:left;" /><h4 id="2-产生死锁的必要条件"><a href="#2-产生死锁的必要条件" class="headerlink" title="2. 产生死锁的必要条件"></a>2. 产生死锁的必要条件</h4><ol><li>两个或者两个以上事务</li><li>每个事务都已经持有锁并且申请新的锁</li><li>锁资源同时只能被同一个事务持有或者不兼容</li><li>事务之间因为持有锁和申请锁导致彼此循环等待</li></ol><blockquote><p>死锁的关键在于：两个（或以上）的Session加锁的顺序不一致。</p></blockquote><h4 id="3-如何处理死锁"><a href="#3-如何处理死锁" class="headerlink" title="3. 如何处理死锁"></a>3. 如何处理死锁</h4><p><strong>方式1：</strong>等待，直到超时（innodb_lock_wait_timeout&#x3D;50s)</p><img src="../pic/MySQL事务篇/image-20220713221418100.png" alt="image-20220713221418100" style="float:left;" /><p><strong>方式2：</strong>使用死锁检测处理死锁程序</p><p>方式1检测死锁太过被动，innodb还提供了<code>wait-for graph算法</code>来主动进行死锁检测，每当加锁请求无法立即满足需要并进入等待时，wait-for graph算法都会被触发。</p><p>这是一种较为<code>主动的死锁检测机制</code>，要求数据库保存<code>锁的信息链表</code>和<code>事物等待链表</code>两部分信息。</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220713221758941.png" alt="image-20220713221758941"></p><p>基于这两个信息，可以绘制wait-for graph（等待图）</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220713221830455.png" alt="image-20220713221830455"></p><blockquote><p>死锁检测的原理是构建一个以事务为顶点，锁为边的有向图，判断有向图是否存在环，存在既有死锁。</p></blockquote><p>一旦检测到回路、有死锁，这时候InnoDB存储引擎会选择<code>回滚undo量最小的事务</code>，让其他事务继续执行（<code>innodb_deadlock_detect=on</code>表示开启这个逻辑）。</p><p>缺点：每个新的被阻塞的线程，都要判断是不是由于自己的加入导致了死锁，这个操作时间复杂度是O(n)。如果100个并发线程同时更新同一行，意味着要检测100*100&#x3D;1万次，1万个线程就会有1千万次检测。</p><p><strong>如何解决？</strong></p><ul><li>方式1：关闭死锁检测，但意味着可能会出现大量的超时，会导致业务有损。</li><li>方式2：控制并发访问的数量。比如在中间件中实现对于相同行的更新，在进入引擎之前排队，这样在InnoDB内部就不会有大量的死锁检测工作。</li></ul><p><strong>进一步的思路：</strong></p><p>可以考虑通过将一行改成逻辑上的多行来减少<code>锁冲突</code>。比如，连锁超市账户总额的记录，可以考虑放到多条记录上。账户总额等于这多个记录的值的总和。</p><h4 id="4-如何避免死锁"><a href="#4-如何避免死锁" class="headerlink" title="4. 如何避免死锁"></a>4. 如何避免死锁</h4><img src="../pic/MySQL事务篇/image-20220714131008260.png" alt="image-20220714131008260" style="float:left;" /><h2 id="4-锁的内部结构"><a href="#4-锁的内部结构" class="headerlink" title="4. 锁的内部结构"></a>4. 锁的内部结构</h2><p>我们前边说对一条记录加锁的本质就是在内存中创建一个<code>锁结构</code>与之关联，那么是不是一个事务对多条记录加锁，就要创建多个<code>锁结构</code>呢？比如：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 事务T1SELECT * FROM user LOCK IN SHARE MODE;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>理论上创建多个<code>锁结构</code>没问题，但是如果一个事务要获取10000条记录的锁，生成10000个锁结构也太崩溃了！所以决定在对不同记录加锁时，如果符合下边这些条件的记录会放在一个<code>锁结构</code>中。</p><ul><li>在同一个事务中进行加锁操作</li><li>被加锁的记录在同一个页面中</li><li>加锁的类型是一样的</li><li>等待状态是一样的</li></ul><p><code>InnoDB</code> 存储引擎中的 <code>锁结构</code> 如下：</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220714132306208.png" alt="image-20220714132306208"></p><p>结构解析：</p><p><code>1. 锁所在的事务信息 </code>：</p><p>不论是 <code>表锁</code> 还是 <code>行锁</code> ，都是在事务执行过程中生成的，哪个事务生成了这个锁结构 ，这里就记录这个 事务的信息。</p><p>此 <code>锁所在的事务信息</code> 在内存结构中只是一个指针，通过指针可以找到内存中关于该事务的更多信息，比方说事务id等。</p><p><code>2. 索引信息</code> ：</p><p>对于 <code>行锁</code> 来说，需要记录一下加锁的记录是属于哪个索引的。这里也是一个指针。</p><p><code>3. 表锁／行锁信息</code> ：</p><p><code>表锁结构</code> 和 <code>行锁结构</code> 在这个位置的内容是不同的：</p><ul><li><p>表锁：</p><p>记载着是对哪个表加的锁，还有其他的一些信息。</p></li><li><p>行锁：</p><p>记载了三个重要的信息：</p><ul><li><code>Space ID</code> ：记录所在表空间。</li><li><code>Page Number</code> ：记录所在页号。</li><li><code>n_bits </code>：对于行锁来说，一条记录就对应着一个比特位，一个页面中包含很多记录，用不同 的比特位来区分到底是哪一条记录加了锁。为此在行锁结构的末尾放置了一堆比特位，这个<code>n_bis</code>属性代表使用了多少比特位。</li></ul><blockquote><p>n_bits的值一般都比页面中记录条数多一些。主要是为了之后在页面中插入了新记录后 也不至于重新分配锁结构</p></blockquote></li></ul><p><code>4. type_mode</code> ：</p><p>这是一个32位的数，被分成了 <code>lock_mode</code> 、 <code>lock_type</code> 和 <code>rec_lock_type</code> 三个部分，如图所示：</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220714133319666.png" alt="image-20220714133319666"></p><ul><li>锁的模式（ <code>lock_mode</code> ），占用低4位，可选的值如下：<ul><li><code>LOCK_IS</code> （十进制的 0 ）：表示共享意向锁，也就是 <code>IS锁</code> 。 </li><li><code>LOCK_IX</code> （十进制的 1 ）：表示独占意向锁，也就是 <code>IX锁</code> 。 </li><li><code>LOCK_S</code> （十进制的 2 ）：表示共享锁，也就是 <code>S锁</code> 。 </li><li><code>LOCK_X</code> （十进制的 3 ）：表示独占锁，也就是 <code>X锁</code> 。 </li><li><code>LOCK_AUTO_INC</code> （十进制的 4 ）：表示 <code>AUTO-INC锁</code> 。</li></ul></li></ul><p>在InnoDB存储引擎中，LOCK_IS，LOCK_IX，LOCK_AUTO_INC都算是表级锁的模式，LOCK_S和 LOCK_X既可以算是表级锁的模式，也可以是行级锁的模式。</p><ul><li>锁的类型（ <code>lock_type</code> ），占用第5～8位，不过现阶段只有第5位和第6位被使用：<ul><li><code>LOCK_TABLE</code> （十进制的 16 ），也就是当第5个比特位置为1时，表示表级锁。</li><li><code>LOCK_REC </code>（十进制的 32 ），也就是当第6个比特位置为1时，表示行级锁。</li></ul></li><li>行锁的具体类型（ <code>rec_lock_type</code> ），使用其余的位来表示。只有在 <code>lock_type</code> 的值为 <code>LOCK_REC</code> 时，也就是只有在该锁为行级锁时，才会被细分为更多的类型：<ul><li><code>LOCK_ORDINARY</code> （十进制的 0 ）：表示 <code>next-key锁</code> 。</li><li><code>LOCK_GAP</code> （十进制的 512 ）：也就是当第10个比特位置为1时，表示 <code>gap锁</code> 。</li><li><code>LOCK_REC_NOT_GAP</code> （十进制的 1024 ）：也就是当第11个比特位置为1时，表示正经 <code>记录锁</code> 。</li><li><code>LOCK_INSERT_INTENTION</code> （十进制的 2048 ）：也就是当第12个比特位置为1时，表示插入意向锁。其他的类型：还有一些不常用的类型我们就不多说了。</li></ul></li><li><code>is_waiting</code> 属性呢？基于内存空间的节省，所以把 <code>is_waiting</code> 属性放到了 <code>type_mode</code> 这个32 位的数字中：<ul><li><code>LOCK_WAIT</code> （十进制的 256 ） ：当第9个比特位置为 1 时，表示 <code>is_waiting</code> 为 <code>true</code> ，也 就是当前事务尚未获取到锁，处在等待状态；当这个比特位为 0 时，表示 <code>is_waiting</code> 为 <code>false</code> ，也就是当前事务获取锁成功。</li></ul></li></ul><p><code>5. 其他信息</code> ：</p><p>为了更好的管理系统运行过程中生成的各种锁结构而设计了各种哈希表和链表。</p><p><code>6. 一堆比特位</code> ：</p><p>如果是 <code>行锁结构</code> 的话，在该结构末尾还放置了一堆比特位，比特位的数量是由上边提到的 <code>n_bits</code> 属性 表示的。InnoDB数据页中的每条记录在 <code>记录头信息</code> 中都包含一个 <code>heap_no</code> 属性，伪记录 <code>Infimum</code> 的 <code>heap_no</code> 值为 0 ， <code>Supremum</code> 的 <code>heap_no</code> 值为 1 ，之后每插入一条记录， <code>heap_no</code> 值就增1。 锁结 构 最后的一堆比特位就对应着一个页面中的记录，一个比特位映射一个 <code>heap_no</code> ，即一个比特位映射 到页内的一条记录。</p><h2 id="5-锁监控"><a href="#5-锁监控" class="headerlink" title="5. 锁监控"></a>5. 锁监控</h2><p>关于MySQL锁的监控，我们一般可以通过检查 InnoDB_row_lock 等状态变量来分析系统上的行锁的争夺情况</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show status like &#39;innodb_row_lock%&#39;;+-------------------------------+-------+| Variable_name                 | Value |+-------------------------------+-------+| Innodb_row_lock_current_waits | 0     || Innodb_row_lock_time          | 0     || Innodb_row_lock_time_avg      | 0     || Innodb_row_lock_time_max      | 0     || Innodb_row_lock_waits         | 0     |+-------------------------------+-------+5 rows in set (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对各个状态量的说明如下：</p><ul><li>Innodb_row_lock_current_waits：当前正在等待锁定的数量； </li><li><code>Innodb_row_lock_time</code> ：从系统启动到现在锁定总时间长度；（等待总时长） </li><li><code>Innodb_row_lock_time_avg</code> ：每次等待所花平均时间；（等待平均时长） </li><li>Innodb_row_lock_time_max：从系统启动到现在等待最常的一次所花的时间； </li><li><code>Innodb_row_lock_waits</code> ：系统启动后到现在总共等待的次数；（等待总次数）</li></ul><p>对于这5个状态变量，比较重要的3个见上面（灰色）。</p><p>尤其是当等待次数很高，而且每次等待时长也不小的时候，我们就需要分析系统中为什么会有如此多的等待，然后根据分析结果着手指定优化计划。</p><p><strong>其他监控方法：</strong></p><p>MySQL把事务和锁的信息记录在了 <code>information_schema</code> 库中，涉及到的三张表分别是 <code>INNODB_TRX</code> 、 <code>INNODB_LOCKS</code> 和 <code>INNODB_LOCK_WAITS</code> 。</p><p><code>MySQL5.7及之前</code> ，可以通过information_schema.INNODB_LOCKS查看事务的锁情况，但只能看到阻塞事 务的锁；如果事务并未被阻塞，则在该表中看不到该事务的锁情况。</p><p>MySQL8.0删除了information_schema.INNODB_LOCKS，添加了 <code>performance_schema.data_locks</code> ，可以通过performance_schema.data_locks查看事务的锁情况，和MySQL5.7及之前不同， performance_schema.data_locks不但可以看到阻塞该事务的锁，还可以看到该事务所持有的锁。</p><p>同时，information_schema.INNODB_LOCK_WAITS也被 <code>performance_schema.data_lock_waits</code> 所代 替。</p><p>我们模拟一个锁等待的场景，以下是从这三张表收集的信息</p><p>锁等待场景，我们依然使用记录锁中的案例，当事务2进行等待时，查询情况如下：</p><p>（1）查询正在被锁阻塞的sql语句。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM information_schema.INNODB_TRX\G;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重要属性代表含义已在上述中标注。</p><p>（2）查询锁等待情况</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM data_lock_waits\G;*************************** 1. row ***************************ENGINE: INNODBREQUESTING_ENGINE_LOCK_ID: 139750145405624:7:4:7:139747028690608REQUESTING_ENGINE_TRANSACTION_ID: 13845 #被阻塞的事务IDREQUESTING_THREAD_ID: 72REQUESTING_EVENT_ID: 26REQUESTING_OBJECT_INSTANCE_BEGIN: 139747028690608BLOCKING_ENGINE_LOCK_ID: 139750145406432:7:4:7:139747028813248BLOCKING_ENGINE_TRANSACTION_ID: 13844 #正在执行的事务ID，阻塞了13845BLOCKING_THREAD_ID: 71BLOCKING_EVENT_ID: 24BLOCKING_OBJECT_INSTANCE_BEGIN: 1397470288132481 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）查询锁的情况</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql &gt; SELECT * from performance_schema.data_locks\G;*************************** 1. row ***************************ENGINE: INNODBENGINE_LOCK_ID: 139750145405624:1068:139747028693520ENGINE_TRANSACTION_ID: 13847THREAD_ID: 72EVENT_ID: 31OBJECT_SCHEMA: atguiguOBJECT_NAME: userPARTITION_NAME: NULLSUBPARTITION_NAME: NULLINDEX_NAME: NULLOBJECT_INSTANCE_BEGIN: 139747028693520LOCK_TYPE: TABLELOCK_MODE: IXLOCK_STATUS: GRANTEDLOCK_DATA: NULL*************************** 2. row ***************************ENGINE: INNODBENGINE_LOCK_ID: 139750145405624:7:4:7:139747028690608ENGINE_TRANSACTION_ID: 13847THREAD_ID: 72EVENT_ID: 31OBJECT_SCHEMA: atguiguOBJECT_NAME: userPARTITION_NAME: NULLSUBPARTITION_NAME: NULLINDEX_NAME: PRIMARYOBJECT_INSTANCE_BEGIN: 139747028690608LOCK_TYPE: RECORDLOCK_MODE: X,REC_NOT_GAPLOCK_STATUS: WAITINGLOCK_DATA: 1*************************** 3. row ***************************ENGINE: INNODBENGINE_LOCK_ID: 139750145406432:1068:139747028816304ENGINE_TRANSACTION_ID: 13846THREAD_ID: 71EVENT_ID: 28OBJECT_SCHEMA: atguiguOBJECT_NAME: userPARTITION_NAME: NULLSUBPARTITION_NAME: NULLINDEX_NAME: NULLOBJECT_INSTANCE_BEGIN: 139747028816304LOCK_TYPE: TABLELOCK_MODE: IXLOCK_STATUS: GRANTEDLOCK_DATA: NULL*************************** 4. row ***************************ENGINE: INNODBENGINE_LOCK_ID: 139750145406432:7:4:7:139747028813248ENGINE_TRANSACTION_ID: 13846THREAD_ID: 71EVENT_ID: 28OBJECT_SCHEMA: atguiguOBJECT_NAME: userPARTITION_NAME: NULLSUBPARTITION_NAME: NULLINDEX_NAME: PRIMARYOBJECT_INSTANCE_BEGIN: 139747028813248LOCK_TYPE: RECORDLOCK_MODE: X,REC_NOT_GAPLOCK_STATUS: GRANTEDLOCK_DATA: 14 rows in set (0.00 sec)ERROR:No query specified<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从锁的情况可以看出来，两个事务分别获取了IX锁，我们从意向锁章节可以知道，IX锁互相时兼容的。所 以这里不会等待，但是事务1同样持有X锁，此时事务2也要去同一行记录获取X锁，他们之间不兼容，导 致等待的情况发生。</p><h2 id="6-附录"><a href="#6-附录" class="headerlink" title="6. 附录"></a>6. 附录</h2><p><strong>间隙锁加锁规则（共11个案例）</strong></p><p>间隙锁是在可重复读隔离级别下才会生效的： next-key lock 实际上是由间隙锁加行锁实现的，如果切换 到读提交隔离级别 (read-committed) 的话，就好理解了，过程中去掉间隙锁的部分，也就是只剩下行锁 的部分。而在读提交隔离级别下间隙锁就没有了，为了解决可能出现的数据和日志不一致问题，需要把 binlog 格式设置为 row 。也就是说，许多公司的配置为：读提交隔离级别加 binlog_format&#x3D;row。业务不 需要可重复读的保证，这样考虑到读提交下操作数据的锁范围更小（没有间隙锁），这个选择是合理的。</p><p>next-key lock的加锁规则</p><p>总结的加锁规则里面，包含了两个 “ “ 原则 ” ” 、两个 “ “ 优化 ” ” 和一个 “bug” 。</p><ol><li>原则 1 ：加锁的基本单位是 next-key lock 。 next-key lock 是前开后闭区间。 </li><li>原则 2 ：查找过程中访问到的对象才会加锁。任何辅助索引上的锁，或者非索引列上的锁，最终 都要回溯到主键上，在主键上也要加一把锁。 </li><li>优化 1 ：索引上的等值查询，给唯一索引加锁的时候， next-key lock 退化为行锁。也就是说如果 InnoDB扫描的是一个主键、或是一个唯一索引的话，那InnoDB只会采用行锁方式来加锁 </li><li>优化 2 ：索引上（不一定是唯一索引）的等值查询，向右遍历时且最后一个值不满足等值条件的 时候， next-keylock 退化为间隙锁。 </li><li>一个 bug ：唯一索引上的范围查询会访问到不满足条件的第一个值为止。</li></ol><p>我们以表test作为例子，建表语句和初始化语句如下：其中id为主键索引</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE &#96;test&#96; (&#96;id&#96; int(11) NOT NULL,&#96;col1&#96; int(11) DEFAULT NULL,&#96;col2&#96; int(11) DEFAULT NULL,PRIMARY KEY (&#96;id&#96;),KEY &#96;c&#96; (&#96;c&#96;)) ENGINE&#x3D;InnoDB;insert into test values(0,0,0),(5,5,5),(10,10,10),(15,15,15),(20,20,20),(25,25,25);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例一：唯一索引等值查询间隙锁</strong></p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220714134603698.png" alt="image-20220714134603698"></p><p>由于表 test 中没有 id&#x3D;7 的记录</p><p>根据原则 1 ，加锁单位是 next-key lock ， session A 加锁范围就是 (5,10] ； 同时根据优化 2 ，这是一个等 值查询 (id&#x3D;7) ，而 id&#x3D;10 不满足查询条件， next-key lock 退化成间隙锁，因此最终加锁的范围是 (5,10)</p><p><strong>案例二：非唯一索引等值查询锁</strong></p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220714134623052-16577775838551.png" alt="image-20220714134623052"></p><p>这里 session A 要给索引 col1 上 col1&#x3D;5 的这一行加上读锁。</p><ol><li>根据原则 1 ，加锁单位是 next-key lock ，左开右闭，5是闭上的，因此会给 (0,5] 加上 next-key lock 。 </li><li>要注意 c 是普通索引，因此仅访问 c&#x3D;5 这一条记录是不能马上停下来的（可能有col1&#x3D;5的其他记 录），需要向右遍历，查到c&#x3D;10 才放弃。根据原则 2 ，访问到的都要加锁，因此要给 (5,10] 加 next-key lock 。 </li><li>但是同时这个符合优化 2 ：等值判断，向右遍历，最后一个值不满足 col1&#x3D;5 这个等值条件，因此退化成间隙锁 (5,10) 。</li><li>根据原则 2 ， 只有访问到的对象才会加锁，这个查询使用覆盖索引，并不需要访问主键索引，所以主键索引上没有加任何锁，这就是为什么 session B 的 update 语句可以执行完成。</li></ol><p>但 session C 要插入一个 (7,7,7) 的记录，就会被 session A 的间隙锁 (5,10) 锁住 这个例子说明，锁是加在索引上的。</p><p>执行 for update 时，系统会认为你接下来要更新数据，因此会顺便给主键索引上满足条件的行加上行锁。</p><p>如果你要用 lock in share mode来给行加读锁避免数据被更新的话，就必须得绕过覆盖索引的优化，因为覆盖索引不会访问主键索引，不会给主键索引上加锁</p><p><strong>案例三：主键索引范围查询锁</strong></p><p>上面两个例子是等值查询的，这个例子是关于范围查询的，也就是说下面的语句</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from test where id&#x3D;10 for updateselect * from tets where id&gt;&#x3D;10 and id&lt;11 for update;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这两条查语句肯定是等价的，但是它们的加锁规则不太一样</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220714134742049.png" alt="image-20220714134742049"></p><ol><li>开始执行的时候，要找到第一个 id&#x3D;10 的行，因此本该是 next-key lock(5,10] 。 根据优化 1 ，主键 id 上的等值条件，退化成行锁，只加了 id&#x3D;10 这一行的行锁。 </li><li>它是范围查询， 范围查找就往后继续找，找到 id&#x3D;15 这一行停下来，不满足条件，因此需要加 next-key lock(10,15] 。</li></ol><p>session A 这时候锁的范围就是主键索引上，行锁 id&#x3D;10 和 next-key lock(10,15] 。<strong>首次 session A 定位查找 id&#x3D;10 的行的时候，是当做等值查询来判断的，而向右扫描到 id&#x3D;15 的时候，用的是范围查询判断。</strong></p><p><strong>案例四：非唯一索引范围查询锁</strong></p><p>与案例三不同的是，案例四中查询语句的 where 部分用的是字段 c ，它是普通索引</p><p>这两条查语句肯定是等价的，但是它们的加锁规则不太一样</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220714134822160.png" alt="image-20220714134822160"></p><p>在第一次用 col1&#x3D;10 定位记录的时候，索引 c 上加了 (5,10] 这个 next-key lock 后，由于索引 col1 是非唯 一索引，没有优化规则，也就是说不会蜕变为行锁，因此最终 sesion A 加的锁是，索引 c 上的 (5,10] 和 (10,15] 这两个 next-keylock 。</p><p>这里需要扫描到 col1&#x3D;15 才停止扫描，是合理的，因为 InnoDB 要扫到 col1&#x3D;15 ，才知道不需要继续往后找了。</p><p><strong>案例五：唯一索引范围查询锁 bug</strong></p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220714134846740.png" alt="image-20220714134846740"></p><p>session A 是一个范围查询，按照原则 1 的话，应该是索引 id 上只加 (10,15] 这个 next-key lock ，并且因 为 id 是唯一键，所以循环判断到 id&#x3D;15 这一行就应该停止了。</p><p>但是实现上， InnoDB 会往前扫描到第一个不满足条件的行为止，也就是 id&#x3D;20 。而且由于这是个范围扫描，因此索引 id 上的 (15,20] 这个 next-key lock 也会被锁上。照理说，这里锁住 id&#x3D;20 这一行的行为，其实是没有必要的。因为扫描到 id&#x3D;15 ，就可以确定不用往后再找了。</p><p><strong>案例六：非唯一索引上存在 “ “ 等值 “ “ 的例子</strong></p><p>这里，我给表 t 插入一条新记录：insert into t values(30,10,30);也就是说，现在表里面有两个c&#x3D;10的行</p><p><strong>但是它们的主键值 id 是不同的（分别是 10 和 30 ），因此这两个c&#x3D;10 的记录之间，也是有间隙的。</strong></p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220714134923414.png" alt="image-20220714134923414"></p><p>这次我们用 delete 语句来验证。注意， delete 语句加锁的逻辑，其实跟 select … for update 是类似的， 也就是我在文章开始总结的两个 “ 原则 ” 、两个 “ 优化 ” 和一个 “bug” 。</p><p>这时， session A 在遍历的时候，先访问第一个 col1&#x3D;10 的记录。同样地，根据原则 1 ，这里加的是 (col1&#x3D;5,id&#x3D;5) 到 (col1&#x3D;10,id&#x3D;10) 这个 next-key lock 。</p><p>由于c是普通索引，所以继续向右查找，直到碰到 (col1&#x3D;15,id&#x3D;15) 这一行循环才结束。根据优化 2 ，这是 一个等值查询，向右查找到了不满足条件的行，所以会退化成 (col1&#x3D;10,id&#x3D;10) 到 (col1&#x3D;15,id&#x3D;15) 的间隙锁。</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220714134945012.png" alt="image-20220714134945012"></p><p>这个 delete 语句在索引 c 上的加锁范围，就是上面图中蓝色区域覆盖的部分。这个蓝色区域左右两边都 是虚线，表示开区间，即 (col1&#x3D;5,id&#x3D;5) 和 (col1&#x3D;15,id&#x3D;15) 这两行上都没有锁</p><p><strong>案例七： limit 语句加锁</strong></p><p>例子 6 也有一个对照案例，场景如下所示：</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220714135007118.png" alt="image-20220714135007118"></p><p>session A 的 delete 语句加了 limit 2 。你知道表 t 里 c&#x3D;10 的记录其实只有两条，因此加不加 limit 2 ，删除的效果都是一样的。但是加锁效果却不一样</p><p>这是因为，案例七里的 delete 语句明确加了 limit 2 的限制，因此在遍历到 (col1&#x3D;10, id&#x3D;30) 这一行之后， 满足条件的语句已经有两条，循环就结束了。因此，索引 col1 上的加锁范围就变成了从（ col1&#x3D;5,id&#x3D;5) 到（ col1&#x3D;10,id&#x3D;30) 这个前开后闭区间，如下图所示：</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220714135025045-16577778257713.png" alt="image-20220714135025045"></p><p>这个例子对我们实践的指导意义就是， 在删除数据的时候尽量加 limit 。</p><p>这样不仅可以控制删除数据的条数，让操作更安全，还可以减小加锁的范围。</p><p><strong>案例八：一个死锁的例子</strong></p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220714135047760.png" alt="image-20220714135047760"></p><ol><li>session A 启动事务后执行查询语句加 lock in share mode ，在索引 col1 上加了 next-keylock(5,10] 和 间隙锁 (10,15) （索引向右遍历退化为间隙锁）； </li><li>session B 的 update 语句也要在索引 c 上加 next-key lock(5,10] ，进入锁等待； 实际上分成了两步， 先是加 (5,10) 的间隙锁，加锁成功；然后加 col1&#x3D;10 的行锁，因为sessionA上已经给这行加上了读 锁，此时申请死锁时会被阻塞 </li><li>然后 session A 要再插入 (8,8,8) 这一行，被 session B 的间隙锁锁住。由于出现了死锁， InnoDB 让 session B 回滚</li></ol><p><strong>案例九：order by索引排序的间隙锁1</strong></p><p>如下面一条语句</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">begin;select * from test where id&gt;9 and id&lt;12 order by id desc for update;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下图为这个表的索引id的示意图。</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220714135130668.png" alt="image-20220714135130668"></p><ol><li>首先这个查询语句的语义是 order by id desc ，要拿到满足条件的所有行，优化器必须先找到 “ 第 一个 id&lt;12 的值 ” 。 </li><li>这个过程是通过索引树的搜索过程得到的，在引擎内部，其实是要找到 id&#x3D;12 的这个值，只是最终 没找到，但找到了 (10,15) 这个间隙。（ id&#x3D;15 不满足条件，所以 next-key lock 退化为了间隙锁 (10, 15) 。）</li><li>然后向左遍历，在遍历过程中，就不是等值查询了，会扫描到 id&#x3D;5 这一行，又因为区间是左开右 闭的，所以会加一个next-key lock (0,5] 。 也就是说，在执行过程中，通过树搜索的方式定位记录 的时候，用的是 “ 等值查询 ” 的方法。</li></ol><p><strong>案例十：order by索引排序的间隙锁2</strong></p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220714135206504.png" alt="image-20220714135206504"></p><ol><li><p>由于是 order by col1 desc ，第一个要定位的是索引 col1 上 “ 最右边的 ”col1&#x3D;20 的行。这是一个非唯一索引的等值查询：</p><p>左开右闭区间，首先加上 next-key lock (15,20] 。 向右遍历，col1&#x3D;25不满足条件，退化为间隙锁 所以会 加上间隙锁(20,25) 和 next-key lock (15,20] 。</p></li><li><p>在索引 col1 上向左遍历，要扫描到 col1&#x3D;10 才停下来。同时又因为左开右闭区间，所以 next-key lock 会加到 (5,10] ，这正是阻塞session B 的 insert 语句的原因。</p></li><li><p>在扫描过程中， col1&#x3D;20 、 col1&#x3D;15 、 col1&#x3D;10 这三行都存在值，由于是 select * ，所以会在主键 id 上加三个行锁。 因此， session A 的 select 语句锁的范围就是：</p><ol><li>索引 col1 上 (5, 25) ；</li><li>主键索引上 id&#x3D;15 、 20 两个行锁。</li></ol></li></ol><p><strong>案例十一：update修改数据的例子-先插入后删除</strong></p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220714135300189.png" alt="image-20220714135300189"></p><p>注意：根据 col1&gt;5 查到的第一个记录是 col1&#x3D;10 ，因此不会加 (0,5] 这个 next-key lock 。</p><p>session A 的加锁范围是索引 col1 上的 (5,10] 、 (10,15] 、 (15,20] 、 (20,25] 和(25,supremum] 。</p><p>之后 session B 的第一个 update 语句，要把 col1&#x3D;5 改成 col1&#x3D;1 ，你可以理解为两步：</p><ol><li>插入 (col1&#x3D;1, id&#x3D;5) 这个记录；</li><li>删除 (col1&#x3D;5, id&#x3D;5) 这个记录。</li></ol><p>通过这个操作， session A 的加锁范围变成了图 7 所示的样子:</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220714135333089.png" alt="image-20220714135333089"></p><p>好，接下来 session B 要执行 update t set col1 &#x3D; 5 where col1 &#x3D; 1 这个语句了，一样地可以拆成两步：</p><ol><li>插入 (col1&#x3D;5, id&#x3D;5) 这个记录；</li><li>删除 (col1&#x3D;1, id&#x3D;5) 这个记录。 第一步试图在已经加了间隙锁的 (1,10) 中插入数据，所以就被堵住了。</li></ol><h1 id="第16章-多版本并发控制"><a href="#第16章-多版本并发控制" class="headerlink" title="第16章_多版本并发控制"></a>第16章_多版本并发控制</h1><h2 id="1-什么是MVCC"><a href="#1-什么是MVCC" class="headerlink" title="1. 什么是MVCC"></a>1. 什么是MVCC</h2><p>MVCC （Multiversion Concurrency Control），多版本并发控制。顾名思义，MVCC 是通过数据行的多个版本管理来实现数据库的 <code>并发控制 </code>。这项技术使得在InnoDB的事务隔离级别下执行 <code>一致性读</code> 操作有了保证。换言之，就是为了查询一些正在被另一个事务更新的行，并且可以看到它们被更新之前的值，这样 在做查询的时候就不用等待另一个事务释放锁。</p><p>MVCC没有正式的标准，在不同的DBMS中MVCC的实现方式可能是不同的，也不是普遍使用的（大家可以参考相关的DBMS文档）。这里讲解InnoDB中MVCC的实现机制（MySQL其他的存储引擎并不支持它）。</p><h2 id="2-快照读与当前读"><a href="#2-快照读与当前读" class="headerlink" title="2. 快照读与当前读"></a>2. 快照读与当前读</h2><p>MVCC在MySQL InnoDB中的实现主要是为了提高数据库并发性能，用更好的方式去处理 <code>读-写冲突</code> ，做到 即使有读写冲突时，也能做到 <code>不加锁</code> ， <code>非阻塞并发读</code> ，而这个读指的就是 <code>快照读</code> , 而非 <code>当前读</code> 。当前 读实际上是一种加锁的操作，是悲观锁的实现。而MVCC本质是采用乐观锁思想的一种方式。</p><h3 id="2-1-快照读"><a href="#2-1-快照读" class="headerlink" title="2.1 快照读"></a>2.1 快照读</h3><p>快照读又叫一致性读，读取的是快照数据。<strong>不加锁的简单的 SELECT 都属于快照读</strong>，即不加锁的非阻塞 读；比如这样：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM player WHERE ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之所以出现快照读的情况，是基于提高并发性能的考虑，快照读的实现是基于MVCC，它在很多情况下， 避免了加锁操作，降低了开销。</p><p>既然是基于多版本，那么快照读可能读到的并不一定是数据的最新版本，而有可能是之前的历史版本。 </p><p>快照读的前提是隔离级别不是串行级别，串行级别下的快照读会退化成当前读。</p><h3 id="2-2-当前读"><a href="#2-2-当前读" class="headerlink" title="2.2 当前读"></a>2.2 当前读</h3><p>当前读读取的是记录的最新版本（最新数据，而不是历史版本的数据），读取时还要保证其他并发事务 不能修改当前记录，会对读取的记录进行加锁。加锁的 SELECT，或者对数据进行增删改都会进行当前 读。比如：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM student LOCK IN SHARE MODE; # 共享锁SELECT * FROM student FOR UPDATE; # 排他锁INSERT INTO student values ... # 排他锁DELETE FROM student WHERE ... # 排他锁UPDATE student SET ... # 排他锁<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-复习"><a href="#3-复习" class="headerlink" title="3. 复习"></a>3. 复习</h2><h3 id="3-1-再谈隔离级别"><a href="#3-1-再谈隔离级别" class="headerlink" title="3.1 再谈隔离级别"></a>3.1 再谈隔离级别</h3><p>我们知道事务有 4 个隔离级别，可能存在三种并发问题：</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220714140441064.png" alt="image-20220714140441064"></p><img src="../pic/MySQL事务篇/image-20220714140510426.png" alt="image-20220714140510426" style="float:left;" /><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220714140541555.png" alt="image-20220714140541555"></p><h3 id="3-2-隐藏字段、Undo-Log版本链"><a href="#3-2-隐藏字段、Undo-Log版本链" class="headerlink" title="3.2 隐藏字段、Undo Log版本链"></a>3.2 隐藏字段、Undo Log版本链</h3><p>回顾一下undo日志的版本链，对于使用 InnoDB 存储引擎的表来说，它的聚簇索引记录中都包含两个必要的隐藏列。</p><ul><li><code>trx_id</code> ：每次一个事务对某条聚簇索引记录进行改动时，都会把该事务的 <code>事务id</code> 赋值给 <code>trx_id</code> 隐藏列。 </li><li><code>roll_pointer</code> ：每次对某条聚簇索引记录进行改动时，都会把旧的版本写入到 <code>undo日志</code> 中，然 后这个隐藏列就相当于一个指针，可以通过它来找到该记录修改前的信息。</li></ul><img src="../pic/MySQL事务篇/image-20220714140716427.png" alt="image-20220714140716427" style="float:left;" /><p>假设插入该记录的<code>事务id</code>为<code>8</code>，那么此刻该条记录的示意图如下所示：</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220714140801595.png" alt="image-20220714140801595"></p><blockquote><p>insert undo只在事务回滚时起作用，当事务提交后，该类型的undo日志就没用了，它占用的Undo Log Segment也会被系统回收（也就是该undo日志占用的Undo页面链表要么被重用，要么被释放）。</p></blockquote><p>假设之后两个事务id分别为 <code>10</code> 、 <code>20</code> 的事务对这条记录进行<code> UPDATE</code> 操作，操作流程如下：</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220714140846658.png" alt="image-20220714140846658"></p><img src="../pic/MySQL事务篇/image-20220714140908661.png" alt="image-20220714140908661" style="float:left;" /><p>每次对记录进行改动，都会记录一条undo日志，每条undo日志也都有一个 <code>roll_pointer</code> 属性 （ <code>INSERT</code> 操作对应的undo日志没有该属性，因为该记录并没有更早的版本），可以将这些 <code>undo日志</code> 都连起来，串成一个链表：</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220714141012874.png" alt="image-20220714141012874"></p><p>对该记录每次更新后，都会将旧值放到一条 <code>undo日志</code> 中，就算是该记录的一个旧版本，随着更新次数 的增多，所有的版本都会被 <code>roll_pointer</code> 属性连接成一个链表，我们把这个链表称之为 <code>版本链</code> ，版 本链的头节点就是当前记录最新的值。</p><p>每个版本中还包含生成该版本时对应的<code>事务id</code>。</p><h2 id="4-MVCC实现原理之ReadView"><a href="#4-MVCC实现原理之ReadView" class="headerlink" title="4. MVCC实现原理之ReadView"></a>4. MVCC实现原理之ReadView</h2><p>MVCC 的实现依赖于：<code>隐藏字段</code>、<code>Undo Log</code>、<code>Read View</code>。</p><h3 id="4-1-什么是ReadView"><a href="#4-1-什么是ReadView" class="headerlink" title="4.1 什么是ReadView"></a>4.1 什么是ReadView</h3><img src="../pic/MySQL事务篇/image-20220714141154235.png" alt="image-20220714141154235" style="float:left;" /><h3 id="4-2-设计思路"><a href="#4-2-设计思路" class="headerlink" title="4.2 设计思路"></a>4.2 设计思路</h3><p>使用 <code>READ UNCOMMITTED</code> 隔离级别的事务，由于可以读到未提交事务修改过的记录，所以直接读取记录的最新版本就好了。</p><p>使用 <code>SERIALIZABLE</code> 隔离级别的事务，InnoDB规定使用加锁的方式来访问记录。</p><p>使用 <code>READ COMMITTED</code> 和 <code>REPEATABLE READ</code> 隔离级别的事务，都必须保证读到 <code>已经提交了的</code> 事务修改过的记录。假如另一个事务已经修改了记录但是尚未提交，是不能直接读取最新版本的记录的，核心问题就是需要判断一下版本链中的哪个版本是当前事务可见的，这是ReadView要解决的主要问题。</p><p>这个ReadView中主要包含4个比较重要的内容，分别如下：</p><ol><li><p><code>creator_trx_id</code> ，创建这个 Read View 的事务 ID。</p><blockquote><p>说明：只有在对表中的记录做改动时（执行INSERT、DELETE、UPDATE这些语句时）才会为 事务分配事务id，否则在一个只读事务中的事务id值都默认为0。</p></blockquote></li><li><p><code>trx_ids</code> ，表示在生成ReadView时当前系统中活跃的读写事务的 <code>事务id列表</code> 。</p></li><li><p><code>up_limit_id</code> ，活跃的事务中最小的事务 ID。</p></li><li><p><code>low_limit_id</code> ，表示生成ReadView时系统中应该分配给下一个事务的 id 值。low_limit_id 是系 统最大的事务id值，这里要注意是系统中的事务id，需要区别于正在活跃的事务ID。</p></li></ol><blockquote><p>注意：low_limit_id并不是trx_ids中的最大值，事务id是递增分配的。比如，现在有id为1， 2，3这三个事务，之后id为3的事务提交了。那么一个新的读事务在生成ReadView时， trx_ids就包括1和2，up_limit_id的值就是1，low_limit_id的值就是4。</p></blockquote><img src="../pic/MySQL事务篇/image-20220714142254768.png" alt="image-20220714142254768" style="float:left;" /><h3 id="4-3-ReadView的规则"><a href="#4-3-ReadView的规则" class="headerlink" title="4.3 ReadView的规则"></a>4.3 ReadView的规则</h3><p>有了这个ReadView，这样在访问某条记录时，只需要按照下边的步骤判断记录的某个版本是否可见。</p><ul><li>如果被访问版本的trx_id属性值与ReadView中的 creator_trx_id 值相同，意味着当前事务在访问它自己修改过的记录，所以该版本可以被当前事务访问。 </li><li>如果被访问版本的trx_id属性值小于ReadView中的 up_limit_id 值，表明生成该版本的事务在当前事务生成ReadView前已经提交，所以该版本可以被当前事务访问。 </li><li>如果被访问版本的trx_id属性值大于或等于ReadView中的 low_limit_id 值，表明生成该版本的事务在当前事务生成ReadView后才开启，所以该版本不可以被当前事务访问。 </li><li>如果被访问版本的trx_id属性值在ReadView的 up_limit_id 和 low_limit_id 之间，那就需要判断一下trx_id属性值是不是在 trx_ids 列表中。<ul><li>如果在，说明创建ReadView时生成该版本的事务还是活跃的，该版本不可以被访问。 </li><li>如果不在，说明创建ReadView时生成该版本的事务已经被提交，该版本可以被访问。</li></ul></li></ul><h3 id="4-4-MVCC整体操作流程"><a href="#4-4-MVCC整体操作流程" class="headerlink" title="4.4 MVCC整体操作流程"></a>4.4 MVCC整体操作流程</h3><p>了解了这些概念之后，我们来看下当查询一条记录的时候，系统如何通过MVCC找到它：</p><ol><li>首先获取事务自己的版本号，也就是事务 ID； </li><li>获取 ReadView； </li><li>查询得到的数据，然后与 ReadView 中的事务版本号进行比较；</li><li>如果不符合 ReadView 规则，就需要从 Undo Log 中获取历史快照； </li><li>最后返回符合规则的数据。</li></ol><img src="../pic/MySQL事务篇/image-20220715130639408.png" alt="image-20220715130639408" style="float:left;" /><p>在隔离级别为读已提交（Read Committed）时，一个事务中的每一次 SELECT 查询都会重新获取一次 Read View。</p><p>如表所示：</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220715130843147.png" alt="image-20220715130843147"></p><blockquote><p>注意，此时同样的查询语句都会重新获取一次 Read View，这时如果 Read View 不同，就可能产生不可重复读或者幻读的情况。</p></blockquote><p>当隔离级别为可重复读的时候，就避免了不可重复读，这是因为一个事务只在第一次 SELECT 的时候会获取一次 Read View，而后面所有的 SELECT 都会复用这个 Read View，如下表所示：</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220715130916437.png" alt="image-20220715130916437"></p><h2 id="5-举例说明"><a href="#5-举例说明" class="headerlink" title="5. 举例说明"></a>5. 举例说明</h2><img src="../pic/MySQL事务篇/image-20220715131200077.png" alt="image-20220715131200077" style="float:left;" /><h3 id="5-1-READ-COMMITTED隔离级别下"><a href="#5-1-READ-COMMITTED隔离级别下" class="headerlink" title="5.1 READ COMMITTED隔离级别下"></a>5.1 READ COMMITTED隔离级别下</h3><p><strong>READ COMMITTED ：每次读取数据前都生成一个ReadView。</strong></p><p>现在有两个 <code>事务id</code> 分别为 <code>10</code> 、 <code>20</code> 的事务在执行:</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># Transaction 10BEGIN;UPDATE student SET name&#x3D;&quot;李四&quot; WHERE id&#x3D;1;UPDATE student SET name&#x3D;&quot;王五&quot; WHERE id&#x3D;1;# Transaction 20BEGIN;# 更新了一些别的表的记录...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>说明：事务执行过程中，只有在第一次真正修改记录时（比如使用INSERT、DELETE、UPDATE语句），才会被分配一个单独的事务id，这个事务id是递增的。所以我们才在事务2中更新一些别的表的记录，目的是让它分配事务id。</p></blockquote><p>此刻，表student 中 id 为 1 的记录得到的版本链表如下所示：</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220715133640655.png" alt="image-20220715133640655"></p><p>假设现在有一个使用 <code>READ COMMITTED</code> 隔离级别的事务开始执行：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 使用READ COMMITTED隔离级别的事务BEGIN;# SELECT1：Transaction 10、20未提交SELECT * FROM student WHERE id &#x3D; 1; # 得到的列name的值为&#39;张三&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="../pic/MySQL事务篇/image-20220715134540737.png" alt="image-20220715134540737" style="float:left;" /><p>之后，我们把 <code>事务id</code> 为 <code>10</code> 的事务提交一下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># Transaction 10BEGIN;UPDATE student SET name&#x3D;&quot;李四&quot; WHERE id&#x3D;1;UPDATE student SET name&#x3D;&quot;王五&quot; WHERE id&#x3D;1;COMMIT;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再到 <code>事务id</code> 为 <code>20</code> 的事务中更新一下表 <code>student</code> 中 <code>id</code> 为 <code>1</code> 的记录：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># Transaction 20BEGIN;# 更新了一些别的表的记录...UPDATE student SET name&#x3D;&quot;钱七&quot; WHERE id&#x3D;1;UPDATE student SET name&#x3D;&quot;宋八&quot; WHERE id&#x3D;1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此刻，表student中 <code>id</code> 为 <code>1</code> 的记录的版本链就长这样：</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220715134839081.png" alt="image-20220715134839081"></p><p>然后再到刚才使用 <code>READ COMMITTED</code> 隔离级别的事务中继续查找这个 id 为 1 的记录，如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 使用READ COMMITTED隔离级别的事务BEGIN;# SELECT1：Transaction 10、20均未提交SELECT * FROM student WHERE id &#x3D; 1; # 得到的列name的值为&#39;张三&#39;# SELECT2：Transaction 10提交，Transaction 20未提交SELECT * FROM student WHERE id &#x3D; 1; # 得到的列name的值为&#39;王五&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="../pic/MySQL事务篇/image-20220715135017000.png" alt="image-20220715135017000" style="float:left;" /><img src="../pic/MySQL事务篇/image-20220715135143939.png" alt="image-20220715135143939" style="float:left;" /><h3 id="5-2-REPEATABLE-READ隔离级别下"><a href="#5-2-REPEATABLE-READ隔离级别下" class="headerlink" title="5.2 REPEATABLE READ隔离级别下"></a>5.2 REPEATABLE READ隔离级别下</h3><p>使用 <code>REPEATABLE READ</code> 隔离级别的事务来说，只会在第一次执行查询语句时生成一个 <code>ReadView</code> ，之后的查询就不会重复生成了。</p><p>比如，系统里有两个 <code>事务id</code> 分别为 <code>10</code> 、 <code>20</code> 的事务在执行：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># Transaction 10BEGIN;UPDATE student SET name&#x3D;&quot;李四&quot; WHERE id&#x3D;1;UPDATE student SET name&#x3D;&quot;王五&quot; WHERE id&#x3D;1;# Transaction 20BEGIN;# 更新了一些别的表的记录...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此刻，表student 中 id 为 1 的记录得到的版本链表如下所示：</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220715140006061.png" alt="image-20220715140006061"></p><p>假设现在有一个使用 <code>REPEATABLE READ</code> 隔离级别的事务开始执行：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 使用REPEATABLE READ隔离级别的事务BEGIN;# SELECT1：Transaction 10、20未提交SELECT * FROM student WHERE id &#x3D; 1; # 得到的列name的值为&#39;张三&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="../pic/MySQL事务篇/image-20220715140155744.png" alt="image-20220715140155744" style="float:left;" /><p>之后，我们把 <code>事务id</code> 为 <code>10</code> 的事务提交一下，就像这样：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># Transaction 10BEGIN;UPDATE student SET name&#x3D;&quot;李四&quot; WHERE id&#x3D;1;UPDATE student SET name&#x3D;&quot;王五&quot; WHERE id&#x3D;1;COMMIT;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再到 <code>事务id</code> 为 <code>20</code> 的事务中更新一下表 <code>student</code> 中 <code>id</code> 为 <code>1</code> 的记录：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># Transaction 20BEGIN;# 更新了一些别的表的记录...UPDATE student SET name&#x3D;&quot;钱七&quot; WHERE id&#x3D;1;UPDATE student SET name&#x3D;&quot;宋八&quot; WHERE id&#x3D;1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此刻，表student 中 <code>id</code> 为 <code>1</code> 的记录的版本链长这样：</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220715140354217.png" alt="image-20220715140354217"></p><p>然后再到刚才使用 <code>REPEATABLE READ</code> 隔离级别的事务中继续查找这个 <code>id</code> 为 <code>1</code> 的记录，如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 使用REPEATABLE READ隔离级别的事务BEGIN;# SELECT1：Transaction 10、20均未提交SELECT * FROM student WHERE id &#x3D; 1; # 得到的列name的值为&#39;张三&#39;# SELECT2：Transaction 10提交，Transaction 20未提交SELECT * FROM student WHERE id &#x3D; 1; # 得到的列name的值仍为&#39;张三&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="../pic/MySQL事务篇/image-20220715140555172.png" alt="image-20220715140555172" style="float:left;" /><img src="../pic/MySQL事务篇/image-20220715140620328.png" alt="image-20220715140620328" style="float:left;" /><p>这次<code>SELECT</code>查询得到的结果是重复的，记录的列<code>c</code>值都是<code>张三</code>，这就是<code>可重复读</code>的含义。如果我们之后再把<code>事务id</code>为<code>20</code>的记录提交了，然后再到刚才使用<code>REPEATABLE READ</code>隔离级别的事务中继续查找这个<code>id</code>为<code>1</code>的记录，得到的结果还是<code>张三</code>，具体执行过程大家可以自己分析一下。</p><h3 id="5-3-如何解决幻读"><a href="#5-3-如何解决幻读" class="headerlink" title="5.3 如何解决幻读"></a>5.3 如何解决幻读</h3><p>接下来说明InnoDB 是如何解决幻读的。</p><p>假设现在表 student 中只有一条数据，数据内容中，主键 id&#x3D;1，隐藏的 trx_id&#x3D;10，它的 undo log 如下图所示。</p><img src="../pic/MySQL事务篇/image-20220715141002035.png" alt="image-20220715141002035" style="zoom:80%;" /><p>假设现在有事务 A 和事务 B 并发执行，<code>事务 A</code> 的事务 id 为 <code>20</code> ， <code>事务 B</code> 的事务 id 为 <code>30</code> 。</p><p>步骤1：事务 A 开始第一次查询数据，查询的 SQL 语句如下。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from student where id &gt;&#x3D; 1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在开始查询之前，MySQL 会为事务 A 产生一个 ReadView，此时 ReadView 的内容如下： <code>trx_ids= [20,30] ， up_limit_id=20 ， low_limit_id=31 ， creator_trx_id=20</code> 。</p><p>由于此时表 student 中只有一条数据，且符合 where id&gt;&#x3D;1 条件，因此会查询出来。然后根据 ReadView 机制，发现该行数据的trx_id&#x3D;10，小于事务 A 的 ReadView 里 up_limit_id，这表示这条数据是事务 A 开启之前，其他事务就已经提交了的数据，因此事务 A 可以读取到。</p><p>结论：事务 A 的第一次查询，能读取到一条数据，id&#x3D;1。</p><p>步骤2：接着事务 B(trx_id&#x3D;30)，往表 student 中新插入两条数据，并提交事务。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">insert into student(id,name) values(2,&#39;李四&#39;);insert into student(id,name) values(3,&#39;王五&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此时表student 中就有三条数据了，对应的 undo 如下图所示：</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220715141208667.png" alt="image-20220715141208667"></p><p>步骤3：接着事务 A 开启第二次查询，根据可重复读隔离级别的规则，此时事务 A 并不会再重新生成 ReadView。此时表 student 中的 3 条数据都满足 where id&gt;&#x3D;1 的条件，因此会先查出来。然后根据 ReadView 机制，判断每条数据是不是都可以被事务 A 看到。</p><p>1）首先 id&#x3D;1 的这条数据，前面已经说过了，可以被事务 A 看到。 </p><p>2）然后是 id&#x3D;2 的数据，它的 trx_id&#x3D;30，此时事务 A 发现，这个值处于 up_limit_id 和 low_limit_id 之 间，因此还需要再判断 30 是否处于 trx_ids 数组内。由于事务 A 的 trx_ids&#x3D;[20,30]，因此在数组内，这表 示 id&#x3D;2 的这条数据是与事务 A 在同一时刻启动的其他事务提交的，所以这条数据不能让事务 A 看到。</p><p>3）同理，id&#x3D;3 的这条数据，trx_id 也为 30，因此也不能被事务 A 看见。</p><p><img src="/../pic/MySQL%E4%BA%8B%E5%8A%A1%E7%AF%87/image-20220715141243993.png" alt="image-20220715141243993"></p><p>结论：最终事务 A 的第二次查询，只能查询出 id&#x3D;1 的这条数据。这和事务 A 的第一次查询的结果是一样 的，因此没有出现幻读现象，所以说在 MySQL 的可重复读隔离级别下，不存在幻读问题。</p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>这里介绍了 MVCC 在 <code>READ COMMITTD</code> 、 <code>REPEATABLE READ</code> 这两种隔离级别的事务在执行快照读操作时 访问记录的版本链的过程。这样使不同事务的 <code>读-写</code> 、 <code>写-读</code> 操作并发执行，从而提升系统性能。</p><p>核心点在于 ReadView 的原理， <code>READ COMMITTD</code> 、 <code>REPEATABLE READ</code> 这两个隔离级别的一个很大不同 就是生成ReadView的时机不同：</p><ul><li><code>READ COMMITTD</code> 在每一次进行普通SELECT操作前都会生成一个ReadView </li><li><code>REPEATABLE READ</code> 只在第一次进行普通SELECT操作前生成一个ReadView，之后的查询操作都重复 使用这个ReadView就好了。</li></ul><img src="../pic/MySQL事务篇/image-20220715141413135.png" alt="image-20220715141413135" style="float:left;" /><p>通过MVCC我们可以解决：</p><img src="../pic/MySQL事务篇/image-20220715141515370.png" alt="image-20220715141515370" style="float:left;" />]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 数据库事务 </tag>
            
            <tag> 事务日志 </tag>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/07/26/sql-cha-xun-you-hua-qi-qian-xi/"/>
      <url>/2022/07/26/sql-cha-xun-you-hua-qi-qian-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL逻辑框架和sql执行流程"><a href="#SQL逻辑框架和sql执行流程" class="headerlink" title="SQL逻辑框架和sql执行流程"></a>SQL逻辑框架和sql执行流程</h1><p>本文阐述两个问题：数据库处理客户端请求的流程是什么样的，sql在服务器中又是怎么运行的。以下内容均为本人理解，如有错误的地方，麻烦您指出。</p><h2 id="逻辑框架"><a href="#逻辑框架" class="headerlink" title="逻辑框架"></a>逻辑框架</h2><p>客户端进程通过 <strong>连接</strong> 向服务器进程发送一段文本( <strong>SQL</strong> 语句)，服务器进程处理后在向客户端发送一段文本(sql返回的<strong>结果</strong>)。</p><p>逻辑框架如下：</p><p><img src="/../pic/SQL%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E5%99%A8%E6%B5%85%E6%9E%90/1658824794326.png" alt="逻辑框架"></p><p>可以看出客户端通过<strong>连接</strong>向数据库服务器发送SQL语句，然后经过服务器<strong>处理</strong>将客户端请求的结果<strong>返回</strong>，为了容易理解可以将这个过程简单的看成 1.请求 -&gt; 2. 转换 -&gt; 3.导出 三部分，其中 <code>转换</code> 这一步骤就是我们接下来要说的<code>SQL的执行流程</code>。</p><h2 id="SQL-的执行流程"><a href="#SQL-的执行流程" class="headerlink" title="SQL 的执行流程"></a>SQL 的执行流程</h2><p>服务器会<code>解析查询</code>并创建相应的内部<code>解析树</code>，并对其完成相应的<code>优化</code> :<br>SQL -&gt; <strong>解析</strong> -&gt; <code>抽象语法树</code> -&gt; <strong>分析器</strong> -&gt; <code>生成逻辑计划</code> -&gt; <strong>优化器</strong> -&gt; <code>物理计划</code> -&gt; <strong>执行器</strong></p><p><img src="/../pic/SQL%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E5%99%A8%E6%B5%85%E6%9E%90/1658825542472.png" alt="sql的一生"></p><h3 id="Parser：解析器"><a href="#Parser：解析器" class="headerlink" title="Parser：解析器"></a>Parser：解析器</h3><ul><li>在解析器中对SQL进行<strong>词法分析</strong>（拆分字符串，提取关键字，字符串，数值等）和<strong>语法分析</strong>（把词条按照定义的语法规则组装成抽象语法树结构）；</li><li>把文本变成抽象语法树结构（AST）；</li><li><img src="/../pic/SQL%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E5%99%A8%E6%B5%85%E6%9E%90/1658826379224.png" alt="抽象语法树AST"></li></ul><h3 id="Analyzer：分析器"><a href="#Analyzer：分析器" class="headerlink" title="Analyzer：分析器"></a>Analyzer：分析器</h3><ul><li><p>访问库&#x2F;表元信息并绑定；</p></li><li><p>判断 SQL 是否合理，比如数据库，表和列名是否存在，列的数据类型是否正确；</p></li><li><p>将 AST 转换成逻辑计划树（在某些系统中这个工作由一个 Converter 完成）</p></li><li><p><img src="/../pic/SQL%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E5%99%A8%E6%B5%85%E6%9E%90/1658827018544.png" alt="逻辑计划树"></p><p>所谓逻辑计划树，可以理解为<strong>逻辑地</strong>描述一个 SQL 如何一步步地执行查询和计算，最终得到执行结果的一个分步骤地计划。树中每个节点是是一个算子，定义了对数据集合的计算操作（过滤，排序，聚合，连接），边代表了数据的流向，从孩子节点流向父节点。之所以称它为逻辑的，是因为算子定义的是逻辑的计算操作，没有指定实际的算法，比如对于逻辑的排序算子，逻辑计划树里没有指定使用快排还是堆排。</p></li></ul><h3 id="Optimizer：优化器"><a href="#Optimizer：优化器" class="headerlink" title="Optimizer：优化器"></a>Optimizer：优化器</h3><p>一条查询可以有很多种执行方式，最后都返回相同的结果。在优化器中会确定 SQL 语句的执行路径来找到其中代价最小的执行计划。</p><pre class="line-numbers language-none"><code class="language-none">比如：1.表中有多个索引，到底走哪个索引最合适；2.有多个表join，到底哪两个表先连接比较合适；...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在查询优化器中，可以分为 <code>逻辑查询</code> 优化阶段和 <code>物理查询</code> 优化阶段。</p><pre class="line-numbers language-none"><code class="language-none">逻辑查询:通过改变SQL语句的内容来使得SQL查询更高效,通常采用的方式是对SQL语句进行等价变换，对查询进行重写。物理查询:基于关系代数进行的查询重写。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体手段包括：</p><ul><li>列裁剪(指定列；</li><li>谓词下推(where在表扫描后就执行；</li><li>传递闭包(join表的条件传递；</li><li>Runtime Filter</li></ul><p>查询优化器分类：</p><ul><li>Top-down Optimizer:从目标输出开始，由上向下遍历计划树，找到完整最优执行计划。</li><li>Bottom-up Optimizer:从零开始，由下向上下遍历计划树，找到完整最优执行计划。</li><li>RBO：关系代数，一般由经验归纳得到。</li><li>CBO：使用模型估算执行计划的代价，选择代价最小的执行计划（动态规划）。</li></ul><p></p><h3 id="Executor：执行器"><a href="#Executor：执行器" class="headerlink" title="Executor：执行器"></a>Executor：执行器</h3><p>按照物理执行计划扫描和处理数据，充分利用机器资源（CPU 流水线，乱序执行，cache，SIMD）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL逻辑架构</title>
      <link href="/2022/07/26/mysql-jia-gou-pian/"/>
      <url>/2022/07/26/mysql-jia-gou-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="第04章-逻辑架构"><a href="#第04章-逻辑架构" class="headerlink" title="第04章_逻辑架构"></a>第04章_逻辑架构</h1><h2 id="1-逻辑架构剖析"><a href="#1-逻辑架构剖析" class="headerlink" title="1. 逻辑架构剖析"></a>1. 逻辑架构剖析</h2><h3 id="1-1-服务器处理客户端请求"><a href="#1-1-服务器处理客户端请求" class="headerlink" title="1.1 服务器处理客户端请求"></a>1.1 服务器处理客户端请求</h3><p>首先MySQL是典型的C&#x2F;S架构，即<code>Clinet/Server 架构</code>，服务端程序使用的mysqld。</p><p>不论客户端进程和服务器进程是采用哪种方式进行通信，最后实现的效果是：<strong>客户端进程向服务器进程发送一段文本（SQL语句），服务器进程处理后再向客户端进程发送一段文本（处理结果）</strong>。</p><p>那服务器进程对客户端进程发送的请求做了什么处理，才能产生最后的处理结果呢？这里以查询请求为 例展示：</p><p><img src="/../pic/MySQL%E6%9E%B6%E6%9E%84%E7%AF%87/image-20220615133227202.png" alt="image-20220615133227202"></p><p>下面具体展开如下：</p><p><img src="/../pic/MySQL%E6%9E%B6%E6%9E%84%E7%AF%87/image-20220615133420251.png" alt="image-20220615133420251"></p><h3 id="1-2-Connectors"><a href="#1-2-Connectors" class="headerlink" title="1.2 Connectors"></a>1.2 Connectors</h3><p>Connectors, 指的是不同语言中与SQL的交互。MySQL首先是一个网络程序，在TCP之上定义了自己的应用层协议。所以要使用MySQL，我们可以编写代码，跟MySQL Server <code>建立TCP连接</code>，之后按照其定义好的协议进行交互。或者比较方便的方法是调用SDK，比如Native C API、JDBC、PHP等各语言MySQL Connecotr,或者通过ODBC。但<strong>通过SDK来访问MySQL，本质上还是在TCP连接上通过MySQL协议跟MySQL进行交互</strong></p><p><strong>接下来的MySQL Server结构可以分为如下三层：</strong></p><h3 id="1-3-第一层：连接层"><a href="#1-3-第一层：连接层" class="headerlink" title="1.3 第一层：连接层"></a>1.3 第一层：连接层</h3><p>系统（客户端）访问 MySQL 服务器前，做的第一件事就是建立 TCP 连接。 经过三次握手建立连接成功后， MySQL 服务器对 TCP 传输过来的账号密码做身份认证、权限获取。</p><ul><li>用户名或密码不对，会收到一个Access denied for user错误，客户端程序结束执行 </li><li>用户名密码认证通过，会从权限表查出账号拥有的权限与连接关联，之后的权限判断逻辑，都将依赖于此时读到的权限</li></ul><p>TCP 连接收到请求后，必须要分配给一个线程专门与这个客户端的交互。所以还会有个线程池，去走后面的流程。每一个连接从线程池中获取线程，省去了创建和销毁线程的开销。</p><p>所以<strong>连接管理</strong>的职责是负责认证、管理连接、获取权限信息。</p><h3 id="1-4-第二层：服务层"><a href="#1-4-第二层：服务层" class="headerlink" title="1.4 第二层：服务层"></a>1.4 第二层：服务层</h3><p>第二层架构主要完成大多数的核心服务功能，如SQL接口，并完成<code>缓存的查询</code>，SQL的分析和优化及部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如过程、函数等。</p><p>在该层，服务器会<code>解析查询</code>并创建相应的内部<code>解析树</code>，并对其完成相应的<code>优化</code>：如确定查询表的顺序，是否利用索引等，最后生成相应的执行操作。</p><p>如果是SELECT语句，服务器还会<code>查询内部的缓存</code>。如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。</p><ul><li><p>SQL Interface: SQL接口 </p><ul><li>接收用户的SQL命令，并且返回用户需要查询的结果。比如SELECT … FROM就是调用SQL Interface </li><li>MySQL支持DML（数据操作语言）、DDL（数据定义语言）、存储过程、视图、触发器、自定 义函数等多种SQL语言接口</li></ul></li><li><p>Parser: 解析器</p><ul><li>在解析器中对 SQL 语句进行语法分析、语义分析。将SQL语句分解成数据结构，并将这个结构 传递到后续步骤，以后SQL语句的传递和处理就是基于这个结构的。如果在分解构成中遇到错 误，那么就说明这个SQL语句是不合理的。 </li><li>在SQL命令传递到解析器的时候会被解析器验证和解析，并为其创建 语法树 ，并根据数据字 典丰富查询语法树，会 验证该客户端是否具有执行该查询的权限 。创建好语法树后，MySQL还 会对SQl查询进行语法上的优化，进行查询重写。</li></ul></li><li><p>Optimizer: 查询优化器</p><ul><li>SQL语句在语法解析之后、查询之前会使用查询优化器确定 SQL 语句的执行路径，生成一个 执行计划 。 </li><li>这个执行计划表明应该 使用哪些索引 进行查询（全表检索还是使用索引检索），表之间的连 接顺序如何，最后会按照执行计划中的步骤调用存储引擎提供的方法来真正的执行查询，并将 查询结果返回给用户。</li><li>它使用“ 选取-投影-连接 ”策略进行查询。例如：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT id,name FROM student WHERE gender &#x3D; &#39;女&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个SELECT查询先根据WHERE语句进行 选取 ，而不是将表全部查询出来以后再进行gender过 滤。 这个SELECT查询先根据id和name进行属性 投影 ，而不是将属性全部取出以后再进行过 滤，将这两个查询条件 连接 起来生成最终查询结果。</p></li><li><p>Caches &amp; Buffers： 查询缓存组件</p><ul><li>MySQL内部维持着一些Cache和Buffer，比如Query Cache用来缓存一条SELECT语句的执行结 果，如果能够在其中找到对应的查询结果，那么就不必再进行查询解析、优化和执行的整个过 程了，直接将结果反馈给客户端。 </li><li>这个缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，key缓存，权限缓存等 。 这个查询缓存可以在 不同客户端之间共享 。 </li><li>从MySQL 5.7.20开始，不推荐使用查询缓存，并在 MySQL 8.0中删除 。</li></ul></li></ul><h3 id="1-5-第三层：引擎层"><a href="#1-5-第三层：引擎层" class="headerlink" title="1.5 第三层：引擎层"></a>1.5 第三层：引擎层</h3><p>插件式存储引擎层（ Storage Engines），<strong>真正的负责了MySQL中数据的存储和提取，对物理服务器级别维护的底层数据执行操作</strong>，服务器通过API与存储引擎进行通信。不同的存储引擎具有的功能不同，这样 我们可以根据自己的实际需要进行选取。</p><p>MySQL 8.0.25默认支持的存储引擎如下：</p><p><img src="/../pic/MySQL%E6%9E%B6%E6%9E%84%E7%AF%87/image-20220615140556893.png" alt="image-20220615140556893"></p><h3 id="1-6-存储层"><a href="#1-6-存储层" class="headerlink" title="1.6 存储层"></a>1.6 存储层</h3><p>所有的数据，数据库、表的定义，表的每一行的内容，索引，都是存在文件系统 上，以<code>文件</code>的方式存在的，并完成与存储引擎的交互。当然有些存储引擎比如InnoDB，也支持不使用文件系统直接管理裸设备，但现代文件系统的实现使得这样做没有必要了。在文件系统之下，可以使用本地磁盘，可以使用 DAS、NAS、SAN等各种存储系统。</p><h3 id="1-7-小结"><a href="#1-7-小结" class="headerlink" title="1.7 小结"></a>1.7 小结</h3><p>MySQL架构图本节开篇所示。下面为了熟悉SQL执行流程方便，我们可以简化如下：</p><p><img src="/../pic/MySQL%E6%9E%B6%E6%9E%84%E7%AF%87/image-20220615140710351.png" alt="image-20220615140710351"></p><p>简化为三层结构： </p><ol><li>连接层：客户端和服务器端建立连接，客户端发送 SQL 至服务器端； </li><li>SQL 层（服务层）：对 SQL 语句进行查询处理；与数据库文件的存储方式无关；</li><li>存储引擎层：与数据库文件打交道，负责数据的存储和读取。</li></ol><h2 id="2-SQL执行流程"><a href="#2-SQL执行流程" class="headerlink" title="2. SQL执行流程"></a>2. SQL执行流程</h2><h3 id="2-1-MySQL中的SQL执行流程"><a href="#2-1-MySQL中的SQL执行流程" class="headerlink" title="2.1 MySQL中的SQL执行流程"></a>2.1 MySQL中的SQL执行流程</h3><p><img src="/../pic/MySQL%E6%9E%B6%E6%9E%84%E7%AF%87/image-20220615141934531.png" alt="image-20220615141934531"></p><p>MySQL的查询流程：</p><ol><li><strong>查询缓存</strong>：Server 如果在查询缓存中发现了这条 SQL 语句，就会直接将结果返回给客户端；如果没 有，就进入到解析器阶段。需要说明的是，因为查询缓存往往效率不高，所以在 MySQL8.0 之后就抛弃了这个功能。</li></ol><p><strong>总之，因为查询缓存往往弊大于利，查询缓存的失效非常频繁。</strong></p><p>一般建议大家在静态表里使用查询缓存，什么叫<code>静态表</code>呢？就是一般我们极少更新的表。比如，一个系统配置表、字典表，这张表上的查询才适合使用查询缓存。好在MySQL也提供了这种“<code>按需使用</code>”的方式。你可以将 my.cnf 参数 query_cache_type 设置成 DEMAND，代表当 sql 语句中有 SQL_CACHE关键字时才缓存。比如：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># query_cache_type 有3个值。 0代表关闭查询缓存OFF，1代表开启ON，2代表(DEMAND)query_cache_type&#x3D;2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样对于默认的SQL语句都不使用查询缓存。而对于你确定要使用查询缓存的语句，可以供SQL_CACHE显示指定，像下面这个语句一样：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT SQl_CACHE * FROM test WHERE ID&#x3D;5;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看当前 mysql 实例是否开启缓存机制</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># MySQL5.7中：show global variables like &quot;%query_cache_type%&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>监控查询缓存的命中率：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show status like &#39;%Qcache%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="../pic/MySQL架构篇/image-20220615144537260.png" alt="image-20220615144537260" style="float:left;" /><p>运行结果解析：</p><p><code>Qcache_free_blocks</code>: 表示查询缓存中海油多少剩余的blocks，如果该值显示较大，则说明查询缓存中的<code>内部碎片</code>过多了，可能在一定的时间进行整理。</p><p><code>Qcache_free_memory</code>: 查询缓存的内存大小，通过这个参数可以很清晰的知道当前系统的查询内存是否够用，DBA可以根据实际情况做出调整。</p><p><code>Qcache_hits</code>: 表示有 <code>多少次命中缓存</code>。我们主要可以通过该值来验证我们的查询缓存的效果。数字越大，缓存效果越理想。</p><p><code>Qcache_inserts</code>: 表示<code>多少次未命中然后插入</code>，意思是新来的SQL请求在缓存中未找到，不得不执行查询处理，执行查询处理后把结果insert到查询缓存中。这样的情况的次数越多，表示查询缓存应用到的比较少，效果也就不理想。当然系统刚启动后，查询缓存是空的，这也正常。</p><p><code>Qcache_lowmem_prunes</code>: 该参数记录有<code>多少条查询因为内存不足而被移除</code>出查询缓存。通过这个值，用户可以适当的调整缓存大小。</p><p><code>Qcache_not_cached</code>: 表示因为query_cache_type的设置而没有被缓存的查询数量。</p><p><code>Qcache_queries_in_cache</code>: 当前缓存中<code>缓存的查询数量</code>。</p><p><code>Qcache_total_blocks</code>: 当前缓存的block数量。</p><ol start="2"><li><strong>解析器</strong>：在解析器中对 SQL 语句进行语法分析、语义分析。</li></ol><p><img src="/../pic/MySQL%E6%9E%B6%E6%9E%84%E7%AF%87/image-20220615142301226.png" alt="image-20220615142301226"></p><p>如果没有命中查询缓存，就要开始真正执行语句了。首先，MySQL需要知道你要做什么，因此需要对SQL语句做解析。SQL语句的分析分为词法分析与语法分析。</p><p>分析器先做“ <code>词法分析</code> ”。你输入的是由多个字符串和空格组成的一条 SQL 语句，MySQL 需要识别出里面 的字符串分别是什么，代表什么。 </p><p>MySQL 从你输入的”select”这个关键字识别出来，这是一个查询语 句。它也要把字符串“T”识别成“表名 T”，把字符串“ID”识别成“列 ID”。</p><p>接着，要做“ <code>语法分析</code> ”。根据词法分析的结果，语法分析器（比如：Bison）会根据语法规则，判断你输 入的这个 SQL 语句是否 <code>满足 MySQL 语法</code> 。</p><p>select department_id,job_id, avg(salary) from employees group by department_id; </p><p>如果SQL语句正确，则会生成一个这样的语法树：</p><p><img src="/../pic/MySQL%E6%9E%B6%E6%9E%84%E7%AF%87/image-20220615162031427.png" alt="image-20220615162031427"></p><p>下图是SQL分词分析的过程步骤:</p><p><img src="/../pic/MySQL%E6%9E%B6%E6%9E%84%E7%AF%87/image-20220615163338495.png" alt="image-20220615163338495"></p><p>至此解析器的工作任务也基本圆满了。</p><ol start="3"><li><p><strong>优化器</strong>：在优化器中会确定 SQL 语句的执行路径，比如是根据 <code>全表检索</code> ，还是根据 <code>索引检索</code> 等。 </p><p>经过解释器，MySQL就知道你要做什么了。在开始执行之前，还要先经过优化器的处理。<strong>一条查询可以有很多种执行方式，最后都返回相同的结果。优化器的作用就是找到这其中最好的执行计划</strong>。</p><p>比如：优化器是在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联 (join) 的时候，决定各个表的连接顺序，还有表达式简化、子查询转为连接、外连接转为内连接等。</p><p>举例：如下语句是执行两个表的 join：</p></li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from test1 join test2 using(ID)where test1.name&#x3D;&#39;zhangwei&#39; and test2.name&#x3D;&#39;mysql高级课程&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">方案1：可以先从表 test1 里面取出 name&#x3D;&#39;zhangwei&#39;的记录的 ID 值，再根据 ID 值关联到表 test2，再判断 test2 里面 name的值是否等于 &#39;mysql高级课程&#39;。方案2：可以先从表 test2 里面取出 name&#x3D;&#39;mysql高级课程&#39; 的记录的 ID 值，再根据 ID 值关联到 test1，再判断 test1 里面 name的值是否等于 zhangwei。这两种执行方法的逻辑结果是一样的，但是执行的效率会有不同，而优化器的作用就是决定选择使用哪一个方案。优化器阶段完成后，这个语句的执行方案就确定下来了，然后进入执行器阶段。如果你还有一些疑问，比如优化器是怎么选择索引的，有没有可能选择错等。后面讲到索引我们再谈。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在查询优化器中，可以分为 <code>逻辑查询</code> 优化阶段和 <code>物理查询</code> 优化阶段。</p><p>逻辑查询优化就是通过改变SQL语句的内容来使得SQL查询更高效，同时为物理查询优化提供更多的候选执行计划。通常采用的方式是对SQL语句进行<code>等价变换</code>，对查询进行<code>重写</code>，而查询重写的数学基础就是关系代数。对条件表达式进行等价谓词重写、条件简化，对视图进行重写，对子查询进行优化，对连接语义进行了外连接消除、嵌套连接消除等。</p><p>物理查询优化是基于关系代数进行的查询重写，而关系代数的每一步都对应着物理计算，这些物理计算往往存在多种算法，因此需要计算各种物理路径的代价，从中选择代价最小的作为执行计划。在这个阶段里，对于单表和多表连接的操作，需要高效地<code>使用索引</code>，提升查询效率。</p><ol start="4"><li><strong>执行器</strong>：</li></ol><p>截止到现在，还没有真正去读写真实的表，仅仅只是产出了一个执行计划。于是就进入了执行器阶段 。</p><p><img src="/../pic/MySQL%E6%9E%B6%E6%9E%84%E7%AF%87/image-20220615162613806.png" alt="image-20220615162613806"></p><p>在执行之前需要判断该用户是否 <code>具备权限</code> 。如果没有，就会返回权限错误。如果具备权限，就执行 SQL 查询并返回结果。在 MySQL8.0 以下的版本，如果设置了查询缓存，这时会将查询结果进行缓存。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from test where id&#x3D;1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>比如：表 test 中，ID 字段没有索引，那么执行器的执行流程是这样的：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">调用 InnoDB 引擎接口取这个表的第一行，判断 ID 值是不是1，如果不是则跳过，如果是则将这行存在结果集中；调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>至此，这个语句就执行完成了。对于有索引的表，执行的逻辑也差不多。</p><p>SQL 语句在 MySQL 中的流程是： <code>SQL语句</code>→<code>查询缓存</code>→<code>解析器</code>→<code>优化器</code>→<code>执行器</code> 。</p><p><img src="/../pic/MySQL%E6%9E%B6%E6%9E%84%E7%AF%87/image-20220615164722975.png" alt="image-20220615164722975"></p><h3 id="2-2-MySQL8中SQL执行原理"><a href="#2-2-MySQL8中SQL执行原理" class="headerlink" title="2.2 MySQL8中SQL执行原理"></a>2.2 MySQL8中SQL执行原理</h3><h4 id="1-确认profiling是否开启"><a href="#1-确认profiling是否开启" class="headerlink" title="1) 确认profiling是否开启"></a>1) 确认profiling是否开启</h4><p>了解查询语句底层执行的过程：<code>select @profiling</code> 或者 <code>show variables like &#39;%profiling&#39;</code> 查看是否开启计划。开启它可以让MySQL收集在SQL</p><p>执行时所使用的资源情况，命令如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select @@profiling;mysql&gt; show variables like &#39;profiling&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>profiling&#x3D;0 代表关闭，我们需要把 profiling 打开，即设置为 1：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; set profiling&#x3D;1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-多次执行相同SQL查询"><a href="#2-多次执行相同SQL查询" class="headerlink" title="2) 多次执行相同SQL查询"></a>2) 多次执行相同SQL查询</h4><p>然后我们执行一个 SQL 查询（你可以执行任何一个 SQL 查询）：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select * from employees;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-查看profiles"><a href="#3-查看profiles" class="headerlink" title="3) 查看profiles"></a>3) 查看profiles</h4><p>查看当前会话所产生的所有 profiles：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show profiles; # 显示最近的几次查询<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-查看profile"><a href="#4-查看profile" class="headerlink" title="4) 查看profile"></a>4) 查看profile</h4><p>显示执行计划，查看程序的执行步骤：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show profile;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E6%9E%B6%E6%9E%84%E7%AF%87/image-20220615172149919.png" alt="image-20220615172149919"></p><p>当然你也可以查询指定的 Query ID，比如：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show profile for query 7;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询 SQL 的执行时间结果和上面是一样的。</p><p>此外，还可以查询更丰富的内容：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show profile cpu,block io for query 6;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E6%9E%B6%E6%9E%84%E7%AF%87/image-20220615172409967.png" alt="image-20220615172409967"></p><p>继续：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show profile cpu,block io for query 7;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E6%9E%B6%E6%9E%84%E7%AF%87/image-20220615172438338.png" alt="image-20220615172438338"></p><p>1、除了查看cpu、io阻塞等参数情况，还可以查询下列参数的利用情况。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">Syntax:SHOW PROFILE [type [, type] ... ][FOR QUERY n][LIMIT row_count [OFFSET offset]]type: &#123;| ALL -- 显示所有参数的开销信息| BLOCK IO -- 显示IO的相关开销| CONTEXT SWITCHES -- 上下文切换相关开销| CPU -- 显示CPU相关开销信息| IPC -- 显示发送和接收相关开销信息| MEMORY -- 显示内存相关开销信息| PAGE FAULTS -- 显示页面错误相关开销信息| SOURCE -- 显示和Source_function,Source_file,Source_line 相关的开销信息| SWAPS -- 显示交换次数相关的开销信息&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、发现两次查询当前情况都一致，说明没有缓存。</p><p><code>在 8.0 版本之后，MySQL 不再支持缓存的查询</code>。一旦数据表有更新，缓存都将清空，因此只有数据表是静态的时候，或者数据表很少发生变化时，使用缓存查询才有价值，否则如果数据表经常更新，反而增加了 SQL 的查询时间。</p><h3 id="2-3-MySQL5-7中SQL执行原理"><a href="#2-3-MySQL5-7中SQL执行原理" class="headerlink" title="2.3 MySQL5.7中SQL执行原理"></a>2.3 MySQL5.7中SQL执行原理</h3><p>上述操作在MySQL5.7中测试，发现前后两次相同的sql语句，执行的查询过程仍然是相同的。不是会使用 缓存吗？这里我们需要 显式开启查询缓存模式 。在MySQL5.7中如下设置：</p><h4 id="1-配置文件中开启查询缓存"><a href="#1-配置文件中开启查询缓存" class="headerlink" title="1) 配置文件中开启查询缓存"></a>1) 配置文件中开启查询缓存</h4><p>在 &#x2F;etc&#x2F;my.cnf 中新增一行：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">query_cache_type&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-重启mysql服务"><a href="#2-重启mysql服务" class="headerlink" title="2) 重启mysql服务"></a>2) 重启mysql服务</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">systemctl restart mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-开启查询执行计划"><a href="#3-开启查询执行计划" class="headerlink" title="3) 开启查询执行计划"></a>3) 开启查询执行计划</h4><p>由于重启过服务，需要重新执行如下指令，开启profiling。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; set profiling&#x3D;1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-执行语句两次："><a href="#4-执行语句两次：" class="headerlink" title="4) 执行语句两次："></a>4) 执行语句两次：</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select * from locations;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-查看profiles"><a href="#5-查看profiles" class="headerlink" title="5) 查看profiles"></a>5) 查看profiles</h4><p><img src="/../pic/MySQL%E6%9E%B6%E6%9E%84%E7%AF%87/image-20220615173727345.png" alt="image-20220615173727345"></p><h4 id="6-查看profile"><a href="#6-查看profile" class="headerlink" title="6) 查看profile"></a>6) 查看profile</h4><p>显示执行计划，查看程序的执行步骤：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show profile for query 1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E6%9E%B6%E6%9E%84%E7%AF%87/image-20220615173803835.png" alt="image-20220615173803835"></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show profile for query 2;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E6%9E%B6%E6%9E%84%E7%AF%87/image-20220615173822079.png" alt="image-20220615173822079"></p><p>结论不言而喻。执行编号2时，比执行编号1时少了很多信息，从截图中可以看出查询语句直接从缓存中 获取数据。</p><h3 id="2-4-SQL语法顺序"><a href="#2-4-SQL语法顺序" class="headerlink" title="2.4 SQL语法顺序"></a>2.4 SQL语法顺序</h3><p>随着Mysql版本的更新换代，其优化器也在不断的升级，优化器会分析不同执行顺序产生的性能消耗不同 而动态调整执行顺序。</p><h2 id="3-数据库缓冲池（buffer-pool）"><a href="#3-数据库缓冲池（buffer-pool）" class="headerlink" title="3. 数据库缓冲池（buffer pool）"></a>3. 数据库缓冲池（buffer pool）</h2><p><code>InnoDB</code> 存储引擎是以页为单位来管理存储空间的，我们进行的增删改查操作其实本质上都是在访问页面（包括读页面、写页面、创建新页面等操作）。而磁盘 I&#x2F;O 需要消耗的时间很多，而在内存中进行操作，效率则会高很多，为了能让数据表或者索引中的数据随时被我们所用，DBMS 会申请<code>占用内存来作为数据缓冲池</code> ，在真正访问页面之前，需要把在磁盘上的页缓存到内存中的 Buffer Pool 之后才可以访问。</p><p>这样做的好处是可以让磁盘活动最小化，从而 <code>减少与磁盘直接进行 I/O 的时间 </code>。要知道，这种策略对提升 SQL 语句的查询性能来说至关重要。如果索引的数据在缓冲池里，那么访问的成本就会降低很多。</p><h3 id="3-1-缓冲池-vs-查询缓存"><a href="#3-1-缓冲池-vs-查询缓存" class="headerlink" title="3.1 缓冲池 vs 查询缓存"></a>3.1 缓冲池 vs 查询缓存</h3><p>缓冲池和查询缓存是一个东西吗？不是。</p><h4 id="1-缓冲池（Buffer-Pool）"><a href="#1-缓冲池（Buffer-Pool）" class="headerlink" title="1) 缓冲池（Buffer Pool）"></a>1) 缓冲池（Buffer Pool）</h4><p>首先我们需要了解在 InnoDB 存储引擎中，缓冲池都包括了哪些。</p><p>在 InnoDB 存储引擎中有一部分数据会放到内存中，缓冲池则占了这部分内存的大部分，它用来存储各种数据的缓存，如下图所示：</p><p><img src="/../pic/MySQL%E6%9E%B6%E6%9E%84%E7%AF%87/image-20220615175309751.png" alt="image-20220615175309751"></p><p>从图中，你能看到 InnoDB 缓冲池包括了数据页、索引页、插入缓冲、锁信息、自适应 Hash 和数据字典信息等。</p><p><strong>缓存池的重要性：</strong></p><p><strong>缓存原则：</strong></p><p>“ <code>位置 * 频次</code> ”这个原则，可以帮我们对 I&#x2F;O 访问效率进行优化。</p><p>首先，位置决定效率，提供缓冲池就是为了在内存中可以直接访问数据。</p><p>其次，频次决定优先级顺序。因为缓冲池的大小是有限的，比如磁盘有 200G，但是内存只有 16G，缓冲池大小只有 1G，就无法将所有数据都加载到缓冲池里，这时就涉及到优先级顺序，会<code>优先对使用频次高的热数据进行加载 </code>。</p><p><strong>缓冲池的预读特性:</strong></p><p>缓冲池的作用就是提升 I&#x2F;O 效率，而我们进行读取数据的时候存在一个“局部性原理”，也就是说我们使用了一些数据，<strong>大概率还会使用它周围的一些数据</strong>，因此采用“预读”的机制提前加载，可以减少未来可能的磁盘 I&#x2F;O 操作。</p><h4 id="2-查询缓存"><a href="#2-查询缓存" class="headerlink" title="2) 查询缓存"></a>2) 查询缓存</h4><p>那么什么是查询缓存呢？ </p><p>查询缓存是提前把 查询结果缓存起来，这样下次不需要执行就可以直接拿到结果。需要说明的是，在 MySQL 中的查询缓存，不是缓存查询计划，而是查询对应的结果。因为命中条件苛刻，而且只要数据表 发生变化，查询缓存就会失效，因此命中率低。</p><h3 id="3-2-缓冲池如何读取数据"><a href="#3-2-缓冲池如何读取数据" class="headerlink" title="3.2 缓冲池如何读取数据"></a>3.2 缓冲池如何读取数据</h3><p>缓冲池管理器会尽量将经常使用的数据保存起来，在数据库进行页面读操作的时候，首先会判断该页面 是否在缓冲池中，如果存在就直接读取，如果不存在，就会通过内存或磁盘将页面存放到缓冲池中再进行读取。</p><p>缓存在数据库中的结构和作用如下图所示：</p><p><img src="/../pic/MySQL%E6%9E%B6%E6%9E%84%E7%AF%87/image-20220615193131719.png" alt="image-20220615193131719"></p><p><strong>如果我们执行 SQL 语句的时候更新了缓存池中的数据，那么这些数据会马上同步到磁盘上吗？</strong></p><p>实际上，当我们对数据库中的记录进行修改的时候，首先会修改缓冲池中页里面的记录信息，然后数据库会<code>以一定的频率刷新</code>到磁盘中。注意并不是每次发生更新操作，都会立即进行磁盘回写。缓冲池会采用一种叫做 <code>checkpoint 的机制</code> 将数据回写到磁盘上，这样做的好处就是提升了数据库的整体性能。</p><p>比如，当<code>缓冲池不够用</code>时，需要释放掉一些不常用的页，此时就可以强行采用checkpoint的方式，将不常用的脏页回写到磁盘上，然后再从缓存池中将这些页释放掉。这里的脏页 (dirty page) 指的是缓冲池中被修改过的页，与磁盘上的数据页不一致。</p><h3 id="3-3-查看-x2F-设置缓冲池的大小"><a href="#3-3-查看-x2F-设置缓冲池的大小" class="headerlink" title="3.3 查看&#x2F;设置缓冲池的大小"></a>3.3 查看&#x2F;设置缓冲池的大小</h3><p>如果你使用的是 MySQL MyISAM 存储引擎，它只缓存索引，不缓存数据，对应的键缓存参数为<code>key_buffer_size</code>，你可以用它进行查看。</p><p>如果你使用的是 InnoDB 存储引擎，可以通过查看 innodb_buffer_pool_size 变量来查看缓冲池的大小。命令如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show variables like &#39;innodb_buffer_pool_size&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="../pic/MySQL架构篇/image-20220615214847480.png" alt="image-20220615214847480" style="zoom:80%;" /><p>你能看到此时 InnoDB 的缓冲池大小只有 134217728&#x2F;1024&#x2F;1024&#x3D;128MB。我们可以修改缓冲池大小，比如改为256MB，方法如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">set global innodb_buffer_pool_size &#x3D; 268435456;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">[server]innodb_buffer_pool_size &#x3D; 268435456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-4-多个Buffer-Pool实例"><a href="#3-4-多个Buffer-Pool实例" class="headerlink" title="3.4 多个Buffer Pool实例"></a>3.4 多个Buffer Pool实例</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">[server]innodb_buffer_pool_instances &#x3D; 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样就表明我们要创建2个 <code>Buffer Pool</code> 实例。</p><p>我们看下如何查看缓冲池的个数，使用命令：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show variables like &#39;innodb_buffer_pool_instances&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那每个 Buffer Pool 实例实际占多少内存空间呢？其实使用这个公式算出来的：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">innodb_buffer_pool_size&#x2F;innodb_buffer_pool_instances<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也就是总共的大小除以实例的个数，结果就是每个 Buffer Pool 实例占用的大小。</p><p>不过也不是说 Buffer Pool 实例创建的越多越好，分别管理各个 Buffer Pool 也是需要性能开销的，InnDB规定：当innodb_buffer_pool_size的值小于1G的时候设置多个实例是无效的，InnoDB会默认把innodb_buffer_pool_instances的值修改为1。而我们鼓励在 Buffer Pool 大于等于 1G 的时候设置多个 Buffer Pool 实例。</p><h3 id="3-5-引申问题"><a href="#3-5-引申问题" class="headerlink" title="3.5 引申问题"></a>3.5 引申问题</h3><p>Buffer Pool是MySQL内存结构中十分核心的一个组成，你可以先把它想象成一个黑盒子。</p><p>黑盒下的更新数据流程</p><p>当我们查询数据的时候，会先去 Buffer Pool 中查询。如果 Buffer Pool 中不存在，存储引擎会先将数据从磁盘加载到 Buffer Pool 中，然后将数据返回给客户端；同理，当我们更新某个数据的时候，如果这个数据不存在于 Buffer Pool，同样会先数据加载进来，然后修改内存的数据。被修改的数据会在之后统一刷入磁盘。</p><p><img src="/../pic/MySQL%E6%9E%B6%E6%9E%84%E7%AF%87/image-20220615222455867.png" alt="image-20220615222455867"></p><p>我更新到一半突然发生错误了，想要回滚到更新之前的版本，该怎么办？连数据持久化的保证、事务回滚都做不到还谈什么崩溃恢复？</p><p>答案：<strong>Redo Log</strong> &amp; <strong>Undo Log</strong></p><h1 id="第05章-存储引擎"><a href="#第05章-存储引擎" class="headerlink" title="第05章_存储引擎"></a>第05章_存储引擎</h1><h2 id="1-查看存储引擎"><a href="#1-查看存储引擎" class="headerlink" title="1. 查看存储引擎"></a>1. 查看存储引擎</h2><ul><li>查看mysql提供什么存储引擎</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show engines;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E6%9E%B6%E6%9E%84%E7%AF%87/image-20220615223831995.png" alt="image-20220615223831995"></p><h2 id="2-设置系统默认的存储引擎"><a href="#2-设置系统默认的存储引擎" class="headerlink" title="2. 设置系统默认的存储引擎"></a>2. 设置系统默认的存储引擎</h2><ul><li>查看默认的存储引擎</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show variables like &#39;%storage_engine%&#39;;#或SELECT @@default_storage_engine;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="../pic/MySQL架构篇/image-20220615224249491.png" alt="image-20220615224249491" style="zoom:60%;" /><ul><li>修改默认的存储引擎</li></ul><p>如果在创建表的语句中没有显式指定表的存储引擎的话，那就会默认使用 InnoDB 作为表的存储引擎。 如果我们想改变表的默认存储引擎的话，可以这样写启动服务器的命令行：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SET DEFAULT_STORAGE_ENGINE&#x3D;MyISAM;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者修改 my.cnf 文件：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">default-storage-engine&#x3D;MyISAM# 重启服务systemctl restart mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-设置表的存储引擎"><a href="#3-设置表的存储引擎" class="headerlink" title="3. 设置表的存储引擎"></a>3. 设置表的存储引擎</h2><p>存储引擎是负责对表中的数据进行提取和写入工作的，我们可以为 不同的表设置不同的存储引擎 ，也就是 说不同的表可以有不同的物理存储结构，不同的提取和写入方式。</p><h3 id="3-1-创建表时指定存储引擎"><a href="#3-1-创建表时指定存储引擎" class="headerlink" title="3.1 创建表时指定存储引擎"></a>3.1 创建表时指定存储引擎</h3><p>我们之前创建表的语句都没有指定表的存储引擎，那就会使用默认的存储引擎 InnoDB 。如果我们想显 式的指定一下表的存储引擎，那可以这么写：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE 表名(建表语句;) ENGINE &#x3D; 存储引擎名称;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-2-修改表的存储引擎"><a href="#3-2-修改表的存储引擎" class="headerlink" title="3.2 修改表的存储引擎"></a>3.2 修改表的存储引擎</h3><p>如果表已经建好了，我们也可以使用下边这个语句来修改表的存储引擎：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE 表名 ENGINE &#x3D; 存储引擎名称;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>比如我们修改一下 engine_demo_table 表的存储引擎：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; ALTER TABLE engine_demo_table ENGINE &#x3D; InnoDB;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时我们再查看一下 engine_demo_table 的表结构：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SHOW CREATE TABLE engine_demo_table\G*************************** 1. row ***************************Table: engine_demo_tableCreate Table: CREATE TABLE &#96;engine_demo_table&#96; (&#96;i&#96; int(11) DEFAULT NULL) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf81 row in set (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-引擎介绍"><a href="#4-引擎介绍" class="headerlink" title="4. 引擎介绍"></a>4. 引擎介绍</h2><h3 id="4-1-InnoDB-引擎：具备外键支持功能的事务存储引擎"><a href="#4-1-InnoDB-引擎：具备外键支持功能的事务存储引擎" class="headerlink" title="4.1 InnoDB 引擎：具备外键支持功能的事务存储引擎"></a>4.1 InnoDB 引擎：具备外键支持功能的事务存储引擎</h3><ul><li>MySQL从3.23.34a开始就包含InnoDB存储引擎。 <code>大于等于5.5之后，默认采用InnoDB引擎</code> 。</li><li>InnoDB是MySQL的 默认事务型引擎 ，它被设计用来处理大量的短期(short-lived)事务。可以确保事务的完整提交(Commit)和回滚(Rollback)。 </li><li>除了增加和查询外，还需要更新、删除操作，那么，应优先选择InnoDB存储引擎。 除非有非常特别的原因需要使用其他的存储引擎，否则应该优先考虑InnoDB引擎。 </li><li>数据文件结构：（在《第02章_MySQL数据目录》章节已讲） <ul><li>表名.frm 存储表结构（MySQL8.0时，合并在表名.ibd中） </li><li>表名.ibd 存储数据和索引</li></ul></li><li>InnoDB是 为处理巨大数据量的最大性能设计 。 <ul><li>在以前的版本中，字典数据以元数据文件、非事务表等来存储。现在这些元数据文件被删除 了。比如： .frm ， .par ， .trn ， .isl ， .db.opt 等都在MySQL8.0中不存在了。</li></ul></li><li>对比MyISAM的存储引擎， InnoDB写的处理效率差一些 ，并且会占用更多的磁盘空间以保存数据和索引。 </li><li>MyISAM只缓存索引，不缓存真实数据；InnoDB不仅缓存索引还要缓存真实数据， 对内存要求较 高 ，而且内存大小对性能有决定性的影响。</li></ul><h3 id="4-2-MyISAM-引擎：主要的非事务处理存储引擎"><a href="#4-2-MyISAM-引擎：主要的非事务处理存储引擎" class="headerlink" title="4.2 MyISAM 引擎：主要的非事务处理存储引擎"></a>4.2 MyISAM 引擎：主要的非事务处理存储引擎</h3><ul><li>MyISAM提供了大量的特性，包括全文索引、压缩、空间函数(GIS)等，但MyISAM不支持事务、行级 锁、外键 ，有一个毫无疑问的缺陷就是崩溃后无法安全恢复 。</li><li>5.5之前默认的存储引擎 </li><li>优势是访问的速度快 ，对事务完整性没有要求或者以SELECT、INSERT为主的应用 </li><li>针对数据统计有额外的常数存储。故而 count(*) 的查询效率很高 数据文件结构：（在《第02章_MySQL数据目录》章节已讲） <ul><li>表名.frm 存储表结构 </li><li>表名.MYD 存储数据 (MYData) </li><li>表名.MYI 存储索引 (MYIndex)</li></ul></li><li>应用场景：只读应用或者以读为主的业务</li></ul><h3 id="4-3-Archive-引擎：用于数据存档"><a href="#4-3-Archive-引擎：用于数据存档" class="headerlink" title="4.3 Archive 引擎：用于数据存档"></a>4.3 Archive 引擎：用于数据存档</h3><ul><li>下表展示了ARCHIVE 存储引擎功能</li></ul><img src="../pic/MySQL架构篇/image-20220616124743732.png" alt="image-20220616124743732" style="float:left;" /><h3 id="4-4-Blackhole-引擎：丢弃写操作，读操作会返回空内容"><a href="#4-4-Blackhole-引擎：丢弃写操作，读操作会返回空内容" class="headerlink" title="4.4 Blackhole 引擎：丢弃写操作，读操作会返回空内容"></a>4.4 Blackhole 引擎：丢弃写操作，读操作会返回空内容</h3><h3 id="4-5-CSV-引擎：存储数据时，以逗号分隔各个数据项"><a href="#4-5-CSV-引擎：存储数据时，以逗号分隔各个数据项" class="headerlink" title="4.5 CSV 引擎：存储数据时，以逗号分隔各个数据项"></a>4.5 CSV 引擎：存储数据时，以逗号分隔各个数据项</h3><p>使用案例如下</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; CREATE TABLE test (i INT NOT NULL, c CHAR(10) NOT NULL) ENGINE &#x3D; CSV;Query OK, 0 rows affected (0.06 sec)mysql&gt; INSERT INTO test VALUES(1,&#39;record one&#39;),(2,&#39;record two&#39;);Query OK, 2 rows affected (0.05 sec)Records: 2 Duplicates: 0 Warnings: 0mysql&gt; SELECT * FROM test;+---+------------+| i |      c     |+---+------------+| 1 | record one || 2 | record two |+---+------------+2 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建CSV表还会创建相应的元文件 ，用于 存储表的状态 和 表中存在的行数 。此文件的名称与表的名称相 同，后缀为 CSM 。如图所示</p><p><img src="/../pic/MySQL%E6%9E%B6%E6%9E%84%E7%AF%87/image-20220616125342599.png" alt="image-20220616125342599"></p><p>如果检查 test.CSV 通过执行上述语句创建的数据库目录中的文件，其内容使用Notepad++打开如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&quot;1&quot;,&quot;record one&quot;&quot;2&quot;,&quot;record two&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这种格式可以被 Microsoft Excel 等电子表格应用程序读取，甚至写入。使用Microsoft Excel打开如图所示</p><p><img src="/../pic/MySQL%E6%9E%B6%E6%9E%84%E7%AF%87/image-20220616125448555.png" alt="image-20220616125448555"></p><h3 id="4-6-Memory-引擎：置于内存的表"><a href="#4-6-Memory-引擎：置于内存的表" class="headerlink" title="4.6 Memory 引擎：置于内存的表"></a>4.6 Memory 引擎：置于内存的表</h3><p><strong>概述：</strong></p><p>Memory采用的逻辑介质是内存 ，响应速度很快 ，但是当mysqld守护进程崩溃的时候数据会丢失 。另外，要求存储的数据是数据长度不变的格式，比如，Blob和Text类型的数据不可用(长度不固定的)。</p><p><strong>主要特征：</strong></p><ul><li>Memory同时 支持哈希（HASH）索引 和 B+树索引 。 </li><li>Memory表至少比MyISAM表要快一个数量级 。 </li><li>MEMORY 表的大小是受到限制 的。表的大小主要取决于两个参数，分别是 max_rows 和 max_heap_table_size 。其中，max_rows可以在创建表时指定；max_heap_table_size的大小默 认为16MB，可以按需要进行扩大。 </li><li>数据文件与索引文件分开存储。 </li><li>缺点：其数据易丢失，生命周期短。基于这个缺陷，选择MEMORY存储引擎时需要特别小心。</li></ul><p><strong>使用Memory存储引擎的场景：</strong></p><ol><li>目标数据比较小 ，而且非常频繁的进行访问 ，在内存中存放数据，如果太大的数据会造成内存溢出 。可以通过参数 max_heap_table_size 控制Memory表的大小，限制Memory表的最大的大小。 </li><li>如果数据是临时的 ，而且必须立即可用得到，那么就可以放在内存中。</li><li>存储在Memory表中的数据如果突然间丢失的话也没有太大的关系 。</li></ol><h3 id="4-7-Federated-引擎：访问远程表"><a href="#4-7-Federated-引擎：访问远程表" class="headerlink" title="4.7 Federated 引擎：访问远程表"></a>4.7 Federated 引擎：访问远程表</h3><p><strong>Federated引擎是访问其他MySQL服务器的一个 代理 ，尽管该引擎看起来提供了一种很好的 跨服务 器的灵活性 ，但也经常带来问题，因此 默认是禁用的 。</strong></p><h3 id="4-8-Merge引擎：管理多个MyISAM表构成的表集合"><a href="#4-8-Merge引擎：管理多个MyISAM表构成的表集合" class="headerlink" title="4.8 Merge引擎：管理多个MyISAM表构成的表集合"></a>4.8 Merge引擎：管理多个MyISAM表构成的表集合</h3><h3 id="4-9-NDB引擎：MySQL集群专用存储引擎"><a href="#4-9-NDB引擎：MySQL集群专用存储引擎" class="headerlink" title="4.9 NDB引擎：MySQL集群专用存储引擎"></a>4.9 NDB引擎：MySQL集群专用存储引擎</h3><p>也叫做 NDB Cluster 存储引擎，主要用于 MySQL Cluster 分布式集群 环境，类似于 Oracle 的 RAC 集 群。</p><h3 id="4-10-引擎对比"><a href="#4-10-引擎对比" class="headerlink" title="4.10 引擎对比"></a>4.10 引擎对比</h3><p>MySQL中同一个数据库，不同的表可以选择不同的存储引擎。如下表对常用存储引擎做出了对比。</p><p><img src="/../pic/MySQL%E6%9E%B6%E6%9E%84%E7%AF%87/image-20220616125928861.png" alt="image-20220616125928861"></p><p><img src="/../pic/MySQL%E6%9E%B6%E6%9E%84%E7%AF%87/image-20220616125945304.png" alt="image-20220616125945304"></p><p>其实这些东西大家没必要立即就给记住，列出来的目的就是想让大家明白不同的存储引擎支持不同的功能。</p><p>其实我们最常用的就是 InnoDB 和 MyISAM ，有时会提一下 Memory 。其中 InnoDB 是 MySQL 默认的存储引擎。</p><h2 id="5-MyISAM和InnoDB"><a href="#5-MyISAM和InnoDB" class="headerlink" title="5. MyISAM和InnoDB"></a>5. MyISAM和InnoDB</h2><p>很多人对 InnoDB 和 MyISAM 的取舍存在疑问，到底选择哪个比较好呢？ </p><p>MySQL5.5之前的默认存储引擎是MyISAM，5.5之后改为了InnoDB。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> sql执行流程 </tag>
            
            <tag> MySQL存储引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引及调优</title>
      <link href="/2022/07/26/mysql-suo-yin-ji-diao-you-pian/"/>
      <url>/2022/07/26/mysql-suo-yin-ji-diao-you-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="第06章-索引的数据结构"><a href="#第06章-索引的数据结构" class="headerlink" title="第06章_索引的数据结构"></a>第06章_索引的数据结构</h1><h2 id="1-为什么使用索引"><a href="#1-为什么使用索引" class="headerlink" title="1. 为什么使用索引"></a>1. 为什么使用索引</h2><p>索引是存储引擎用于快速找到数据记录的一种数据结构，就好比一本教科书的目录部分，通过目录中找到对应文章的页码，便可快速定位到需要的文章。MySQL中也是一样的道理，进行数据查找时，首先查看查询条件是否命中某条索引，符合则<code>通过索引查找</code>相关数据，如果不符合则需要<code>全表扫描</code>，即需要一条一条地查找记录，直到找到与条件符合的记录。</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220616141351236.png" alt="image-20220616141351236"></p><p>如上图所示，数据库没有索引的情况下，数据<code>分布在硬盘不同的位置上面</code>，读取数据时，摆臂需要前后摆动查询数据，这样操作非常消耗时间。如果<code>数据顺序摆放</code>，那么也需要从1到6行按顺序读取，这样就相当于进行了6次IO操作，<code>依旧非常耗时</code>。如果我们不借助任何索引结构帮助我们快速定位数据的话，我们查找 Col 2 &#x3D; 89 这条记录，就要逐行去查找、去比较。从Col 2 &#x3D; 34 开始，进行比较，发现不是，继续下一行。我们当前的表只有不到10行数据，但如果表很大的话，有<code>上千万条数据</code>，就意味着要做<code>很多很多次硬盘I/0</code>才能找到。现在要查找 Col 2 &#x3D; 89 这条记录。CPU必须先去磁盘查找这条记录，找到之后加载到内存，再对数据进行处理。这个过程最耗时间就是磁盘I&#x2F;O（涉及到磁盘的旋转时间（速度较快），磁头的寻道时间(速度慢、费时)）</p><p>假如给数据使用 <code>二叉树</code> 这样的数据结构进行存储，如下图所示</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220616142723266.png" alt="image-20220616142723266"></p><p>对字段 Col 2 添加了索引，就相当于在硬盘上为 Col 2 维护了一个索引的数据结构，即这个 <code>二叉搜索树</code>。二叉搜索树的每个结点存储的是 <code>(K, V) 结构</code>，key 是 Col 2，value 是该 key 所在行的文件指针（地址）。比如：该二叉搜索树的根节点就是：<code>(34, 0x07)</code>。现在对 Col 2 添加了索引，这时再去查找 Col 2 &#x3D; 89 这条记录的时候会先去查找该二叉搜索树（二叉树的遍历查找）。读 34 到内存，89 &gt; 34; 继续右侧数据，读 89 到内存，89&#x3D;&#x3D;89；找到数据返回。找到之后就根据当前结点的 value 快速定位到要查找的记录对应的地址。我们可以发现，只需要 <code>查找两次</code> 就可以定位到记录的地址，查询速度就提高了。</p><p>这就是我们为什么要建索引，目的就是为了 <code>减少磁盘I/O的次数</code>，加快查询速率。</p><h2 id="2-索引及其优缺点"><a href="#2-索引及其优缺点" class="headerlink" title="2. 索引及其优缺点"></a>2. 索引及其优缺点</h2><h3 id="2-1-索引概述"><a href="#2-1-索引概述" class="headerlink" title="2.1 索引概述"></a>2.1 索引概述</h3><p>MySQL官方对索引的定义为：索引（Index）是帮助MySQL高效获取数据的数据结构。</p><p><strong>索引的本质</strong>：索引是数据结构。你可以简单理解为“排好序的快速查找数据结构”，满足特定查找算法。 这些数据结构以某种方式指向数据， 这样就可以在这些数据结构的基础上实现 <code>高级查找算法</code> 。</p><p><code>索引是在存储引擎中实现的</code>，因此每种存储引擎的索引不一定完全相同，并且每种存储引擎不一定支持所有索引类型。同时，存储引擎可以定义每个表的 <code>最大索引数</code>和 <code>最大索引长度</code>。所有存储引擎支持每个表至少16个索引，总索引长度至少为256字节。有些存储引擎支持更多的索引数和更大的索引长度。</p><h3 id="2-2-优点"><a href="#2-2-优点" class="headerlink" title="2.2 优点"></a>2.2 优点</h3><p>（1）类似大学图书馆建书目索引，提高数据检索的效率，降低 <strong>数据库的IO成本</strong> ，这也是创建索引最主 要的原因。 </p><p>（2）通过创建唯一索引，可以保证数据库表中每一行 <strong>数据的唯一性</strong> 。 </p><p>（3）在实现数据的 参考完整性方面，可以 <strong>加速表和表之间的连接</strong> 。换句话说，对于有依赖关系的子表和父表联合查询时， 可以提高查询速度。 </p><p>（4）在使用分组和排序子句进行数据查询时，可以显著 <strong>减少查询中分组和排序的时间</strong> ，降低了CPU的消耗。</p><h3 id="2-3-缺点"><a href="#2-3-缺点" class="headerlink" title="2.3 缺点"></a>2.3 缺点</h3><p>增加索引也有许多不利的方面，主要表现在如下几个方面： </p><p>（1）创建索引和维护索引要 <strong>耗费时间</strong> ，并 且随着数据量的增加，所耗费的时间也会增加。 </p><p>（2）索引需要占 <strong>磁盘空间</strong> ，除了数据表占数据空间之 外，每一个索引还要占一定的物理空间， 存储在磁盘上 ，如果有大量的索引，索引文件就可能比数据文 件更快达到最大文件尺寸。 </p><p>（3）虽然索引大大提高了查询速度，同时却会 <strong>降低更新表的速度</strong> 。当对表 中的数据进行增加、删除和修改的时候，索引也要动态地维护，这样就降低了数据的维护速度。 因此，选择使用索引时，需要综合考虑索引的优点和缺点。</p><p>因此，选择使用索引时，需要综合考虑索引的优点和缺点。</p><blockquote><p>提示：</p><p>索引可以提高查询的速度，但是会影响插入记录的速度。这种情况下，最好的办法是先删除表中的索引，然后插入数据，插入完成后再创建索引。</p></blockquote><h2 id="3-InnoDB中索引的推演"><a href="#3-InnoDB中索引的推演" class="headerlink" title="3. InnoDB中索引的推演"></a>3. InnoDB中索引的推演</h2><h3 id="3-1-索引之前的查找"><a href="#3-1-索引之前的查找" class="headerlink" title="3.1 索引之前的查找"></a>3.1 索引之前的查找</h3><p>先来看一个精确匹配的例子：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT [列名列表] FROM 表名 WHERE 列名 &#x3D; xxx;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-在一个页中的查找"><a href="#1-在一个页中的查找" class="headerlink" title="1. 在一个页中的查找"></a>1. 在一个页中的查找</h4><p>假设目前表中的记录比较少，所有的记录都可以被存放到一个页中，在查找记录的时候可以根据搜索条件的不同分为两种情况：</p><ul><li><p>以主键为搜索条件</p><p>可以在页目录中使用 <code>二分法</code> 快速定位到对应的槽，然后再遍历该槽对用分组中的记录即可快速找到指定记录。</p></li><li><p>以其他列作为搜索条件</p><p>因为在数据页中并没有对非主键列简历所谓的页目录，所以我们无法通过二分法快速定位相应的槽。这种情况下只能从 <code>最小记录</code> 开始 <code>依次遍历单链表中的每条记录</code>， 然后对比每条记录是不是符合搜索条件。很显然，这种查找的效率是非常低的。</p></li></ul><h4 id="2-在很多页中查找"><a href="#2-在很多页中查找" class="headerlink" title="2. 在很多页中查找"></a>2. 在很多页中查找</h4><p>在很多页中查找记录的活动可以分为两个步骤：</p><ol><li>定位到记录所在的页。</li><li>从所在的页内中查找相应的记录。</li></ol><p>在没有索引的情况下，不论是根据主键列或者其他列的值进行查找，由于我们并不能快速的定位到记录所在的页，所以只能 从第一个页沿着双向链表 一直往下找，在每一个页中根据我们上面的查找方式去查 找指定的记录。因为要遍历所有的数据页，所以这种方式显然是 超级耗时 的。如果一个表有一亿条记录呢？此时 索引 应运而生。</p><h3 id="3-2-设计索引"><a href="#3-2-设计索引" class="headerlink" title="3.2 设计索引"></a>3.2 设计索引</h3><p>建一个表：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; CREATE TABLE index_demo(-&gt; c1 INT,-&gt; c2 INT,-&gt; c3 CHAR(1),-&gt; PRIMARY KEY(c1)-&gt; ) ROW_FORMAT &#x3D; Compact;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个新建的 <strong>index_demo</strong> 表中有2个INT类型的列，1个CHAR(1)类型的列，而且我们规定了c1列为主键， 这个表使用 <strong>Compact</strong> 行格式来实际存储记录的。这里我们简化了index_demo表的行格式示意图：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220616152453203.png" alt="image-20220616152453203"></p><p>我们只在示意图里展示记录的这几个部分：</p><ul><li>record_type ：记录头信息的一项属性，表示记录的类型， 0 表示普通记录、 2 表示最小记 录、 3 表示最大记录、 1 暂时还没用过，下面讲。 </li><li>mysql&gt; CREATE TABLE index_demo( -&gt; c1 INT, -&gt; c2 INT, -&gt; c3 CHAR(1), -&gt; PRIMARY KEY(c1) -&gt; ) ROW_FORMAT &#x3D; Compact; next_record ：记录头信息的一项属性，表示下一条地址相对于本条记录的地址偏移量，我们用 箭头来表明下一条记录是谁。 </li><li>各个列的值 ：这里只记录在 index_demo 表中的三个列，分别是 c1 、 c2 和 c3 。 </li><li>其他信息 ：除了上述3种信息以外的所有信息，包括其他隐藏列的值以及记录的额外信息。</li></ul><p>将记录格式示意图的其他信息项暂时去掉并把它竖起来的效果就是这样：</p><img src="../pic/MySQL索引及调优篇/image-20220616152727234.png" alt="image-20220616152727234" style="zoom:80%;" /><p>把一些记录放到页里的示意图就是：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220616152651878.png" alt="image-20220616152651878"></p><h4 id="1-一个简单的索引设计方案"><a href="#1-一个简单的索引设计方案" class="headerlink" title="1. 一个简单的索引设计方案"></a>1. 一个简单的索引设计方案</h4><p>我们在根据某个搜索条件查找一些记录时为什么要遍历所有的数据页呢？因为各个页中的记录并没有规律，我们并不知道我们的搜索条件匹配哪些页中的记录，所以不得不依次遍历所有的数据页。所以如果我们 <strong>想快速的定位到需要查找的记录在哪些数据页</strong> 中该咋办？我们可以为快速定位记录所在的数据页而建立一个目录 ，建这个目录必须完成下边这些事：</p><ul><li><p><strong>下一个数据页中用户记录的主键值必须大于上一个页中用户记录的主键值。</strong></p><p>假设：每个数据结构最多能存放3条记录（实际上一个数据页非常大，可以存放下好多记录）。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO index_demo VALUES(1, 4, &#39;u&#39;), (3, 9, &#39;d&#39;), (5, 3, &#39;y&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>​       那么这些记录以及按照主键值的大小串联成一个单向链表了，如图所示：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220616153518456.png" alt="image-20220616153518456"></p><p>​      从图中可以看出来， index_demo 表中的3条记录都被插入到了编号为10的数据页中了。此时我们再来插入一条记录</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO index_demo VALUES(4, 4, &#39;a&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为 <strong>页10</strong> 最多只能放3条记录，所以我们不得不再分配一个新页：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220616155306705.png" alt="image-20220616155306705"></p><p>注意：新分配的 <strong>数据页编号可能并不是连续的</strong>。它们只是通过维护者上一个页和下一个页的编号而建立了 <strong>链表</strong> 关系。另外，<strong>页10</strong>中用户记录最大的主键值是5，而<strong>页28</strong>中有一条记录的主键值是4，因为5&gt;4，所以这就不符合下一个数据页中用户记录的主键值必须大于上一个页中用户记录的主键值的要求，所以在插入主键值为4的记录的时候需要伴随着一次 <strong>记录移动</strong>，也就是把主键值为5的记录移动到页28中，然后再把主键值为4的记录插入到页10中，这个过程的示意图如下：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220616160216525.png" alt="image-20220616160216525"></p><p>这个过程表明了在对页中的记录进行增删改查操作的过程中，我们必须通过一些诸如 <strong>记录移动</strong> 的操作来始终保证这个状态一直成立：下一个数据页中用户记录的主键值必须大于上一个页中用户记录的主键值。这个过程称为 <strong>页分裂</strong>。</p><ul><li><strong>给所有的页建立一个目录项。</strong></li></ul><p>由于数据页的 <strong>编号可能是不连续</strong> 的，所以在向 index_demo 表中插入许多条记录后，可能是这样的效果：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220616160619525.png" alt="image-20220616160619525"></p><p>我们需要给它们做个 <strong>目录</strong>，每个页对应一个目录项，每个目录项包括下边两个部分：</p><p>1）页的用户记录中最小的主键值，我们用 <strong>key</strong> 来表示。</p><p>2）页号，我们用 <strong>page_on</strong> 表示。</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220616160857381.png" alt="image-20220616160857381"></p><p>以 页28 为例，它对应 目录项2 ，这个目录项中包含着该页的页号 28 以及该页中用户记录的最小主 键值 5 。我们只需要把几个目录项在物理存储器上连续存储（比如：数组），就可以实现根据主键 值快速查找某条记录的功能了。比如：查找主键值为 20 的记录，具体查找过程分两步：</p><ol><li>先从目录项中根据 二分法 快速确定出主键值为 20 的记录在 目录项3 中（因为 12 &lt; 20 &lt; 209 ），它对应的页是 页9 。 </li><li>再根据前边说的在页中查找记录的方式去 页9 中定位具体的记录。</li></ol><p>至此，针对数据页做的简易目录就搞定了。这个目录有一个别名，称为 <strong>索引</strong> 。</p><h4 id="2-InnoDB中的索引方案"><a href="#2-InnoDB中的索引方案" class="headerlink" title="2. InnoDB中的索引方案"></a>2. InnoDB中的索引方案</h4><h5 id="①-迭代1次：目录项纪录的页"><a href="#①-迭代1次：目录项纪录的页" class="headerlink" title="① 迭代1次：目录项纪录的页"></a>① 迭代1次：目录项纪录的页</h5><p>InnoDB怎么区分一条记录是普通的 <strong>用户记录</strong> 还是 <strong>目录项记录</strong> 呢？使用记录头信息里的 <strong>record_type</strong> 属性，它的各自取值代表的意思如下：</p><ul><li>0：普通的用户记录</li><li>1：目录项记录</li><li>2：最小记录</li><li>3：最大记录</li></ul><p>我们把前边使用到的目录项放到数据页中的样子就是这样：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220616162944404.png" alt="image-20220616162944404"></p><p>从图中可以看出来，我们新分配了一个编号为30的页来专门存储目录项记录。这里再次强调 <strong>目录项记录</strong> 和普通的 <strong>用户记录</strong> 的不同点：</p><ul><li><strong>目录项记录</strong> 的 record_type 值是1，而 <strong>普通用户记录</strong> 的 record_type 值是0。 </li><li>目录项记录只有 <strong>主键值和页的编号</strong> 两个列，而普通的用户记录的列是用户自己定义的，可能包含 <strong>很多列</strong> ，另外还有InnoDB自己添加的隐藏列。 </li><li>了解：记录头信息里还有一个叫 <strong>min_rec_mask</strong> 的属性，只有在存储 <strong>目录项记录</strong> 的页中的主键值最小的 <strong>目录项记录</strong> 的 <strong>min_rec_mask</strong> 值为 <strong>1</strong> ，其他别的记录的 <strong>min_rec_mask</strong> 值都是 <strong>0</strong> 。</li></ul><p><strong>相同点</strong>：两者用的是一样的数据页，都会为主键值生成 <strong>Page Directory （页目录）</strong>，从而在按照主键值进行查找时可以使用 <strong>二分法</strong> 来加快查询速度。</p><p>现在以查找主键为 20 的记录为例，根据某个主键值去查找记录的步骤就可以大致拆分成下边两步：</p><ol><li>先到存储 目录项记录 的页，也就是页30中通过 二分法 快速定位到对应目录项，因为 12 &lt; 20 &lt; 209 ，所以定位到对应的记录所在的页就是页9。 </li><li>再到存储用户记录的页9中根据 二分法 快速定位到主键值为 20 的用户记录。</li></ol><h5 id="②-迭代2次：多个目录项纪录的页"><a href="#②-迭代2次：多个目录项纪录的页" class="headerlink" title="② 迭代2次：多个目录项纪录的页"></a>② 迭代2次：多个目录项纪录的页</h5><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220616171135082.png" alt="image-20220616171135082"></p><p>从图中可以看出，我们插入了一条主键值为320的用户记录之后需要两个新的数据页：</p><ul><li>为存储该用户记录而新生成了 页31 。 </li><li>因为原先存储目录项记录的 页30的容量已满 （我们前边假设只能存储4条目录项记录），所以不得 不需要一个新的 页32 来存放 页31 对应的目录项。</li></ul><p>现在因为存储目录项记录的页不止一个，所以如果我们想根据主键值查找一条用户记录大致需要3个步骤，以查找主键值为 20 的记录为例：</p><ol><li>确定 目录项记录页 我们现在的存储目录项记录的页有两个，即 页30 和 页32 ，又因为页30表示的目录项的主键值的 范围是 [1, 320) ，页32表示的目录项的主键值不小于 320 ，所以主键值为 20 的记录对应的目 录项记录在 页30 中。 </li><li>通过目录项记录页 确定用户记录真实所在的页 。 在一个存储 目录项记录 的页中通过主键值定位一条目录项记录的方式说过了。 </li><li>在真实存储用户记录的页中定位到具体的记录。</li></ol><h5 id="③-迭代3次：目录项记录页的目录页"><a href="#③-迭代3次：目录项记录页的目录页" class="headerlink" title="③ 迭代3次：目录项记录页的目录页"></a>③ 迭代3次：目录项记录页的目录页</h5><p>如果我们表中的数据非常多则会<code>产生很多存储目录项记录的页</code>，那我们怎么根据主键值快速定位一个存储目录项记录的页呢？那就为这些存储目录项记录的页再生成一个<code>更高级的目录</code>，就像是一个多级目录一样，<code>大目录里嵌套小目录</code>，小目录里才是实际的数据，所以现在各个页的示意图就是这样子：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220616173512780.png" alt="image-20220616173512780"></p><p>如图，我们生成了一个存储更高级目录项的 页33 ，这个页中的两条记录分别代表页30和页32，如果用 户记录的主键值在 [1, 320) 之间，则到页30中查找更详细的目录项记录，如果主键值 不小于320 的 话，就到页32中查找更详细的目录项记录。</p><p>我们可以用下边这个图来描述它：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220616173717538.png" alt="image-20220616173717538"></p><p>这个数据结构，它的名称是 B+树 。</p><h5 id="④-B-Tree"><a href="#④-B-Tree" class="headerlink" title="④ B+Tree"></a>④ B+Tree</h5><p>一个B+树的节点其实可以分成好多层，规定最下边的那层，也就是存放我们用户记录的那层为第 0 层， 之后依次往上加。之前我们做了一个非常极端的假设：存放用户记录的页 最多存放3条记录 ，存放目录项 记录的页 最多存放4条记录 。其实真实环境中一个页存放的记录数量是非常大的，假设所有存放用户记录 的叶子节点代表的数据页可以存放 100条用户记录 ，所有存放目录项记录的内节点代表的数据页可以存 放 1000条目录项记录 ，那么：</p><ul><li>如果B+树只有1层，也就是只有1个用于存放用户记录的节点，最多能存放 100 条记录。</li><li>如果B+树有2层，最多能存放 1000×100&#x3D;10,0000 条记录。 </li><li>如果B+树有3层，最多能存放 1000×1000×100&#x3D;1,0000,0000 条记录。 </li><li>如果B+树有4层，最多能存放 1000×1000×1000×100&#x3D;1000,0000,0000 条记录。相当多的记录！</li></ul><p>你的表里能存放 <strong>100000000000</strong> 条记录吗？所以一般情况下，我们用到的 <strong>B+树都不会超过4层</strong> ，那我们通过主键值去查找某条记录最多只需要做4个页面内的查找（查找3个目录项页和一个用户记录页），又因为在每个页面内有所谓的 <strong>Page Directory</strong> （页目录），所以在页面内也可以通过 <strong>二分法</strong> 实现快速 定位记录。</p><h3 id="3-3-常见索引概念"><a href="#3-3-常见索引概念" class="headerlink" title="3.3 常见索引概念"></a>3.3 常见索引概念</h3><p>索引按照物理实现方式，索引可以分为 2 种：聚簇（聚集）和非聚簇（非聚集）索引。我们也把非聚集 索引称为二级索引或者辅助索引。</p><h4 id="1-聚簇索引"><a href="#1-聚簇索引" class="headerlink" title="1. 聚簇索引"></a>1. 聚簇索引</h4><p>聚簇索引并不是一种单独的索引类型，而是<strong>一种数据存储方式</strong>（所有的用户记录都存储在了叶子结点），也就是所谓的 <code>索引即数据，数据即索引</code>。</p><blockquote><p>术语”聚簇”表示当前数据行和相邻的键值聚簇的存储在一起</p></blockquote><p><strong>特点：</strong></p><ul><li><p>使用记录主键值的大小进行记录和页的排序，这包括三个方面的含义： </p><ul><li><code>页内</code> 的记录是按照主键的大小顺序排成一个 <code>单向链表</code> 。 </li><li>各个存放 <code>用户记录的页</code> 也是根据页中用户记录的主键大小顺序排成一个 <code>双向链表</code> 。 </li><li>存放 <code>目录项记录的页</code> 分为不同的层次，在同一层次中的页也是根据页中目录项记录的主键大小顺序排成一个 <code>双向链表</code> 。</li></ul></li><li><p>B+树的 叶子节点 存储的是完整的用户记录。 </p><p>所谓完整的用户记录，就是指这个记录中存储了所有列的值（包括隐藏列）。</p></li></ul><p>我们把具有这两种特性的B+树称为聚簇索引，所有完整的用户记录都存放在这个<code>聚簇索引</code>的叶子节点处。这种聚簇索引并不需要我们在MySQL语句中显式的使用INDEX 语句去创建， <code>InnDB</code> 存储引擎会 <code>自动</code> 的为我们创建聚簇索引。</p><p><strong>优点：</strong></p><ul><li><code>数据访问更快</code> ，因为聚簇索引将索引和数据保存在同一个B+树中，因此从聚簇索引中获取数据比非聚簇索引更快 </li><li>聚簇索引对于主键的 <code>排序查找</code> 和 <code>范围查找</code> 速度非常快 </li><li>按照聚簇索引排列顺序，查询显示一定范围数据的时候，由于数据都是紧密相连，数据库不用从多 个数据块中提取数据，所以 <code>节省了大量的io操作</code> 。</li></ul><p><strong>缺点：</strong></p><ul><li><code>插入速度严重依赖于插入顺序</code> ，按照主键的顺序插入是最快的方式，否则将会出现页分裂，严重影响性能。因此，对于InnoDB表，我们一般都会定义一个<code>自增的ID列为主键</code></li><li><code>更新主键的代价很高</code> ，因为将会导致被更新的行移动。因此，对于InnoDB表，我们一般定义<strong>主键为不可更新</strong></li><li><code>二级索引访问需要两次索引查找</code> ，第一次找到主键值，第二次根据主键值找到行数据</li></ul><h4 id="2-二级索引（辅助索引、非聚簇索引）"><a href="#2-二级索引（辅助索引、非聚簇索引）" class="headerlink" title="2. 二级索引（辅助索引、非聚簇索引）"></a>2. 二级索引（辅助索引、非聚簇索引）</h4><p>如果我们想以别的列作为搜索条件该怎么办？肯定不能是从头到尾沿着链表依次遍历记录一遍。</p><p>答案：我们可以<code>多建几颗B+树</code>，不同的B+树中的数据采用不同的排列规则。比方说我们用<code>c2</code>列的大小作为数据页、页中记录的排序规则，再建一课B+树，效果如下图所示：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220616203852043.png" alt="image-20220616203852043"></p><p>这个B+树与上边介绍的聚簇索引有几处不同：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220616210404733.png" alt="image-20220616210404733"></p><p>**概念：回表 **</p><p>我们根据这个以c2列大小排序的B+树只能确定我们要查找记录的主键值，所以如果我们想根 据c2列的值查找到完整的用户记录的话，仍然需要到 聚簇索引 中再查一遍，这个过程称为 回表 。也就 是根据c2列的值查询一条完整的用户记录需要使用到 2 棵B+树！</p><p><strong>问题</strong>：为什么我们还需要一次 回表 操作呢？直接把完整的用户记录放到叶子节点不OK吗？</p><p><strong>回答</strong>：</p><p>如果把完整的用户记录放到叶子结点是可以不用回表。但是<code>太占地方</code>了，相当于每建立一课B+树都需要把所有的用户记录再都拷贝一遍，这就有点太浪费存储空间了。</p><p>因为这种按照<code>非主键列</code>建立的B+树需要一次回表操作才可以定位到完整的用户记录，所以这种B+树也被称为<code>二级索引</code>，或者辅助索引。由于使用的是c2列的大小作为B+树的排序规则，所以我们也称这个B+树为c2列简历的索引。</p><p>非聚簇索引的存在不影响数据在聚簇索引中的组织，所以一张表可以有多个非聚簇索引。</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220616213109383.png" alt="image-20220616213109383"></p><p>小结：聚簇索引与非聚簇索引的原理不同，在使用上也有一些区别：</p><ol><li>聚簇索引的<code>叶子节点</code>存储的就是我们的<code>数据记录</code>, 非聚簇索引的叶子节点存储的是<code>数据位置</code>。非聚簇索引不会影响数据表的物理存储顺序。</li><li>一个表<code>只能有一个聚簇索引</code>，因为只能有一种排序存储的方式，但可以有<code>多个非聚簇索引</code>，也就是多个索引目录提供数据检索。</li><li>使用聚簇索引的时候，数据的<code>查询效率高</code>，但如果对数据进行插入，删除，更新等操作，效率会比非聚簇索引低。</li></ol><h4 id="3-联合索引"><a href="#3-联合索引" class="headerlink" title="3.联合索引"></a>3.联合索引</h4><p>我们也可以同时以多个列的大小作为排序规则，也就是同时为多个列建立索引，比方说我们想让B+树按 照 c2和c3列 的大小进行排序，这个包含两层含义： </p><ul><li>先把各个记录和页按照c2列进行排序。 </li><li>在记录的c2列相同的情况下，采用c3列进行排序</li></ul><p>为c2和c3建立的索引的示意图如下：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220616215251172.png" alt="image-20220616215251172"></p><p>如图所示，我们需要注意以下几点：</p><ul><li>每条目录项都有c2、c3、页号这三个部分组成，各条记录先按照c2列的值进行排序，如果记录的c2列相同，则按照c3列的值进行排序</li><li>B+树叶子节点处的用户记录由c2、c3和主键c1列组成</li></ul><p>注意一点，以c2和c3列的大小为排序规则建立的B+树称为 联合索引 ，本质上也是一个二级索引。它的意 思与分别为c2和c3列分别建立索引的表述是不同的，不同点如下： </p><ul><li>建立 联合索引 只会建立如上图一样的1棵B+树。 </li><li>为c2和c3列分别建立索引会分别以c2和c3列的大小为排序规则建立2棵B+树。</li></ul><h3 id="3-4-InnoDB的B-树索引的注意事项"><a href="#3-4-InnoDB的B-树索引的注意事项" class="headerlink" title="3.4 InnoDB的B+树索引的注意事项"></a>3.4 InnoDB的B+树索引的注意事项</h3><h4 id="1-根页面位置万年不动"><a href="#1-根页面位置万年不动" class="headerlink" title="1. 根页面位置万年不动"></a>1. 根页面位置万年不动</h4><p>实际上B+树的形成过程是这样的：</p><ul><li>每当为某个表创建一个B+树索引（聚簇索引不是人为创建的，默认就有）的时候，都会为这个索引创建一个 <code>根结点</code> 页面。最开始表中没有数据的时候，每个B+树索引对应的 <code>根结点</code> 中即没有用户记录，也没有目录项记录。</li><li>随后向表中插入用户记录时，先把用户记录存储到这个<code>根节点</code> 中。</li><li>当根节点中的可用 <code>空间用完时</code> 继续插入记录，此时会将根节点中的所有记录复制到一个新分配的页，比如 <code>页a</code> 中，然后对这个新页进行 <code>页分裂</code> 的操作，得到另一个新页，比如<code>页b</code> 。这时新插入的记录根据键值（也就是聚簇索引中的主键值，二级索引中对应的索引列的值）的大小就会被分配到 <code>页a</code> 或者 <code>页b</code> 中，而 <code>根节点</code> 便升级为存储目录项记录的页。</li></ul><p>这个过程特别注意的是：一个B+树索引的根节点自诞生之日起，便不会再移动。这样只要我们对某个表建议一个索引，那么它的根节点的页号便会被记录到某个地方。然后凡是 <code>InnoDB</code> 存储引擎需要用到这个索引的时候，都会从哪个固定的地方取出根节点的页号，从而来访问这个索引。</p><h4 id="2-内节点中目录项记录的唯一性"><a href="#2-内节点中目录项记录的唯一性" class="headerlink" title="2. 内节点中目录项记录的唯一性"></a>2. 内节点中目录项记录的唯一性</h4><p>我们知道B+树索引的内节点中目录项记录的内容是 <code>索引列 + 页号</code> 的搭配，但是这个搭配对于二级索引来说有点不严谨。还拿 index_demo 表为例，假设这个表中的数据是这样的：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220617151918786.png" alt="image-20220617151918786"></p><p>如果二级索引中目录项记录的内容只是 <code>索引列 + 页号</code> 的搭配的话，那么为 <code>c2</code> 列简历索引后的B+树应该长这样：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220617152906690.png" alt="image-20220617152906690"></p><p>如果我们想新插入一行记录，其中 <code>c1</code> 、<code>c2</code> 、<code>c3</code> 的值分别是: <code>9</code>、<code>1</code>、<code>c</code>, 那么在修改这个为 c2 列建立的二级索引对应的 B+ 树时便碰到了个大问题：由于 <code>页3</code> 中存储的目录项记录是由 <code>c2列 + 页号</code> 的值构成的，<code>页3</code> 中的两条目录项记录对应的 c2 列的值都是1，而我们 <code>新插入的这条记录</code> 的 c2 列的值也是 <code>1</code>，那我们这条新插入的记录到底应该放在 <code>页4</code> 中，还是应该放在 <code>页5</code> 中？答案：对不起，懵了</p><p>为了让新插入记录找到自己在那个页面，我们需要<strong>保证在B+树的同一层页节点的目录项记录除页号这个字段以外是唯一的</strong>。所以对于二级索引的内节点的目录项记录的内容实际上是由三个部分构成的：</p><ul><li>索引列的值</li><li>主键值</li><li>页号</li></ul><p>也就是我们把<code>主键值</code>也添加到二级索引内节点中的目录项记录，这样就能保住 B+ 树每一层节点中各条目录项记录除页号这个字段外是唯一的，所以我们为c2建立二级索引后的示意图实际上应该是这样子的：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220617154135258.png" alt="image-20220617154135258"></p><p>这样我们再插入记录<code>(9, 1, &#39;c&#39;)</code> 时，由于 <code>页3</code> 中存储的目录项记录是由 <code>c2列 + 主键 + 页号</code> 的值构成的，可以先把新纪录的 <code>c2</code> 列的值和 <code>页3</code> 中各目录项记录的 <code>c2</code> 列的值作比较，如果 <code>c2</code> 列的值相同的话，可以接着比较主键值，因为B+树同一层中不同目录项记录的 <code>c2列 + 主键</code>的值肯定是不一样的，所以最后肯定能定位唯一的一条目录项记录，在本例中最后确定新纪录应该被插入到 <code>页5</code> 中。</p><h4 id="3-一个页面最少存储-2-条记录"><a href="#3-一个页面最少存储-2-条记录" class="headerlink" title="3. 一个页面最少存储 2 条记录"></a>3. 一个页面最少存储 2 条记录</h4><p>一个B+树只需要很少的层级就可以轻松存储数亿条记录，查询速度相当不错！这是因为B+树本质上就是一个大的多层级目录，每经过一个目录时都会过滤掉许多无效的子目录，直到最后访问到存储真实数据的目录。那如果一个大的目录中只存放一个子目录是个啥效果呢？那就是目录层级非常非常多，而且最后的那个存放真实数据的目录中只存放一条数据。所以 <strong>InnoDB 的一个数据页至少可以存放两条记录</strong>。</p><h2 id="4-MyISAM中的索引方案"><a href="#4-MyISAM中的索引方案" class="headerlink" title="4. MyISAM中的索引方案"></a>4. MyISAM中的索引方案</h2><p>B树索引使用存储引擎如表所示：</p><table><thead><tr><th>索引 &#x2F; 存储引擎</th><th>MyISAM</th><th>InnoDB</th><th>Memory</th></tr></thead><tbody><tr><td>B-Tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr></tbody></table><p>即使多个存储引擎支持同一种类型的索引，但是他们的实现原理也是不同的。Innodb和MyISAM默认的索 引是Btree索引；而Memory默认的索引是Hash索引。</p><p>MyISAM引擎使用 B+Tree 作为索引结构，叶子节点的data域存放的是 数据记录的地址 。</p><h3 id="4-1-MyISAM索引的原理"><a href="#4-1-MyISAM索引的原理" class="headerlink" title="4.1 MyISAM索引的原理"></a>4.1 MyISAM索引的原理</h3><img src="../pic/MySQL索引及调优篇/image-20220617160325201.png" alt="image-20220617160325201" style="float:left;" /><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220617160413479.png" alt="image-20220617160413479"></p><img src="../pic/MySQL索引及调优篇/image-20220617160533122.png" alt="image-20220617160533122" style="float:left;" /><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220617160625006.png" alt="image-20220617160625006"></p><img src="../pic/MySQL索引及调优篇/image-20220617160813548.png" alt="image-20220617160813548" style="float:left;" /><h3 id="4-2-MyISAM-与-InnoDB对比"><a href="#4-2-MyISAM-与-InnoDB对比" class="headerlink" title="4.2 MyISAM 与 InnoDB对比"></a>4.2 MyISAM 与 InnoDB对比</h3><p><strong>MyISAM的索引方式都是“非聚簇”的，与InnoDB包含1个聚簇索引是不同的。小结两种引擎中索引的区别：</strong></p><p>① 在InnoDB存储引擎中，我们只需要根据主键值对 聚簇索引 进行一次查找就能找到对应的记录，而在 MyISAM 中却需要进行一次 回表 操作，意味着MyISAM中建立的索引相当于全部都是 二级索引 。</p><p> ② InnoDB的数据文件本身就是索引文件，而MyISAM索引文件和数据文件是 分离的 ，索引文件仅保存数 据记录的地址。</p><p> ③ InnoDB的非聚簇索引data域存储相应记录 主键的值 ，而MyISAM索引记录的是 地址 。换句话说， InnoDB的所有非聚簇索引都引用主键作为data域。</p><p> ④ MyISAM的回表操作是十分 快速 的，因为是拿着地址偏移量直接到文件中取数据的，反观InnoDB是通 过获取主键之后再去聚簇索引里找记录，虽然说也不慢，但还是比不上直接用地址去访问。 </p><p>⑤ InnoDB要求表 必须有主键 （ MyISAM可以没有 ）。如果没有显式指定，则MySQL系统会自动选择一个 可以非空且唯一标识数据记录的列作为主键。如果不存在这种列，则MySQL自动为InnoDB表生成一个隐 含字段作为主键，这个字段长度为6个字节，类型为长整型。</p><p><strong>小结：</strong></p><img src="../pic/MySQL索引及调优篇/image-20220617161126022.png" alt="image-20220617161126022" style="float:left;" /><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220617161151125.png" alt="image-20220617161151125"></p><h2 id="5-索引的代价"><a href="#5-索引的代价" class="headerlink" title="5. 索引的代价"></a>5. 索引的代价</h2><p>索引是个好东西，可不能乱建，它在空间和时间上都会有消耗：</p><ul><li><p>空间上的代价</p><p>每建立一个索引都要为它建立一棵B+树，每一棵B+树的每一个节点都是一个数据页，一个页默认会 占用 16KB 的存储空间，一棵很大的B+树由许多数据页组成，那就是很大的一片存储空间。</p></li><li><p>时间上的代价</p><p>每次对表中的数据进行 增、删、改 操作时，都需要去修改各个B+树索引。而且我们讲过，B+树每 层节点都是按照索引列的值 从小到大的顺序排序 而组成了 双向链表 。不论是叶子节点中的记录，还 是内节点中的记录（也就是不论是用户记录还是目录项记录）都是按照索引列的值从小到大的顺序 而形成了一个单向链表。而增、删、改操作可能会对节点和记录的排序造成破坏，所以存储引擎需 要额外的时间进行一些 记录移位 ， 页面分裂 、 页面回收 等操作来维护好节点和记录的排序。如果 我们建了许多索引，每个索引对应的B+树都要进行相关的维护操作，会给性能拖后腿。</p></li></ul><blockquote><p>一个表上索引建的越多，就会占用越多的存储空间，在增删改记录的时候性能就越差。为了能建立又好又少的索引，我们得学学这些索引在哪些条件下起作用的。</p></blockquote><h2 id="6-MySQL数据结构选择的合理性"><a href="#6-MySQL数据结构选择的合理性" class="headerlink" title="6. MySQL数据结构选择的合理性"></a>6. MySQL数据结构选择的合理性</h2><img src="../pic/MySQL索引及调优篇/image-20220617161635521.png" alt="image-20220617161635521" style="float:left;" /><h3 id="6-1-全表查询"><a href="#6-1-全表查询" class="headerlink" title="6.1 全表查询"></a>6.1 全表查询</h3><p>这里都懒得说了。</p><h3 id="6-2-Hash查询"><a href="#6-2-Hash查询" class="headerlink" title="6.2 Hash查询"></a>6.2 Hash查询</h3><img src="../pic/MySQL索引及调优篇/image-20220617161946230.png" alt="image-20220617161946230" style="float:left;" /><p><strong>加快查找速度的数据结构，常见的有两类：</strong></p><p>(1) 树，例如平衡二叉搜索树，查询&#x2F;插入&#x2F;修改&#x2F;删除的平均时间复杂度都是 <code>O(log2N)</code>;</p><p>(2)哈希，例如HashMap，查询&#x2F;插入&#x2F;修改&#x2F;删除的平均时间复杂度都是 <code>O(1)</code>; (key, value)</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220617162153587.png" alt="image-20220617162153587"></p><img src="../pic/MySQL索引及调优篇/image-20220617162548697.png" alt="image-20220617162548697" style="float:left;" /><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220617162604272.png" alt="image-20220617162604272"></p><p>上图中哈希函数h有可能将两个不同的关键字映射到相同的位置，这叫做 碰撞 ，在数据库中一般采用 链 接法 来解决。在链接法中，将散列到同一槽位的元素放在一个链表中，如下图所示：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220617162703006.png" alt="image-20220617162703006"></p><p>实验：体会数组和hash表的查找方面的效率区别</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;&#x2F; 算法复杂度为 O(n)@Testpublic void test1()&#123;    int[] arr &#x3D; new int[100000];    for(int i &#x3D; 0;i &lt; arr.length;i++)&#123;        arr[i] &#x3D; i + 1;    &#125;    long start &#x3D; System.currentTimeMillis();    for(int j &#x3D; 1; j&lt;&#x3D;100000;j++)&#123;        int temp &#x3D; j;        for(int i &#x3D; 0;i &lt; arr.length;i++)&#123;            if(temp &#x3D;&#x3D; arr[i])&#123;                break;            &#125;        &#125;    &#125;    long end &#x3D; System.currentTimeMillis();    System.out.println(&quot;time： &quot; + (end - start)); &#x2F;&#x2F;time： 823&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;&#x2F; 算法复杂度为 O(1)@Testpublic void test2()&#123;    HashSet&lt;Integer&gt; set &#x3D; new HashSet&lt;&gt;(100000);    for(int i &#x3D; 0;i &lt; 100000;i++)&#123;    set.add(i + 1);    &#125;    long start &#x3D; System.currentTimeMillis();    for(int j &#x3D; 1; j&lt;&#x3D;100000;j++) &#123;        int temp &#x3D; j;        boolean contains &#x3D; set.contains(temp);    &#125;    long end &#x3D; System.currentTimeMillis();    System.out.println(&quot;time： &quot; + (end - start)); &#x2F;&#x2F;time： 5&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Hash结构效率高，那为什么索引结构要设计成树型呢？</strong></p><img src="../pic/MySQL索引及调优篇/image-20220617163202156.png" alt="image-20220617163202156" style="float:left;" /><p><strong>Hash索引适用存储引擎如表所示：</strong></p><table><thead><tr><th>索引 &#x2F; 存储引擎</th><th>MyISAM</th><th>InnoDB</th><th>Memory</th></tr></thead><tbody><tr><td>HASH索引</td><td>不支持</td><td>不支持</td><td>支持</td></tr></tbody></table><p><strong>Hash索引的适用性：</strong></p><img src="../pic/MySQL索引及调优篇/image-20220617163619721.png" alt="image-20220617163619721" style="float:left;" /><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220617163657697.png" alt="image-20220617163657697"></p><p>采用自适应 Hash 索引目的是方便根据 SQL 的查询条件加速定位到叶子节点，特别是当 B+ 树比较深的时 候，通过自适应 Hash 索引可以明显提高数据的检索效率。</p><p>我们可以通过 innodb_adaptive_hash_index 变量来查看是否开启了自适应 Hash，比如：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show variables like &#39;%adaptive_hash_index&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-3-二叉搜索树"><a href="#6-3-二叉搜索树" class="headerlink" title="6.3 二叉搜索树"></a>6.3 二叉搜索树</h3><p>如果我们利用二叉树作为索引结构，那么磁盘的IO次数和索引树的高度是相关的。</p><p><strong>1. 二叉搜索树的特点</strong></p><ul><li>一个节点只能有两个子节点，也就是一个节点度不能超过2</li><li>左子节点 &lt; 本节点; 右子节点 &gt;&#x3D; 本节点，比我大的向右，比我小的向左</li></ul><p><strong>2. 查找规则</strong></p><img src="../pic/MySQL索引及调优篇/image-20220617163952166.png" alt="image-20220617163952166" style="float:left;" /><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220617164022728.png" alt="image-20220617164022728"></p><p>但是特殊情况，就是有时候二叉树的深度非常大，比如：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220617164053134.png" alt="image-20220617164053134"></p><p>为了提高查询效率，就需要 减少磁盘IO数 。为了减少磁盘IO的次数，就需要尽量 降低树的高度 ，需要把 原来“瘦高”的树结构变的“矮胖”，树的每层的分叉越多越好。</p><h3 id="6-4-AVL树"><a href="#6-4-AVL树" class="headerlink" title="6.4 AVL树"></a>6.4 AVL树</h3><img src="../pic/MySQL索引及调优篇/image-20220617165045803.png" alt="image-20220617165045803" style="float:left;" /><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220617165105005.png" alt="image-20220617165105005"></p><p>&#96;每访问一次节点就需要进行一次磁盘 I&#x2F;O 操作，对于上面的树来说，我们需要进行 5次 I&#x2F;O 操作。虽然平衡二叉树的效率高，但是树的深度也同样高，这就意味着磁盘 I&#x2F;O 操作次数多，会影响整体数据查询的效率。</p><p>针对同样的数据，如果我们把二叉树改成 M 叉树 （M&gt;2）呢？当 M&#x3D;3 时，同样的 31 个节点可以由下面 的三叉树来进行存储：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220617165124685.png" alt="image-20220617165124685"></p><p>你能看到此时树的高度降低了，当数据量 N 大的时候，以及树的分叉树 M 大的时候，M叉树的高度会远小于二叉树的高度 (M &gt; 2)。所以，我们需要把 &#96;树从“瘦高” 变 “矮胖”。</p><h3 id="6-5-B-Tree"><a href="#6-5-B-Tree" class="headerlink" title="6.5 B-Tree"></a>6.5 B-Tree</h3><p>B 树的英文是 Balance Tree，也就是 <code>多路平衡查找树</code>。简写为 B-Tree。它的高度远小于平衡二叉树的高度。</p><p>B 树的结构如下图所示：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220617165937875.png" alt="image-20220617165937875"></p><img src="../pic/MySQL索引及调优篇/image-20220617170124200.png" alt="image-20220617170124200" style="float:left;" /><p>一个 M 阶的 B 树（M&gt;2）有以下的特性：</p><ol><li>根节点的儿子数的范围是 [2,M]。 </li><li>每个中间节点包含 k-1 个关键字和 k 个孩子，孩子的数量 &#x3D; 关键字的数量 +1，k 的取值范围为 [ceil(M&#x2F;2), M]。 </li><li>叶子节点包括 k-1 个关键字（叶子节点没有孩子），k 的取值范围为 [ceil(M&#x2F;2), M]。 </li><li>假设中间节点节点的关键字为：Key[1], Key[2], …, Key[k-1]，且关键字按照升序排序，即 Key[i]&lt;Key[i+1]。此时 k-1 个关键字相当于划分了 k 个范围，也就是对应着 k 个指针，即为：P[1], P[2], …, P[k]，其中 P[1] 指向关键字小于 Key[1] 的子树，P[i] 指向关键字属于 (Key[i-1], Key[i]) 的子树，P[k] 指向关键字大于 Key[k-1] 的子树。</li><li>所有叶子节点位于同一层。</li></ol><p>上面那张图所表示的 B 树就是一棵 3 阶的 B 树。我们可以看下磁盘块 2，里面的关键字为（8，12），它 有 3 个孩子 (3，5)，(9，10) 和 (13，15)，你能看到 (3，5) 小于 8，(9，10) 在 8 和 12 之间，而 (13，15) 大于 12，刚好符合刚才我们给出的特征。</p><p>然后我们来看下如何用 B 树进行查找。假设我们想要 查找的关键字是 9 ，那么步骤可以分为以下几步：</p><ol><li>我们与根节点的关键字 (17，35）进行比较，9 小于 17 那么得到指针 P1； </li><li>按照指针 P1 找到磁盘块 2，关键字为（8，12），因为 9 在 8 和 12 之间，所以我们得到指针 P2； </li><li>按照指针 P2 找到磁盘块 6，关键字为（9，10），然后我们找到了关键字 9。</li></ol><p>你能看出来在 B 树的搜索过程中，我们比较的次数并不少，但如果把数据读取出来然后在内存中进行比 较，这个时间就是可以忽略不计的。而读取磁盘块本身需要进行 I&#x2F;O 操作，消耗的时间比在内存中进行 比较所需要的时间要多，是数据查找用时的重要因素。 B 树相比于平衡二叉树来说磁盘 I&#x2F;O 操作要少 ， 在数据查询中比平衡二叉树效率要高。所以 只要树的高度足够低，IO次数足够少，就可以提高查询性能 。</p><img src="../pic/MySQL索引及调优篇/image-20220617170454023.png" alt="image-20220617170454023" style="float:left;" /><p><strong>再举例1：</strong></p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220617170526488.png" alt="image-20220617170526488"></p><h3 id="6-6-B-Tree"><a href="#6-6-B-Tree" class="headerlink" title="6.6 B+Tree"></a>6.6 B+Tree</h3><img src="../pic/MySQL索引及调优篇/image-20220617170628394.png" alt="image-20220617170628394" style="float:left;" /><ul><li>MySQL官网说明：</li></ul><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220617170710329.png" alt="image-20220617170710329"></p><p><strong>B+ 树和 B 树的差异在于以下几点：</strong></p><ol><li>有 k 个孩子的节点就有 k 个关键字。也就是孩子数量 &#x3D; 关键字数，而 B 树中，孩子数量 &#x3D; 关键字数 +1。</li><li>非叶子节点的关键字也会同时存在在子节点中，并且是在子节点中所有关键字的最大（或最 小）。 </li><li>非叶子节点仅用于索引，不保存数据记录，跟记录有关的信息都放在叶子节点中。而 B 树中， 非 叶子节点既保存索引，也保存数据记录 。 </li><li>所有关键字都在叶子节点出现，叶子节点构成一个有序链表，而且叶子节点本身按照关键字的大 小从小到大顺序链接。</li></ol><img src="../pic/MySQL索引及调优篇/image-20220617171011102.png" alt="image-20220617171011102" style="float:left;" /><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220617171106671.png" alt="image-20220617171106671"></p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220617171131747.png" alt="image-20220617171131747"></p><img src="../pic/MySQL索引及调优篇/image-20220617171331282.png" alt="image-20220617171331282" style="float:left;" /><img src="../pic/MySQL索引及调优篇/image-20220617171434206.png" alt="image-20220617171434206" style="float:left;" /><blockquote><p>B 树和 B+ 树都可以作为索引的数据结构，在 MySQL 中采用的是 B+ 树。 但B树和B+树各有自己的应用场景，不能说B+树完全比B树好，反之亦然。</p></blockquote><p><strong>思考题：为了减少IO，索引树会一次性加载吗？</strong></p><img src="../pic/MySQL索引及调优篇/image-20220617171614460.png" alt="image-20220617171614460" style="float:left;" /><p><strong>思考题：B+树的存储能力如何？为何说一般查找行记录，最多只需1~3次磁盘IO</strong></p><img src="../pic/MySQL索引及调优篇/image-20220617172426725.png" alt="image-20220617172426725" style="float:left;" /><p><strong>思考题：为什么说B+树比B-树更适合实际应用中操作系统的文件索引和数据库索引？</strong></p><img src="../pic/MySQL索引及调优篇/image-20220617175142810.png" alt="image-20220617175142810" style="float:left;" /><p><strong>思考题：Hash 索引与 B+ 树索引的区别</strong></p><img src="../pic/MySQL索引及调优篇/image-20220617175230327.png" alt="image-20220617175230327" style="float:left;" /><p><strong>思考题：Hash 索引与 B+ 树索引是在建索引的时候手动指定的吗？</strong></p><img src="../pic/MySQL索引及调优篇/image-20220617175309115.png" alt="image-20220617175309115" style="float:left;" /><h3 id="6-7-R树"><a href="#6-7-R树" class="headerlink" title="6.7 R树"></a>6.7 R树</h3><p>R-Tree在MySQL很少使用，仅支持 geometry数据类型 ，支持该类型的存储引擎只有myisam、bdb、 innodb、ndb、archive几种。举个R树在现实领域中能够解决的例子：查找20英里以内所有的餐厅。如果 没有R树你会怎么解决？一般情况下我们会把餐厅的坐标(x,y)分为两个字段存放在数据库中，一个字段记 录经度，另一个字段记录纬度。这样的话我们就需要遍历所有的餐厅获取其位置信息，然后计算是否满 足要求。如果一个地区有100家餐厅的话，我们就要进行100次位置计算操作了，如果应用到谷歌、百度 地图这种超大数据库中，这种方法便必定不可行了。R树就很好的 解决了这种高维空间搜索问题 。它把B 树的思想很好的扩展到了多维空间，采用了B树分割空间的思想，并在添加、删除操作时采用合并、分解 结点的方法，保证树的平衡性。因此，R树就是一棵用来 存储高维数据的平衡树 。相对于B-Tree，R-Tree 的优势在于范围查找。</p><table><thead><tr><th>索引 &#x2F; 存储引擎</th><th>MyISAM</th><th>InnoDB</th><th>Memory</th></tr></thead><tbody><tr><td>R-Tree索引</td><td>支持</td><td>支持</td><td>不支持</td></tr></tbody></table><h3 id="6-8-小结"><a href="#6-8-小结" class="headerlink" title="6.8 小结"></a>6.8 小结</h3><img src="../pic/MySQL索引及调优篇/image-20220617175440527.png" alt="image-20220617175440527" style="float:left;" /><h3 id="附录：算法的时间复杂度"><a href="#附录：算法的时间复杂度" class="headerlink" title="附录：算法的时间复杂度"></a>附录：算法的时间复杂度</h3><p>同一问题可用不同算法解决，而一个算法的质量优劣将影响到算法乃至程序的效率。算法分析的目的在 于选择合适算法和改进算法。</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220617175516191.png" alt="image-20220617175516191"></p><h1 id="第7章-InnoDB数据存储结构"><a href="#第7章-InnoDB数据存储结构" class="headerlink" title="第7章_InnoDB数据存储结构"></a>第7章_InnoDB数据存储结构</h1><h2 id="1-数据库的存储结构：页"><a href="#1-数据库的存储结构：页" class="headerlink" title="1. 数据库的存储结构：页"></a>1. 数据库的存储结构：页</h2><img src="../pic/MySQL索引及调优篇/image-20220617175755324.png" alt="image-20220617175755324" style="float:left;" /><h3 id="1-1-磁盘与内存交互基本单位：页"><a href="#1-1-磁盘与内存交互基本单位：页" class="headerlink" title="1.1 磁盘与内存交互基本单位：页"></a>1.1 磁盘与内存交互基本单位：页</h3><img src="../pic/MySQL索引及调优篇/image-20220617193033971.png" alt="image-20220617193033971" style="float:left;" /><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220617193939742.png" alt="image-20220617193939742"></p><h3 id="1-2-页结构概述"><a href="#1-2-页结构概述" class="headerlink" title="1.2 页结构概述"></a>1.2 页结构概述</h3><img src="../pic/MySQL索引及调优篇/image-20220617193218557.png" alt="image-20220617193218557" style="float:left;" /><h3 id="1-3-页的大小"><a href="#1-3-页的大小" class="headerlink" title="1.3 页的大小"></a>1.3 页的大小</h3><p>不同的数据库管理系统（简称DBMS）的页大小不同。比如在 MySQL 的 InnoDB 存储引擎中，默认页的大小是 <code>16KB</code>，我们可以通过下面的命令来进行查看：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show variables like &#39;%innodb_page_size%&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>SQL Server 中页的大小为 <code>8KB</code>，而在 Oracle 中我们用术语 “<code>块</code>“ （Block）来表示 “页”，Oracle 支持的快大小为2KB, 4KB, 8KB, 16KB, 32KB 和 64KB。</p><h3 id="1-4-页的上层结构"><a href="#1-4-页的上层结构" class="headerlink" title="1.4 页的上层结构"></a>1.4 页的上层结构</h3><p>另外在数据库中，还存在着区（Extent）、段（Segment）和表空间（Tablespace）的概念。行、页、区、段、表空间的关系如下图所示：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220617194256988.png" alt="image-20220617194256988"></p><img src="../pic/MySQL索引及调优篇/image-20220617194529699.png" alt="image-20220617194529699" style="float:left;" /><h2 id="2-页的内部结构"><a href="#2-页的内部结构" class="headerlink" title="2. 页的内部结构"></a>2. 页的内部结构</h2><p>页如果按类型划分的话，常见的有 <code>数据页（保存B+树节点）、系统表、Undo 页 和 事物数据页</code> 等。数据页是我们最常使用的页。</p><p>数据页的 <code>16KB</code> 大小的存储空间被划分为七个部分，分别是文件头（File Header）、页头（Page Header）、最大最小记录（Infimum + supremum）、用户记录（User Records）、空闲空间（Free Space）、页目录（Page Directory）和文件尾（File Tailer）。</p><p>页结构的示意图如下所示：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220617195012446.png" alt="image-20220617195012446"></p><p>如下表所示：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220617195148164.png" alt="image-20220617195148164"></p><p>我们可以把这7个结构分为3个部分。</p><h3 id="第一部分：File-Header-文件头部-和-File-Trailer-文件尾部"><a href="#第一部分：File-Header-文件头部-和-File-Trailer-文件尾部" class="headerlink" title="第一部分：File Header (文件头部) 和 File Trailer (文件尾部)"></a>第一部分：File Header (文件头部) 和 File Trailer (文件尾部)</h3><p>见文件InnoDB数据库存储结构.mmap</p><h3 id="第二部分：User-Records-用户记录-、最大最小记录、Free-Space-空闲空间"><a href="#第二部分：User-Records-用户记录-、最大最小记录、Free-Space-空闲空间" class="headerlink" title="第二部分：User Records (用户记录)、最大最小记录、Free Space (空闲空间)"></a>第二部分：User Records (用户记录)、最大最小记录、Free Space (空闲空间)</h3><p>见文件InnoDB数据库存储结构.mmap</p><h3 id="第三部分：Page-Directory-页目录-和-Page-Header-页面头部"><a href="#第三部分：Page-Directory-页目录-和-Page-Header-页面头部" class="headerlink" title="第三部分：Page Directory (页目录) 和 Page Header (页面头部)"></a>第三部分：Page Directory (页目录) 和 Page Header (页面头部)</h3><p>见文件InnoDB数据库存储结构.mmap</p><h3 id="2-3-从数据库页的角度看B-树如何查询"><a href="#2-3-从数据库页的角度看B-树如何查询" class="headerlink" title="2.3 从数据库页的角度看B+树如何查询"></a>2.3 从数据库页的角度看B+树如何查询</h3><p>一颗B+树按照字节类型可以分为两部分：</p><ol><li>叶子节点，B+ 树最底层的节点，节点的高度为0，存储行记录。</li><li>非叶子节点，节点的高度大于0，存储索引键和页面指针，并不存储行记录本身。</li></ol><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220620221112635.png" alt="image-20220620221112635"></p><p>当我们从页结构来理解 B+ 树的结构的时候，可以帮我们理解一些通过索引进行检索的原理：</p><img src="../pic/MySQL索引及调优篇/image-20220620221242561.png" alt="image-20220620221242561" style="float:left;" /><img src="../pic/MySQL索引及调优篇/image-20220620221442954.png" alt="image-20220620221442954" style="float:left;" /><h2 id="3-InnoDB行格式-或记录格式"><a href="#3-InnoDB行格式-或记录格式" class="headerlink" title="3. InnoDB行格式 (或记录格式)"></a>3. InnoDB行格式 (或记录格式)</h2><p>见文件InnoDB数据库存储结构.mmap</p><h2 id="4-区、段与碎片区"><a href="#4-区、段与碎片区" class="headerlink" title="4. 区、段与碎片区"></a>4. 区、段与碎片区</h2><h3 id="4-1-为什么要有区？"><a href="#4-1-为什么要有区？" class="headerlink" title="4.1 为什么要有区？"></a>4.1 为什么要有区？</h3><img src="../pic/MySQL索引及调优篇/image-20220621134226624.png" alt="image-20220621134226624" style="float:left;" /><h3 id="4-2-为什么要有段？"><a href="#4-2-为什么要有段？" class="headerlink" title="4.2 为什么要有段？"></a>4.2 为什么要有段？</h3><img src="../pic/MySQL索引及调优篇/image-20220621140802887.png" alt="image-20220621140802887" style="float:left;" /><h3 id="4-3-为什么要有碎片区？"><a href="#4-3-为什么要有碎片区？" class="headerlink" title="4.3 为什么要有碎片区？"></a>4.3 为什么要有碎片区？</h3><img src="../pic/MySQL索引及调优篇/image-20220621141225223.png" alt="image-20220621141225223" style="float:left;" /><h3 id="4-4-区的分类"><a href="#4-4-区的分类" class="headerlink" title="4.4 区的分类"></a>4.4 区的分类</h3><p>区大体上可以分为4种类型：</p><ul><li>空闲的区 (FREE) : 现在还没有用到这个区中的任何页面。</li><li>有剩余空间的碎片区 (FREE_FRAG)：表示碎片区中还有可用的页面。</li><li>没有剩余空间的碎片区 (FULL_FRAG)：表示碎片区中的所有页面都被使用，没有空闲页面。</li><li>附属于某个段的区 (FSEG)：每一个索引都可以分为叶子节点段和非叶子节点段。</li></ul><p>处于FREE、FREE_FRAG 以及 FULL_FRAG 这三种状态的区都是独立的，直属于表空间。而处于 FSEG 状态的区是附属于某个段的。</p><blockquote><p>如果把表空间比作是一个集团军，段就相当于师，区就相当于团。一般的团都是隶属于某个师的，就像是处于 FSEG 的区全部隶属于某个段，而处于 FREE、FREE_FRAG 以及 FULL_FRAG 这三种状态的区却直接隶属于表空间，就像独立团直接听命于军部一样。</p></blockquote><h2 id="5-表空间"><a href="#5-表空间" class="headerlink" title="5. 表空间"></a>5. 表空间</h2><img src="../pic/MySQL索引及调优篇/image-20220621142910222.png" alt="image-20220621142910222" style="float:left;" /><h3 id="5-1-独立表空间"><a href="#5-1-独立表空间" class="headerlink" title="5.1 独立表空间"></a>5.1 独立表空间</h3><p>独立表空间，即每张表有一个独立的表空间，也就是数据和索引信息都会保存在自己的表空间中。独立的表空间 (即：单表) 可以在不同的数据库之间进行 <code>迁移</code>。</p><p>空间可以回收 (DROP TABLE 操作可自动回收表空间；其他情况，表空间不能自己回收) 。如果对于统计分析或是日志表，删除大量数据后可以通过：alter table TableName engine&#x3D;innodb; 回收不用的空间。对于使用独立表空间的表，不管怎么删除，表空间的碎片不会太严重的影响性能，而且还有机会处理。</p><p><strong>独立表空间结构</strong></p><p>独立表空间由段、区、页组成。</p><p><strong>真实表空间对应的文件大小</strong></p><p>我们到数据目录里看，会发现一个新建的表对应的 .ibd 文件只占用了 96K，才6个页面大小 (MySQL5.7中)，这是因为一开始表空间占用的空间很小，因为表里边都没有数据。不过别忘了这些 .ibd 文件是自扩展的，随着表中数据的增多，表空间对应的文件也逐渐增大。</p><p><strong>查看 InnoDB 的表空间类型：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show variables like &#39;innodb_file_per_table&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你能看到 innodb_file_per_table&#x3D;ON, 这就意味着每张表都会单词保存一个 .ibd 文件。</p><h3 id="5-2-系统表空间"><a href="#5-2-系统表空间" class="headerlink" title="5.2 系统表空间"></a>5.2 系统表空间</h3><p>系统表空间的结构和独立表空间基本类似，只不过由于整个MySQL进程只有一个系统表空间，在系统表空间中会额外记录一些有关整个系统信息的页面，这部分是独立表空间中没有的。</p><p><strong>InnoDB数据字典</strong></p><img src="../pic/MySQL索引及调优篇/image-20220621150648770.png" alt="image-20220621150648770" style="float:left;" /><p>删除这些数据并不是我们使用 INSERT 语句插入的用户数据，实际上是为了更好的管理我们这些用户数据而不得以引入的一些额外数据，这些数据页称为 元数据。InnoDB 存储引擎特意定义了一些列的 内部系统表 (internal system table) 来记录这些元数据：</p><img src="../pic/MySQL索引及调优篇/image-20220621150924922.png" alt="image-20220621150924922" style="float:left;" /><p>这些系统表也称为 <code>数据字典</code>，它们都是以 B+ 树的形式保存在系统表空间的某个页面中。其中 <code>SYS_TABLES、SYS_COLUMNS、SYS_INDEXES、SYS_FIELDS</code> 这四个表尤其重要，称之为基本系统表 (basic system tables) ，我们先看看这4个表的结构：</p><img src="../pic/MySQL索引及调优篇/image-20220621151139759.png" alt="image-20220621151139759" style="float:left;" /><img src="../pic/MySQL索引及调优篇/image-20220621151158361.png" alt="image-20220621151158361" style="float:left;" /><img src="../pic/MySQL索引及调优篇/image-20220621151215274.png" alt="image-20220621151215274" style="float:left;" /><img src="../pic/MySQL索引及调优篇/image-20220621151238157.png" alt="image-20220621151238157" style="float:left;" /><p>注意：用户不能直接访问 InnoDB 的这些内部系统表，除非你直接去解析系统表空间对应文件系统上的文件。不过考虑到查看这些表的内容可能有助于大家分析问题，所以在系统数据库 <code>information_schema</code> 中提供了一些以 <code>innodb_sys</code> 开头的表:</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">USE information_schema;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW TABLES LIKE &#39;innodb_sys%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>information_scheme</code> 数据库中的这些以 <code>INNODB_SYS</code> 开头的表并不是真正的内部系统表 (内部系统表就是我们上边以 <code>SYS</code> 开头的那些表)，而是在存储引擎启动时读取这些以 <code>SYS</code> 开头的系统表，然后填充到这些以 <code>INNODB_SYS</code> 开头的表中。以 <code>INNODB_SYS</code> 开头的表和以 <code>SYS</code> 开头的表中的字段并不完全一样，但仅供大家参考已经足矣。</p><h2 id="附录：数据页加载的三种方式"><a href="#附录：数据页加载的三种方式" class="headerlink" title="附录：数据页加载的三种方式"></a>附录：数据页加载的三种方式</h2><p>InnoDB从磁盘中读取数据 <code>最小单位</code> 是数据页。而你想得到的 id &#x3D; xxx 的数据，就是这个数据页众多行中的一行。</p><p>对于MySQL存放的数据，逻辑概念上我们称之为表，在磁盘等物理层面而言是按 <code>数据页</code> 形式进行存放的，当其加载到 MySQL 中我们称之为 <code>缓存页</code>。</p><p>如果缓冲池没有该页数据，那么缓冲池有以下三种读取数据的方式，每种方式的读取速率是不同的：</p><p><strong>1. 内存读取</strong></p><p>如果该数据存在于内存中，基本上执行时间在 1ms 左右，效率还是很高的。</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220621135638283.png" alt="image-20220621135638283"></p><p><strong>2. 随机读取</strong></p><img src="../pic/MySQL索引及调优篇/image-20220621135719847.png" alt="image-20220621135719847" style="float:left;" /><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220621135737422.png" alt="image-20220621135737422"></p><p><strong>3. 顺序读取</strong></p><img src="../pic/MySQL索引及调优篇/image-20220621135909197.png" alt="image-20220621135909197" style="float:left;" /><h1 id="第8章-索引的创建与设计原则"><a href="#第8章-索引的创建与设计原则" class="headerlink" title="第8章_索引的创建与设计原则"></a>第8章_索引的创建与设计原则</h1><h2 id="1-索引的声明与使用"><a href="#1-索引的声明与使用" class="headerlink" title="1. 索引的声明与使用"></a>1. 索引的声明与使用</h2><h3 id="1-1-索引的分类"><a href="#1-1-索引的分类" class="headerlink" title="1.1 索引的分类"></a>1.1 索引的分类</h3><p>MySQL的索引包括普通索引、唯一性索引、全文索引、单列索引、多列索引和空间索引等。</p><p>从 功能逻辑 上说，索引主要有 4 种，分别是普通索引、唯一索引、主键索引、全文索引。 </p><p>按照 物理实现方式 ，索引可以分为 2 种：聚簇索引和非聚簇索引。 </p><p>按照 作用字段个数 进行划分，分成单列索引和联合索引。</p><p><strong>1. 普通索引</strong></p><img src="../pic/MySQL索引及调优篇/image-20220621202759576.png" alt="image-20220621202759576" style="float:left;" /><p><strong>2. 唯一性索引</strong></p><img src="../pic/MySQL索引及调优篇/image-20220621202850551.png" alt="image-20220621202850551" style="float:left;" /><p><strong>3. 主键索引</strong></p><img src="../pic/MySQL索引及调优篇/image-20220621203302303.png" alt="image-20220621203302303" style="float:left;" /><p><strong>4. 单列索引</strong></p><img src="../pic/MySQL索引及调优篇/image-20220621203333925.png" alt="image-20220621203333925" style="float:left;" /><p><strong>5. 多列 (组合、联合) 索引</strong></p><img src="../pic/MySQL索引及调优篇/image-20220621203454424.png" alt="image-20220621203454424" style="float:left;" /><p><strong>6. 全文检索</strong></p><img src="../pic/MySQL索引及调优篇/image-20220621203645789.png" alt="image-20220621203645789" style="float:left;" /><p><strong>7. 补充：空间索引</strong></p><img src="../pic/MySQL索引及调优篇/image-20220621203736098.png" alt="image-20220621203736098" style="float:left;" /><p>**小结：不同的存储引擎支持的索引类型也不一样 **</p><p>InnoDB ：支持 B-tree、Full-text 等索引，不支持 Hash 索引； </p><p>MyISAM ： 支持 B-tree、Full-text 等索引，不支持 Hash 索引； </p><p>Memory ：支持 B-tree、Hash 等 索引，不支持 Full-text 索引；</p><p>NDB ：支持 Hash 索引，不支持 B-tree、Full-text 等索引； </p><p>Archive ：不支 持 B-tree、Hash、Full-text 等索引；</p><h3 id="1-2-创建索引"><a href="#1-2-创建索引" class="headerlink" title="1.2 创建索引"></a>1.2 创建索引</h3><p>MySQL支持多种方法在单个或多个列上创建索引：在创建表的定义语句 CREATE TABLE 中指定索引列，使用 ALTER TABLE 语句在存在的表上创建索引，或者使用 CREATE INDEX 语句在已存在的表上添加索引。</p><h4 id="1-创建表的时候创建索引"><a href="#1-创建表的时候创建索引" class="headerlink" title="1. 创建表的时候创建索引"></a>1. 创建表的时候创建索引</h4><p>使用CREATE TABLE创建表时，除了可以定义列的数据类型外，还可以定义主键约束、外键约束或者唯一性约束，而不论创建哪种约束，在定义约束的同时相当于在指定列上创建了一个索引。</p><p>举例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE dept(dept_id INT PRIMARY KEY AUTO_INCREMENT,dept_name VARCHAR(20));CREATE TABLE emp(emp_id INT PRIMARY KEY AUTO_INCREMENT,emp_name VARCHAR(20) UNIQUE,dept_id INT,CONSTRAINT emp_dept_id_fk FOREIGN KEY(dept_id) REFERENCES dept(dept_id))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是，如果显式创建表时创建索引的话，基本语法格式如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE table_name [col_name data_type][UNIQUE | FULLTEXT | SPATIAL] [INDEX | KEY] [index_name] (col_name [length]) [ASC |DESC]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>UNIQUE 、 FULLTEXT 和 SPATIAL 为可选参数，分别表示唯一索引、全文索引和空间索引； </li><li>INDEX 与 KEY 为同义词，两者的作用相同，用来指定创建索引； </li><li>index_name 指定索引的名称，为可选参数，如果不指定，那么MySQL默认col_name为索引名； </li><li>col_name 为需要创建索引的字段列，该列必须从数据表中定义的多个列中选择； </li><li>length 为可选参数，表示索引的长度，只有字符串类型的字段才能指定索引长度； </li><li>ASC 或 DESC 指定升序或者降序的索引值存储。</li></ul><p><strong>1. 创建普通索引</strong></p><p>在book表中的year_publication字段上建立普通索引，SQL语句如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE book(book_id INT ,book_name VARCHAR(100),authors VARCHAR(100),info VARCHAR(100) ,comment VARCHAR(100),year_publication YEAR,INDEX(year_publication));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2. 创建唯一索引</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE test1(id INT NOT NULL,name varchar(30) NOT NULL,UNIQUE INDEX uk_idx_id(id));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该语句执行完毕之后，使用SHOW CREATE TABLE查看表结构：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW INDEX FROM test1 \G<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>3. 主键索引</strong></p><p>设定为主键后数据库会自动建立索引，innodb为聚簇索引，语法：</p><ul><li>随表一起建索引：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE student (id INT(10) UNSIGNED AUTO_INCREMENT ,student_no VARCHAR(200),student_name VARCHAR(200),PRIMARY KEY(id));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除主键索引：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE studentdrop PRIMARY KEY;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>修改主键索引：必须先删除掉(drop)原索引，再新建(add)索引</li></ul><p><strong>4. 创建单列索引</strong></p><p>引举:</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE test2(id INT NOT NULL,name CHAR(50) NULL,INDEX single_idx_name(name(20)));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该语句执行完毕之后，使用SHOW CREATE TABLE查看表结构：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW INDEX FROM test2 \G<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>5. 创建组合索引</strong></p><p>举例：创建表test3，在表中的id、name和age字段上建立组合索引，SQL语句如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE test3(id INT(11) NOT NULL,name CHAR(30) NOT NULL,age INT(11) NOT NULL,info VARCHAR(255),INDEX multi_idx(id,name,age));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该语句执行完毕之后，使用SHOW INDEX 查看：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW INDEX FROM test3 \G<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在test3表中，查询id和name字段，使用EXPLAIN语句查看索引的使用情况：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">EXPLAIN SELECT * FROM test3 WHERE id&#x3D;1 AND name&#x3D;&#39;songhongkang&#39; \G<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到，查询id和name字段时，使用了名称为MultiIdx的索引，如果查询 (name, age) 组合或者单独查询name和age字段，会发现结果中possible_keys和key值为NULL, 并没有使用在t3表中创建的索引进行查询。</p><p><strong>6. 创建全文索引</strong></p><p>FULLTEXT全文索引可以用于全文检索，并且只为 <code>CHAR</code> 、<code>VARCHAR</code> 和 <code>TEXT</code> 列创建索引。索引总是对整个列进行，不支持局部 (前缀) 索引。</p><p>举例1：创建表test4，在表中的info字段上建立全文索引，SQL语句如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE test4(id INT NOT NULL,name CHAR(30) NOT NULL,age INT NOT NULL,info VARCHAR(255),FULLTEXT INDEX futxt_idx_info(info)) ENGINE&#x3D;MyISAM;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在MySQL5.7及之后版本中可以不指定最后的ENGINE了，因为在此版本中InnoDB支持全文索引。</p></blockquote><p>语句执行完毕之后，使用SHOW CREATE TABLE查看表结构：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW INDEX FROM test4 \G<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由结果可以看到，info字段上已经成功建立了一个名为futxt_idx_info的FULLTEXT索引。</p><p>举例2：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE articles (id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,title VARCHAR (200),body TEXT,FULLTEXT index (title, body)) ENGINE &#x3D; INNODB;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建了一个给title和body字段添加全文索引的表。</p><p>举例3：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE &#96;papers&#96; (&#96;id&#96; int(10) unsigned NOT NULL AUTO_INCREMENT,&#96;title&#96; varchar(200) DEFAULT NULL,&#96;content&#96; text,PRIMARY KEY (&#96;id&#96;),FULLTEXT KEY &#96;title&#96; (&#96;title&#96;,&#96;content&#96;)) ENGINE&#x3D;MyISAM DEFAULT CHARSET&#x3D;utf8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不同于like方式的的查询：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM papers WHERE content LIKE ‘%查询字符串%’;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>全文索引用match+against方式查询：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM papers WHERE MATCH(title,content) AGAINST (‘查询字符串’);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>明显的提高查询效率。</p><blockquote><p>注意点 </p><ol><li>使用全文索引前，搞清楚版本支持情况； </li><li>全文索引比 like + % 快 N 倍，但是可能存在精度问题；</li><li>如果需要全文索引的是大量数据，建议先添加数据，再创建索引。</li></ol></blockquote><p><strong>7. 创建空间索引</strong></p><p>空间索引创建中，要求空间类型的字段必须为 非空 。</p><p>举例：创建表test5，在空间类型为GEOMETRY的字段上创建空间索引，SQL语句如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE test5(geo GEOMETRY NOT NULL,SPATIAL INDEX spa_idx_geo(geo)) ENGINE&#x3D;MyISAM;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>该语句执行完毕之后，使用SHOW CREATE TABLE查看表结构：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW INDEX FROM test5 \G<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到，test5表的geo字段上创建了名称为spa_idx_geo的空间索引。注意创建时指定空间类型字段值的非空约束，并且表的存储引擎为MyISAM。</p><h4 id="2-在已经存在的表上创建索引"><a href="#2-在已经存在的表上创建索引" class="headerlink" title="2. 在已经存在的表上创建索引"></a>2. 在已经存在的表上创建索引</h4><p>在已经存在的表中创建索引可以使用ALTER TABLE语句或者CREATE INDEX语句。</p><p><strong>1. 使用ALTER TABLE语句创建索引</strong> ALTER TABLE语句创建索引的基本语法如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE table_name ADD [UNIQUE | FULLTEXT | SPATIAL] [INDEX | KEY][index_name] (col_name[length],...) [ASC | DESC]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>2. 使用CREATE INDEX创建索引</strong> CREATE INDEX语句可以在已经存在的表上添加索引，在MySQL中， CREATE INDEX被映射到一个ALTER TABLE语句上，基本语法结构为：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE [UNIQUE | FULLTEXT | SPATIAL] INDEX index_nameON table_name (col_name[length],...) [ASC | DESC]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-3-删除索引"><a href="#1-3-删除索引" class="headerlink" title="1.3 删除索引"></a>1.3 删除索引</h3><p><strong>1. 使用ALTER TABLE删除索引</strong>  ALTER TABLE删除索引的基本语法格式如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE table_name DROP INDEX index_name;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2. 使用DROP INDEX语句删除索引</strong> DROP INDEX删除索引的基本语法格式如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DROP INDEX index_name ON table_name;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>提示: 删除表中的列时，如果要删除的列为索引的组成部分，则该列也会从索引中删除。如果组成索引的所有列都被删除，则整个索引将被删除。</p></blockquote><h2 id="2-MySQL8-0索引新特性"><a href="#2-MySQL8-0索引新特性" class="headerlink" title="2. MySQL8.0索引新特性"></a>2. MySQL8.0索引新特性</h2><h3 id="2-1-支持降序索引"><a href="#2-1-支持降序索引" class="headerlink" title="2.1 支持降序索引"></a>2.1 支持降序索引</h3><p>降序索引以降序存储键值。虽然在语法上，从MySQL 4版本开始就已经支持降序索引的语法了，但实际上DESC定义是被忽略的，直到MySQL 8.x版本才开始真正支持降序索引 (仅限于InnoDBc存储引擎)。</p><p>MySQL在8.0版本之前创建的仍然是升序索引，使用时进行反向扫描，这大大降低了数据库的效率。在某些场景下，降序索引意义重大。例如，如果一个查询，需要对多个列进行排序，且顺序要求不一致，那么使用降序索引将会避免数据库使用额外的文件排序操作，从而提高性能。</p><p>举例：分别在MySQL 5.7版本和MySQL 8.0版本中创建数据表ts1，结果如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE ts1(a int,b int,index idx_a_b(a,b desc));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在MySQL 5.7版本中查看数据表ts1的结构，结果如下:</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220622224124267.png" alt="image-20220622224124267"></p><p>从结果可以看出，索引仍然是默认的升序</p><p>在MySQL 8.0版本中查看数据表ts1的结构，结果如下：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220622224205048.png" alt="image-20220622224205048"></p><p>从结果可以看出，索引已经是降序了。下面继续测试降序索引在执行计划中的表现。</p><p>分别在MySQL 5.7版本和MySQL 8.0版本的数据表ts1中插入800条随机数据，执行语句如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER &#x2F;&#x2F;CREATE PROCEDURE ts_insert()BEGINDECLARE i INT DEFAULT 1;WHILE i &lt; 800DOinsert into ts1 select rand()*80000, rand()*80000;SET i &#x3D; i+1;END WHILE;commit;END &#x2F;&#x2F;DELIMITER;# 调用CALL ts_insert();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在MySQL 5.7版本中查看数据表ts1的执行计划，结果如下:</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">EXPLAIN SELECT * FROM ts1 ORDER BY a, b DESC LIMIT 5;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在MySQL 8.0版本中查看数据表 ts1 的执行计划。</p><p>从结果可以看出，修改后MySQL 5.7 的执行计划要明显好于MySQL 8.0。</p><h3 id="2-2-隐藏索引"><a href="#2-2-隐藏索引" class="headerlink" title="2.2 隐藏索引"></a>2.2 隐藏索引</h3><p>在MySQL 5.7版本及之前，只能通过显式的方式删除索引。此时，如果发展删除索引后出现错误，又只能通过显式创建索引的方式将删除的索引创建回来。如果数据表中的数据量非常大，或者数据表本身比较 大，这种操作就会消耗系统过多的资源，操作成本非常高。</p><p>从MySQL 8.x开始支持 隐藏索引（invisible indexes） ，只需要将待删除的索引设置为隐藏索引，使 查询优化器不再使用这个索引（即使使用force index（强制使用索引），优化器也不会使用该索引）， 确认将索引设置为隐藏索引后系统不受任何响应，就可以彻底删除索引。 这种通过先将索引设置为隐藏索 引，再删除索引的方式就是软删除。</p><p>同时，如果你想验证某个索引删除之后的 <code>查询性能影响</code>，就可以暂时先隐藏该索引。</p><blockquote><p>注意：</p><p>主键不能被设置为隐藏索引。当表中没有显式主键时，表中第一个唯一非空索引会成为隐式主键，也不能设置为隐藏索引。</p></blockquote><p>索引默认是可见的，在使用CREATE TABLE, CREATE INDEX 或者 ALTER TABLE 等语句时可以通过 <code>VISIBLE</code> 或者 <code>INVISIBLE</code> 关键词设置索引的可见性。</p><p><strong>1. 创建表时直接创建</strong></p><p>在MySQL中创建隐藏索引通过SQL语句INVISIBLE来实现，其语法形式如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE tablename(propname1 type1[CONSTRAINT1],propname2 type2[CONSTRAINT2],……propnamen typen,INDEX [indexname](propname1 [(length)]) INVISIBLE);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述语句比普通索引多了一个关键字INVISIBLE，用来标记索引为不可见索引。</p><p><strong>2. 在已经存在的表上创建</strong></p><p>可以为已经存在的表设置隐藏索引，其语法形式如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE INDEX indexnameON tablename(propname[(length)]) INVISIBLE;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>3. 通过ALTER TABLE语句创建</strong></p><p>语法形式如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE tablenameADD INDEX indexname (propname [(length)]) INVISIBLE;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>4. 切换索引可见状态</strong></p><p>已存在的索引可通过如下语句切换可见状态：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE tablename ALTER INDEX index_name INVISIBLE; #切换成隐藏索引ALTER TABLE tablename ALTER INDEX index_name VISIBLE; #切换成非隐藏索引<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果将index_cname索引切换成可见状态，通过explain查看执行计划，发现优化器选择了index_cname索引。</p><blockquote><p>注意 当索引被隐藏时，它的内容仍然是和正常索引一样实时更新的。如果一个索引需要长期被隐藏，那么可以将其删除，因为索引的存在会影响插入、更新和删除的性能。</p></blockquote><p>通过设置隐藏索引的可见性可以查看索引对调优的帮助。</p><p><strong>5. 使隐藏索引对查询优化器可见</strong></p><p>在MySQL 8.x版本中，为索引提供了一种新的测试方式，可以通过查询优化器的一个开关 (use_invisible_indexes) 来打开某个设置，使隐藏索引对查询优化器可见。如果use_invisible_indexes 设置为off (默认)，优化器会忽略隐藏索引。如果设置为on，即使隐藏索引不可见，优化器在生成执行计 划时仍会考虑使用隐藏索引。</p><p>（1）在MySQL命令行执行如下命令查看查询优化器的开关设置。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select @@optimizer_switch \G<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在输出的结果信息中找到如下属性配置。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">use_invisible_indexes&#x3D;off<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此属性配置值为off，说明隐藏索引默认对查询优化器不可见。</p><p>（2）使隐藏索引对查询优化器可见，需要在MySQL命令行执行如下命令：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; set session optimizer_switch&#x3D;&quot;use_invisible_indexes&#x3D;on&quot;;Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>SQL语句执行成功，再次查看查询优化器的开关设置。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select @@optimizer_switch \G*************************** 1. row ***************************@@optimizer_switch:index_merge&#x3D;on,index_merge_union&#x3D;on,index_merge_sort_union&#x3D;on,index_merge_intersection&#x3D;on,engine_condition_pushdown&#x3D;on,index_condition_pushdown&#x3D;on,mrr&#x3D;on,mrr_cost_based&#x3D;on,block_nested_loop&#x3D;on,batched_key_access&#x3D;off,materialization&#x3D;on,semijoin&#x3D;on,loosescan&#x3D;on,firstmatch&#x3D;on,duplicateweedout&#x3D;on,subquery_materialization_cost_based&#x3D;on,use_index_extensions&#x3D;on,condition_fanout_filter&#x3D;on,derived_merge&#x3D;on,use_invisible_indexes&#x3D;on,skip_scan&#x3D;on,hash_join&#x3D;on1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时，在输出结果中可以看到如下属性配置。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">use_invisible_indexes&#x3D;on<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>use_invisible_indexes属性的值为on，说明此时隐藏索引对查询优化器可见。</p><p>（3）使用EXPLAIN查看以字段invisible_column作为查询条件时的索引使用情况。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">explain select * from classes where cname &#x3D; &#39;高一2班&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询优化器会使用隐藏索引来查询数据。</p><p>（4）如果需要使隐藏索引对查询优化器不可见，则只需要执行如下命令即可。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; set session optimizer_switch&#x3D;&quot;use_invisible_indexes&#x3D;off&quot;;Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再次查看查询优化器的开关设置。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select @@optimizer_switch \G<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时，use_invisible_indexes属性的值已经被设置为“off”。</p><h2 id="3-索引的设计原则"><a href="#3-索引的设计原则" class="headerlink" title="3. 索引的设计原则"></a>3. 索引的设计原则</h2><p>为了使索引的使用效率更高，在创建索引时，必须考虑在哪些字段上创建索引和创建什么类型的索引。<strong>索引设计不合理或者缺少索引都会对数据库和应用程序的性能造成障碍。</strong>高效的索引对于获得良好的性能非常重要。设计索引时，应该考虑相应准则。</p><h3 id="3-1-数据准备"><a href="#3-1-数据准备" class="headerlink" title="3.1 数据准备"></a>3.1 数据准备</h3><p><strong>第1步：创建数据库、创建表</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE DATABASE atguigudb1;USE atguigudb1;#1.创建学生表和课程表CREATE TABLE &#96;student_info&#96; (&#96;id&#96; INT(11) NOT NULL AUTO_INCREMENT,&#96;student_id&#96; INT NOT NULL ,&#96;name&#96; VARCHAR(20) DEFAULT NULL,&#96;course_id&#96; INT NOT NULL ,&#96;class_id&#96; INT(11) DEFAULT NULL,&#96;create_time&#96; DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,PRIMARY KEY (&#96;id&#96;)) ENGINE&#x3D;INNODB AUTO_INCREMENT&#x3D;1 DEFAULT CHARSET&#x3D;utf8;CREATE TABLE &#96;course&#96; (&#96;id&#96; INT(11) NOT NULL AUTO_INCREMENT,&#96;course_id&#96; INT NOT NULL ,&#96;course_name&#96; VARCHAR(40) DEFAULT NULL,PRIMARY KEY (&#96;id&#96;)) ENGINE&#x3D;INNODB AUTO_INCREMENT&#x3D;1 DEFAULT CHARSET&#x3D;utf8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第2步：创建模拟数据必需的存储函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#函数1：创建随机产生字符串函数DELIMITER &#x2F;&#x2F;CREATE FUNCTION rand_string(n INT)RETURNS VARCHAR(255) #该函数会返回一个字符串BEGINDECLARE chars_str VARCHAR(100) DEFAULT&#39;abcdefghijklmnopqrstuvwxyzABCDEFJHIJKLMNOPQRSTUVWXYZ&#39;;DECLARE return_str VARCHAR(255) DEFAULT &#39;&#39;;    DECLARE i INT DEFAULT 0;    WHILE i &lt; n DO    SET return_str &#x3D;CONCAT(return_str,SUBSTRING(chars_str,FLOOR(1+RAND()*52),1));    SET i &#x3D; i + 1;    END WHILE;    RETURN return_str;END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#函数2：创建随机数函数DELIMITER &#x2F;&#x2F;CREATE FUNCTION rand_num (from_num INT ,to_num INT) RETURNS INT(11)BEGINDECLARE i INT DEFAULT 0;SET i &#x3D; FLOOR(from_num +RAND()*(to_num - from_num+1)) ;RETURN i;END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建函数，假如报错：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">This function has none of DETERMINISTIC......<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于开启过慢查询日志bin-log, 我们就必须为我们的function指定一个参数。</p><p>主从复制，主机会将写操作记录在bin-log日志中。从机读取bin-log日志，执行语句来同步数据。如果使 用函数来操作数据，会导致从机和主键操作时间不一致。所以，默认情况下，mysql不开启创建函数设置。</p><ul><li>查看mysql是否允许创建函数：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show variables like &#39;log_bin_trust_function_creators&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>命令开启：允许创建函数设置：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">set global log_bin_trust_function_creators&#x3D;1; # 不加global只是当前窗口有效。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>mysqld重启，上述参数又会消失。永久方法：</p><ul><li><p>windows下：my.ini[mysqld]加上：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">log_bin_trust_function_creators&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>linux下：&#x2F;etc&#x2F;my.cnf下my.cnf[mysqld]加上：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">log_bin_trust_function_creators&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><p><strong>第3步：创建插入模拟数据的存储过程</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 存储过程1：创建插入课程表存储过程DELIMITER &#x2F;&#x2F;CREATE PROCEDURE insert_course( max_num INT )BEGINDECLARE i INT DEFAULT 0;SET autocommit &#x3D; 0; #设置手动提交事务REPEAT #循环SET i &#x3D; i + 1; #赋值INSERT INTO course (course_id, course_name ) VALUES(rand_num(10000,10100),rand_string(6));UNTIL i &#x3D; max_numEND REPEAT;COMMIT; #提交事务END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 存储过程2：创建插入学生信息表存储过程DELIMITER &#x2F;&#x2F;CREATE PROCEDURE insert_stu( max_num INT )BEGINDECLARE i INT DEFAULT 0;SET autocommit &#x3D; 0; #设置手动提交事务REPEAT #循环SET i &#x3D; i + 1; #赋值INSERT INTO student_info (course_id, class_id ,student_id ,NAME ) VALUES(rand_num(10000,10100),rand_num(10000,10200),rand_num(1,200000),rand_string(6));UNTIL i &#x3D; max_numEND REPEAT;COMMIT; #提交事务END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第4步：调用存储过程</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CALL insert_course(100);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CALL insert_stu(1000000);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-哪些情况适合创建索引"><a href="#3-2-哪些情况适合创建索引" class="headerlink" title="3.2 哪些情况适合创建索引"></a>3.2 哪些情况适合创建索引</h3><h4 id="1-字段的数值有唯一性的限制"><a href="#1-字段的数值有唯一性的限制" class="headerlink" title="1. 字段的数值有唯一性的限制"></a>1. 字段的数值有唯一性的限制</h4><img src="../pic/MySQL索引及调优篇/image-20220623154615702.png" alt="image-20220623154615702" style="float:left;" /><blockquote><p>业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。（来源：Alibaba） 说明：不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明显的。</p></blockquote><h4 id="2-频繁作为-WHERE-查询条件的字段"><a href="#2-频繁作为-WHERE-查询条件的字段" class="headerlink" title="2. 频繁作为 WHERE 查询条件的字段"></a>2. 频繁作为 WHERE 查询条件的字段</h4><p>某个字段在SELECT语句的 WHERE 条件中经常被使用到，那么就需要给这个字段创建索引了。尤其是在 数据量大的情况下，创建普通索引就可以大幅提升数据查询的效率。 </p><p>比如student_info数据表（含100万条数据），假设我们想要查询 student_id&#x3D;123110 的用户信息。</p><h4 id="3-经常-GROUP-BY-和-ORDER-BY-的列"><a href="#3-经常-GROUP-BY-和-ORDER-BY-的列" class="headerlink" title="3. 经常 GROUP BY 和 ORDER BY 的列"></a>3. 经常 GROUP BY 和 ORDER BY 的列</h4><p>索引就是让数据按照某种顺序进行存储或检索，因此当我们使用 GROUP BY 对数据进行分组查询，或者使用 ORDER BY 对数据进行排序的时候，就需要对分组或者排序的字段进行索引 。如果待排序的列有多个，那么可以在这些列上建立组合索引 。</p><h4 id="4-UPDATE、DELETE-的-WHERE-条件列"><a href="#4-UPDATE、DELETE-的-WHERE-条件列" class="headerlink" title="4. UPDATE、DELETE 的 WHERE 条件列"></a>4. UPDATE、DELETE 的 WHERE 条件列</h4><p>对数据按照某个条件进行查询后再进行 UPDATE 或 DELETE 的操作，如果对 WHERE 字段创建了索引，就能大幅提升效率。原理是因为我们需要先根据 WHERE 条件列检索出来这条记录，然后再对它进行更新或删除。<strong>如果进行更新的时候，更新的字段是非索引字段，提升的效率会更明显，这是因为非索引字段更新不需要对索引进行维护。</strong></p><h4 id="5-DISTINCT-字段需要创建索引"><a href="#5-DISTINCT-字段需要创建索引" class="headerlink" title="5.DISTINCT 字段需要创建索引"></a>5.DISTINCT 字段需要创建索引</h4><p>有时候我们需要对某个字段进行去重，使用 DISTINCT，那么对这个字段创建索引，也会提升查询效率。 </p><p>比如，我们想要查询课程表中不同的 student_id 都有哪些，如果我们没有对 student_id 创建索引，执行 SQL 语句：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT DISTINCT(student_id) FROM &#96;student_info&#96;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行结果（600637 条记录，运行时间 0.683s ）</p><p>如果我们对 student_id 创建索引，再执行 SQL 语句：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT DISTINCT(student_id) FROM &#96;student_info&#96;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行结果（600637 条记录，运行时间 0.010s ）</p><p>你能看到 SQL 查询效率有了提升，同时显示出来的 student_id 还是按照递增的顺序 进行展示的。这是因为索引会对数据按照某种顺序进行排序，所以在去重的时候也会快很多。</p><h4 id="6-多表-JOIN-连接操作时，创建索引注意事项"><a href="#6-多表-JOIN-连接操作时，创建索引注意事项" class="headerlink" title="6. 多表 JOIN 连接操作时，创建索引注意事项"></a>6. 多表 JOIN 连接操作时，创建索引注意事项</h4><p>首先， <code>连接表的数量尽量不要超过 3 张</code> ，因为每增加一张表就相当于增加了一次嵌套的循环，数量级增 长会非常快，严重影响查询的效率。 </p><p>其次， <code>对 WHERE 条件创建索引</code> ，因为 WHERE 才是对数据条件的过滤。如果在数据量非常大的情况下， 没有 WHERE 条件过滤是非常可怕的。 </p><p>最后， <code>对用于连接的字段创建索引</code> ，并且该字段在多张表中的 类型必须一致 。比如 course_id 在 student_info 表和 course 表中都为 int(11) 类型，而不能一个为 int 另一个为 varchar 类型。</p><p>举个例子，如果我们只对 student_id 创建索引，执行 SQL 语句：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT s.course_id, name, s.student_id, c.course_nameFROM student_info s JOIN course cON s.course_id &#x3D; c.course_idWHERE name &#x3D; &#39;462eed7ac6e791292a79&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果（1 条数据，运行时间 0.189s ）</p><p>这里我们对 name 创建索引，再执行上面的 SQL 语句，运行时间为 0.002s 。</p><h4 id="7-使用列的类型小的创建索引"><a href="#7-使用列的类型小的创建索引" class="headerlink" title="7. 使用列的类型小的创建索引"></a>7. 使用列的类型小的创建索引</h4><img src="../pic/MySQL索引及调优篇/image-20220623175306282.png" alt="image-20220623175306282" style="float:left;" /><h4 id="8-使用字符串前缀创建索引"><a href="#8-使用字符串前缀创建索引" class="headerlink" title="8. 使用字符串前缀创建索引"></a>8. 使用字符串前缀创建索引</h4><img src="../pic/MySQL索引及调优篇/image-20220623175513439.png" alt="image-20220623175513439" style="float:left;" /><p>创建一张商户表，因为地址字段比较长，在地址字段上建立前缀索引</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table shop(address varchar(120) not null);alter table shop add index(address(12));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>问题是，截取多少呢？截取得多了，达不到节省索引存储空间的目的；截取得少了，重复内容太多，字 段的散列度(选择性)会降低。怎么计算不同的长度的选择性呢？</p><p>先看一下字段在全部数据中的选择度：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select count(distinct address) &#x2F; count(*) from shop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过不同长度去计算，与全表的选择性对比：</p><p>公式：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">count(distinct left(列名, 索引长度))&#x2F;count(*)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select count(distinct left(address,10)) &#x2F; count(*) as sub10, -- 截取前10个字符的选择度count(distinct left(address,15)) &#x2F; count(*) as sub11, -- 截取前15个字符的选择度count(distinct left(address,20)) &#x2F; count(*) as sub12, -- 截取前20个字符的选择度count(distinct left(address,25)) &#x2F; count(*) as sub13 -- 截取前25个字符的选择度from shop;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>越接近于1越好，说明越有区分度</p></blockquote><p><strong>引申另一个问题：索引列前缀对排序的影响</strong></p><p>如果使用了索引列前缀，比方说前边只把address列的 <code>前12个字符</code> 放到了二级索引中，下边这个查询可能就有点尴尬了：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM shopORDER BY addressLIMIT 12;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>因为二级索引中不包含完整的address列信息，所以无法对前12个字符相同，后边的字符不同的记录进行排序，也就是使用索引列前缀的方式 <code>无法支持使用索引排序</code> ，只能使用文件排序。</p><p><strong>拓展：Alibaba《Java开发手册》</strong></p><p>【 强制 】在 varchar 字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据实际文本 区分度决定索引长度。 </p><p>说明：索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为 20 的索引，区分度会高达 90% 以上 ，可以使用 count(distinct left(列名, 索引长度))&#x2F;count(*)的区分度来确定。</p><h4 id="9-区分度高-散列性高-的列适合作为索引"><a href="#9-区分度高-散列性高-的列适合作为索引" class="headerlink" title="9. 区分度高(散列性高)的列适合作为索引"></a>9. 区分度高(散列性高)的列适合作为索引</h4><p><code>列的基数</code> 指的是某一列中不重复数据的个数，比方说某个列包含值 <code>2, 5, 8, 2, 5, 8, 2, 5, 8</code>，虽然有<code>9</code>条记录，但该列的基数却是3。也就是说<strong>在记录行数一定的情况下，列的基数越大，该列中的值越分散；列的基数越小，该列中的值越集中。</strong>这个列的基数指标非常重要，直接影响我们是否能有效的利用索引。最好为列的基数大的列简历索引，为基数太小的列的简历索引效果可能不好。</p><p>可以使用公式<code>select count(distinct a) / count(*) from t1</code> 计算区分度，越接近1越好，一般超过33%就算比较高效的索引了。</p><p>扩展：联合索引把区分度搞(散列性高)的列放在前面。</p><h4 id="10-使用最频繁的列放到联合索引的左侧"><a href="#10-使用最频繁的列放到联合索引的左侧" class="headerlink" title="10. 使用最频繁的列放到联合索引的左侧"></a>10. 使用最频繁的列放到联合索引的左侧</h4><p>这样也可以较少的建立一些索引。同时，由于”最左前缀原则”，可以增加联合索引的使用率。</p><h4 id="11-在多个字段都要创建索引的情况下，联合索引优于单值索引"><a href="#11-在多个字段都要创建索引的情况下，联合索引优于单值索引" class="headerlink" title="11. 在多个字段都要创建索引的情况下，联合索引优于单值索引"></a>11. 在多个字段都要创建索引的情况下，联合索引优于单值索引</h4><h3 id="3-3-限制索引的数目"><a href="#3-3-限制索引的数目" class="headerlink" title="3.3 限制索引的数目"></a>3.3 限制索引的数目</h3><img src="../pic/MySQL索引及调优篇/image-20220627151947786.png" alt="image-20220627151947786" style="float:left;" /><h3 id="3-4-哪些情况不适合创建索引"><a href="#3-4-哪些情况不适合创建索引" class="headerlink" title="3.4 哪些情况不适合创建索引"></a>3.4 哪些情况不适合创建索引</h3><h4 id="1-在where中使用不到的字段，不要设置索引"><a href="#1-在where中使用不到的字段，不要设置索引" class="headerlink" title="1. 在where中使用不到的字段，不要设置索引"></a>1. 在where中使用不到的字段，不要设置索引</h4><p>WHERE条件 (包括 GROUP BY、ORDER BY) 里用不到的字段不需要创建索引，索引的价值是快速定位，如果起不到定位的字段通常是不需要创建索引的。举个例子：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT course_id, student_id, create_timeFROM student_infoWHERE student_id &#x3D; 41251;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>因为我们是按照 student_id 来进行检索的，所以不需要对其他字段创建索引，即使这些字段出现在SELECT字段中。</p><h4 id="2-数据量小的表最好不要使用索引"><a href="#2-数据量小的表最好不要使用索引" class="headerlink" title="2. 数据量小的表最好不要使用索引"></a>2. 数据量小的表最好不要使用索引</h4><p>如果表记录太少，比如少于1000个，那么是不需要创建索引的。表记录太少，是否创建索引 <code>对查询效率的影响并不大</code>。甚至说，查询花费的时间可能比遍历索引的时间还要短，索引可能不会产生优化效果。</p><p>举例：创建表1：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE t_without_index(a INT PRIMARY KEY AUTO_INCREMENT,b INT);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>提供存储过程1：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#创建存储过程DELIMITER &#x2F;&#x2F;CREATE PROCEDURE t_wout_insert()BEGIN    DECLARE i INT DEFAULT 1;    WHILE i &lt;&#x3D; 900    DO        INSERT INTO t_without_index(b) SELECT RAND()*10000;        SET i &#x3D; i + 1;    END WHILE;    COMMIT;END &#x2F;&#x2F;DELIMITER ;#调用CALL t_wout_insert()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建表2：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE t_with_index(a INT PRIMARY KEY AUTO_INCREMENT,b INT,INDEX idx_b(b));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建存储过程2：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#创建存储过程DELIMITER &#x2F;&#x2F;CREATE PROCEDURE t_with_insert()BEGIN    DECLARE i INT DEFAULT 1;    WHILE i &lt;&#x3D; 900    DO        INSERT INTO t_with_index(b) SELECT RAND()*10000;        SET i &#x3D; i + 1;    END WHILE;    COMMIT;END &#x2F;&#x2F;DELIMITER ;#调用CALL t_with_insert();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询对比：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select * from t_without_index where b &#x3D; 9879;+------+------+| a | b |+------+------+| 1242 | 9879 |+------+------+1 row in set (0.00 sec)mysql&gt; select * from t_with_index where b &#x3D; 9879;+-----+------+| a | b |+-----+------+| 112 | 9879 |+-----+------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你能看到运行结果相同，但是在数据量不大的情况下，索引就发挥不出作用了。</p><blockquote><p>结论：在数据表中的数据行数比较少的情况下，比如不到 1000 行，是不需要创建索引的。</p></blockquote><h4 id="3-有大量重复数据的列上不要建立索引"><a href="#3-有大量重复数据的列上不要建立索引" class="headerlink" title="3. 有大量重复数据的列上不要建立索引"></a>3. 有大量重复数据的列上不要建立索引</h4><p>在条件表达式中经常用到的不同值较多的列上建立索引，但字段中如果有大量重复数据，也不用创建索引。比如在学生表的”性别”字段上只有“男”与“女”两个不同值，因此无须建立索引。如果建立索引，不但不会提高查询效率，反而会<code>严重降低数据更新速度</code>。</p><p>举例1：要在 100 万行数据中查找其中的 50 万行（比如性别为男的数据），一旦创建了索引，你需要先 访问 50 万次索引，然后再访问 50 万次数据表，这样加起来的开销比不使用索引可能还要大。</p><p>举例2：假设有一个学生表，学生总数为 100 万人，男性只有 10 个人，也就是占总人口的 10 万分之 1。</p><p>学生表 student_gender 结构如下。其中数据表中的 student_gender 字段取值为 0 或 1，0 代表女性，1 代表男性。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE student_gender(    student_id INT(11) NOT NULL,    student_name VARCHAR(50) NOT NULL,    student_gender TINYINT(1) NOT NULL,    PRIMARY KEY(student_id))ENGINE &#x3D; INNODB;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们要筛选出这个学生表中的男性，可以使用：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM student_gender WHERE student_gender &#x3D; 1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>结论：当数据重复度大，比如 高于 10% 的时候，也不需要对这个字段使用索引。</p></blockquote><h4 id="4-避免对经常更新的表创建过多的索引"><a href="#4-避免对经常更新的表创建过多的索引" class="headerlink" title="4.  避免对经常更新的表创建过多的索引"></a>4.  避免对经常更新的表创建过多的索引</h4><p>第一层含义：频繁更新的字段不一定要创建索引。因为更新数据的时候，也需要更新索引，如果索引太多，在更新索引的时候也会造成负担，从而影响效率。</p><p>第二层含义：避免对经常更新的表创建过多的索引，并且索引中的列尽可能少。此时，虽然提高了查询速度，同时却降低更新表的速度。</p><h4 id="5-不建议用无序的值作为索引"><a href="#5-不建议用无序的值作为索引" class="headerlink" title="5. 不建议用无序的值作为索引"></a>5. 不建议用无序的值作为索引</h4><p>例如身份证、UUID(在索引比较时需要转为ASCII，并且插入时可能造成页分裂)、MD5、HASH、无序长字 符串等。</p><h4 id="6-删除不再使用或者很少使用的索引"><a href="#6-删除不再使用或者很少使用的索引" class="headerlink" title="6. 删除不再使用或者很少使用的索引"></a>6. 删除不再使用或者很少使用的索引</h4><p>表中的数据被大量更新，或者数据的使用方式被改变后，原有的一些索引可能不再需要。数据库管理员应当定期找出这些索引，将它们删除，从而减少索引对更新操作的影响。</p><h4 id="7-不要定义夯余或重复的索引"><a href="#7-不要定义夯余或重复的索引" class="headerlink" title="7. 不要定义夯余或重复的索引"></a>7. 不要定义夯余或重复的索引</h4><p>① 冗余索引 </p><p>举例：建表语句如下</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE person_info(    id INT UNSIGNED NOT NULL AUTO_INCREMENT,    name VARCHAR(100) NOT NULL,    birthday DATE NOT NULL,    phone_number CHAR(11) NOT NULL,    country varchar(100) NOT NULL,    PRIMARY KEY (id),    KEY idx_name_birthday_phone_number (name(10), birthday, phone_number),    KEY idx_name (name(10)));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们知道，通过 idx_name_birthday_phone_number 索引就可以对 name 列进行快速搜索，再创建一 个专门针对 name 列的索引就算是一个 冗余索引 ，维护这个索引只会增加维护的成本，并不会对搜索有 什么好处。</p><p>② 重复索引 </p><p>另一种情况，我们可能会对某个列 重复建立索引 ，比方说这样：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE repeat_index_demo (col1 INT PRIMARY KEY,col2 INT,UNIQUE uk_idx_c1 (col1),INDEX idx_c1 (col1));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们看到，col1 既是主键、又给它定义为一个唯一索引，还给它定义了一个普通索引，可是主键本身就 会生成聚簇索引，所以定义的唯一索引和普通索引是重复的，这种情况要避免。</p><h1 id="第09章-性能分析工具的使用"><a href="#第09章-性能分析工具的使用" class="headerlink" title="第09章_性能分析工具的使用"></a>第09章_性能分析工具的使用</h1><p>在数据库调优中，我们的目标是 <code>响应时间更快, 吞吐量更大</code> 。利用宏观的监控工具和微观的日志分析可以帮我们快速找到调优的思路和方式。</p><h2 id="1-数据库服务器的优化步骤"><a href="#1-数据库服务器的优化步骤" class="headerlink" title="1. 数据库服务器的优化步骤"></a>1. 数据库服务器的优化步骤</h2><p>当我们遇到数据库调优问题的时候，该如何思考呢？这里把思考的流程整理成下面这张图。</p><p>整个流程划分成了 <code>观察（Show status）</code> 和 <code>行动（Action）</code> 两个部分。字母 S 的部分代表观察（会使 用相应的分析工具），字母 A 代表的部分是行动（对应分析可以采取的行动）。</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220627162248635.png" alt="image-20220627162248635"></p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220627162345815.png" alt="image-20220627162345815"></p><p>我们可以通过观察了解数据库整体的运行状态，通过性能分析工具可以让我们了解执行慢的SQL都有哪些，查看具体的SQL执行计划，甚至是SQL执行中的每一步的成本代价，这样才能定位问题所在，找到了问题，再采取相应的行动。</p><p><strong>详细解释一下这张图：</strong></p><img src="../pic/MySQL索引及调优篇/image-20220627164046438.png" alt="image-20220627164046438" style="float:left;" /><img src="../pic/MySQL索引及调优篇/image-20220627164114562.png" alt="image-20220627164114562" style="float:left;" /><h2 id="2-查看系统性能参数"><a href="#2-查看系统性能参数" class="headerlink" title="2. 查看系统性能参数"></a>2. 查看系统性能参数</h2><p>在MySQL中，可以使用 <code>SHOW STATUS</code> 语句查询一些MySQL数据库服务器的<code>性能参数、执行频率</code>。</p><p>SHOW STATUS语句语法如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW [GLOBAL|SESSION] STATUS LIKE &#39;参数&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一些常用的性能参数如下：</p><ul><li>Connections：连接MySQL服务器的次数。 </li><li>Uptime：MySQL服务器的上线时间。 </li><li>Slow_queries：慢查询的次数。 </li><li>Innodb_rows_read：Select查询返回的行数 </li><li>Innodb_rows_inserted：执行INSERT操作插入的行数 </li><li>Innodb_rows_updated：执行UPDATE操作更新的 行数 </li><li>Innodb_rows_deleted：执行DELETE操作删除的行数 </li><li>Com_select：查询操作的次数。 </li><li>Com_insert：插入操作的次数。对于批量插入的 INSERT 操作，只累加一次。 </li><li>Com_update：更新操作 的次数。 </li><li>Com_delete：删除操作的次数。</li></ul><p>若查询MySQL服务器的连接次数，则可以执行如下语句:</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW STATUS LIKE &#39;Connections&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若查询服务器工作时间，则可以执行如下语句:</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW STATUS LIKE &#39;Uptime&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若查询MySQL服务器的慢查询次数，则可以执行如下语句:</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW STATUS LIKE &#39;Slow_queries&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>慢查询次数参数可以结合慢查询日志找出慢查询语句，然后针对慢查询语句进行<code>表结构优化</code>或者<code>查询语句优化</code>。</p><p>再比如，如下的指令可以查看相关的指令情况：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW STATUS LIKE &#39;Innodb_rows_%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-统计SQL的查询成本-last-query-cost"><a href="#3-统计SQL的查询成本-last-query-cost" class="headerlink" title="3. 统计SQL的查询成本: last_query_cost"></a>3. 统计SQL的查询成本: last_query_cost</h2><p>一条SQL查询语句在执行前需要查询执行计划，如果存在多种执行计划的话，MySQL会计算每个执行计划所需要的成本，从中选择<code>成本最小</code>的一个作为最终执行的执行计划。</p><p>如果我们想要查看某条SQL语句的查询成本，可以在执行完这条SQL语句之后，通过查看当前会话中的<code>last_query_cost</code>变量值来得到当前查询的成本。它通常也是我们<code>评价一个查询的执行效率</code>的一个常用指标。这个查询成本对应的是<code>SQL 语句所需要读取的读页的数量</code>。</p><p>我们依然使用第8章的 student_info 表为例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE &#96;student_info&#96; (    &#96;id&#96; INT(11) NOT NULL AUTO_INCREMENT,    &#96;student_id&#96; INT NOT NULL ,    &#96;name&#96; VARCHAR(20) DEFAULT NULL,    &#96;course_id&#96; INT NOT NULL ,    &#96;class_id&#96; INT(11) DEFAULT NULL,    &#96;create_time&#96; DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,    PRIMARY KEY (&#96;id&#96;)) ENGINE&#x3D;INNODB AUTO_INCREMENT&#x3D;1 DEFAULT CHARSET&#x3D;utf8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们想要查询 id&#x3D;900001 的记录，然后看下查询成本，我们可以直接在聚簇索引上进行查找：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT student_id, class_id, NAME, create_time FROM student_info WHERE id &#x3D; 900001;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行结果（1 条记录，运行时间为 0.042s ）</p><p>然后再看下查询优化器的成本，实际上我们只需要检索一个页即可：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SHOW STATUS LIKE &#39;last_query_cost&#39;;+-----------------+----------+| Variable_name   |   Value  |+-----------------+----------+| Last_query_cost | 1.000000 |+-----------------+----------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们想要查询 id 在 900001 到 9000100 之间的学生记录呢？</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT student_id, class_id, NAME, create_time FROM student_info WHERE id BETWEEN 900001 AND 900100;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行结果（100 条记录，运行时间为 0.046s ）： </p><p>然后再看下查询优化器的成本，这时我们大概需要进行 20 个页的查询。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SHOW STATUS LIKE &#39;last_query_cost&#39;;+-----------------+-----------+| Variable_name   |   Value   |+-----------------+-----------+| Last_query_cost | 21.134453 |+-----------------+-----------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你能看到页的数量是刚才的 20 倍，但是查询的效率并没有明显的变化，实际上这两个 SQL 查询的时间 基本上一样，就是因为采用了顺序读取的方式将页面一次性加载到缓冲池中，然后再进行查找。虽然 页 数量（last_query_cost）增加了不少 ，但是通过缓冲池的机制，并 没有增加多少查询时间 。 </p><p><strong>使用场景：</strong>它对于比较开销是非常有用的，特别是我们有好几种查询方式可选的时候。</p><blockquote><p>SQL查询时一个动态的过程，从页加载的角度来看，我们可以得到以下两点结论：</p><ol><li><code>位置决定效率</code>。如果页就在数据库 <code>缓冲池</code> 中，那么效率是最高的，否则还需要从 <code>内存</code> 或者 <code>磁盘</code> 中进行读取，当然针对单个页的读取来说，如果页存在于内存中，会比在磁盘中读取效率高很多。</li><li><code>批量决定效率</code>。如果我们从磁盘中对单一页进行随机读，那么效率是很低的(差不多10ms)，而采用顺序读取的方式，批量对页进行读取，平均一页的读取效率就会提升很多，甚至要快于单个页面在内存中的随机读取。</li></ol><p>所以说，遇到I&#x2F;O并不用担心，方法找对了，效率还是很高的。我们首先要考虑数据存放的位置，如果是进程使用的数据就要尽量放到<code>缓冲池</code>中，其次我们可以充分利用磁盘的吞吐能力，一次性批量读取数据，这样单个页的读取效率也就得到了提升。</p></blockquote><h2 id="4-定位执行慢的-SQL：慢查询日志"><a href="#4-定位执行慢的-SQL：慢查询日志" class="headerlink" title="4. 定位执行慢的 SQL：慢查询日志"></a>4. 定位执行慢的 SQL：慢查询日志</h2><img src="../pic/MySQL索引及调优篇/image-20220628173022699.png" alt="image-20220628173022699" style="float:left;" /><h3 id="4-1-开启慢查询日志参数"><a href="#4-1-开启慢查询日志参数" class="headerlink" title="4.1 开启慢查询日志参数"></a>4.1 开启慢查询日志参数</h3><p><strong>1. 开启 slow_query_log</strong></p><p>在使用前，我们需要先查下慢查询是否已经开启，使用下面这条命令即可：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql &gt; show variables like &#39;%slow_query_log&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="../pic/MySQL索引及调优篇/image-20220628173525966.png" alt="image-20220628173525966" style="float:left;" /><p>我们可以看到 <code>slow_query_log=OFF</code>，我们可以把慢查询日志打开，注意设置变量值的时候需要使用 global，否则会报错：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql &gt; set global slow_query_log&#x3D;&#39;ON&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后我们再来查看下慢查询日志是否开启，以及慢查询日志文件的位置：</p><img src="../pic/MySQL索引及调优篇/image-20220628175226812.png" alt="image-20220628175226812" style="float:left;" /><p>你能看到这时慢查询分析已经开启，同时文件保存在 <code>/var/lib/mysql/atguigu02-slow.log</code> 文件 中。</p><p><strong>2. 修改 long_query_time 阈值</strong></p><p>接下来我们来看下慢查询的时间阈值设置，使用如下命令：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql &gt; show variables like &#39;%long_query_time%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="../pic/MySQL索引及调优篇/image-20220628175353233.png" alt="image-20220628175353233" style="float:left;" /><p>这里如果我们想把时间缩短，比如设置为 1 秒，可以这样设置：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#测试发现：设置global的方式对当前session的long_query_time失效。对新连接的客户端有效。所以可以一并执行下述语句mysql &gt; set global long_query_time &#x3D; 1;mysql&gt; show global variables like &#39;%long_query_time%&#39;;mysql&gt; set long_query_time&#x3D;1;mysql&gt; show variables like &#39;%long_query_time%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="../pic/MySQL索引及调优篇/image-20220628175425922.png" alt="image-20220628175425922" style="zoom:80%; float:left;" /><p><strong>补充：配置文件中一并设置参数</strong></p><p>如下的方式相较于前面的命令行方式，可以看做是永久设置的方式。</p><p>修改 <code>my.cnf</code> 文件，[mysqld] 下增加或修改参数 <code>long_query_time、slow_query_log</code> 和 <code>slow_query_log_file</code> 后，然后重启 MySQL 服务器。</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">[mysqld]<span class="token key attr-name">slow_query_log</span><span class="token punctuation">=</span><span class="token value attr-value">ON  # 开启慢查询日志开关</span><span class="token key attr-name">slow_query_log_file</span><span class="token punctuation">=</span><span class="token value attr-value">/var/lib/mysql/atguigu-low.log  # 慢查询日志的目录和文件名信息</span><span class="token key attr-name">long_query_time</span><span class="token punctuation">=</span><span class="token value attr-value">3  # 设置慢查询的阈值为3秒，超出此设定值的SQL即被记录到慢查询日志</span><span class="token key attr-name">log_output</span><span class="token punctuation">=</span><span class="token value attr-value">FILE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不指定存储路径，慢查询日志默认存储到MySQL数据库的数据文件夹下。如果不指定文件名，默认文件名为hostname_slow.log。</p><h3 id="4-2-查看慢查询数目"><a href="#4-2-查看慢查询数目" class="headerlink" title="4.2 查看慢查询数目"></a>4.2 查看慢查询数目</h3><p>查询当前系统中有多少条慢查询记录</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW GLOBAL STATUS LIKE &#39;%Slow_queries%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-3-案例演示"><a href="#4-3-案例演示" class="headerlink" title="4.3 案例演示"></a>4.3 案例演示</h3><p><strong>步骤1. 建表</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE &#96;student&#96; (    &#96;id&#96; INT(11) NOT NULL AUTO_INCREMENT,    &#96;stuno&#96; INT NOT NULL ,    &#96;name&#96; VARCHAR(20) DEFAULT NULL,    &#96;age&#96; INT(3) DEFAULT NULL,    &#96;classId&#96; INT(11) DEFAULT NULL,    PRIMARY KEY (&#96;id&#96;)) ENGINE&#x3D;INNODB AUTO_INCREMENT&#x3D;1 DEFAULT CHARSET&#x3D;utf8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤2：设置参数 log_bin_trust_function_creators</strong></p><p>创建函数，假如报错：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">This function has none of DETERMINISTIC......<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>命令开启：允许创建函数设置：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">set global log_bin_trust_function_creators&#x3D;1; # 不加global只是当前窗口有效。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>步骤3：创建函数</strong></p><p>随机产生字符串：（同上一章）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER &#x2F;&#x2F;CREATE FUNCTION rand_string(n INT)RETURNS VARCHAR(255) #该函数会返回一个字符串BEGINDECLARE chars_str VARCHAR(100) DEFAULT&#39;abcdefghijklmnopqrstuvwxyzABCDEFJHIJKLMNOPQRSTUVWXYZ&#39;;DECLARE return_str VARCHAR(255) DEFAULT &#39;&#39;;    DECLARE i INT DEFAULT 0;    WHILE i &lt; n DO    SET return_str &#x3D;CONCAT(return_str,SUBSTRING(chars_str,FLOOR(1+RAND()*52),1));    SET i &#x3D; i + 1;    END WHILE;    RETURN return_str;END &#x2F;&#x2F;DELIMITER ;# 测试SELECT rand_string(10);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>产生随机数值：（同上一章）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER &#x2F;&#x2F;CREATE FUNCTION rand_num (from_num INT ,to_num INT) RETURNS INT(11)BEGIN    DECLARE i INT DEFAULT 0;    SET i &#x3D; FLOOR(from_num +RAND()*(to_num - from_num+1)) ;    RETURN i;END &#x2F;&#x2F;DELIMITER ;#测试：SELECT rand_num(10,100);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤4：创建存储过程</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER &#x2F;&#x2F;CREATE PROCEDURE insert_stu1( START INT , max_num INT )BEGINDECLARE i INT DEFAULT 0;    SET autocommit &#x3D; 0; #设置手动提交事务    REPEAT #循环    SET i &#x3D; i + 1; #赋值    INSERT INTO student (stuno, NAME ,age ,classId ) VALUES    ((START+i),rand_string(6),rand_num(10,100),rand_num(10,1000));    UNTIL i &#x3D; max_num    END REPEAT;    COMMIT; #提交事务END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤5：调用存储过程</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#调用刚刚写好的函数, 4000000条记录,从100001号开始CALL insert_stu1(100001,4000000);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-4-测试及分析"><a href="#4-4-测试及分析" class="headerlink" title="4.4 测试及分析"></a>4.4 测试及分析</h3><p><strong>1. 测试</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT * FROM student WHERE stuno &#x3D; 3455655;+---------+---------+--------+------+---------+|   id    |  stuno  |  name  | age  | classId |+---------+---------+--------+------+---------+| 3523633 | 3455655 | oQmLUr |  19  |    39   |+---------+---------+--------+------+---------+1 row in set (2.09 sec)mysql&gt; SELECT * FROM student WHERE name &#x3D; &#39;oQmLUr&#39;;+---------+---------+--------+------+---------+|   id    |  stuno  |  name  |  age | classId |+---------+---------+--------+------+---------+| 1154002 | 1243200 | OQMlUR | 266  |   28    || 1405708 | 1437740 | OQMlUR | 245  |   439   || 1748070 | 1680092 | OQMlUR | 240  |   414   || 2119892 | 2051914 | oQmLUr | 17   |   32    || 2893154 | 2825176 | OQMlUR | 245  |   435   || 3523633 | 3455655 | oQmLUr | 19   |   39    |+---------+---------+--------+------+---------+6 rows in set (2.39 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的结果可以看出来，查询学生编号为“3455655”的学生信息花费时间为2.09秒。查询学生姓名为 “oQmLUr”的学生信息花费时间为2.39秒。已经达到了秒的数量级，说明目前查询效率是比较低的，下面 的小节我们分析一下原因。</p><p><strong>2. 分析</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show status like &#39;slow_queries&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="../pic/MySQL索引及调优篇/image-20220628195650079.png" alt="image-20220628195650079" style="float:left;" /><h3 id="4-5-慢查询日志分析工具：mysqldumpslow"><a href="#4-5-慢查询日志分析工具：mysqldumpslow" class="headerlink" title="4.5 慢查询日志分析工具：mysqldumpslow"></a>4.5 慢查询日志分析工具：mysqldumpslow</h3><p>在生产环境中，如果要手工分析日志，查找、分析SQL，显然是个体力活，MySQL提供了日志分析工具 <code>mysqldumpslow</code> 。</p><p>查看mysqldumpslow的帮助信息</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">mysqldumpslow</span> <span class="token value attr-value">--help</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="../pic/MySQL索引及调优篇/image-20220628195821440.png" alt="image-20220628195821440" style="float:left;" /><p>mysqldumpslow 命令的具体参数如下：</p><ul><li>-a: 不将数字抽象成N，字符串抽象成S</li><li>-s: 是表示按照何种方式排序：<ul><li>c: 访问次数 </li><li>l: 锁定时间 </li><li>r: 返回记录 </li><li>t: 查询时间 </li><li>al:平均锁定时间 </li><li>ar:平均返回记录数 </li><li>at:平均查询时间 （默认方式） </li><li>ac:平均查询次数</li></ul></li><li>-t: 即为返回前面多少条的数据；</li><li>-g: 后边搭配一个正则匹配模式，大小写不敏感的；</li></ul><p>举例：我们想要按照查询时间排序，查看前五条 SQL 语句，这样写即可：</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">mysqldumpslow</span> <span class="token value attr-value">-s t -t 5 /var/lib/mysql/atguigu01-slow.log</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">[root@bogon</span> <span class="token value attr-value">~]# mysqldumpslow -s t -t 5 /var/lib/mysql/atguigu01-slow.log</span><span class="token key attr-name">Reading</span> <span class="token value attr-value">mysql slow query log from /var/lib/mysql/atguigu01-slow.log</span><span class="token key attr-name">Count</span><span class="token punctuation">:</span> <span class="token value attr-value">1 Time=2.39s (2s) Lock=0.00s (0s) Rows=13.0 (13), root[root]@localhost</span><span class="token key attr-name">SELECT</span> <span class="token value attr-value">* FROM student WHERE name = 'S'</span><span class="token key attr-name">Count</span><span class="token punctuation">:</span> <span class="token value attr-value">1 Time=2.09s (2s) Lock=0.00s (0s) Rows=2.0 (2), root[root]@localhost</span><span class="token key attr-name">SELECT</span> <span class="token value attr-value">* FROM student WHERE stuno = N</span><span class="token key attr-name">Died</span> <span class="token value attr-value">at /usr/bin/mysqldumpslow line 162, &lt;> chunk 2.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>工作常用参考：</strong></p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#得到返回记录集最多的10个SQL</span><span class="token key attr-name">mysqldumpslow</span> <span class="token value attr-value">-s r -t 10 /var/lib/mysql/atguigu-slow.log</span><span class="token comment">#得到访问次数最多的10个SQL</span><span class="token key attr-name">mysqldumpslow</span> <span class="token value attr-value">-s c -t 10 /var/lib/mysql/atguigu-slow.log</span><span class="token comment">#得到按照时间排序的前10条里面含有左连接的查询语句</span><span class="token key attr-name">mysqldumpslow</span> <span class="token value attr-value">-s t -t 10 -g "left join" /var/lib/mysql/atguigu-slow.log</span><span class="token comment">#另外建议在使用这些命令时结合 | 和more 使用 ，否则有可能出现爆屏情况</span><span class="token key attr-name">mysqldumpslow</span> <span class="token value attr-value">-s r -t 10 /var/lib/mysql/atguigu-slow.log | more</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-关闭慢查询日志"><a href="#4-6-关闭慢查询日志" class="headerlink" title="4.6 关闭慢查询日志"></a>4.6 关闭慢查询日志</h3><p>MySQL服务器停止慢查询日志功能有两种方法：</p><p><strong>方式1：永久性方式</strong></p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">[mysqld]<span class="token key attr-name">slow_query_log</span><span class="token punctuation">=</span><span class="token value attr-value">OFF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者，把slow_query_log一项注释掉 或 删除</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">[mysqld]<span class="token comment">#slow_query_log =OFF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重启MySQL服务，执行如下语句查询慢日志功能。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW VARIABLES LIKE &#39;%slow%&#39;; #查询慢查询日志所在目录SHOW VARIABLES LIKE &#39;%long_query_time%&#39;; #查询超时时长<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>方式2：临时性方式</strong></p><p>使用SET语句来设置。 </p><p>（1）停止MySQL慢查询日志功能，具体SQL语句如下。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SET GLOBAL slow_query_log&#x3D;off;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）<strong>重启MySQL服务</strong>，使用SHOW语句查询慢查询日志功能信息，具体SQL语句如下。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW VARIABLES LIKE &#39;%slow%&#39;;#以及SHOW VARIABLES LIKE &#39;%long_query_time%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-7-删除慢查询日志"><a href="#4-7-删除慢查询日志" class="headerlink" title="4.7 删除慢查询日志"></a>4.7 删除慢查询日志</h3><p>使用SHOW语句显示慢查询日志信息，具体SQL语句如下。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW VARIABLES LIKE &#96;slow_query_log%&#96;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="../pic/MySQL索引及调优篇/image-20220628203545536.png" alt="image-20220628203545536" style="float:left;" /><p>从执行结果可以看出，慢查询日志的目录默认为MySQL的数据目录，在该目录下 <code>手动删除慢查询日志文件</code> 即可。</p><p>使用命令 <code>mysqladmin flush-logs</code> 来重新生成查询日志文件，具体命令如下，执行完毕会在数据目录下重新生成慢查询日志文件。</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">mysqladmin</span> <span class="token value attr-value">-uroot -p flush-logs slow</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>提示</p><p>慢查询日志都是使用mysqladmin flush-logs命令来删除重建的。使用时一定要注意，一旦执行了这个命令，慢查询日志都只存在新的日志文件中，如果需要旧的查询日志，就必须事先备份。</p></blockquote><h2 id="5-查看-SQL-执行成本：SHOW-PROFILE"><a href="#5-查看-SQL-执行成本：SHOW-PROFILE" class="headerlink" title="5. 查看 SQL 执行成本：SHOW PROFILE"></a>5. 查看 SQL 执行成本：SHOW PROFILE</h2><p>show profile 在《逻辑架构》章节中讲过，这里作为复习。</p><p>show profile 是 MySQL 提供的可以用来分析当前会话中 SQL 都做了什么、执行的资源消耗工具的情况，可用于 sql 调优的测量。<code>默认情况下处于关闭状态</code>，并保存最近15次的运行结果。</p><p>我们可以在会话级别开启这个功能。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql &gt; show variables like &#39;profiling&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="../pic/MySQL索引及调优篇/image-20220628204922556.png" alt="image-20220628204922556" style="float:left;" /><p>通过设置 profiling&#x3D;’ON’ 来开启 show profile:</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql &gt; set profiling &#x3D; &#39;ON&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="../pic/MySQL索引及调优篇/image-20220628205029208.png" alt="image-20220628205029208" style="zoom:80%;float:left" /><p>然后执行相关的查询语句。接着看下当前会话都有哪些 profiles，使用下面这条命令：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql &gt; show profiles;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="../pic/MySQL索引及调优篇/image-20220628205243769.png" alt="image-20220628205243769" style="zoom:80%;float:left" /><p>你能看到当前会话一共有 2 个查询。如果我们想要查看最近一次查询的开销，可以使用：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql &gt; show profile;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="../pic/MySQL索引及调优篇/image-20220628205317257.png" alt="image-20220628205317257" style="float:left;" /><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show profile cpu,block io for query 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="../pic/MySQL索引及调优篇/image-20220628205354230.png" alt="image-20220628205354230" style="float:left;" /><p>**show profile的常用查询参数： **</p><p>① ALL：显示所有的开销信息。 </p><p>② BLOCK IO：显示块IO开销。 </p><p>③ CONTEXT SWITCHES：上下文切换开销。 </p><p>④ CPU：显示CPU开销信息。 </p><p>⑤ IPC：显示发送和接收开销信息。</p><p>⑥ MEMORY：显示内存开销信 息。 </p><p>⑦ PAGE FAULTS：显示页面错误开销信息。 </p><p>⑧ SOURCE：显示和Source_function，Source_file， Source_line相关的开销信息。 </p><p>⑨ SWAPS：显示交换次数开销信息。</p><p><strong>日常开发需注意的结论：</strong></p><p>① <code>converting HEAP to MyISAM</code>: 查询结果太大，内存不够，数据往磁盘上搬了。 </p><p>② <code>Creating tmp table</code>：创建临时表。先拷贝数据到临时表，用完后再删除临时表。 </p><p>③ <code>Copying to tmp table on disk</code>：把内存中临时表复制到磁盘上，警惕！ </p><p>④ <code>locked</code>。 </p><p>如果在show profile诊断结果中出现了以上4条结果中的任何一条，则sql语句需要优化。</p><p><strong>注意：</strong></p><p>不过SHOW PROFILE命令将被启用，我们可以从 information_schema 中的 profiling 数据表进行查看。</p><h2 id="6-分析查询语句：EXPLAIN"><a href="#6-分析查询语句：EXPLAIN" class="headerlink" title="6. 分析查询语句：EXPLAIN"></a>6. 分析查询语句：EXPLAIN</h2><h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h3><img src="../pic/MySQL索引及调优篇/image-20220628210837301.png" alt="image-20220628210837301" style="float:left;" /><p><strong>1. 能做什么？</strong></p><ul><li>表的读取顺序</li><li>数据读取操作的操作类型</li><li>哪些索引可以使用</li><li>哪些索引被实际使用</li><li>表之间的引用</li><li>每张表有多少行被优化器查询</li></ul><p><strong>2. 官网介绍</strong></p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html">https://dev.mysql.com/doc/refman/5.7/en/explain-output.html</a> </p><p><a href="https://dev.mysql.com/doc/refman/8.0/en/explain-output.html">https://dev.mysql.com/doc/refman/8.0/en/explain-output.html</a></p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220628211207436.png" alt="image-20220628211207436"></p><p><strong>3. 版本情况</strong></p><ul><li>MySQL 5.6.3以前只能 EXPLAIN SELECT ；MYSQL 5.6.3以后就可以 EXPLAIN SELECT，UPDATE， DELETE </li><li>在5.7以前的版本中，想要显示 partitions 需要使用 explain partitions 命令；想要显示 filtered 需要使用 explain extended 命令。在5.7版本后，默认explain直接显示partitions和 filtered中的信息。</li></ul><img src="../pic/MySQL索引及调优篇/image-20220628211351678.png" alt="image-20220628211351678" style="float:left;" /><h3 id="6-2-基本语法"><a href="#6-2-基本语法" class="headerlink" title="6.2 基本语法"></a>6.2 基本语法</h3><p>EXPLAIN 或 DESCRIBE语句的语法形式如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">EXPLAIN SELECT select_options或者DESCRIBE SELECT select_options<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果我们想看看某个查询的执行计划的话，可以在具体的查询语句前边加一个 EXPLAIN ，就像这样：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT 1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="../pic/MySQL索引及调优篇/image-20220628212029574.png" alt="image-20220628212029574" style="float:left;" /><p>EXPLAIN 语句输出的各个列的作用如下：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220628212049096.png" alt="image-20220628212049096"></p><p>在这里把它们都列出来知识为了描述一个轮廓，让大家有一个大致的印象。</p><h3 id="6-3-数据准备"><a href="#6-3-数据准备" class="headerlink" title="6.3 数据准备"></a>6.3 数据准备</h3><p><strong>1. 建表</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE s1 (    id INT AUTO_INCREMENT,    key1 VARCHAR(100),    key2 INT,    key3 VARCHAR(100),    key_part1 VARCHAR(100),    key_part2 VARCHAR(100),    key_part3 VARCHAR(100),    common_field VARCHAR(100),    PRIMARY KEY (id),    INDEX idx_key1 (key1),    UNIQUE INDEX idx_key2 (key2),    INDEX idx_key3 (key3),    INDEX idx_key_part(key_part1, key_part2, key_part3)) ENGINE&#x3D;INNODB CHARSET&#x3D;utf8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE s2 (    id INT AUTO_INCREMENT,    key1 VARCHAR(100),    key2 INT,    key3 VARCHAR(100),    key_part1 VARCHAR(100),    key_part2 VARCHAR(100),    key_part3 VARCHAR(100),    common_field VARCHAR(100),    PRIMARY KEY (id),    INDEX idx_key1 (key1),    UNIQUE INDEX idx_key2 (key2),    INDEX idx_key3 (key3),    INDEX idx_key_part(key_part1, key_part2, key_part3)) ENGINE&#x3D;INNODB CHARSET&#x3D;utf8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2. 设置参数 log_bin_trust_function_creators</strong></p><p>创建函数，假如报错，需开启如下命令：允许创建函数设置：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">set global log_bin_trust_function_creators&#x3D;1; # 不加global只是当前窗口有效。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>3. 创建函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER &#x2F;&#x2F;CREATE FUNCTION rand_string1(n INT)RETURNS VARCHAR(255) #该函数会返回一个字符串BEGINDECLARE chars_str VARCHAR(100) DEFAULT&#39;abcdefghijklmnopqrstuvwxyzABCDEFJHIJKLMNOPQRSTUVWXYZ&#39;;    DECLARE return_str VARCHAR(255) DEFAULT &#39;&#39;;    DECLARE i INT DEFAULT 0;    WHILE i &lt; n DO        SET return_str &#x3D;CONCAT(return_str,SUBSTRING(chars_str,FLOOR(1+RAND()*52),1));        SET i &#x3D; i + 1;    END WHILE;    RETURN return_str;END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4. 创建存储过程</strong></p><p>创建往s1表中插入数据的存储过程：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER &#x2F;&#x2F;CREATE PROCEDURE insert_s1 (IN min_num INT (10),IN max_num INT (10))BEGIN    DECLARE i INT DEFAULT 0;    SET autocommit &#x3D; 0;    REPEAT    SET i &#x3D; i + 1;    INSERT INTO s1 VALUES(        (min_num + i),        rand_string1(6),        (min_num + 30 * i + 5),        rand_string1(6),        rand_string1(10),        rand_string1(5),        rand_string1(10),        rand_string1(10));    UNTIL i &#x3D; max_num    END REPEAT;    COMMIT;END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建往s2表中插入数据的存储过程：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER &#x2F;&#x2F;CREATE PROCEDURE insert_s2 (IN min_num INT (10),IN max_num INT (10))BEGIN    DECLARE i INT DEFAULT 0;    SET autocommit &#x3D; 0;    REPEAT    SET i &#x3D; i + 1;    INSERT INTO s2 VALUES(        (min_num + i),        rand_string1(6),        (min_num + 30 * i + 5),        rand_string1(6),        rand_string1(10),        rand_string1(5),        rand_string1(10),        rand_string1(10));    UNTIL i &#x3D; max_num    END REPEAT;    COMMIT;END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5. 调用存储过程</strong></p><p>s1表数据的添加：加入1万条记录：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CALL insert_s1(10001,10000);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>s2表数据的添加：加入1万条记录：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CALL insert_s2(10001,10000);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-4-EXPLAIN各列作用"><a href="#6-4-EXPLAIN各列作用" class="headerlink" title="6.4 EXPLAIN各列作用"></a>6.4 EXPLAIN各列作用</h3><p>为了让大家有比较好的体验，我们调整了下 <code>EXPLAIN</code> 输出列的顺序。</p><h4 id="1-table"><a href="#1-table" class="headerlink" title="1. table"></a>1. table</h4><p>不论我们的查询语句有多复杂，里边儿 包含了多少个表 ，到最后也是需要对每个表进行 单表访问 的，所 以MySQL规定EXPLAIN语句输出的每条记录都对应着某个单表的访问方法，该条记录的table列代表着该 表的表名（有时不是真实的表名字，可能是简称）。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql &gt; EXPLAIN SELECT * FROM s1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220628221143339.png" alt="image-20220628221143339"></p><p>这个查询语句只涉及对s1表的单表查询，所以 <code>EXPLAIN</code> 输出中只有一条记录，其中的table列的值为s1，表明这条记录是用来说明对s1表的单表访问方法的。</p><p>下边我们看一个连接查询的执行计划</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql &gt; EXPLAIN SELECT * FROM s1 INNER JOIN s2;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220628221414097.png" alt="image-20220628221414097"></p><p>可以看出这个连接查询的执行计划中有两条记录，这两条记录的table列分别是s1和s2，这两条记录用来分别说明对s1表和s2表的访问方法是什么。</p><h4 id="2-id"><a href="#2-id" class="headerlink" title="2. id"></a>2. id</h4><p>我们写的查询语句一般都以 SELECT 关键字开头，比较简单的查询语句里只有一个 SELECT 关键字，比 如下边这个查询语句：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM s1 WHERE key1 &#x3D; &#39;a&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>稍微复杂一点的连接查询中也只有一个 SELECT 关键字，比如：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM s1 INNER JOIN s2ON s1.key1 &#x3D; s2.key1WHERE s1.common_field &#x3D; &#39;a&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是下边两种情况下在一条查询语句中会出现多个SELECT关键字：</p><img src="../pic/MySQL索引及调优篇/image-20220628221948512.png" alt="image-20220628221948512" style="float:left;" /><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql &gt; EXPLAIN SELECT * FROM s1 WHERE key1 &#x3D; &#39;a&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220628222055716.png" alt="image-20220628222055716"></p><p>对于连接查询来说，一个SELECT关键字后边的FROM字句中可以跟随多个表，所以在连接查询的执行计划中，每个表都会对应一条记录，但是这些记录的id值都是相同的，比如：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 INNER JOIN s2;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220628222251309.png" alt="image-20220628222251309"></p><p>可以看到，上述连接查询中参与连接的s1和s2表分别对应一条记录，但是这两条记录对应的<code>id</code>都是1。这里需要大家记住的是，<strong>在连接查询的执行计划中，每个表都会对应一条记录，这些记录的id列的值是相同的</strong>，出现在前边的表表示<code>驱动表</code>，出现在后面的表表示<code>被驱动表</code>。所以从上边的EXPLAIN输出中我们可以看到，查询优化器准备让s1表作为驱动表，让s2表作为被驱动表来执行查询。</p><p>对于包含子查询的查询语句来说，就可能涉及多个<code>SELECT</code>关键字，所以在**包含子查询的查询语句的执行计划中，每个<code>SELECT</code>关键字都会对应一个唯一的id值，比如这样：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key1 IN (SELECT key1 FROM s2) OR key3 &#x3D; &#39;a&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220629165122837.png" alt="image-20220629165122837"></p><img src="../pic/MySQL索引及调优篇/image-20220629170848349.png" alt="image-20220629170848349" style="float:left;" /><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 查询优化器可能对涉及子查询的查询语句进行重写，转变为多表查询的操作。  mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key1 IN (SELECT key2 FROM s2 WHERE common_field &#x3D; &#39;a&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220629165603072.png" alt="image-20220629165603072"></p><p>可以看到，虽然我们的查询语句是一个子查询，但是执行计划中s1和s2表对应的记录的<code>id</code>值全部是1，这就表明<code>查询优化器将子查询转换为了连接查询</code>。</p><p>对于包含<code>UNION</code>子句的查询语句来说，每个<code>SELECT</code>关键字对应一个<code>id</code>值也是没错的，不过还是有点儿特别的东西，比方说下边的查询：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># Union去重mysql&gt; EXPLAIN SELECT * FROM s1 UNION SELECT * FROM s2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220629165909340.png" alt="image-20220629165909340"></p><img src="../pic/MySQL索引及调优篇/image-20220629171104375.png" alt="image-20220629171104375" style="float:left;" /><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 UNION ALL SELECT * FROM s2;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220629171138065.png" alt="image-20220629171138065"></p><p><strong>小结:</strong></p><ul><li>id如果相同，可以认为是一组，从上往下顺序执行 </li><li>在所有组中，id值越大，优先级越高，越先执行 </li><li>关注点：id号每个号码，表示一趟独立的查询, 一个sql的查询趟数越少越好</li></ul><h4 id="3-select-type"><a href="#3-select-type" class="headerlink" title="3. select_type"></a>3. select_type</h4><img src="../pic/MySQL索引及调优篇/image-20220629171611716.png" alt="image-20220629171611716" style="float:left;" /><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220629171442624.png" alt="image-20220629171442624"></p><p>具体分析如下：</p><ul><li><p>SIMPLE</p><p>查询语句中不包含<code>UNION</code>或者子查询的查询都算作是<code>SIMPLE</code>类型，比方说下边这个单表查询<code>select_type</code>的值就是<code>SIMPLE</code>:</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220629171840300.png" alt="image-20220629171840300"></p><p>​        当然，连接查询也算是 SIMPLE 类型，比如：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 INNER JOIN s2;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220629171904912.png" alt="image-20220629171904912"></p><ul><li><p>PRIMARY</p><p>对于包含<code>UNION、UNION ALL</code>或者子查询的大查询来说，它是由几个小查询组成的，其中最左边的那个查询的<code>select_type</code>的值就是<code>PRIMARY</code>,比方说：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 UNION SELECT * FROM s2;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220629171929924.png" alt="image-20220629171929924"></p><p>从结果中可以看到，最左边的小查询<code>SELECT * FROM s1</code>对应的是执行计划中的第一条记录，它的<code>select_type</code>的值就是<code>PRIMARY</code>。</p></li><li><p>UNION</p><p>对于包含<code>UNION</code>或者<code>UNION ALL</code>的大查询来说，它是由几个小查询组成的，其中除了最左边的那个小查询意外，其余的小查询的<code>select_type</code>值就是UNION，可以对比上一个例子的效果。</p></li><li><p>UNION RESULT</p><p>MySQL 选择使用临时表来完成<code>UNION</code>查询的去重工作，针对该临时表的查询的<code>select_type</code>就是<code>UNION RESULT</code>, 例子上边有。</p></li><li><p>SUBQUERY</p><p>如果包含子查询的查询语句不能够转为对应的<code>semi-join</code>的形式，并且该子查询是不相关子查询，并且查询优化器决定采用将该子查询物化的方案来执行该子查询时，该子查询的第一个<code>SELECT</code>关键字代表的那个查询的<code>select_type</code>就是<code>SUBQUERY</code>，比如下边这个查询：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key1 IN (SELECT key1 FROM s2) OR key3 &#x3D; &#39;a&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220629172449267.png" alt="image-20220629172449267"></p></li><li><p>DEPENDENT SUBQUERY</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key1 IN (SELECT key1 FROM s2 WHERE s1.key2 &#x3D; s2.key2) OR key3 &#x3D; &#39;a&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220629172525236.png" alt="image-20220629172525236"></p></li><li><p>DEPENDENT UNION</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key1 IN (SELECT key1 FROM s2 WHERE key1 &#x3D; &#39;a&#39; UNION SELECT key1 FROM s1 WHERE key1 &#x3D; &#39;b&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220629172555603.png" alt="image-20220629172555603"></p></li><li><p>DERIVED</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM (SELECT key1, count(*) as c FROM s1 GROUP BY key1) AS derived_s1 where c &gt; 1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220629172622893.png" alt="image-20220629172622893"></p><p>从执行计划中可以看出，id为2的记录就代表子查询的执行方式，它的select_type是DERIVED, 说明该子查询是以物化的方式执行的。id为1的记录代表外层查询，大家注意看它的table列显示的是derived2，表示该查询时针对将派生表物化之后的表进行查询的。</p></li><li><p>MATERIALIZED</p><p>当查询优化器在执行包含子查询的语句时，选择将子查询物化之后的外层查询进行连接查询时，该子查询对应的<code>select_type</code>属性就是DERIVED，比如下边这个查询：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key1 IN (SELECT key1 FROM s2);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220629172646367.png" alt="image-20220629172646367"></p></li><li><p>UNCACHEABLE SUBQUERY</p><p>不常用，就不多说了。</p></li><li><p>UNCACHEABLE UNION</p><p>不常用，就不多说了。</p></li></ul><h4 id="4-partitions-可略"><a href="#4-partitions-可略" class="headerlink" title="4. partitions (可略)"></a>4. partitions (可略)</h4><ul><li>代表分区表中的命中情况，非分区表，该项为<code>NULL</code>。一般情况下我们的额查询语句的执行计划的<code>partitions</code>列的值为<code>NULL</code>。</li><li><a><a href="https://dev.mysql.com/doc/refman/5.7/en/alter-table-partition-operations.html">https://dev.mysql.com/doc/refman/5.7/en/alter-table-partition-operations.html</a></a></li><li>如果想详细了解，可以如下方式测试。创建分区表：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 创建分区表，-- 按照id分区，id&lt;100 p0分区，其他p1分区CREATE TABLE user_partitions (id INT auto_increment,NAME VARCHAR(12),PRIMARY KEY(id))PARTITION BY RANGE(id)(PARTITION p0 VALUES less than(100),PARTITION p1 VALUES less than MAXVALUE);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="../pic/MySQL索引及调优篇/image-20220629190304966.png" alt="image-20220629190304966" style="float:left;" /><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DESC SELECT * FROM user_partitions WHERE id&gt;200;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询id大于200（200&gt;100，p1分区）的记录，查看执行计划，partitions是p1，符合我们的分区规则</p><img src="../pic/MySQL索引及调优篇/image-20220629190335371.png" alt="image-20220629190335371" style="float:left;" /><h4 id="5-type-☆"><a href="#5-type-☆" class="headerlink" title="5. type ☆"></a>5. type ☆</h4><p>执行计划的一条记录就代表着MySQL对某个表的 <code>执行查询时的访问方法</code> , 又称“访问类型”，其中的 <code>type</code> 列就表明了这个访问方法是啥，是较为重要的一个指标。比如，看到<code>type</code>列的值是<code>ref</code>，表明<code>MySQL</code>即将使用<code>ref</code>访问方法来执行对<code>s1</code>表的查询。</p><p>完整的访问方法如下： <code>system ， const ， eq_ref ， ref ， fulltext ， ref_or_null ， index_merge ， unique_subquery ， index_subquery ， range ， index ， ALL</code> 。</p><p>我们详细解释一下：</p><ul><li><p><code>system</code></p><p>当表中<code>只有一条记录</code>并且该表使用的存储引擎的统计数据是精确的，比如MyISAM、Memory，那么对该表的访问方法就是<code>system</code>。比方说我们新建一个<code>MyISAM</code>表，并为其插入一条记录：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; CREATE TABLE t(i int) Engine&#x3D;MyISAM;Query OK, 0 rows affected (0.05 sec)mysql&gt; INSERT INTO t VALUES(1);Query OK, 1 row affected (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们看一下查询这个表的执行计划：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM t;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="../pic/MySQL索引及调优篇/image-20220630164434315.png" alt="image-20220630164434315" style="float:left;" /><p>可以看到<code>type</code>列的值就是<code>system</code>了，</p><blockquote><p>测试，可以把表改成使用InnoDB存储引擎，试试看执行计划的<code>type</code>列是什么。ALL</p></blockquote></li><li><p><code>const</code></p><p>当我们根据主键或者唯一二级索引列与常数进行等值匹配时，对单表的访问方法就是<code>const</code>, 比如：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE id &#x3D; 10005;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="../pic/MySQL索引及调优篇/image-20220630164724548.png" alt="image-20220630164724548" style="float:left;" /></li><li><p><code>eq_ref</code></p><p>在连接查询时，如果被驱动表是通过主键或者唯一二级索引列等值匹配的方式进行访问的（如果该主键或者唯一二级索引是联合索引的话，所有的索引列都必须进行等值比较）。则对该被驱动表的访问方法就是<code>eq_ref</code>，比方说：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 INNER JOIN s2 ON s1.id &#x3D; s2.id;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="../pic/MySQL索引及调优篇/image-20220630164802559.png" alt="image-20220630164802559" style="float:left;" /><p>从执行计划的结果中可以看出，MySQL打算将s2作为驱动表，s1作为被驱动表，重点关注s1的访问 方法是 <code>eq_ref</code> ，表明在访问s1表的时候可以 <code>通过主键的等值匹配</code> 来进行访问。</p></li><li><p><code>ref</code></p><p>当通过普通的二级索引列与常量进行等值匹配时来查询某个表，那么对该表的访问方法就可能是<code>ref</code>，比方说下边这个查询：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key1 &#x3D; &#39;a&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="../pic/MySQL索引及调优篇/image-20220630164930020.png" alt="image-20220630164930020" style="float:left;" /></li><li><p><code>fulltext</code></p><p>全文索引</p></li><li><p><code>ref_or_null</code></p><p>当对普通二级索引进行等值匹配查询，该索引列的值也可以是<code>NULL</code>值时，那么对该表的访问方法就可能是<code>ref_or_null</code>，比如说：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key1 &#x3D; &#39;a&#39; OR key1 IS NULL;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="../pic/MySQL索引及调优篇/image-20220630175133920.png" alt="image-20220630175133920" style="float:left;" /></li><li><p><code>index_merge</code></p><p>一般情况下对于某个表的查询只能使用到一个索引，但单表访问方法时在某些场景下可以使用<code>Interseation、union、Sort-Union</code>这三种索引合并的方式来执行查询。我们看一下执行计划中是怎么体现MySQL使用索引合并的方式来对某个表执行查询的：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key1 &#x3D; &#39;a&#39; OR key3 &#x3D; &#39;a&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="../pic/MySQL索引及调优篇/image-20220630175511644.png" alt="image-20220630175511644" style="float:left;" /><p>从执行计划的 <code>type</code> 列的值是 <code>index_merge</code> 就可以看出，MySQL 打算使用索引合并的方式来执行 对 s1 表的查询。</p></li><li><p><code>unique_subquery</code></p><p>类似于两表连接中被驱动表的<code>eq_ref</code>访问方法，<code>unique_subquery</code>是针对在一些包含<code>IN</code>子查询的查询语句中，如果查询优化器决定将<code>IN</code>子查询转换为<code>EXISTS</code>子查询，而且子查询可以使用到主键进行等值匹配的话，那么该子查询执行计划的<code>type</code>列的值就是<code>unique_subquery</code>，比如下边的这个查询语句：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key2 IN (SELECT id FROM s2 where s1.key1 &#x3D; s2.key1) OR key3 &#x3D; &#39;a&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="../pic/MySQL索引及调优篇/image-20220630180123913.png" alt="image-20220630180123913" style="float:left;" /></li></ul><ul><li><p><code>index_subquery</code></p><p><code>index_subquery</code> 与 <code>unique_subquery</code> 类似，只不过访问子查询中的表时使用的是普通的索引，比如这样：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE common_field IN (SELECT key3 FROM s2 where s1.key1 &#x3D; s2.key1) OR key3 &#x3D; &#39;a&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220703214407225.png" alt="image-20220703214407225"></p><ul><li><p><code>range</code></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key1 IN (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220703214633338.png" alt="image-20220703214633338"></p><p>或者：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key1 &gt; &#39;a&#39; AND key1 &lt; &#39;b&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220703214657251.png" alt="image-20220703214657251"></p></li><li><p><code>index</code></p><p>当我们可以使用索引覆盖，但需要扫描全部的索引记录时，该表的访问方法就是<code>index</code>，比如这样：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT key_part2 FROM s1 WHERE key_part3 &#x3D; &#39;a&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220703214844885.png" alt="image-20220703214844885"></p><p>上述查询中的所有列表中只有key_part2 一个列，而且搜索条件中也只有 key_part3 一个列，这两个列又恰好包含在idx_key_part这个索引中，可是搜索条件key_part3不能直接使用该索引进行<code>ref</code>和<code>range</code>方式的访问，只能扫描整个<code>idx_key_part</code>索引的记录，所以查询计划的<code>type</code>列的值就是<code>index</code>。</p><blockquote><p>再一次强调，对于使用InnoDB存储引擎的表来说，二级索引的记录只包含索引列和主键列的值，而聚簇索引中包含用户定义的全部列以及一些隐藏列，所以扫描二级索引的代价比直接全表扫描，也就是扫描聚簇索引的代价更低一些。</p></blockquote></li><li><p><code>ALL</code></p><p>最熟悉的全表扫描，就不多说了，直接看例子：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220703215958374.png" alt="image-20220703215958374"></p></li></ul><p>**小结: **</p><p>**结果值从最好到最坏依次是： **</p><p><strong>system &gt; const &gt; eq_ref &gt; ref</strong> &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL </p><p><strong>其中比较重要的几个提取出来（见上图中的粗体）。SQL 性能优化的目标：至少要达到 range 级别，要求是 ref 级别，最好是 consts级别。（阿里巴巴 开发手册要求）</strong></p><h4 id="6-possible-keys和key"><a href="#6-possible-keys和key" class="headerlink" title="6. possible_keys和key"></a>6. possible_keys和key</h4><p>在EXPLAIN语句输出的执行计划中，<code>possible_keys</code>列表示在某个查询语句中，对某个列执行<code>单表查询时可能用到的索引</code>有哪些。一般查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询使用。<code>key</code>列表示<code>实际用到的索引</code>有哪些，如果为NULL，则没有使用索引。比方说下面这个查询：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key1 &gt; &#39;z&#39; AND key3 &#x3D; &#39;a&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220703220724964.png" alt="image-20220703220724964"></p><p>上述执行计划的<code>possible_keys</code>列的值是<code>idx_key1, idx_key3</code>，表示该查询可能使用到<code>idx_key1, idx_key3</code>两个索引，然后<code>key</code>列的值是<code>idx_key3</code>，表示经过查询优化器计算使用不同索引的成本后，最后决定采用<code>idx_key3</code>。</p><h4 id="7-key-len-☆"><a href="#7-key-len-☆" class="headerlink" title="7. key_len ☆"></a>7. key_len ☆</h4><p>实际使用到的索引长度 (即：字节数)</p><p>帮你检查<code>是否充分的利用了索引</code>，<code>值越大越好</code>，主要针对于联合索引，有一定的参考意义。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE id &#x3D; 10005;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704130030692.png" alt="image-20220704130030692"></p><blockquote><p>int 占用 4 个字节</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key2 &#x3D; 10126;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704130138204.png" alt="image-20220704130138204"></p><blockquote><p>key2上有一个唯一性约束，是否为NULL占用一个字节，那么就是5个字节</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key1 &#x3D; &#39;a&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704130214482.png" alt="image-20220704130214482"></p><blockquote><p>key1 VARCHAR(100) 一个字符占3个字节，100*3，是否为NULL占用一个字节，varchar的长度信息占两个字节。</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key_part1 &#x3D; &#39;a&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704130442095.png" alt="image-20220704130442095"></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key_part1 &#x3D; &#39;a&#39; AND key_part2 &#x3D; &#39;b&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704130515031.png" alt="image-20220704130515031"></p><blockquote><p>联合索引中可以比较，key_len&#x3D;606的好于key_len&#x3D;303</p></blockquote><p>**练习： **</p><p>key_len的长度计算公式：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">varchar(10)变长字段且允许NULL &#x3D; 10 * ( character set：utf8&#x3D;3,gbk&#x3D;2,latin1&#x3D;1)+1(NULL)+2(变长字段)varchar(10)变长字段且不允许NULL &#x3D; 10 * ( character set：utf8&#x3D;3,gbk&#x3D;2,latin1&#x3D;1)+2(变长字段)char(10)固定字段且允许NULL &#x3D; 10 * ( character set：utf8&#x3D;3,gbk&#x3D;2,latin1&#x3D;1)+1(NULL)char(10)固定字段且不允许NULL &#x3D; 10 * ( character set：utf8&#x3D;3,gbk&#x3D;2,latin1&#x3D;1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-ref"><a href="#8-ref" class="headerlink" title="8. ref"></a>8. ref</h4><img src="../pic/MySQL索引及调优篇/image-20220704131759630.png" alt="image-20220704131759630" style="float:left;" /><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key1 &#x3D; &#39;a&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704130837498.png" alt="image-20220704130837498"></p><p>可以看到<code>ref</code>列的值是<code>const</code>，表明在使用<code>idx_key1</code>索引执行查询时，与<code>key1</code>列作等值匹配的对象是一个常数，当然有时候更复杂一点:</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 INNER JOIN s2 ON s1.id &#x3D; s2.id;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704130925426.png" alt="image-20220704130925426"></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 INNER JOIN s2 ON s2.key1 &#x3D; UPPER(s1.key1);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704130957359.png" alt="image-20220704130957359"></p><h4 id="9-rows-☆"><a href="#9-rows-☆" class="headerlink" title="9. rows ☆"></a>9. rows ☆</h4><p>预估的需要读取的记录条数，<code>值越小越好</code>。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key1 &gt; &#39;z&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704131050496.png" alt="image-20220704131050496"></p><h4 id="10-filtered"><a href="#10-filtered" class="headerlink" title="10. filtered"></a>10. filtered</h4><p>某个表经过搜索条件过滤后剩余记录条数的百分比</p><p>如果使用的是索引执行的单表扫描，那么计算时需要估计出满足除使用到对应索引的搜索条件外的其他搜索条件的记录有多少条。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key1 &gt; &#39;z&#39; AND common_field &#x3D; &#39;a&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704131323242.png" alt="image-20220704131323242"></p><p>对于单表查询来说，这个filtered的值没有什么意义，我们<code>更关注在连接查询中驱动表对应的执行计划记录的filtered值</code>，它决定了被驱动表要执行的次数 (即: rows * filtered)</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 INNER JOIN s2 ON s1.key1 &#x3D; s2.key1 WHERE s1.common_field &#x3D; &#39;a&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704131644615.png" alt="image-20220704131644615"></p><p>从执行计划中可以看出来，查询优化器打算把<code>s1</code>作为驱动表，<code>s2</code>当做被驱动表。我们可以看到驱动表<code>s1</code>表的执行计划的<code>rows</code>列为<code>9688</code>，filtered列为<code>10.00</code>，这意味着驱动表<code>s1</code>的扇出值就是<code>9688 x 10.00% = 968.8</code>，这说明还要对被驱动表执行大约<code>968</code>次查询。</p><h4 id="11-Extra-☆"><a href="#11-Extra-☆" class="headerlink" title="11. Extra ☆"></a>11. Extra ☆</h4><p>顾名思义，<code>Extra</code>列是用来说明一些额外信息的，包含不适合在其他列中显示但十分重要的额外信息。我们可以通过这些额外信息来<code>更准确的理解MySQL到底将如何执行给定的查询语句</code>。MySQL提供的额外信息有好几十个，我们就不一个一个介绍了，所以我们只挑选比较重要的额外信息介绍给大家。</p><ul><li><p><code>No tables used</code></p><p>当查询语句没有<code>FROM</code>子句时将会提示该额外信息，比如：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT 1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704132345383.png" alt="image-20220704132345383"></p></li><li><p><code>Impossible WHERE</code></p><p>当查询语句的<code>WHERE</code>子句永远为<code>FALSE</code>时将会提示该额外信息</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE 1 !&#x3D; 1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704132458978.png" alt="image-20220704132458978"></p></li><li><p><code>Using where</code></p><img src="../pic/MySQL索引及调优篇/image-20220704140148163.png" alt="image-20220704140148163" style="float:left;" /><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE common_field &#x3D; &#39;a&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704132655342.png" alt="image-20220704132655342"></p><img src="../pic/MySQL索引及调优篇/image-20220704140212813.png" alt="image-20220704140212813" style="float:left;" /><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key1 &#x3D; &#39;a&#39; AND common_field &#x3D; &#39;a&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704133130515.png" alt="image-20220704133130515"></p></li><li><p><code>No matching min/max row</code></p><p>当查询列表处有<code>MIN</code>或者<code>MAX</code>聚合函数，但是并没有符合<code>WHERE</code>子句中的搜索条件的记录时。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT MIN(key1) FROM s1 WHERE key1 &#x3D; &#39;abcdefg&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704134324354.png" alt="image-20220704134324354"></p></li><li><p><code>Using index</code></p><p>当我们的查询列表以及搜索条件中只包含属于某个索引的列，也就是在可以使用覆盖索引的情况下，在<code>Extra</code>列将会提示该额外信息。比方说下边这个查询中只需要用到<code>idx_key1</code>而不需要回表操作:</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT key1 FROM s1 WHERE key1 &#x3D; &#39;a&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704134931220.png" alt="image-20220704134931220"></p></li><li><p><code>Using index condition</code></p><p>有些搜索条件中虽然出现了索引列，但却不能使用到索引，比如下边这个查询：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM s1 WHERE key1 &gt; &#39;z&#39; AND key1 LIKE &#39;%a&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="../pic/MySQL索引及调优篇/image-20220704140344015.png" alt="image-20220704140344015" style="float:left;" /><img src="../pic/MySQL索引及调优篇/image-20220704140411033.png" alt="image-20220704140411033" style="float:left;" /><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key1 &gt; &#39;z&#39; AND key1 LIKE &#39;%b&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704140441702.png" alt="image-20220704140441702"></p></li><li><p><code>Using join buffer (Block Nested Loop)</code></p><p>在连接查询执行过程中，当被驱动表不能有效的利用索引加快访问速度，MySQL一般会为其分配一块名叫<code>join buffer</code>的内存块来加快查询速度，也就是我们所讲的<code>基于块的嵌套循环算法</code>。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 INNER JOIN s2 ON s1.common_field &#x3D; s2.common_field;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704140815955.png" alt="image-20220704140815955"></p></li><li><p><code>Not exists</code></p><p>当我们使用左(外)连接时，如果<code>WHERE</code>子句中包含要求被驱动表的某个列等于<code>NULL</code>值的搜索条件，而且那个列是不允许存储<code>NULL</code>值的，那么在该表的执行计划的Extra列就会提示这个信息：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 LEFT JOIN s2 ON s1.key1 &#x3D; s2.key1 WHERE s2.id IS NULL;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704142059555.png" alt="image-20220704142059555"></p></li><li><p><code>Using intersect(...) 、 Using union(...) 和 Using sort_union(...)</code></p><p>如果执行计划的<code>Extra</code>列出现了<code>Using intersect(...)</code>提示，说明准备使用<code>Intersect</code>索引合并的方式执行查询，括号中的<code>...</code>表示需要进行索引合并的索引名称；</p><p>如果出现<code>Using union(...)</code>提示，说明准备使用<code>Union</code>索引合并的方式执行查询;</p><p>如果出现<code>Using sort_union(...)</code>提示，说明准备使用<code>Sort-Union</code>索引合并的方式执行查询。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 WHERE key1 &#x3D; &#39;a&#39; OR key3 &#x3D; &#39;a&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704142552890.png" alt="image-20220704142552890"></p></li><li><p><code>Zero limit</code></p><p>当我们的<code>LIMIT</code>子句的参数为<code>0</code>时，表示压根儿不打算从表中读取任何记录，将会提示该额外信息</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 LIMIT 0;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704142754394.png" alt="image-20220704142754394"></p></li><li><p><code>Using filesort</code></p><p>有一些情况下对结果集中的记录进行排序是可以使用到索引的。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 ORDER BY key1 LIMIT 10;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704142901857.png" alt="image-20220704142901857"></p><img src="../pic/MySQL索引及调优篇/image-20220704145143170.png" alt="image-20220704145143170" style="float:left;" /><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM s1 ORDER BY common_field LIMIT 10;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704143518857.png" alt="image-20220704143518857"></p><p>需要注意的是，如果查询中需要使用<code>filesort</code>的方式进行排序的记录非常多，那么这个过程是很耗费性能的，我们最好想办法<code>将使用文件排序的执行方式改为索引进行排序</code>。</p></li><li><p><code>Using temporary</code></p><img src="../pic/MySQL索引及调优篇/image-20220704145924130.png" alt="image-20220704145924130" style="float:left;" /><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT DISTINCT common_field FROM s1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704150030005.png" alt="image-20220704150030005"></p><p>再比如：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT common_field, COUNT(*) AS amount FROM s1 GROUP BY common_field;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704150156416.png" alt="image-20220704150156416"></p><p>执行计划中出现<code>Using temporary</code>并不是一个好的征兆，因为建立与维护临时表要付出很大的成本的，所以我们<code>最好能使用索引来替代掉使用临时表</code>，比方说下边这个包含<code>GROUP BY</code>子句的查询就不需要使用临时表：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT key1, COUNT(*) AS amount FROM s1 GROUP BY key1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704150308189.png" alt="image-20220704150308189"></p><p>从 <code>Extra</code> 的 <code>Using index</code> 的提示里我们可以看出，上述查询只需要扫描 <code>idx_key1</code> 索引就可以搞 定了，不再需要临时表了。</p></li><li><p>其他</p><p>其它特殊情况这里省略。</p></li></ul><h4 id="12-小结"><a href="#12-小结" class="headerlink" title="12. 小结"></a>12. 小结</h4><ul><li>EXPLAIN不考虑各种Cache </li><li>EXPLAIN不能显示MySQL在执行查询时所作的优化工作 </li><li>EXPLAIN不会告诉你关于触发器、存储过程的信息或用户自定义函数对查询的影响情况 </li><li>部分统计信息是估算的，并非精确值</li></ul><h2 id="7-EXPLAIN的进一步使用"><a href="#7-EXPLAIN的进一步使用" class="headerlink" title="7. EXPLAIN的进一步使用"></a>7. EXPLAIN的进一步使用</h2><h3 id="7-1-EXPLAIN四种输出格式"><a href="#7-1-EXPLAIN四种输出格式" class="headerlink" title="7.1 EXPLAIN四种输出格式"></a>7.1 EXPLAIN四种输出格式</h3><p>这里谈谈EXPLAIN的输出格式。EXPLAIN可以输出四种格式： <code>传统格式</code> ，<code>JSON格式</code> ， <code>TREE格式</code> 以及 <code>可视化输出</code> 。用户可以根据需要选择适用于自己的格式。</p><h4 id="1-传统格式"><a href="#1-传统格式" class="headerlink" title="1. 传统格式"></a>1. 传统格式</h4><p>传统格式简单明了，输出是一个表格形式，概要说明查询计划。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT s1.key1, s2.key1 FROM s1 LEFT JOIN s2 ON s1.key1 &#x3D; s2.key1 WHERE s2.common_field IS NOT NULL;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704161702384.png" alt="image-20220704161702384"></p><h4 id="2-JSON格式"><a href="#2-JSON格式" class="headerlink" title="2. JSON格式"></a>2. JSON格式</h4><p>第1种格式中介绍的<code>EXPLAIN</code>语句输出中缺少了一个衡量执行好坏的重要属性 —— <code>成本</code>。而JSON格式是四种格式里面输出<code>信息最详尽</code>的格式，里面包含了执行的成本信息。</p><ul><li>JSON格式：在EXPLAIN单词和真正的查询语句中间加上 FORMAT&#x3D;JSON 。</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">EXPLAIN FORMAT&#x3D;JSON SELECT ....<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>EXPLAIN的Column与JSON的对应关系：(来源于MySQL 5.7文档)</li></ul><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704164236909.png" alt="image-20220704164236909"></p><p>这样我们就可以得到一个json格式的执行计划，里面包含该计划花费的成本。比如这样：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN FORMAT&#x3D;JSON SELECT * FROM s1 INNER JOIN s2 ON s1.key1 &#x3D; s2.key2 WHERE s1.common_field &#x3D; &#39;a&#39;\G<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704172833362.png" alt="image-20220704172833362"></p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704172920158.png" alt="image-20220704172920158"></p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704173012413.png" alt="image-20220704173012413"></p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704173045190.png" alt="image-20220704173045190"></p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704173108888.png" alt="image-20220704173108888"></p><p>我们使用 # 后边跟随注释的形式为大家解释了 <code>EXPLAIN FORMAT=JSON</code> 语句的输出内容，但是大家可能 有疑问 “<code>cost_info</code>“ 里边的成本看着怪怪的，它们是怎么计算出来的？先看 s1 表的 “<code>cost_info</code>“ 部 分：</p><pre class="line-numbers language-none"><code class="language-none">&quot;cost_info&quot;: &#123;    &quot;read_cost&quot;: &quot;1840.84&quot;,    &quot;eval_cost&quot;: &quot;193.76&quot;,    &quot;prefix_cost&quot;: &quot;2034.60&quot;,    &quot;data_read_per_join&quot;: &quot;1M&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>read_cost</code> 是由下边这两部分组成的：</p><ul><li>IO 成本</li><li>检测 rows × (1 - filter) 条记录的 CPU 成本</li></ul><blockquote><p>小贴士： rows和filter都是我们前边介绍执行计划的输出列，在JSON格式的执行计划中，rows 相当于rows_examined_per_scan，filtered名称不变。</p></blockquote></li></ul><ul><li><p><code>eval_cost</code> 是这样计算的：</p><p>检测 rows × filter 条记录的成本。</p></li><li><p><code>prefix_cost</code> 就是单独查询 s1 表的成本，也就是：</p><p><code>read_cost + eval_cost</code></p></li><li><p><code>data_read_per_join</code> 表示在此次查询中需要读取的数据量。</p></li></ul><p>对于 <code>s2</code> 表的 “<code>cost_info</code>“ 部分是这样的：</p><pre class="line-numbers language-none"><code class="language-none">&quot;cost_info&quot;: &#123;    &quot;read_cost&quot;: &quot;968.80&quot;,    &quot;eval_cost&quot;: &quot;193.76&quot;,    &quot;prefix_cost&quot;: &quot;3197.16&quot;,    &quot;data_read_per_join&quot;: &quot;1M&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于 <code>s2</code> 表是被驱动表，所以可能被读取多次，这里的<code>read_cost</code> 和 <code>eval_cost</code> 是访问多次 <code>s2</code> 表后累加起来的值，大家主要关注里边儿的 <code>prefix_cost</code> 的值代表的是整个连接查询预计的成本，也就是单次查询 <code>s1</code> 表和多次查询 <code>s2</code> 表后的成本的和，也就是：</p><pre class="line-numbers language-none"><code class="language-none">968.80 + 193.76 + 2034.60 &#x3D; 3197.16<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-TREE格式"><a href="#3-TREE格式" class="headerlink" title="3. TREE格式"></a>3. TREE格式</h4><p>TREE格式是8.0.16版本之后引入的新格式，主要根据查询的 <code>各个部分之间的关系</code> 和 <code>各部分的执行顺序</code> 来描述如何查询。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN FORMAT&#x3D;tree SELECT * FROM s1 INNER JOIN s2 ON s1.key1 &#x3D; s2.key2 WHEREs1.common_field &#x3D; &#39;a&#39;\G*************************** 1. row ***************************EXPLAIN: -&gt; Nested loop inner join (cost&#x3D;1360.08 rows&#x3D;990)-&gt; Filter: ((s1.common_field &#x3D; &#39;a&#39;) and (s1.key1 is not null)) (cost&#x3D;1013.75rows&#x3D;990)-&gt; Table scan on s1 (cost&#x3D;1013.75 rows&#x3D;9895)-&gt; Single-row index lookup on s2 using idx_key2 (key2&#x3D;s1.key1), with indexcondition: (cast(s1.key1 as double) &#x3D; cast(s2.key2 as double)) (cost&#x3D;0.25 rows&#x3D;1)1 row in set, 1 warning (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-可视化输出"><a href="#4-可视化输出" class="headerlink" title="4. 可视化输出"></a>4. 可视化输出</h4><p>可视化输出，可以通过MySQL Workbench可视化查看MySQL的执行计划。通过点击Workbench的放大镜图标，即可生成可视化的查询计划。 </p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704174401970.png" alt="image-20220704174401970"></p><p>上图按从左到右的连接顺序显示表。红色框表示 <code>全表扫描</code> ，而绿色框表示使用 <code>索引查找</code> 。对于每个表， 显示使用的索引。还要注意的是，每个表格的框上方是每个表访问所发现的行数的估计值以及访问该表的成本。</p><h3 id="7-2-SHOW-WARNINGS的使用"><a href="#7-2-SHOW-WARNINGS的使用" class="headerlink" title="7.2 SHOW WARNINGS的使用"></a>7.2 SHOW WARNINGS的使用</h3><p>在我们使用<code>EXPLAIN</code>语句查看了某个查询的执行计划后，紧接着还可以使用<code>SHOW WARNINGS</code>语句查看与这个查询的执行计划有关的一些扩展信息，比如这样：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT s1.key1, s2.key1 FROM s1 LEFT JOIN s2 ON s1.key1 &#x3D; s2.key1 WHERE s2.common_field IS NOT NULL;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704174543663.png" alt="image-20220704174543663"></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SHOW WARNINGS\G*************************** 1. row ***************************    Level: Note     Code: 1003Message: &#x2F;* select#1 *&#x2F; select &#96;atguigu&#96;.&#96;s1&#96;.&#96;key1&#96; AS &#96;key1&#96;,&#96;atguigu&#96;.&#96;s2&#96;.&#96;key1&#96;AS &#96;key1&#96; from &#96;atguigu&#96;.&#96;s1&#96; join &#96;atguigu&#96;.&#96;s2&#96; where ((&#96;atguigu&#96;.&#96;s1&#96;.&#96;key1&#96; &#x3D;&#96;atguigu&#96;.&#96;s2&#96;.&#96;key1&#96;) and (&#96;atguigu&#96;.&#96;s2&#96;.&#96;common_field&#96; is not null))1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大家可以看到<code>SHOW WARNINGS</code>展示出来的信息有三个字段，分别是<code>Level、Code、Message</code>。我们最常见的就是Code为1003的信息，当Code值为1003时，<code>Message</code>字段展示的信息类似于查询优化器将我们的查询语句重写后的语句。比如我们上边的查询本来是一个左(外)连接查询，但是有一个s2.common_field IS NOT NULL的条件，这就会导致查询优化器把左(外)连接查询优化为内连接查询，从<code>SHOW WARNINGS</code>的<code>Message</code>字段也可以看出来，原本的LEFE JOIN已经变成了JOIN。</p><p>但是大家一定要注意，我们说<code>Message</code>字段展示的信息类似于查询优化器将我们的查询语句<code>重写后的语句</code>，并不是等价于，也就是说<code>Message</code>字段展示的信息并不是标准的查询语句，在很多情况下并不能直接拿到黑框框中运行，它只能作为帮助我们理解MySQL将如何执行查询语句的一个参考依据而已。</p><h2 id="8-分析优化器执行计划：trace"><a href="#8-分析优化器执行计划：trace" class="headerlink" title="8. 分析优化器执行计划：trace"></a>8. 分析优化器执行计划：trace</h2><img src="../pic/MySQL索引及调优篇/image-20220704175711800.png" alt="image-20220704175711800" style="float:left;" /><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SET optimizer_trace&#x3D;&quot;enabled&#x3D;on&quot;,end_markers_in_json&#x3D;on;set optimizer_trace_max_mem_size&#x3D;1000000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>开启后，可分析如下语句： </p><ul><li>SELECT </li><li>INSERT </li><li>REPLACE</li><li>UPDATE </li><li>DELETE </li><li>EXPLAIN </li><li>SET </li><li>DECLARE </li><li>CASE </li><li>IF </li><li>RETURN </li><li>CALL</li></ul><p>测试：执行如下SQL语句</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from student where id &lt; 10;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后， 查询 information_schema.optimizer_trace 就可以知道MySQL是如何执行SQL的 ：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from information_schema.optimizer_trace\G<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">*************************** 1. row ***************************&#x2F;&#x2F;第1部分：查询语句QUERY: select * from student where id &lt; 10&#x2F;&#x2F;第2部分：QUERY字段对应语句的跟踪信息TRACE: &#123;&quot;steps&quot;: [&#123;    &quot;join_preparation&quot;: &#123; &#x2F;&#x2F;预备工作        &quot;select#&quot;: 1,        &quot;steps&quot;: [            &#123;            &quot;expanded_query&quot;: &quot;&#x2F;* select#1 *&#x2F; select &#96;student&#96;.&#96;id&#96; AS            &#96;id&#96;,&#96;student&#96;.&#96;stuno&#96; AS &#96;stuno&#96;,&#96;student&#96;.&#96;name&#96; AS &#96;name&#96;,&#96;student&#96;.&#96;age&#96; AS            &#96;age&#96;,&#96;student&#96;.&#96;classId&#96; AS &#96;classId&#96; from &#96;student&#96; where (&#96;student&#96;.&#96;id&#96; &lt; 10)&quot;            &#125;        ] &#x2F;* steps *&#x2F;    &#125; &#x2F;* join_preparation *&#x2F;&#125;,&#123;    &quot;join_optimization&quot;: &#123; &#x2F;&#x2F;进行优化    &quot;select#&quot;: 1,    &quot;steps&quot;: [        &#123;        &quot;condition_processing&quot;: &#123; &#x2F;&#x2F;条件处理        &quot;condition&quot;: &quot;WHERE&quot;,        &quot;original_condition&quot;: &quot;(&#96;student&#96;.&#96;id&#96; &lt; 10)&quot;,        &quot;steps&quot;: [        &#123;            &quot;transformation&quot;: &quot;equality_propagation&quot;,            &quot;resulting_condition&quot;: &quot;(&#96;student&#96;.&#96;id&#96; &lt; 10)&quot;        &#125;,        &#123;            &quot;transformation&quot;: &quot;constant_propagation&quot;,            &quot;resulting_condition&quot;: &quot;(&#96;student&#96;.&#96;id&#96; &lt; 10)&quot;        &#125;,        &#123;            &quot;transformation&quot;: &quot;trivial_condition_removal&quot;,            &quot;resulting_condition&quot;: &quot;(&#96;student&#96;.&#96;id&#96; &lt; 10)&quot;        &#125;        ] &#x2F;* steps *&#x2F;    &#125; &#x2F;* condition_processing *&#x2F;    &#125;,    &#123;        &quot;substitute_generated_columns&quot;: &#123; &#x2F;&#x2F;替换生成的列        &#125; &#x2F;* substitute_generated_columns *&#x2F;    &#125;,    &#123;        &quot;table_dependencies&quot;: [ &#x2F;&#x2F;表的依赖关系        &#123;            &quot;table&quot;: &quot;&#96;student&#96;&quot;,            &quot;row_may_be_null&quot;: false,            &quot;map_bit&quot;: 0,            &quot;depends_on_map_bits&quot;: [            ] &#x2F;* depends_on_map_bits *&#x2F;        &#125;    ] &#x2F;* table_dependencies *&#x2F;    &#125;,    &#123;    &quot;ref_optimizer_key_uses&quot;: [ &#x2F;&#x2F;使用键        ] &#x2F;* ref_optimizer_key_uses *&#x2F;        &#125;,    &#123;        &quot;rows_estimation&quot;: [ &#x2F;&#x2F;行判断        &#123;            &quot;table&quot;: &quot;&#96;student&#96;&quot;,            &quot;range_analysis&quot;: &#123;                &quot;table_scan&quot;: &#123;                    &quot;rows&quot;: 3973767,                    &quot;cost&quot;: 408558            &#125; &#x2F;* table_scan *&#x2F;, &#x2F;&#x2F;扫描表            &quot;potential_range_indexes&quot;: [ &#x2F;&#x2F;潜在的范围索引                &#123;                    &quot;index&quot;: &quot;PRIMARY&quot;,                    &quot;usable&quot;: true,                    &quot;key_parts&quot;: [                    &quot;id&quot;                    ] &#x2F;* key_parts *&#x2F;                &#125;            ] &#x2F;* potential_range_indexes *&#x2F;,        &quot;setup_range_conditions&quot;: [ &#x2F;&#x2F;设置范围条件        ] &#x2F;* setup_range_conditions *&#x2F;,        &quot;group_index_range&quot;: &#123;            &quot;chosen&quot;: false,            &quot;cause&quot;: &quot;not_group_by_or_distinct&quot;        &#125; &#x2F;* group_index_range *&#x2F;,            &quot;skip_scan_range&quot;: &#123;                &quot;potential_skip_scan_indexes&quot;: [                    &#123;                        &quot;index&quot;: &quot;PRIMARY&quot;,                        &quot;usable&quot;: false,                        &quot;cause&quot;: &quot;query_references_nonkey_column&quot;                    &#125;                ] &#x2F;* potential_skip_scan_indexes *&#x2F;            &#125; &#x2F;* skip_scan_range *&#x2F;,        &quot;analyzing_range_alternatives&quot;: &#123; &#x2F;&#x2F;分析范围选项            &quot;range_scan_alternatives&quot;: [                &#123;                &quot;index&quot;: &quot;PRIMARY&quot;,                    &quot;ranges&quot;: [                        &quot;id &lt; 10&quot;                    ] &#x2F;* ranges *&#x2F;,                &quot;index_dives_for_eq_ranges&quot;: true,                &quot;rowid_ordered&quot;: true,                &quot;using_mrr&quot;: false,                &quot;index_only&quot;: false,                &quot;rows&quot;: 9,                &quot;cost&quot;: 1.91986,                &quot;chosen&quot;: true                &#125;            ] &#x2F;* range_scan_alternatives *&#x2F;,        &quot;analyzing_roworder_intersect&quot;: &#123;            &quot;usable&quot;: false,            &quot;cause&quot;: &quot;too_few_roworder_scans&quot;        &#125; &#x2F;* analyzing_roworder_intersect *&#x2F;        &#125; &#x2F;* analyzing_range_alternatives *&#x2F;,        &quot;chosen_range_access_summary&quot;: &#123; &#x2F;&#x2F;选择范围访问摘要            &quot;range_access_plan&quot;: &#123;                &quot;type&quot;: &quot;range_scan&quot;,                &quot;index&quot;: &quot;PRIMARY&quot;,                &quot;rows&quot;: 9,                &quot;ranges&quot;: [                &quot;id &lt; 10&quot;                ] &#x2F;* ranges *&#x2F;                &#125; &#x2F;* range_access_plan *&#x2F;,                &quot;rows_for_plan&quot;: 9,                &quot;cost_for_plan&quot;: 1.91986,                &quot;chosen&quot;: true                &#125; &#x2F;* chosen_range_access_summary *&#x2F;                &#125; &#x2F;* range_analysis *&#x2F;            &#125;        ] &#x2F;* rows_estimation *&#x2F;    &#125;,    &#123;    &quot;considered_execution_plans&quot;: [ &#x2F;&#x2F;考虑执行计划    &#123;    &quot;plan_prefix&quot;: [    ] &#x2F;* plan_prefix *&#x2F;,        &quot;table&quot;: &quot;&#96;student&#96;&quot;,        &quot;best_access_path&quot;: &#123; &#x2F;&#x2F;最佳访问路径        &quot;considered_access_paths&quot;: [        &#123;            &quot;rows_to_scan&quot;: 9,            &quot;access_type&quot;: &quot;range&quot;,            &quot;range_details&quot;: &#123;            &quot;used_index&quot;: &quot;PRIMARY&quot;        &#125; &#x2F;* range_details *&#x2F;,        &quot;resulting_rows&quot;: 9,        &quot;cost&quot;: 2.81986,        &quot;chosen&quot;: true    &#125;    ] &#x2F;* considered_access_paths *&#x2F;    &#125; &#x2F;* best_access_path *&#x2F;,        &quot;condition_filtering_pct&quot;: 100, &#x2F;&#x2F;行过滤百分比        &quot;rows_for_plan&quot;: 9,        &quot;cost_for_plan&quot;: 2.81986,        &quot;chosen&quot;: true    &#125;    ] &#x2F;* considered_execution_plans *&#x2F;    &#125;,    &#123;        &quot;attaching_conditions_to_tables&quot;: &#123; &#x2F;&#x2F;将条件附加到表上        &quot;original_condition&quot;: &quot;(&#96;student&#96;.&#96;id&#96; &lt; 10)&quot;,        &quot;attached_conditions_computation&quot;: [        ] &#x2F;* attached_conditions_computation *&#x2F;,        &quot;attached_conditions_summary&quot;: [ &#x2F;&#x2F;附加条件概要    &#123;        &quot;table&quot;: &quot;&#96;student&#96;&quot;,        &quot;attached&quot;: &quot;(&#96;student&#96;.&#96;id&#96; &lt; 10)&quot;    &#125;    ] &#x2F;* attached_conditions_summary *&#x2F;    &#125; &#x2F;* attaching_conditions_to_tables *&#x2F;    &#125;,    &#123;    &quot;finalizing_table_conditions&quot;: [    &#123;        &quot;table&quot;: &quot;&#96;student&#96;&quot;,        &quot;original_table_condition&quot;: &quot;(&#96;student&#96;.&#96;id&#96; &lt; 10)&quot;,        &quot;final_table_condition &quot;: &quot;(&#96;student&#96;.&#96;id&#96; &lt; 10)&quot;    &#125;    ] &#x2F;* finalizing_table_conditions *&#x2F;    &#125;,    &#123;    &quot;refine_plan&quot;: [ &#x2F;&#x2F;精简计划    &#123;    &quot;table&quot;: &quot;&#96;student&#96;&quot;    &#125;    ] &#x2F;* refine_plan *&#x2F;    &#125;    ] &#x2F;* steps *&#x2F;    &#125; &#x2F;* join_optimization *&#x2F;&#125;,&#123;        &quot;join_execution&quot;: &#123; &#x2F;&#x2F;执行            &quot;select#&quot;: 1,            &quot;steps&quot;: [            ] &#x2F;* steps *&#x2F;        &#125; &#x2F;* join_execution *&#x2F;        &#125;    ] &#x2F;* steps *&#x2F;&#125;&#x2F;&#x2F;第3部分：跟踪信息过长时，被截断的跟踪信息的字节数。MISSING_BYTES_BEYOND_MAX_MEM_SIZE: 0 &#x2F;&#x2F;丢失的超出最大容量的字节&#x2F;&#x2F;第4部分：执行跟踪语句的用户是否有查看对象的权限。当不具有权限时，该列信息为1且TRACE字段为空，一般在调用带有SQL SECURITY DEFINER的视图或者是存储过程的情况下，会出现此问题。INSUFFICIENT_PRIVILEGES: 0 &#x2F;&#x2F;缺失权限1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-MySQL监控分析视图-sys-schema"><a href="#9-MySQL监控分析视图-sys-schema" class="headerlink" title="9. MySQL监控分析视图-sys schema"></a>9. MySQL监控分析视图-sys schema</h2><img src="../pic/MySQL索引及调优篇/image-20220704190726180.png" alt="image-20220704190726180" style="float:left;" /><h3 id="9-1-Sys-schema视图摘要"><a href="#9-1-Sys-schema视图摘要" class="headerlink" title="9.1 Sys schema视图摘要"></a>9.1 Sys schema视图摘要</h3><ol><li><strong>主机相关</strong>：以host_summary开头，主要汇总了IO延迟的信息。 </li><li><strong>Innodb相关</strong>：以innodb开头，汇总了innodb buffer信息和事务等待innodb锁的信息。 </li><li><strong>I&#x2F;o相关</strong>：以io开头，汇总了等待I&#x2F;O、I&#x2F;O使用量情况。 </li><li><strong>内存使用情况</strong>：以memory开头，从主机、线程、事件等角度展示内存的使用情况 </li><li><strong>连接与会话信息</strong>：processlist和session相关视图，总结了会话相关信息。 </li><li><strong>表相关</strong>：以schema_table开头的视图，展示了表的统计信息。 </li><li><strong>索引信息</strong>：统计了索引的使用情况，包含冗余索引和未使用的索引情况。 </li><li><strong>语句相关</strong>：以statement开头，包含执行全表扫描、使用临时表、排序等的语句信息。 </li><li><strong>用户相关</strong>：以user开头的视图，统计了用户使用的文件I&#x2F;O、执行语句统计信息。 </li><li><strong>等待事件相关信息</strong>：以wait开头，展示等待事件的延迟情况。</li></ol><h3 id="9-2-Sys-schema视图使用场景"><a href="#9-2-Sys-schema视图使用场景" class="headerlink" title="9.2 Sys schema视图使用场景"></a>9.2 Sys schema视图使用场景</h3><p>索引情况</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#1. 查询冗余索引select * from sys.schema_redundant_indexes;#2. 查询未使用过的索引select * from sys.schema_unused_indexes;#3. 查询索引的使用情况select index_name,rows_selected,rows_inserted,rows_updated,rows_deletedfrom sys.schema_index_statistics where table_schema&#x3D;&#39;dbname&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表相关</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 1. 查询表的访问量select table_schema,table_name,sum(io_read_requests+io_write_requests) as io fromsys.schema_table_statistics group by table_schema,table_name order by io desc;# 2. 查询占用bufferpool较多的表select object_schema,object_name,allocated,datafrom sys.innodb_buffer_stats_by_table order by allocated limit 10;# 3. 查看表的全表扫描情况select * from sys.statements_with_full_table_scans where db&#x3D;&#39;dbname&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>语句相关</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#1. 监控SQL执行的频率select db,exec_count,query from sys.statement_analysisorder by exec_count desc;#2. 监控使用了排序的SQLselect db,exec_count,first_seen,last_seen,queryfrom sys.statements_with_sorting limit 1;#3. 监控使用了临时表或者磁盘临时表的SQLselect db,exec_count,tmp_tables,tmp_disk_tables,queryfrom sys.statement_analysis where tmp_tables&gt;0 or tmp_disk_tables &gt;0order by (tmp_tables+tmp_disk_tables) desc;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>IO相关</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#1. 查看消耗磁盘IO的文件select file,avg_read,avg_write,avg_read+avg_write as avg_iofrom sys.io_global_by_file_by_bytes order by avg_read limit 10;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Innodb 相关</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#1. 行锁阻塞情况select * from sys.innodb_lock_waits;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="../pic/MySQL索引及调优篇/image-20220704192020603.png" alt="image-20220704192020603" style="float:left;" /><h2 id="10-小结"><a href="#10-小结" class="headerlink" title="10. 小结"></a>10. 小结</h2><p>查询是数据库中最频繁的操作，提高查询速度可以有效地提高MySQL数据库的性能。通过对查询语句的分析可以了解查询语句的执行情况，找出查询语句执行的瓶颈，从而优化查询语句。</p><h1 id="第10章-索引优化与查询优化"><a href="#第10章-索引优化与查询优化" class="headerlink" title="第10章_索引优化与查询优化"></a>第10章_索引优化与查询优化</h1><p>都有哪些维度可以进行数据库调优？简言之：</p><ul><li>索引失效、没有充分利用到索引——建立索引</li><li>关联查询太多JOIN（设计缺陷或不得已的需求）——SQL优化</li><li>服务器调优及各个参数设置（缓冲、线程数等）——调整my.cnf</li><li>数据过多——分库分表</li></ul><p>关于数据库调优的知识非常分散。不同的DBMS，不同的公司，不同的职位，不同的项目遇到的问题都不尽相同。这里我们分为三个章节进行细致讲解。</p><p>虽然SQL查询优化的技术有很多，但是大方向上完全可以分成<code>物理查询优化</code>和<code>逻辑查询优化</code>两大块。</p><ul><li>物理查询优化是通过<code>索引</code>和<code>表连接方式</code>等技术来进行优化，这里重点需要掌握索引的使用。</li><li>逻辑查询优化就是通过SQL<code>等价变换</code>提升查询效率，直白一点就是说，换一种查询写法效率可能更高。</li></ul><h2 id="1-数据准备"><a href="#1-数据准备" class="headerlink" title="1. 数据准备"></a>1. 数据准备</h2><p><code>学员表</code> 插 <code>50万</code> 条，<code> 班级表</code> 插 <code>1万</code> 条。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE DATABASE atguigudb2;USE atguigudb2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>步骤1：建表</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE &#96;class&#96; (    &#96;id&#96; INT(11) NOT NULL AUTO_INCREMENT,    &#96;className&#96; VARCHAR(30) DEFAULT NULL,    &#96;address&#96; VARCHAR(40) DEFAULT NULL,    &#96;monitor&#96; INT NULL ,    PRIMARY KEY (&#96;id&#96;)) ENGINE&#x3D;INNODB AUTO_INCREMENT&#x3D;1 DEFAULT CHARSET&#x3D;utf8;CREATE TABLE &#96;student&#96; (    &#96;id&#96; INT(11) NOT NULL AUTO_INCREMENT,    &#96;stuno&#96; INT NOT NULL ,    &#96;name&#96; VARCHAR(20) DEFAULT NULL,    &#96;age&#96; INT(3) DEFAULT NULL,    &#96;classId&#96; INT(11) DEFAULT NULL,    PRIMARY KEY (&#96;id&#96;)    #CONSTRAINT &#96;fk_class_id&#96; FOREIGN KEY (&#96;classId&#96;) REFERENCES &#96;t_class&#96; (&#96;id&#96;)) ENGINE&#x3D;INNODB AUTO_INCREMENT&#x3D;1 DEFAULT CHARSET&#x3D;utf8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤2：设置参数</strong></p><ul><li>命令开启：允许创建函数设置：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">set global log_bin_trust_function_creators&#x3D;1; # 不加global只是当前窗口有效。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>步骤3：创建函数</strong></p><p>保证每条数据都不同。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#随机产生字符串DELIMITER &#x2F;&#x2F;CREATE FUNCTION rand_string(n INT) RETURNS VARCHAR(255)BEGINDECLARE chars_str VARCHAR(100) DEFAULT&#39;abcdefghijklmnopqrstuvwxyzABCDEFJHIJKLMNOPQRSTUVWXYZ&#39;;DECLARE return_str VARCHAR(255) DEFAULT &#39;&#39;;DECLARE i INT DEFAULT 0;WHILE i &lt; n DOSET return_str &#x3D;CONCAT(return_str,SUBSTRING(chars_str,FLOOR(1+RAND()*52),1));SET i &#x3D; i + 1;END WHILE;RETURN return_str;END &#x2F;&#x2F;DELIMITER ;#假如要删除#drop function rand_string;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>随机产生班级编号</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#用于随机产生多少到多少的编号DELIMITER &#x2F;&#x2F;CREATE FUNCTION rand_num (from_num INT ,to_num INT) RETURNS INT(11)BEGINDECLARE i INT DEFAULT 0;SET i &#x3D; FLOOR(from_num +RAND()*(to_num - from_num+1)) ;RETURN i;END &#x2F;&#x2F;DELIMITER ;#假如要删除#drop function rand_num;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤4：创建存储过程</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#创建往stu表中插入数据的存储过程DELIMITER &#x2F;&#x2F;CREATE PROCEDURE insert_stu( START INT , max_num INT )BEGINDECLARE i INT DEFAULT 0;SET autocommit &#x3D; 0; #设置手动提交事务REPEAT #循环SET i &#x3D; i + 1; #赋值INSERT INTO student (stuno, name ,age ,classId ) VALUES((START+i),rand_string(6),rand_num(1,50),rand_num(1,1000));UNTIL i &#x3D; max_numEND REPEAT;COMMIT; #提交事务END &#x2F;&#x2F;DELIMITER ;#假如要删除#drop PROCEDURE insert_stu;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建往class表中插入数据的存储过程</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#执行存储过程，往class表添加随机数据DELIMITER &#x2F;&#x2F;CREATE PROCEDURE &#96;insert_class&#96;( max_num INT )BEGINDECLARE i INT DEFAULT 0;SET autocommit &#x3D; 0;REPEATSET i &#x3D; i + 1;INSERT INTO class ( classname,address,monitor ) VALUES(rand_string(8),rand_string(10),rand_num(1,100000));UNTIL i &#x3D; max_numEND REPEAT;COMMIT;END &#x2F;&#x2F;DELIMITER ;#假如要删除#drop PROCEDURE insert_class;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤5：调用存储过程</strong></p><p>class</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#执行存储过程，往class表添加1万条数据CALL insert_class(10000);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>stu</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#执行存储过程，往stu表添加50万条数据CALL insert_stu(100000,500000);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>步骤6：删除某表上的索引</strong></p><p>创建存储过程</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER &#x2F;&#x2F;CREATE PROCEDURE &#96;proc_drop_index&#96;(dbname VARCHAR(200),tablename VARCHAR(200))BEGIN        DECLARE done INT DEFAULT 0;        DECLARE ct INT DEFAULT 0;        DECLARE _index VARCHAR(200) DEFAULT &#39;&#39;;        DECLARE _cur CURSOR FOR SELECT index_name FROMinformation_schema.STATISTICS WHERE table_schema&#x3D;dbname AND table_name&#x3D;tablename ANDseq_in_index&#x3D;1 AND index_name &lt;&gt;&#39;PRIMARY&#39; ;#每个游标必须使用不同的declare continue handler for not found set done&#x3D;1来控制游标的结束DECLARE CONTINUE HANDLER FOR NOT FOUND set done&#x3D;2 ;#若没有数据返回,程序继续,并将变量done设为2        OPEN _cur;        FETCH _cur INTO _index;        WHILE _index&lt;&gt;&#39;&#39; DO            SET @str &#x3D; CONCAT(&quot;drop index &quot; , _index , &quot; on &quot; , tablename );            PREPARE sql_str FROM @str ;            EXECUTE sql_str;            DEALLOCATE PREPARE sql_str;            SET _index&#x3D;&#39;&#39;;            FETCH _cur INTO _index;        END WHILE;    CLOSE _cur;END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行存储过程</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CALL proc_drop_index(&quot;dbname&quot;,&quot;tablename&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-索引失效案例"><a href="#2-索引失效案例" class="headerlink" title="2. 索引失效案例"></a>2. 索引失效案例</h2><img src="../pic/MySQL索引及调优篇/image-20220704202453482.png" alt="image-20220704202453482" style="float:left;" /><h3 id="2-1-全值匹配我最爱"><a href="#2-1-全值匹配我最爱" class="headerlink" title="2.1 全值匹配我最爱"></a>2.1 全值匹配我最爱</h3><p>系统中经常出现的sql语句如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE age&#x3D;30;EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE age&#x3D;30 AND classId&#x3D;4;EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE age&#x3D;30 AND classId&#x3D;4 AND name &#x3D; &#39;abcd&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>建立索引前执行：（关注执行时间）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT SQL_NO_CACHE * FROM student WHERE age&#x3D;30 AND classId&#x3D;4 AND name &#x3D; &#39;abcd&#39;;Empty set, 1 warning (0.28 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>建立索引</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE INDEX idx_age ON student(age);CREATE INDEX idx_age_classid ON student(age,classId);CREATE INDEX idx_age_classid_name ON student(age,classId,name);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>建立索引后执行：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT SQL_NO_CACHE * FROM student WHERE age&#x3D;30 AND classId&#x3D;4 AND name &#x3D; &#39;abcd&#39;;Empty set, 1 warning (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="../pic/MySQL索引及调优篇/image-20220704204140589.png" alt="image-20220704204140589" style="float:left;" /><h3 id="2-2-最佳左前缀法则"><a href="#2-2-最佳左前缀法则" class="headerlink" title="2.2 最佳左前缀法则"></a>2.2 最佳左前缀法则</h3><p>在MySQL建立联合索引时会遵守最佳左前缀原则，即最左优先，在检索数据时从联合索引的最左边开始匹配。</p><p>举例1：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE student.age&#x3D;30 AND student.name &#x3D; &#39;abcd&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例2：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE student.classId&#x3D;1 AND student.name &#x3D; &#39;abcd&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例3：索引<code>idx_age_classid_name</code>还能否正常使用？</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE student.classId&#x3D;4 AND student.age&#x3D;30 AND student.name &#x3D; &#39;abcd&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果索引了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始并且不跳过索引中的列。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE student.age&#x3D;30 AND student.name &#x3D; &#39;abcd&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704211116351.png" alt="image-20220704211116351"></p><p>虽然可以正常使用，但是只有部分被使用到了。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE student.classId&#x3D;1 AND student.name &#x3D; &#39;abcd&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704211254581.png" alt="image-20220704211254581"></p><p>完全没有使用上索引。</p><p>结论：MySQL可以为多个字段创建索引，一个索引可以包含16个字段。对于多列索引，<strong>过滤条件要使用索引必须按照索引建立时的顺序，依次满足，一旦跳过某个字段，索引后面的字段都无法被使用</strong>。如果查询条件中没有用这些字段中第一个字段时，多列（或联合）索引不会被使用。</p><blockquote><p>拓展：Alibaba《Java开发手册》 </p><p>索引文件具有 B-Tree 的最左前缀匹配特性，如果左边的值未确定，那么无法使用此索引。</p></blockquote><h3 id="2-3-主键插入顺序"><a href="#2-3-主键插入顺序" class="headerlink" title="2.3 主键插入顺序"></a>2.3 主键插入顺序</h3><img src="../pic/MySQL索引及调优篇/image-20220704212354041.png" alt="image-20220704212354041" style="float:left;" /><p>如果此时再插入一条主键值为 9 的记录，那它插入的位置就如下图：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704212428607.png" alt="image-20220704212428607"></p><p>可这个数据页已经满了，再插进来咋办呢？我们需要把当前 <code>页面分裂</code> 成两个页面，把本页中的一些记录移动到新创建的这个页中。页面分裂和记录移位意味着什么？意味着： <code>性能损耗</code> ！所以如果我们想尽量避免这样无谓的性能损耗，最好让插入的记录的 <code>主键值依次递增</code> ，这样就不会发生这样的性能损耗了。 所以我们建议：让主键具有 <code>AUTO_INCREMENT</code> ，让存储引擎自己为表生成主键，而不是我们手动插入 ， 比如： <code>person_info</code> 表：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE person_info(    id INT UNSIGNED NOT NULL AUTO_INCREMENT,    name VARCHAR(100) NOT NULL,    birthday DATE NOT NULL,    phone_number CHAR(11) NOT NULL,    country varchar(100) NOT NULL,    PRIMARY KEY (id),    KEY idx_name_birthday_phone_number (name(10), birthday, phone_number));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们自定义的主键列 <code>id</code> 拥有 <code>AUTO_INCREMENT</code> 属性，在插入记录时存储引擎会自动为我们填入自增的主键值。这样的主键占用空间小，顺序写入，减少页分裂。</p><h3 id="2-4-计算、函数、类型转换-自动或手动-导致索引失效"><a href="#2-4-计算、函数、类型转换-自动或手动-导致索引失效" class="headerlink" title="2.4 计算、函数、类型转换(自动或手动)导致索引失效"></a>2.4 计算、函数、类型转换(自动或手动)导致索引失效</h3><ol><li><p>这两条sql哪种写法更好</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE student.name LIKE &#39;abc%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE LEFT(student.name,3) &#x3D; &#39;abc&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建索引</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE INDEX idx_name ON student(NAME);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>第一种：索引优化生效</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE student.name LIKE &#39;abc%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT SQL_NO_CACHE * FROM student WHERE student.name LIKE &#39;abc%&#39;;+---------+---------+--------+------+---------+| id | stuno | name | age | classId |+---------+---------+--------+------+---------+| 5301379 | 1233401 | AbCHEa | 164 | 259 || 7170042 | 3102064 | ABcHeB | 199 | 161 || 1901614 | 1833636 | ABcHeC | 226 | 275 || 5195021 | 1127043 | abchEC | 486 | 72 || 4047089 | 3810031 | AbCHFd | 268 | 210 || 4917074 | 849096 | ABcHfD | 264 | 442 || 1540859 | 141979 | abchFF | 119 | 140 || 5121801 | 1053823 | AbCHFg | 412 | 327 || 2441254 | 2373276 | abchFJ | 170 | 362 || 7039146 | 2971168 | ABcHgI | 502 | 465 || 1636826 | 1580286 | ABcHgK | 71 | 262 || 374344 | 474345 | abchHL | 367 | 212 || 1596534 | 169191 | AbCHHl | 102 | 146 |...| 5266837 | 1198859 | abclXe | 292 | 298 || 8126968 | 4058990 | aBClxE | 316 | 150 || 4298305 | 399962 | AbCLXF | 72 | 423 || 5813628 | 1745650 | aBClxF | 356 | 323 || 6980448 | 2912470 | AbCLXF | 107 | 78 || 7881979 | 3814001 | AbCLXF | 89 | 497 || 4955576 | 887598 | ABcLxg | 121 | 385 || 3653460 | 3585482 | AbCLXJ | 130 | 174 || 1231990 | 1283439 | AbCLYH | 189 | 429 || 6110615 | 2042637 | ABcLyh | 157 | 40 |+---------+---------+--------+------+---------+401 rows in set, 1 warning (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>第二种：索引优化失效</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE LEFT(student.name,3) &#x3D; &#39;abc&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704214905412.png" alt="image-20220704214905412"></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT SQL_NO_CACHE * FROM student WHERE LEFT(student.name,3) &#x3D; &#39;abc&#39;;+---------+---------+--------+------+---------+| id | stuno | name | age | classId |+---------+---------+--------+------+---------+| 5301379 | 1233401 | AbCHEa | 164 | 259 || 7170042 | 3102064 | ABcHeB | 199 | 161 || 1901614 | 1833636 | ABcHeC | 226 | 275 || 5195021 | 1127043 | abchEC | 486 | 72 || 4047089 | 3810031 | AbCHFd | 268 | 210 || 4917074 | 849096 | ABcHfD | 264 | 442 || 1540859 | 141979 | abchFF | 119 | 140 || 5121801 | 1053823 | AbCHFg | 412 | 327 || 2441254 | 2373276 | abchFJ | 170 | 362 || 7039146 | 2971168 | ABcHgI | 502 | 465 || 1636826 | 1580286 | ABcHgK | 71 | 262 || 374344 | 474345 | abchHL | 367 | 212 || 1596534 | 169191 | AbCHHl | 102 | 146 |...| 5266837 | 1198859 | abclXe | 292 | 298 || 8126968 | 4058990 | aBClxE | 316 | 150 || 4298305 | 399962 | AbCLXF | 72 | 423 || 5813628 | 1745650 | aBClxF | 356 | 323 || 6980448 | 2912470 | AbCLXF | 107 | 78 || 7881979 | 3814001 | AbCLXF | 89 | 497 || 4955576 | 887598 | ABcLxg | 121 | 385 || 3653460 | 3585482 | AbCLXJ | 130 | 174 || 1231990 | 1283439 | AbCLYH | 189 | 429 || 6110615 | 2042637 | ABcLyh | 157 | 40 |+---------+---------+--------+------+---------+401 rows in set, 1 warning (3.62 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>type为“ALL”，表示没有使用到索引，查询时间为 3.62 秒，查询效率较之前低很多。</p></li></ol><p><strong>再举例：</strong></p><ul><li><p>student表的字段stuno上设置有索引</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE INDEX idx_sno ON student(stuno);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>索引优化失效：（假设：student表的字段stuno上设置有索引）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">EXPLAIN SELECT SQL_NO_CACHE id, stuno, NAME FROM student WHERE stuno+1 &#x3D; 900001;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>运行结果：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704215159768.png" alt="image-20220704215159768"></p><ul><li><p>索引优化生效：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">EXPLAIN SELECT SQL_NO_CACHE id, stuno, NAME FROM student WHERE stuno &#x3D; 900000;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><strong>再举例：</strong></p><ul><li><p>student表的字段name上设置有索引</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE INDEX idx_name ON student(NAME);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">EXPLAIN SELECT id, stuno, name FROM student WHERE SUBSTRING(name, 1,3)&#x3D;&#39;abc&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704215533871.png" alt="image-20220704215533871"></p></li><li><p>索引优化生效</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">EXPLAIN SELECT id, stuno, NAME FROM student WHERE NAME LIKE &#39;abc%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704215600507.png" alt="image-20220704215600507"></p></li></ul><h3 id="2-5-类型转换导致索引失效"><a href="#2-5-类型转换导致索引失效" class="headerlink" title="2.5 类型转换导致索引失效"></a>2.5 类型转换导致索引失效</h3><p>下列哪个sql语句可以用到索引。（假设name字段上设置有索引）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 未使用到索引EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE name&#x3D;123;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704215658526.png" alt="image-20220704215658526"></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 使用到索引EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE name&#x3D;&#39;123&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704215721216.png" alt="image-20220704215721216"></p><p>name&#x3D;123发生类型转换，索引失效。</p><h3 id="2-6-范围条件右边的列索引失效"><a href="#2-6-范围条件右边的列索引失效" class="headerlink" title="2.6 范围条件右边的列索引失效"></a>2.6 范围条件右边的列索引失效</h3><ol><li>系统经常出现的sql如下：</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE student DROP INDEX idx_name;ALTER TABLE student DROP INDEX idx_age;ALTER TABLE student DROP INDEX idx_age_classid;EXPLAIN SELECT SQL_NO_CACHE * FROM studentWHERE student.age&#x3D;30 AND student.classId&gt;20 AND student.name &#x3D; &#39;abc&#39; ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704220123647.png" alt="image-20220704220123647"></p><ol start="2"><li>那么索引 idx_age_classId_name 这个索引还能正常使用么？</li></ol><ul><li>不能，范围右边的列不能使用。比如：(&lt;) (&lt;&#x3D;) (&gt;) (&gt;&#x3D;) 和 between 等</li><li>如果这种sql出现较多，应该建立：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create index idx_age_name_classId on student(age,name,classId);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>将范围查询条件放置语句最后：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE student.age&#x3D;30 AND student.name &#x3D; &#39;abc&#39; AND student.classId&gt;20;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>应用开发中范围查询，例如：金额查询，日期查询往往都是范围查询。应将查询条件放置where语句最后。（创建的联合索引中，务必把范围涉及到的字段写在最后）</p></blockquote><ol start="3"><li>效果</li></ol><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704223211981.png" alt="image-20220704223211981"></p><h3 id="2-7-不等于-x3D-或者-lt-gt-索引失效"><a href="#2-7-不等于-x3D-或者-lt-gt-索引失效" class="headerlink" title="2.7 不等于(!&#x3D; 或者&lt;&gt;)索引失效"></a>2.7 不等于(!&#x3D; 或者&lt;&gt;)索引失效</h3><ul><li>为name字段创建索引</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE INDEX idx_name ON student(NAME);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看索引是否失效</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE student.name &lt;&gt; &#39;abc&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704224552374.png" alt="image-20220704224552374"></p><p>或者</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE student.name !&#x3D; &#39;abc&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704224916117.png" alt="image-20220704224916117"></p><p>场景举例：用户提出需求，将财务数据，产品利润金额不等于0的都统计出来。</p><h3 id="2-8-is-null可以使用索引，is-not-null无法使用索引"><a href="#2-8-is-null可以使用索引，is-not-null无法使用索引" class="headerlink" title="2.8 is null可以使用索引，is not null无法使用索引"></a>2.8 is null可以使用索引，is not null无法使用索引</h3><ul><li>IS NULL: 可以触发索引</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE age IS NULL;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>IS NOT NULL: 无法触发索引</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE age IS NOT NULL;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220704225333199.png" alt="image-20220704225333199"></p><blockquote><p>结论：最好在设计数据库的时候就将<code>字段设置为 NOT NULL 约束</code>，比如你可以将 INT 类型的字段，默认值设置为0。将字符类型的默认值设置为空字符串(‘’)。</p><p>扩展：同理，在查询中使用<code>not like</code>也无法使用索引，导致全表扫描。</p></blockquote><h3 id="2-9-like以通配符-开头索引失效"><a href="#2-9-like以通配符-开头索引失效" class="headerlink" title="2.9 like以通配符%开头索引失效"></a>2.9 like以通配符%开头索引失效</h3><p>在使用LIKE关键字进行查询的查询语句中，如果匹配字符串的第一个字符为’%’，索引就不会起作用。只有’%’不在第一个位置，索引才会起作用。</p><ul><li>使用到索引</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE name LIKE &#39;ab%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220705131643304.png" alt="image-20220705131643304"></p><ul><li>未使用到索引</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE name LIKE &#39;%ab%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220705131717329.png" alt="image-20220705131717329"></p><blockquote><p>拓展：Alibaba《Java开发手册》 </p><p>【强制】页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决。</p></blockquote><h3 id="2-10-OR-前后存在非索引的列，索引失效"><a href="#2-10-OR-前后存在非索引的列，索引失效" class="headerlink" title="2.10 OR 前后存在非索引的列，索引失效"></a>2.10 OR 前后存在非索引的列，索引失效</h3><p>在WHERE子句中，如果在OR前的条件列进行了索引，而在OR后的条件列没有进行索引，那么索引会失效。也就是说，<strong>OR前后的两个条件中的列都是索引时，查询中才使用索引。</strong></p><p>因为OR的含义就是两个只要满足一个即可，因此<code>只有一个条件列进行了索引是没有意义的</code>，只要有条件列没有进行索引，就会进行<code>全表扫描</code>，因此所以的条件列也会失效。</p><p>查询语句使用OR关键字的情况：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 未使用到索引EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE age &#x3D; 10 OR classid &#x3D; 100;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220705132221045.png" alt="image-20220705132221045"></p><p>因为classId字段上没有索引，所以上述查询语句没有使用索引。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#使用到索引EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE age &#x3D; 10 OR name &#x3D; &#39;Abel&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220705132239232.png" alt="image-20220705132239232"></p><p>因为age字段和name字段上都有索引，所以查询中使用了索引。你能看到这里使用到了<code>index_merge</code>，简单来说index_merge就是对age和name分别进行了扫描，然后将这两个结果集进行了合并。这样做的好处就是<code>避免了全表扫描</code>。</p><h3 id="2-11-数据库和表的字符集统一使用utf8mb4"><a href="#2-11-数据库和表的字符集统一使用utf8mb4" class="headerlink" title="2.11 数据库和表的字符集统一使用utf8mb4"></a>2.11 数据库和表的字符集统一使用utf8mb4</h3><p>统一使用utf8mb4( 5.5.3版本以上支持)兼容性更好，统一字符集可以避免由于字符集转换产生的乱码。不 同的 <code>字符集</code> 进行比较前需要进行 <code>转换</code> 会造成索引失效。</p><h3 id="2-12-练习及一般性建议"><a href="#2-12-练习及一般性建议" class="headerlink" title="2.12 练习及一般性建议"></a>2.12 练习及一般性建议</h3><p><strong>练习：</strong>假设：index(a,b,c)</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220705145225852.png" alt="image-20220705145225852"></p><p><strong>一般性建议</strong></p><ul><li>对于单列索引，尽量选择针对当前query过滤性更好的索引</li><li>在选择组合索引的时候，当前query中过滤性最好的字段在索引字段顺序中，位置越靠前越好。</li><li>在选择组合索引的时候，尽量选择能够当前query中where子句中更多的索引。</li><li>在选择组合索引的时候，如果某个字段可能出现范围查询时，尽量把这个字段放在索引次序的最后面。</li></ul><p><strong>总之，书写SQL语句时，尽量避免造成索引失效的情况</strong></p><h2 id="3-关联查询优化"><a href="#3-关联查询优化" class="headerlink" title="3. 关联查询优化"></a>3. 关联查询优化</h2><h3 id="3-1-数据准备-1"><a href="#3-1-数据准备-1" class="headerlink" title="3.1 数据准备"></a>3.1 数据准备</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 分类CREATE TABLE IF NOT EXISTS &#96;type&#96; (&#96;id&#96; INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,&#96;card&#96; INT(10) UNSIGNED NOT NULL,PRIMARY KEY (&#96;id&#96;));#图书CREATE TABLE IF NOT EXISTS &#96;book&#96; (&#96;bookid&#96; INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,&#96;card&#96; INT(10) UNSIGNED NOT NULL,PRIMARY KEY (&#96;bookid&#96;));#向分类表中添加20条记录INSERT INTO &#96;type&#96;(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO &#96;type&#96;(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO &#96;type&#96;(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO &#96;type&#96;(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO &#96;type&#96;(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO &#96;type&#96;(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO &#96;type&#96;(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO &#96;type&#96;(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO &#96;type&#96;(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO &#96;type&#96;(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO &#96;type&#96;(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO &#96;type&#96;(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO &#96;type&#96;(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO &#96;type&#96;(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO &#96;type&#96;(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO &#96;type&#96;(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO &#96;type&#96;(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO &#96;type&#96;(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO &#96;type&#96;(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO &#96;type&#96;(card) VALUES(FLOOR(1 + (RAND() * 20)));#向图书表中添加20条记录INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-采用左外连接"><a href="#3-2-采用左外连接" class="headerlink" title="3.2 采用左外连接"></a>3.2 采用左外连接</h3><p>下面开始 EXPLAIN 分析</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">EXPLAIN SELECT SQL_NO_CACHE * FROM &#96;type&#96; LEFT JOIN book ON type.card &#x3D; book.card;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220705160504018.png" alt="image-20220705160504018"></p><p>结论：type 有All</p><p>添加索引优化</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE book ADD INDEX Y ( card); #【被驱动表】，可以避免全表扫描EXPLAIN SELECT SQL_NO_CACHE * FROM &#96;type&#96; LEFT JOIN book ON type.card &#x3D; book.card;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220705160935109.png" alt="image-20220705160935109"></p><p>可以看到第二行的 type 变为了 ref，rows 也变成了优化比较明显。这是由左连接特性决定的。LEFT JOIN 条件用于确定如何从右表搜索行，左边一定都有，所以 <code>右边是我们的关键点,一定需要建立索引</code> 。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE &#96;type&#96; ADD INDEX X (card); #【驱动表】，无法避免全表扫描EXPLAIN SELECT SQL_NO_CACHE * FROM &#96;type&#96; LEFT JOIN book ON type.card &#x3D; book.card;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220705161243838.png" alt="image-20220705161243838"></p><p>接着：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DROP INDEX Y ON book;EXPLAIN SELECT SQL_NO_CACHE * FROM &#96;type&#96; LEFT JOIN book ON type.card &#x3D; book.card;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220705161515545.png" alt="image-20220705161515545"></p><h3 id="3-3-采用内连接"><a href="#3-3-采用内连接" class="headerlink" title="3.3 采用内连接"></a>3.3 采用内连接</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">drop index X on type;drop index Y on book;（如果已经删除了可以不用再执行该操作）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>换成 inner join（MySQL自动选择驱动表）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">EXPLAIN SELECT SQL_NO_CACHE * FROM type INNER JOIN book ON type.card&#x3D;book.card;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220705161602362.png" alt="image-20220705161602362"></p><p>添加索引优化</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE book ADD INDEX Y (card);EXPLAIN SELECT SQL_NO_CACHE * FROM type INNER JOIN book ON type.card&#x3D;book.card;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220705161746184.png" alt="image-20220705161746184"></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE type ADD INDEX X (card);EXPLAIN SELECT SQL_NO_CACHE * FROM type INNER JOIN book ON type.card&#x3D;book.card;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220705161843558.png" alt="image-20220705161843558"></p><p>对于内连接来说，查询优化器可以决定谁作为驱动表，谁作为被驱动表出现的</p><p>接着：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DROP INDEX X ON &#96;type&#96;;EXPLAIN SELECT SQL_NO_CACHE * FROM TYPE INNER JOIN book ON type.card&#x3D;book.card;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220705161929544.png" alt="image-20220705161929544"></p><p>接着：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE &#96;type&#96; ADD INDEX X (card);EXPLAIN SELECT SQL_NO_CACHE * FROM &#96;type&#96; INNER JOIN book ON type.card&#x3D;book.card;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220705162009145.png" alt="image-20220705162009145"></p><p>接着：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#向图书表中添加20条记录INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));ALTER TABLE book ADD INDEX Y (card);EXPLAIN SELECT SQL_NO_CACHE * FROM &#96;type&#96; INNER JOIN book ON &#96;type&#96;.card &#x3D; book.card;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220705163833445.png" alt="image-20220705163833445"></p><p>图中发现，由于type表数据大于book表数据，MySQL选择将type作为被驱动表。</p><h3 id="3-4-join语句原理"><a href="#3-4-join语句原理" class="headerlink" title="3.4 join语句原理"></a>3.4 join语句原理</h3><p>join方式连接多个表，本质就是各个表之间数据的循环匹配。MySQL5.5版本之前，MySQL只支持一种表间关联方式，就是嵌套循环(Nested Loop Join)。如果关联表的数据量很大，则join关联的执行时间会很长。在MySQL5.5以后的版本中，MySQL通过引入BNLJ算法来优化嵌套执行。</p><h4 id="1-驱动表和被驱动表"><a href="#1-驱动表和被驱动表" class="headerlink" title="1. 驱动表和被驱动表"></a>1. 驱动表和被驱动表</h4><p>驱动表就是主表，被驱动表就是从表、非驱动表。</p><ul><li>对于内连接来说：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM A JOIN B ON ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>A一定是驱动表吗？不一定，优化器会根据你查询语句做优化，决定先查哪张表。先查询的那张表就是驱动表，反之就是被驱动表。通过explain关键字可以查看。</p><ul><li>对于外连接来说：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM A LEFT JOIN B ON ...# 或SELECT * FROM B RIGHT JOIN A ON ... <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通常，大家会认为A就是驱动表，B就是被驱动表。但也未必。测试如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE a(f1 INT, f2 INT, INDEX(f1)) ENGINE&#x3D;INNODB;CREATE TABLE b(f1 INT, f2 INT) ENGINE&#x3D;INNODB;INSERT INTO a VALUES(1,1),(2,2),(3,3),(4,4),(5,5),(6,6);INSERT INTO b VALUES(3,3),(4,4),(5,5),(6,6),(7,7),(8,8);SELECT * FROM b;# 测试1EXPLAIN SELECT * FROM a LEFT JOIN b ON(a.f1&#x3D;b.f1) WHERE (a.f2&#x3D;b.f2);# 测试2EXPLAIN SELECT * FROM a LEFT JOIN b ON(a.f1&#x3D;b.f1) AND (a.f2&#x3D;b.f2);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Simple-Nested-Loop-Join-简单嵌套循环连接"><a href="#2-Simple-Nested-Loop-Join-简单嵌套循环连接" class="headerlink" title="2. Simple Nested-Loop Join (简单嵌套循环连接)"></a>2. Simple Nested-Loop Join (简单嵌套循环连接)</h4><p>算法相当简单，从表A中取出一条数据1，遍历表B，将匹配到的数据放到result.. 以此类推，驱动表A中的每一条记录与被驱动表B的记录进行判断：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220705165559127.png" alt="image-20220705165559127"></p><p>可以看到这种方式效率是非常低的，以上述表A数据100条，表B数据1000条计算，则A*B&#x3D;10万次。开销统计如下:</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220705165646252.png" alt="image-20220705165646252"></p><p>当然mysql肯定不会这么粗暴的去进行表的连接，所以就出现了后面的两种对Nested-Loop Join优化算法。</p><h4 id="3-Index-Nested-Loop-Join-（索引嵌套循环连接）"><a href="#3-Index-Nested-Loop-Join-（索引嵌套循环连接）" class="headerlink" title="3. Index Nested-Loop Join （索引嵌套循环连接）"></a>3. Index Nested-Loop Join （索引嵌套循环连接）</h4><p>Index Nested-Loop Join其优化的思路主要是为了<code>减少内存表数据的匹配次数</code>，所以要求被驱动表上必须<code>有索引</code>才行。通过外层表匹配条件直接与内层表索引进行匹配，避免和内存表的每条记录去进行比较，这样极大的减少了对内存表的匹配次数。</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220705172315554.png" alt="image-20220705172315554"></p><p>驱动表中的每条记录通过被驱动表的索引进行访问，因为索引查询的成本是比较固定的，故mysql优化器都倾向于使用记录数少的表作为驱动表（外表）。</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220705172650749.png" alt="image-20220705172650749"></p><p>如果被驱动表加索引，效率是非常高的，但如果索引不是主键索引，所以还得进行一次回表查询。相比，被驱动表的索引是主键索引，效率会更高。</p><h4 id="4-Block-Nested-Loop-Join（块嵌套循环连接）"><a href="#4-Block-Nested-Loop-Join（块嵌套循环连接）" class="headerlink" title="4. Block Nested-Loop Join（块嵌套循环连接）"></a>4. Block Nested-Loop Join（块嵌套循环连接）</h4><img src="../pic/MySQL索引及调优篇/image-20220705173047234.png" alt="image-20220705173047234" style="float:left;" /><blockquote><p>注意：</p><p>这里缓存的不只是关联表的列，select后面的列也会缓存起来。</p><p>在一个有N个join关联的sql中会分配N-1个join buffer。所以查询的时候尽量减少不必要的字段，可以让join buffer中可以存放更多的列。</p></blockquote><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220705174005280.png" alt="image-20220705174005280"></p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220705174250551.png" alt="image-20220705174250551"></p><p>参数设置：</p><ul><li>block_nested_loop</li></ul><p>通过<code>show variables like &#39;%optimizer_switch%</code> 查看 <code>block_nested_loop</code>状态。默认是开启的。</p><ul><li>join_buffer_size</li></ul><p>驱动表能不能一次加载完，要看join buffer能不能存储所有的数据，默认情况下<code>join_buffer_size=256k</code>。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show variables like &#39;%join_buffer%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>join_buffer_size的最大值在32位操作系统可以申请4G，而在64位操作系统下可以申请大于4G的Join Buffer空间（64位Windows除外，其大值会被截断为4GB并发出警告）。</p><h4 id="5-Join小结"><a href="#5-Join小结" class="headerlink" title="5. Join小结"></a>5. Join小结</h4><p>1、<strong>整体效率比较：INLJ &gt; BNLJ &gt; SNLJ</strong></p><p>2、永远用小结果集驱动大结果集（其本质就是减少外层循环的数据数量）（小的度量单位指的是表行数 * 每行大小）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select t1.b,t2.* from t1 straight_join t2 on (t1.b&#x3D;t2.b) where t2.id&lt;&#x3D;100; # 推荐select t1.b,t2.* from t2 straight_join t1 on (t1.b&#x3D;t2.b) where t2.id&lt;&#x3D;100; # 不推荐<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3、为被驱动表匹配的条件增加索引(减少内存表的循环匹配次数)</p><p>4、增大join buffer size的大小（一次索引的数据越多，那么内层包的扫描次数就越少）</p><p>5、减少驱动表不必要的字段查询（字段越少，join buffer所缓存的数据就越多）</p><h4 id="6-Hash-Join"><a href="#6-Hash-Join" class="headerlink" title="6. Hash Join"></a>6. Hash Join</h4><p><strong>从MySQL的8.0.20版本开始将废弃BNLJ，因为从MySQL8.0.18版本开始就加入了hash join默认都会使用hash join</strong></p><ul><li><p>Nested Loop:</p><p>对于被连接的数据子集较小的情况，Nested Loop是个较好的选择。</p></li><li><p>Hash Join是做<code>大数据集连接</code>时的常用方式，优化器使用两个表中较小（相对较小）的表利用Join Key在内存中建立<code>散列表</code>，然后扫描较大的表并探测散列表，找出与Hash表匹配的行。</p><ul><li>这种方式适合于较小的表完全可以放于内存中的情况，这样总成本就是访问两个表的成本之和。</li><li>在表很大的情况下并不能完全放入内存，这时优化器会将它分割成<code>若干不同的分区</code>，不能放入内存的部分就把该分区写入磁盘的临时段，此时要求有较大的临时段从而尽量提高I&#x2F;O的性能。</li><li>它能够很好的工作于没有索引的大表和并行查询的环境中，并提供最好的性能。大多数人都说它是Join的重型升降机。Hash Join只能应用于等值连接（如WHERE A.COL1 &#x3D; B.COL2），这是由Hash的特点决定的。</li></ul></li></ul><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220705205050280.png" alt="image-20220705205050280"></p><h3 id="3-5-小结"><a href="#3-5-小结" class="headerlink" title="3.5 小结"></a>3.5 小结</h3><ul><li>保证被驱动表的JOIN字段已经创建了索引 </li><li>需要JOIN 的字段，数据类型保持绝对一致。 </li><li>LEFT JOIN 时，选择小表作为驱动表， 大表作为被驱动表 。减少外层循环的次数。 </li><li>INNER JOIN 时，MySQL会自动将 小结果集的表选为驱动表 。选择相信MySQL优化策略。 </li><li>能够直接多表关联的尽量直接关联，不用子查询。(减少查询的趟数) </li><li>不建议使用子查询，建议将子查询SQL拆开结合程序多次查询，或使用 JOIN 来代替子查询。 </li><li>衍生表建不了索引</li></ul><h2 id="4-子查询优化"><a href="#4-子查询优化" class="headerlink" title="4. 子查询优化"></a>4. 子查询优化</h2><p>MySQL从4.1版本开始支持子查询，使用子查询可以进行SELECT语句的嵌套查询，即一个SELECT查询的结 果作为另一个SELECT语句的条件。 <code>子查询可以一次性完成很多逻辑上需要多个步骤才能完成的SQL操作</code> 。</p><p><strong>子查询是 MySQL 的一项重要的功能，可以帮助我们通过一个 SQL 语句实现比较复杂的查询。但是，子 查询的执行效率不高。</strong>原因：</p><p>① 执行子查询时，MySQL需要为内层查询语句的查询结果 建立一个临时表 ，然后外层查询语句从临时表 中查询记录。查询完毕后，再 撤销这些临时表 。这样会消耗过多的CPU和IO资源，产生大量的慢查询。</p><p>② 子查询的结果集存储的临时表，不论是内存临时表还是磁盘临时表都 不会存在索引 ，所以查询性能会 受到一定的影响。</p><p>③ 对于返回结果集比较大的子查询，其对查询性能的影响也就越大。</p><p><strong>在MySQL中，可以使用连接（JOIN）查询来替代子查询。</strong>连接查询 <code>不需要建立临时表</code> ，其 <code>速度比子查询</code> 要快 ，如果查询中使用索引的话，性能就会更好。</p><p>举例1：查询学生表中是班长的学生信息</p><ul><li>使用子查询</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 创建班级表中班长的索引CREATE INDEX idx_monitor ON class(monitor);EXPLAIN SELECT * FROM student stu1WHERE stu1.&#96;stuno&#96; IN (SELECT monitorFROM class cWHERE monitor IS NOT NULL)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>推荐使用多表查询</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">EXPLAIN SELECT stu1.* FROM student stu1 JOIN class cON stu1.&#96;stuno&#96; &#x3D; c.&#96;monitor&#96;WHERE c.&#96;monitor&#96; is NOT NULL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>举例2：取所有不为班长的同学</p><ul><li>不推荐</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">EXPLAIN SELECT SQL_NO_CACHE a.*FROM student aWHERE a.stuno NOT IN (SELECT monitor FROM class b    WHERE monitor IS NOT NULL);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220705210708343.png" alt="image-20220705210708343"></p><ul><li>推荐：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">EXPLAIN SELECT SQL_NO_CACHE a.*FROM student a LEFT OUTER JOIN class bON a.stuno &#x3D; b.monitorWHERE b.monitor IS NULL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220705210839437.png" alt="image-20220705210839437"></p><blockquote><p>结论：尽量不要使用NOT IN或者NOT EXISTS，用LEFT JOIN xxx ON xx WHERE xx IS NULL替代</p></blockquote><h2 id="5-排序优化"><a href="#5-排序优化" class="headerlink" title="5. 排序优化"></a>5. 排序优化</h2><h3 id="5-1-排序优化"><a href="#5-1-排序优化" class="headerlink" title="5.1 排序优化"></a>5.1 排序优化</h3><p><strong>问题</strong>：在 WHERE 条件字段上加索引，但是为什么在 ORDER BY 字段上还要加索引呢？</p><p><strong>回答：</strong></p><p>在MySQL中，支持两种排序方式，分别是 <code>FileSort</code> 和 <code>Index</code> 排序。</p><ul><li>Index 排序中，索引可以保证数据的有序性，不需要再进行排序，<code>效率更高</code>。</li><li>FileSort 排序则一般在 <code>内存中</code> 进行排序，占用<code>CPU较多</code>。如果待排结果较大，会产生临时文件 I&#x2F;O 到磁盘进行排序的情况，效率较低。</li></ul><p><strong>优化建议：</strong></p><ol><li>SQL 中，可以在 WHERE 子句和 ORDER BY 子句中使用索引，目的是在 WHERE 子句中 <code>避免全表扫描</code> ，在 ORDER BY 子句 <code>避免使用 FileSort 排序</code> 。当然，某些情况下全表扫描，或者 FileSort 排序不一定比索引慢。但总的来说，我们还是要避免，以提高查询效率。 </li><li>尽量使用 Index 完成 ORDER BY 排序。如果 WHERE 和 ORDER BY 后面是相同的列就使用单索引列； 如果不同就使用联合索引。 </li><li>无法使用 Index 时，需要对 FileSort 方式进行调优。</li></ol><h3 id="5-2-测试"><a href="#5-2-测试" class="headerlink" title="5.2 测试"></a>5.2 测试</h3><p>删除student表和class表中已创建的索引。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 方式1DROP INDEX idx_monitor ON class;DROP INDEX idx_cid ON student;DROP INDEX idx_age ON student;DROP INDEX idx_name ON student;DROP INDEX idx_age_name_classId ON student;DROP INDEX idx_age_classId_name ON student;# 方式2call proc_drop_index(&#39;atguigudb2&#39;,&#39;student&#39;;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下是否能使用到索引，<code>能否去掉using filesort</code></p><p><strong>过程一：</strong></p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220705215436102.png" alt="image-20220705215436102"></p><p><strong>过程二： order by 时不limit,索引失效</strong></p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220705215909350.png" alt="image-20220705215909350"></p><p><strong>过程三：order by 时顺序错误，索引失效</strong></p><img src="../pic/MySQL索引及调优篇/image-20220705220033520.png" alt="image-20220705220033520" style="zoom:80%;float:left" /><p><strong>过程四：order by 时规则不一致，索引失效（顺序错，不索引；方向反，不索引）</strong></p><img src="../pic/MySQL索引及调优篇/image-20220705220404802.png" alt="image-20220705220404802" style="zoom:80%;float:left" /><blockquote><p>结论：ORDER BY 子句，尽量使用 Index 方式排序，避免使用 FileSort 方式排序</p></blockquote><p><strong>过程五：无过滤，不索引</strong></p><img src="../pic/MySQL索引及调优篇/image-20220705221212879.png" alt="image-20220705221212879" style="zoom:80%;float:left" /><p><strong>小结</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INDEX a_b_c(a,b,c)order by 能使用索引最左前缀- ORDER BY a- ORDER BY a,b- ORDER BY a,b,c- ORDER BY a DESC,b DESC,c DESC如果WHERE使用索引的最左前缀定义为常量，则order by 能使用索引- WHERE a &#x3D; const ORDER BY b,c- WHERE a &#x3D; const AND b &#x3D; const ORDER BY c- WHERE a &#x3D; const ORDER BY b,c- WHERE a &#x3D; const AND b &gt; const ORDER BY b,c不能使用索引进行排序- ORDER BY a ASC,b DESC,c DESC &#x2F;* 排序不一致 *&#x2F;- WHERE g &#x3D; const ORDER BY b,c &#x2F;*丢失a索引*&#x2F;- WHERE a &#x3D; const ORDER BY c &#x2F;*丢失b索引*&#x2F;- WHERE a &#x3D; const ORDER BY a,d &#x2F;*d不是索引的一部分*&#x2F;- WHERE a in (...) ORDER BY b,c &#x2F;*对于排序来说，多个相等条件也是范围查询*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-案例实战"><a href="#5-3-案例实战" class="headerlink" title="5.3 案例实战"></a>5.3 案例实战</h3><p>ORDER BY子句，尽量使用Index方式排序，避免使用FileSort方式排序。 </p><p>执行案例前先清除student上的索引，只留主键：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DROP INDEX idx_age ON student;DROP INDEX idx_age_classid_stuno ON student;DROP INDEX idx_age_classid_name ON student;#或者call proc_drop_index(&#39;atguigudb2&#39;,&#39;student&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>场景:查询年龄为30岁的，且学生编号小于101000的学生，按用户名称排序</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE age &#x3D; 30 AND stuno &lt;101000 ORDER BY NAME ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220705222027812.png" alt="image-20220705222027812"></p><p>查询结果如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT SQL_NO_CACHE * FROM student WHERE age &#x3D; 30 AND stuno &lt;101000 ORDER BY NAME;+---------+--------+--------+------+---------+| id      | stuno  |  name  | age  | classId |+---------+--------+--------+------+---------+| 922     | 100923 | elTLXD | 30   | 249     || 3723263 | 100412 | hKcjLb | 30   | 59      || 3724152 | 100827 | iHLJmh | 30   | 387     || 3724030 | 100776 | LgxWoD | 30   | 253     || 30      | 100031 | LZMOIa | 30   | 97      || 3722887 | 100237 | QzbJdx | 30   | 440     || 609     | 100610 | vbRimN | 30   | 481     || 139     | 100140 | ZqFbuR | 30   | 351     |+---------+--------+--------+------+---------+8 rows in set, 1 warning (3.16 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结论：type 是 ALL，即最坏的情况。Extra 里还出现了 Using filesort,也是最坏的情况。优化是必须的。</p></blockquote><p><strong>方案一: 为了去掉filesort我们可以把索引建成</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#创建新索引CREATE INDEX idx_age_name ON student(age,NAME);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE age &#x3D; 30 AND stuno &lt;101000 ORDER BY NAME;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220705222912521.png" alt="image-20220705222912521"></p><p>这样我们优化掉了 using filesort</p><p>查询结果如下：</p><img src="../pic/MySQL索引及调优篇/image-20220705222954971.png" alt="image-20220705222954971" style="float:left;" /><p><strong>方案二：尽量让where的过滤条件和排序使用上索引</strong></p><p>建一个三个字段的组合索引：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DROP INDEX idx_age_name ON student;CREATE INDEX idx_age_stuno_name ON student (age,stuno,NAME);EXPLAIN SELECT SQL_NO_CACHE * FROM student WHERE age &#x3D; 30 AND stuno &lt;101000 ORDER BY NAME;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220705223111883.png" alt="image-20220705223111883"></p><p>我们发现using filesort依然存在，所以name并没有用到索引，而且type还是range光看名字其实并不美好。原因是，因为<code>stuno是一个范围过滤</code>，所以索引后面的字段不会在使用索引了 。</p><p>结果如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT SQL_NO_CACHE * FROM student-&gt; WHERE age &#x3D; 30 AND stuno &lt;101000 ORDER BY NAME ;+-----+--------+--------+------+---------+| id | stuno | name | age | classId |+-----+--------+--------+------+---------+| 167 | 100168 | AClxEF | 30 | 319 || 323 | 100324 | bwbTpQ | 30 | 654 || 651 | 100652 | DRwIac | 30 | 997 || 517 | 100518 | HNSYqJ | 30 | 256 || 344 | 100345 | JuepiX | 30 | 329 || 905 | 100906 | JuWALd | 30 | 892 || 574 | 100575 | kbyqjX | 30 | 260 || 703 | 100704 | KJbprS | 30 | 594 || 723 | 100724 | OTdJkY | 30 | 236 || 656 | 100657 | Pfgqmj | 30 | 600 || 982 | 100983 | qywLqw | 30 | 837 || 468 | 100469 | sLEKQW | 30 | 346 || 988 | 100989 | UBYqJl | 30 | 457 || 173 | 100174 | UltkTN | 30 | 830 || 332 | 100333 | YjWiZw | 30 | 824 |+-----+--------+--------+------+---------+15 rows in set, 1 warning (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果竟然有 filesort的 sql 运行速度， 超过了已经优化掉 filesort的 sql ，而且快了很多，几乎一瞬间就出现了结果。</p><p>原因：</p><img src="../pic/MySQL索引及调优篇/image-20220705223329164.png" alt="image-20220705223329164" style="zoom:80%;float:left" /><blockquote><p>结论：</p><ol><li>两个索引同时存在，mysql自动选择最优的方案。（对于这个例子，mysql选择 idx_age_stuno_name）。但是， <code>随着数据量的变化，选择的索引也会随之变化的 </code>。 </li><li><strong>当【范围条件】和【group by 或者 order by】的字段出现二选一时，优先观察条件字段的过 滤数量，如果过滤的数据足够多，而需要排序的数据并不多时，优先把索引放在范围字段上。反之，亦然。</strong></li></ol></blockquote><p>思考：这里我们使用如下索引，是否可行？</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DROP INDEX idx_age_stuno_name ON student;CREATE INDEX idx_age_stuno ON student(age,stuno);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当然可以。</p><h3 id="5-4-filesort算法：双路排序和单路排序"><a href="#5-4-filesort算法：双路排序和单路排序" class="headerlink" title="5.4 filesort算法：双路排序和单路排序"></a>5.4 filesort算法：双路排序和单路排序</h3><p>排序的字段若不在索引列上，则filesort会有两种算法：双路排序和单路排序</p><p><strong>双路排序 （慢）</strong></p><ul><li>MySQL 4.1之前是使用双路排序 ，字面意思就是两次扫描磁盘，最终得到数据， 读取行指针和 order by列 ，对他们进行排序，然后扫描已经排序好的列表，按照列表中的值重新从列表中读取对应的数据输出 </li><li>从磁盘取排序字段，在buffer进行排序，再从磁盘取其他字段 。</li></ul><p>取一批数据，要对磁盘进行两次扫描，众所周知，IO是很耗时的，所以在mysql4.1之后，出现了第二种 改进的算法，就是单路排序。</p><p><strong>单路排序 （快）</strong></p><p>从磁盘读取查询需要的 所有列 ，按照order by列在buffer对它们进行排序，然后扫描排序后的列表进行输出， 它的效率更快一些，避免了第二次读取数据。并且把随机IO变成了顺序IO，但是它会使用更多的空间， 因为它把每一行都保存在内存中了。</p><p><strong>结论及引申出的问题</strong></p><ul><li>由于单路是后出的，总体而言好过双路 </li><li>但是用单路有问题<ul><li>在sort_buffer中，单路要比多路多占用很多空间，因为单路是把所有字段都取出，所以有可能取出的数据的总大小超出了<code>sort_buffer</code>的容量，导致每次只能取<code>sort_buffer</code>容量大小的数据，进行排序（创建tmp文件，多路合并），排完再取sort_buffer容量大小，再排…从而多次I&#x2F;O。</li><li>单路本来想省一次I&#x2F;O操作，反而导致了大量的I&#x2F;O操作，反而得不偿失。</li></ul></li></ul><p><strong>优化策略</strong></p><p><strong>1. 尝试提高 sort_buffer_size</strong></p><img src="../pic/MySQL索引及调优篇/image-20220705224410340.png" alt="image-20220705224410340" style="zoom:80%;float:left" /><p><strong>2. 尝试提高 max_length_for_sort_data</strong></p><img src="../pic/MySQL索引及调优篇/image-20220705224505668.png" alt="image-20220705224505668" style="zoom:80%;float:left" /><p><strong>3. Order by 时select * 是一个大忌。最好只Query需要的字段。</strong></p><img src="../pic/MySQL索引及调优篇/image-20220705224551104.png" alt="image-20220705224551104" style="float:left;" /><h2 id="6-GROUP-BY优化"><a href="#6-GROUP-BY优化" class="headerlink" title="6. GROUP BY优化"></a>6. GROUP BY优化</h2><ul><li>group by 使用索引的原则几乎跟order by一致 ，group by 即使没有过滤条件用到索引，也可以直接使用索引。 </li><li>group by 先排序再分组，遵照索引建的最佳左前缀法则 </li><li>当无法使用索引列，增大 max_length_for_sort_data 和 sort_buffer_size 参数的设置 </li><li>where效率高于having，能写在where限定的条件就不要写在having中了 </li><li>减少使用order by，和业务沟通能不排序就不排序，或将排序放到程序端去做。Order by、group by、distinct这些语句较为耗费CPU，数据库的CPU资源是极其宝贵的。 </li><li>包含了order by、group by、distinct这些查询的语句，where条件过滤出来的结果集请保持在1000行 以内，否则SQL会很慢。</li></ul><h2 id="7-优化分页查询"><a href="#7-优化分页查询" class="headerlink" title="7. 优化分页查询"></a>7. 优化分页查询</h2><img src="../pic/MySQL索引及调优篇/image-20220705225329130.png" alt="image-20220705225329130" style="float:left;" /><p><strong>优化思路一</strong></p><p>在索引上完成排序分页操作，最后根据主键关联回原表查询所需要的其他列内容。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">EXPLAIN SELECT * FROM student t,(SELECT id FROM student ORDER BY id LIMIT 2000000,10) a WHERE t.id &#x3D; a.id;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220705225625166.png" alt="image-20220705225625166"></p><p><strong>优化思路二</strong></p><p>该方案适用于主键自增的表，可以把Limit 查询转换成某个位置的查询 。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">EXPLAIN SELECT * FROM student WHERE id &gt; 2000000 LIMIT 10;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220705225654124.png" alt="image-20220705225654124"></p><h2 id="8-优先考虑覆盖索引"><a href="#8-优先考虑覆盖索引" class="headerlink" title="8. 优先考虑覆盖索引"></a>8. 优先考虑覆盖索引</h2><h3 id="8-1-什么是覆盖索引？"><a href="#8-1-什么是覆盖索引？" class="headerlink" title="8.1 什么是覆盖索引？"></a>8.1 什么是覆盖索引？</h3><p><strong>理解方式一</strong>：索引是高效找到行的一个方法，但是一般数据库也能使用索引找到一个列的数据，因此它不必读取整个行。毕竟索引叶子节点存储了它们索引的数据；当能通过读取索引就可以得到想要的数据，那就不需要读取行了。<strong>一个索引包含了满足查询结果的数据就叫做覆盖索引</strong>。</p><p><strong>理解方式二</strong>：非聚簇复合索引的一种形式，它包括在查询里的SELECT、JOIN和WHERE子句用到的所有列 （即建索引的字段正好是覆盖查询条件中所涉及的字段）。</p><p>简单说就是， <code>索引列+主键</code> 包含 <code>SELECT 到 FROM之间查询的列</code> 。</p><p><strong>举例一：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 删除之前的索引DROP INDEX idx_age_stuno ON student;CREATE INDEX idx_age_name ON student(age, NAME);EXPLAIN SELECT * FROM student WHERE age &lt;&gt; 20;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220706124528680.png" alt="image-20220706124528680"></p><p><strong>举例二：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">EXPLAIN SELECT * FROM student WHERE NAME LIKE &#39;%abc&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220706124612180.png" alt="image-20220706124612180"></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE INDEX idx_age_name ON student(age, NAME);EXPLAIN SELECT id,age,NAME FROM student WHERE NAME LIKE &#39;%abc&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220706125113658.png" alt="image-20220706125113658"></p><p>上述都使用到了声明的索引，下面的情况则不然，查询列依然多了classId,结果是未使用到索引：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">EXPLAIN SELECT id,age,NAME,classId FROM student WHERE NAME LIKE &#39;%abc&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220706125351116.png" alt="image-20220706125351116"></p><h3 id="8-2-覆盖索引的利弊"><a href="#8-2-覆盖索引的利弊" class="headerlink" title="8.2 覆盖索引的利弊"></a>8.2 覆盖索引的利弊</h3><img src="../pic/MySQL索引及调优篇/image-20220706125943936.png" alt="image-20220706125943936" style="zoom:80%;float:left" /><h2 id="9-如何给字符串添加索引"><a href="#9-如何给字符串添加索引" class="headerlink" title="9. 如何给字符串添加索引"></a>9. 如何给字符串添加索引</h2><p>有一张教师表，表定义如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table teacher(ID bigint unsigned primary key,email varchar(64),...)engine&#x3D;innodb;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>讲师要使用邮箱登录，所以业务代码中一定会出现类似于这样的语句：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select col1, col2 from teacher where email&#x3D;&#39;xxx&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果email这个字段上没有索引，那么这个语句就只能做 <code>全表扫描</code> 。</p><h3 id="9-1-前缀索引"><a href="#9-1-前缀索引" class="headerlink" title="9.1 前缀索引"></a>9.1 前缀索引</h3><p>MySQL是支持前缀索引的。默认地，如果你创建索引的语句不指定前缀长度，那么索引就会包含整个字 符串。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; alter table teacher add index index1(email);#或mysql&gt; alter table teacher add index index2(email(6));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这两种不同的定义在数据结构和存储上有什么区别呢？下图就是这两个索引的示意图。</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220706130901307.png" alt="image-20220706130901307"></p><p>以及</p><img src="../pic/MySQL索引及调优篇/image-20220706130921934.png" alt="image-20220706130921934" style="zoom:70%;" /><p><strong>如果使用的是index1</strong>（即email整个字符串的索引结构），执行顺序是这样的：</p><ol><li>从index1索引树找到满足索引值是’ <a href="mailto:&#x7a;&#104;&#97;&#110;&#x67;&#115;&#x73;&#x78;&#121;&#122;&#x40;&#x78;&#120;&#x78;&#x2e;&#99;&#111;&#109;">&#x7a;&#104;&#97;&#110;&#x67;&#115;&#x73;&#x78;&#121;&#122;&#x40;&#x78;&#120;&#x78;&#x2e;&#99;&#111;&#109;</a>’的这条记录，取得ID2的值； </li><li>到主键上查到主键值是ID2的行，判断email的值是正确的，将这行记录加入结果集； </li><li>取index1索引树上刚刚查到的位置的下一条记录，发现已经不满足email&#x3D;’ <a href="mailto:&#122;&#x68;&#x61;&#x6e;&#x67;&#x73;&#x73;&#120;&#121;&#x7a;&#x40;&#x78;&#x78;&#120;&#46;&#99;&#111;&#109;">&#122;&#x68;&#x61;&#x6e;&#x67;&#x73;&#x73;&#120;&#121;&#x7a;&#x40;&#x78;&#x78;&#120;&#46;&#99;&#111;&#109;</a> ’的 条件了，循环结束。</li></ol><p>这个过程中，只需要回主键索引取一次数据，所以系统认为只扫描了一行。</p><p><strong>如果使用的是index2</strong>（即email(6)索引结构），执行顺序是这样的：</p><ol><li>从index2索引树找到满足索引值是’zhangs’的记录，找到的第一个是ID1； </li><li>到主键上查到主键值是ID1的行，判断出email的值不是’ <a href="mailto:&#122;&#104;&#97;&#x6e;&#x67;&#x73;&#115;&#x78;&#121;&#x7a;&#64;&#120;&#x78;&#120;&#x2e;&#x63;&#111;&#109;">&#122;&#104;&#97;&#x6e;&#x67;&#x73;&#115;&#x78;&#121;&#x7a;&#64;&#120;&#x78;&#120;&#x2e;&#x63;&#111;&#109;</a> ’，这行记录丢弃； </li><li>取index2上刚刚查到的位置的下一条记录，发现仍然是’zhangs’，取出ID2，再到ID索引上取整行然 后判断，这次值对了，将这行记录加入结果集； </li><li>重复上一步，直到在idxe2上取到的值不是’zhangs’时，循环结束。</li></ol><p>也就是说<strong>使用前缀索引，定义好长度，就可以做到既节省空间，又不用额外增加太多的查询成本。</strong>前面 已经讲过区分度，区分度越高越好。因为区分度越高，意味着重复的键值越少。</p><h3 id="9-2-前缀索引对覆盖索引的影响"><a href="#9-2-前缀索引对覆盖索引的影响" class="headerlink" title="9.2 前缀索引对覆盖索引的影响"></a>9.2 前缀索引对覆盖索引的影响</h3><blockquote><p>结论： 使用前缀索引就用不上覆盖索引对查询性能的优化了，这也是你在选择是否使用前缀索引时需要考虑的一个因素。</p></blockquote><h2 id="10-索引下推"><a href="#10-索引下推" class="headerlink" title="10. 索引下推"></a>10. 索引下推</h2><h3 id="10-1-使用前后对比"><a href="#10-1-使用前后对比" class="headerlink" title="10.1 使用前后对比"></a>10.1 使用前后对比</h3><p>Index Condition Pushdown(ICP)是MySQL 5.6中新特性，是一种在存储引擎层使用索引过滤数据的一种优化方式。</p><img src="../pic/MySQL索引及调优篇/image-20220706131320477.png" alt="image-20220706131320477" style="zoom:80%;float:left" /><h3 id="10-2-ICP的开启-x2F-关闭"><a href="#10-2-ICP的开启-x2F-关闭" class="headerlink" title="10.2 ICP的开启&#x2F;关闭"></a>10.2 ICP的开启&#x2F;关闭</h3><ul><li>默认情况下启动索引条件下推。可以通过设置系统变量<code>optimizer_switch</code>控制：<code>index_condition_pushdown</code></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 打开索引下推SET optimizer_switch &#x3D; &#39;index_condition_pushdown&#x3D;on&#39;;# 关闭索引下推SET optimizer_switch &#x3D; &#39;index_condition_pushdown&#x3D;off&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当使用索引条件下推是，<code>EXPLAIN</code>语句输出结果中<code>Extra</code>列内容显示为<code>Using index condition</code>。</li></ul><h3 id="10-3-ICP使用案例"><a href="#10-3-ICP使用案例" class="headerlink" title="10.3 ICP使用案例"></a>10.3 ICP使用案例</h3><img src="../pic/MySQL索引及调优篇/image-20220706135436316.png" alt="image-20220706135436316" style="zoom:80%;float:left" /><img src="../pic/MySQL索引及调优篇/image-20220706135506409.png" alt="image-20220706135506409" style="zoom:80%;float:left" /><ul><li>主键索引 (简图)</li></ul><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220706135633814.png" alt="image-20220706135633814"></p><p>二级索引zip_last_first (简图，这里省略了数据页等信息)</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220706135701187.png" alt="image-20220706135701187"></p><img src="../pic/MySQL索引及调优篇/image-20220706135723203.png" alt="image-20220706135723203" style="zoom:80%;float:left" /><h3 id="10-4-开启和关闭ICP性能对比"><a href="#10-4-开启和关闭ICP性能对比" class="headerlink" title="10.4 开启和关闭ICP性能对比"></a>10.4 开启和关闭ICP性能对比</h3><img src="../pic/MySQL索引及调优篇/image-20220706135904713.png" alt="image-20220706135904713" style="zoom:80%;float:left" /><img src="../pic/MySQL索引及调优篇/image-20220706140213382.png" alt="image-20220706140213382" style="zoom:80%;float:left" /><h3 id="10-5-ICP的使用条件"><a href="#10-5-ICP的使用条件" class="headerlink" title="10.5 ICP的使用条件"></a>10.5 ICP的使用条件</h3><ol><li>如果表的访问类型为 range 、 ref 、 eq_ref 或者 ref_or_null 可以使用ICP。</li><li>ICP可以使用<code>InnDB</code>和<code>MyISAM</code>表，包括分区表<code>InnoDB</code>和<code>MyISAM</code>表</li><li>对于<code>InnoDB</code>表，ICP仅用于<code>二级索引</code>。ICP的目标是减少全行读取次数，从而减少I&#x2F;O操作。</li><li>当SQL使用覆盖索引时，不支持ICP优化方法。因为这种情况下使用ICP不会减少I&#x2F;O。</li><li>相关子查询的条件不能使用ICP</li></ol><h2 id="11-普通索引-vs-唯一索引"><a href="#11-普通索引-vs-唯一索引" class="headerlink" title="11. 普通索引 vs 唯一索引"></a>11. 普通索引 vs 唯一索引</h2><p>从性能的角度考虑，你选择唯一索引还是普通索引呢？选择的依据是什么呢？</p><p>假设，我们有一个主键列为ID的表，表中有字段k，并且在k上有索引，假设字段 k 上的值都不重复。</p><p>这个表的建表语句是：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; create table test(id int primary key,k int not null,name varchar(16),index (k))engine&#x3D;InnoDB;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表中R1~R5的(ID,k)值分别为(100,1)、(200,2)、(300,3)、(500,5)和(600,6)。</p><h3 id="11-1-查询过程"><a href="#11-1-查询过程" class="headerlink" title="11.1 查询过程"></a>11.1 查询过程</h3><p>假设，执行查询的语句是 select id from test where k&#x3D;5。</p><ul><li>对于普通索引来说，查找到满足条件的第一个记录(5,500)后，需要查找下一个记录，直到碰到第一 个不满足k&#x3D;5条件的记录。 </li><li>对于唯一索引来说，由于索引定义了唯一性，查找到第一个满足条件的记录后，就会停止继续检 索。</li></ul><p>那么，这个不同带来的性能差距会有多少呢？答案是， 微乎其微 。</p><h3 id="11-2-更新过程"><a href="#11-2-更新过程" class="headerlink" title="11.2 更新过程"></a>11.2 更新过程</h3><p>为了说明普通索引和唯一索引对更新语句性能的影响这个问题，介绍一下change buffer。</p><p>当需要更新一个数据页时，如果数据页在内存中就直接更新，而如果这个数据页还没有在内存中的话， 在不影响数据一致性的前提下， <code>InooDB会将这些更新操作缓存在change buffer中</code> ，这样就不需要从磁盘中读入这个数据页了。在下次查询需要访问这个数据页的时候，将数据页读入内存，然后执行change buffer中与这个页有关的操作。通过这种方式就能保证这个数据逻辑的正确性。</p><p>将change buffer中的操作应用到原数据页，得到最新结果的过程称为 merge 。除了 <code>访问这个数据页</code> 会触 发merge外，系统有 <code>后台线程会定期</code> merge。在 <code>数据库正常关闭（shutdown）</code> 的过程中，也会执行merge 操作。</p><p>如果能够将更新操作先记录在change buffer， <code>减少读磁盘</code> ，语句的执行速度会得到明显的提升。而且， 数据读入内存是需要占用 buffer pool 的，所以这种方式还能够 <code>避免占用内存 </code>，提高内存利用率。</p><p><code>唯一索引的更新就不能使用change buffer</code> ，实际上也只有普通索引可以使用。</p><p>如果要在这张表中插入一个新记录(4,400)的话，InnoDB的处理流程是怎样的？</p><h3 id="11-3-change-buffer的使用场景"><a href="#11-3-change-buffer的使用场景" class="headerlink" title="11.3 change buffer的使用场景"></a>11.3 change buffer的使用场景</h3><ol><li>普通索引和唯一索引应该怎么选择？其实，这两类索引在查询能力上是没差别的，主要考虑的是 对 更新性能 的影响。所以，建议你 尽量选择普通索引 。 </li><li>在实际使用中会发现， 普通索引 和 change buffer 的配合使用，对于 数据量大 的表的更新优化 还是很明显的。 </li><li>如果所有的更新后面，都马上 伴随着对这个记录的查询 ，那么你应该 关闭change buffer 。而在 其他情况下，change buffer都能提升更新性能。 </li><li>由于唯一索引用不上change buffer的优化机制，因此如果 业务可以接受 ，从性能角度出发建议优 先考虑非唯一索引。但是如果”业务可能无法确保”的情况下，怎么处理呢？ <ul><li>首先， 业务正确性优先 。我们的前提是“业务代码已经保证不会写入重复数据”的情况下，讨论性能 问题。如果业务不能保证，或者业务就是要求数据库来做约束，那么没得选，必须创建唯一索引。 这种情况下，本节的意义在于，如果碰上了大量插入数据慢、内存命中率低的时候，给你多提供一 个排查思路。 </li><li>然后，在一些“ 归档库 ”的场景，你是可以考虑使用唯一索引的。比如，线上数据只需要保留半年， 然后历史数据保存在归档库。这时候，归档数据已经是确保没有唯一键冲突了。要提高归档效率， 可以考虑把表里面的唯一索引改成普通索引。</li></ul></li></ol><h2 id="12-其它查询优化策略"><a href="#12-其它查询优化策略" class="headerlink" title="12. 其它查询优化策略"></a>12. 其它查询优化策略</h2><h3 id="12-1-EXISTS-和-IN-的区分"><a href="#12-1-EXISTS-和-IN-的区分" class="headerlink" title="12.1 EXISTS 和 IN 的区分"></a>12.1 EXISTS 和 IN 的区分</h3><p><strong>问题：</strong></p><p>不太理解哪种情况下应该使用 EXISTS，哪种情况应该用 IN。选择的标准是看能否使用表的索引吗？</p><p><strong>回答：</strong></p><img src="../pic/MySQL索引及调优篇/image-20220706141957185.png" alt="image-20220706141957185" style="zoom:80%;float:left" /><h3 id="12-2-COUNT-与COUNT-具体字段-效率"><a href="#12-2-COUNT-与COUNT-具体字段-效率" class="headerlink" title="12.2 COUNT(*)与COUNT(具体字段)效率"></a>12.2 COUNT(*)与COUNT(具体字段)效率</h3><p>问：在 MySQL 中统计数据表的行数，可以使用三种方式： SELECT COUNT(*) 、 SELECT COUNT(1) 和 SELECT COUNT(具体字段) ，使用这三者之间的查询效率是怎样的？</p><p>答：</p><img src="../pic/MySQL索引及调优篇/image-20220706142648452.png" alt="image-20220706142648452" style="zoom:80%;float:left" /><h3 id="12-3-关于SELECT"><a href="#12-3-关于SELECT" class="headerlink" title="12.3 关于SELECT(*)"></a>12.3 关于SELECT(*)</h3><p>在表查询中，建议明确字段，不要使用 * 作为查询的字段列表，推荐使用SELECT &lt;字段列表&gt; 查询。原因： </p><p>① MySQL 在解析的过程中，会通过查询数据字典 将”*”按序转换成所有列名，这会大大的耗费资源和时间。 </p><p>② 无法使用 覆盖索引</p><h3 id="12-4-LIMIT-1-对优化的影响"><a href="#12-4-LIMIT-1-对优化的影响" class="headerlink" title="12.4 LIMIT 1 对优化的影响"></a>12.4 LIMIT 1 对优化的影响</h3><p>针对的是会扫描全表的 SQL 语句，如果你可以确定结果集只有一条，那么加上 LIMIT 1 的时候，当找到一条结果的时候就不会继续扫描了，这样会加快查询速度。</p><p> 如果数据表已经对字段建立了唯一索引，那么可以通过索引进行查询，不会全表扫描的话，就不需要加上 LIMIT 1 了。</p><h3 id="12-5-多使用COMMIT"><a href="#12-5-多使用COMMIT" class="headerlink" title="12.5 多使用COMMIT"></a>12.5 多使用COMMIT</h3><p>只要有可能，在程序中尽量多使用 COMMIT，这样程序的性能得到提高，需求也会因为 COMMIT 所释放 的资源而减少。</p><p>COMMIT 所释放的资源： </p><ul><li>回滚段上用于恢复数据的信息 </li><li>被程序语句获得的锁 </li><li>redo &#x2F; undo log buffer 中的空间 </li><li>管理上述 3 种资源中的内部花费</li></ul><h2 id="13-淘宝数据库，主键如何设计的？"><a href="#13-淘宝数据库，主键如何设计的？" class="headerlink" title="13. 淘宝数据库，主键如何设计的？"></a>13. 淘宝数据库，主键如何设计的？</h2><p>聊一个实际问题：淘宝的数据库，主键是如何设计的？</p><p>某些错的离谱的答案还在网上年复一年的流传着，甚至还成为了所谓的MySQL军规。其中，一个最明显的错误就是关于MySQL的主键设计。</p><p>大部分人的回答如此自信：用8字节的 BIGINT 做主键，而不要用INT。 <code>错 </code>！</p><p>这样的回答，只站在了数据库这一层，而没有 <code>从业务的角度</code> 思考主键。主键就是一个自增ID吗？站在 2022年的新年档口，用自增做主键，架构设计上可能 <code>连及格都拿不到</code> 。</p><h3 id="13-1-自增ID的问题"><a href="#13-1-自增ID的问题" class="headerlink" title="13.1 自增ID的问题"></a>13.1 自增ID的问题</h3><p>自增ID做主键，简单易懂，几乎所有数据库都支持自增类型，只是实现上各自有所不同而已。自增ID除 了简单，其他都是缺点，总体来看存在以下几方面的问题：</p><ol><li><p><strong>可靠性不高</strong></p><p>存在自增ID回溯的问题，这个问题直到最新版本的MySQL 8.0才修复。 </p></li><li><p>**安全性不高 **</p><p>对外暴露的接口可以非常容易猜测对应的信息。比如：&#x2F;User&#x2F;1&#x2F;这样的接口，可以非常容易猜测用户ID的 值为多少，总用户数量有多少，也可以非常容易地通过接口进行数据的爬取。 </p></li><li><p><strong>性能差</strong> </p><p>自增ID的性能较差，需要在数据库服务器端生成。 </p></li><li><p><strong>交互多</strong> </p><p>业务还需要额外执行一次类似 last_insert_id() 的函数才能知道刚才插入的自增值，这需要多一次的 网络交互。在海量并发的系统中，多1条SQL，就多一次性能上的开销。 </p></li><li><p>**局部唯一性 **</p><p>最重要的一点，自增ID是局部唯一，只在当前数据库实例中唯一，而不是全局唯一，在任意服务器间都 是唯一的。对于目前分布式系统来说，这简直就是噩梦。</p></li></ol><h3 id="13-2-业务字段做主键"><a href="#13-2-业务字段做主键" class="headerlink" title="13.2 业务字段做主键"></a>13.2 业务字段做主键</h3><p>为了能够唯一地标识一个会员的信息，需要为 会员信息表 设置一个主键。那么，怎么为这个表设置主 键，才能达到我们理想的目标呢？ 这里我们考虑业务字段做主键。</p><p>表数据如下：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220706151506580.png" alt="image-20220706151506580"></p><p>在这个表里，哪个字段比较合适呢？</p><ul><li><strong>选择卡号（cardno）</strong></li></ul><p>会员卡号（cardno）看起来比较合适，因为会员卡号不能为空，而且有唯一性，可以用来 标识一条会员 记录。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; CREATE TABLE demo.membermaster-&gt; (-&gt; cardno CHAR(8) PRIMARY KEY, -- 会员卡号为主键-&gt; membername TEXT,-&gt; memberphone TEXT,-&gt; memberpid TEXT,-&gt; memberaddress TEXT,-&gt; sex TEXT,-&gt; birthday DATETIME-&gt; );Query OK, 0 rows affected (0.06 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不同的会员卡号对应不同的会员，字段“cardno”唯一地标识某一个会员。如果都是这样，会员卡号与会 员一一对应，系统是可以正常运行的。</p><p>但实际情况是， 会员卡号可能存在重复使用 的情况。比如，张三因为工作变动搬离了原来的地址，不再 到商家的门店消费了 （退还了会员卡），于是张三就不再是这个商家门店的会员了。但是，商家不想让 这个会 员卡空着，就把卡号是“10000001”的会员卡发给了王五。</p><p>从系统设计的角度看，这个变化只是修改了会员信息表中的卡号是“10000001”这个会员 信息，并不会影 响到数据一致性。也就是说，修改会员卡号是“10000001”的会员信息， 系统的各个模块，都会获取到修 改后的会员信息，不会出现“有的模块获取到修改之前的会员信息，有的模块获取到修改后的会员信息， 而导致系统内部数据不一致”的情况。因此，从 信息系统层面 上看是没问题的。</p><p>但是从使用 系统的业务层面 来看，就有很大的问题 了，会对商家造成影响。</p><p>比如，我们有一个销售流水表（trans），记录了所有的销售流水明细。2020 年 12 月 01 日，张三在门店 购买了一本书，消费了 89 元。那么，系统中就有了张三买书的流水记录，如下所示：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220706151715106.png" alt="image-20220706151715106"></p><p>接着，我们查询一下 2020 年 12 月 01 日的会员销售记录：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT b.membername,c.goodsname,a.quantity,a.salesvalue,a.transdate-&gt; FROM demo.trans AS a-&gt; JOIN demo.membermaster AS b-&gt; JOIN demo.goodsmaster AS c-&gt; ON (a.cardno &#x3D; b.cardno AND a.itemnumber&#x3D;c.itemnumber);+------------+-----------+----------+------------+---------------------+| membername | goodsname | quantity | salesvalue | transdate |+------------+-----------+----------+------------+---------------------+|     张三   | 书         | 1.000    | 89.00      | 2020-12-01 00:00:00 |+------------+-----------+----------+------------+---------------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果会员卡“10000001”又发给了王五，我们会更改会员信息表。导致查询时：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT b.membername,c.goodsname,a.quantity,a.salesvalue,a.transdate-&gt; FROM demo.trans AS a-&gt; JOIN demo.membermaster AS b-&gt; JOIN demo.goodsmaster AS c-&gt; ON (a.cardno &#x3D; b.cardno AND a.itemnumber&#x3D;c.itemnumber);+------------+-----------+----------+------------+---------------------+| membername | goodsname | quantity | salesvalue | transdate |+------------+-----------+----------+------------+---------------------+| 王五        | 书        | 1.000    | 89.00      | 2020-12-01 00:00:00 |+------------+-----------+----------+------------+---------------------+1 row in set (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这次得到的结果是：王五在 2020 年 12 月 01 日，买了一本书，消费 89 元。显然是错误的！结论：千万 不能把会员卡号当做主键。</p><ul><li><strong>选择会员电话 或 身份证号</strong></li></ul><p>会员电话可以做主键吗？不行的。在实际操作中，手机号也存在 被运营商收回 ，重新发给别人用的情况。</p><p>那身份证号行不行呢？好像可以。因为身份证决不会重复，身份证号与一个人存在一一对 应的关系。可 问题是，身份证号属于 个人隐私 ，顾客不一定愿意给你。要是强制要求会员必须登记身份证号，会把很 多客人赶跑的。其实，客户电话也有这个问题，这也是我们在设计会员信息表的时候，允许身份证号和 电话都为空的原因。</p><p><strong>所以，建议尽量不要用跟业务有关的字段做主键。毕竟，作为项目设计的技术人员，我们谁也无法预测 在项目的整个生命周期中，哪个业务字段会因为项目的业务需求而有重复，或者重用之类的情况出现。</strong></p><blockquote><p>经验： 刚开始使用 MySQL 时，很多人都很容易犯的错误是喜欢用业务字段做主键，想当然地认为了解业 务需求，但实际情况往往出乎意料，而更改主键设置的成本非常高。</p></blockquote><h3 id="13-3-淘宝的主键设计"><a href="#13-3-淘宝的主键设计" class="headerlink" title="13.3 淘宝的主键设计"></a>13.3 淘宝的主键设计</h3><p>在淘宝的电商业务中，订单服务是一个核心业务。请问， 订单表的主键 淘宝是如何设计的呢？是自增ID 吗？</p><p>打开淘宝，看一下订单信息：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220706161436920.png" alt="image-20220706161436920"></p><p>从上图可以发现，订单号不是自增ID！我们详细看下上述4个订单号：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">1550672064762308113148119584718030811314311561711423081131431146631521308113<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>订单号是19位的长度，且订单的最后5位都是一样的，都是08113。且订单号的前面14位部分是单调递增的。</p><p>大胆猜测，淘宝的订单ID设计应该是：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">订单ID &#x3D; 时间 + 去重字段 + 用户ID后6位尾号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样的设计能做到全局唯一，且对分布式系统查询及其友好。</p><h3 id="13-4-推荐的主键设计"><a href="#13-4-推荐的主键设计" class="headerlink" title="13.4 推荐的主键设计"></a>13.4 推荐的主键设计</h3><p><strong>非核心业务</strong> ：对应表的主键自增ID，如告警、日志、监控等信息。</p><p><strong>核心业务</strong> ：<code>主键设计至少应该是全局唯一且是单调递增</code>。全局唯一保证在各系统之间都是唯一的，单调 递增是希望插入时不影响数据库性能。</p><p>这里推荐最简单的一种主键设计：UUID。</p><p><strong>UUID的特点：</strong></p><p>全局唯一，占用36字节，数据无序，插入性能差。</p><p><strong>认识UUID：</strong></p><ul><li>为什么UUID是全局唯一的？ </li><li>为什么UUID占用36个字节？ </li><li>为什么UUID是无序的？</li></ul><p>MySQL数据库的UUID组成如下所示：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">UUID &#x3D; 时间+UUID版本（16字节）- 时钟序列（4字节） - MAC地址（12字节）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们以UUID值e0ea12d4-6473-11eb-943c-00155dbaa39d举例：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220706162131362.png" alt="image-20220706162131362"></p><p><code>为什么UUID是全局唯一的？</code></p><p>在UUID中时间部分占用60位，存储的类似TIMESTAMP的时间戳，但表示的是从1582-10-15 00：00：00.00 到现在的100ns的计数。可以看到UUID存储的时间精度比TIMESTAMPE更高，时间维度发生重复的概率降 低到1&#x2F;100ns。</p><p>时钟序列是为了避免时钟被回拨导致产生时间重复的可能性。MAC地址用于全局唯一。</p><p><code>为什么UUID占用36个字节？</code></p><p>UUID根据字符串进行存储，设计时还带有无用”-“字符串，因此总共需要36个字节。</p><p><code>为什么UUID是随机无序的呢？</code></p><p>因为UUID的设计中，将时间低位放在最前面，而这部分的数据是一直在变化的，并且是无序。</p><p><strong>改造UUID</strong></p><p>若将时间高低位互换，则时间就是单调递增的了，也就变得单调递增了。MySQL 8.0可以更换时间低位和时间高位的存储方式，这样UUID就是有序的UUID了。</p><p>MySQL 8.0还解决了UUID存在的空间占用的问题，除去了UUID字符串中无意义的”-“字符串，并且将字符串用二进制类型保存，这样存储空间降低为了16字节。</p><p>可以通过MySQL8.0提供的uuid_to_bin函数实现上述功能，同样的，MySQL也提供了bin_to_uuid函数进行转化：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SET @uuid &#x3D; UUID();SELECT @uuid,uuid_to_bin(@uuid),uuid_to_bin(@uuid,TRUE);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220706162657448.png" alt="image-20220706162657448"></p><p><strong>通过函数uuid_to_bin(@uuid,true)将UUID转化为有序UUID了</strong>。全局唯一 + 单调递增，这不就是我们想要的主键！</p><p><strong>有序UUID性能测试</strong></p><p>16字节的有序UUID，相比之前8字节的自增ID，性能和存储空间对比究竟如何呢？</p><p>我们来做一个测试，插入1亿条数据，每条数据占用500字节，含有3个二级索引，最终的结果如下所示：</p><img src="../pic/MySQL索引及调优篇/image-20220706162947613.png" alt="image-20220706162947613" style="zoom:67%;" /><p>从上图可以看到插入1亿条数据有序UUID是最快的，而且在实际业务使用中有序UUID在 <code>业务端就可以生成</code> 。还可以进一步减少SQL的交互次数。</p><p>另外，虽然有序UUID相比自增ID多了8个字节，但实际只增大了3G的存储空间，还可以接受。</p><blockquote><p>在当今的互联网环境中，非常不推荐自增ID作为主键的数据库设计。更推荐类似有序UUID的全局 唯一的实现。 </p><p>另外在真实的业务系统中，主键还可以加入业务和系统属性，如用户的尾号，机房的信息等。这样 的主键设计就更为考验架构师的水平了。</p></blockquote><p><strong>如果不是MySQL8.0 肿么办？</strong></p><p>手动赋值字段做主键！</p><p>比如，设计各个分店的会员表的主键，因为如果每台机器各自产生的数据需要合并，就可能会出现主键重复的问题。</p><p>可以在总部 MySQL 数据库中，有一个管理信息表，在这个表中添加一个字段，专门用来记录当前会员编号的最大值。</p><p>门店在添加会员的时候，先到总部 MySQL 数据库中获取这个最大值，在这个基础上加 1，然后用这个值 作为新会员的“id”，同时，更新总部 MySQL 数据库管理信息表中的当前会员编号的最大值。</p><p>这样一来，各个门店添加会员的时候，都对同一个总部 MySQL 数据库中的数据表字段进行操作，就解 决了各门店添加会员时会员编号冲突的问题。</p><h1 id="第11章-数据库的设计规范"><a href="#第11章-数据库的设计规范" class="headerlink" title="第11章_数据库的设计规范"></a>第11章_数据库的设计规范</h1><h2 id="1-为什么需要数据库设计"><a href="#1-为什么需要数据库设计" class="headerlink" title="1. 为什么需要数据库设计"></a>1. 为什么需要数据库设计</h2><img src="../pic/MySQL索引及调优篇/image-20220706164201695.png" alt="image-20220706164201695" style="zoom:80%;float:left" /><img src="../pic/MySQL索引及调优篇/image-20220706164359539.png" alt="image-20220706164359539" style="zoom:80%;float:left" /><h2 id="2-范-式"><a href="#2-范-式" class="headerlink" title="2. 范 式"></a>2. 范 式</h2><h3 id="2-1-范式简介"><a href="#2-1-范式简介" class="headerlink" title="2.1 范式简介"></a>2.1 范式简介</h3><p>在关系型数据库中，关于数据表设计的基本原则、规则就称为范式。可以理解为，一张数据表的设计结 构需要满足的某种设计标准的 级别 。要想设计一个结构合理的关系型数据库，必须满足一定的范式。</p><h3 id="2-2-范式都包括哪些"><a href="#2-2-范式都包括哪些" class="headerlink" title="2.2 范式都包括哪些"></a>2.2 范式都包括哪些</h3><p>目前关系型数据库有六种常见范式，按照范式级别，从低到高分别是：第一范式（1NF）、第二范式 （2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。</p><p>数据库的范式设计越高阶，夯余度就越低，同时高阶的范式一定符合低阶范式的要求，满足最低要求的范式是第一范式（1NF）。在第一范式的基础上进一步满足更多规范的要求称为第二范式（2NF），其余范式以此类推。</p><p>一般来说，在关系型数据库设计中，最高也就遵循到<code>BCNF</code>, 普遍还是<code>3NF</code>。但也不绝对，有时候为了提高某些查询性能，我们还需要破坏范式规则，也就是<code>反规范化</code>。</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220706165020939.png" alt="image-20220706165020939"></p><h3 id="2-3-键和相关属性的概念"><a href="#2-3-键和相关属性的概念" class="headerlink" title="2.3 键和相关属性的概念"></a>2.3 键和相关属性的概念</h3><img src="../pic/MySQL索引及调优篇/image-20220706165231022.png" alt="image-20220706165231022" style="float:left;" /><p><strong>举例:</strong></p><p>这里有两个表：</p><p><code>球员表(player)</code> ：球员编号 | 姓名 | 身份证号 | 年龄 | 球队编号 </p><p><code>球队表(team) </code>：球队编号 | 主教练 | 球队所在地</p><ul><li>超键 ：对于球员表来说，超键就是包括球员编号或者身份证号的任意组合，比如（球员编号） （球员编号，姓名）（身份证号，年龄）等。 </li><li>候选键 ：就是最小的超键，对于球员表来说，候选键就是（球员编号）或者（身份证号）。 </li><li>主键 ：我们自己选定，也就是从候选键中选择一个，比如（球员编号）。 </li><li>外键 ：球员表中的球队编号。 </li><li>主属性 、 非主属性 ：在球员表中，主属性是（球员编号）（身份证号），其他的属性（姓名） （年龄）（球队编号）都是非主属性。</li></ul><h3 id="2-4-第一范式-1st-NF"><a href="#2-4-第一范式-1st-NF" class="headerlink" title="2.4 第一范式(1st NF)"></a>2.4 第一范式(1st NF)</h3><p>第一范式主要确保数据库中每个字段的值必须具有<code>原子性</code>，也就是说数据表中每个字段的值为<code>不可再次拆分</code>的最小数据单元。</p><p>我们在设计某个字段的时候，对于字段X来说，不能把字段X拆分成字段X-1和字段X-2。事实上，任何的DBMS都会满足第一范式的要求，不会将字段进行拆分。</p><p><strong>举例1：</strong></p><p>假设一家公司要存储员工的姓名和联系方式。它创建一个如下表：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220706171057270.png" alt="image-20220706171057270"></p><p>该表不符合 1NF ，因为规则说“表的每个属性必须具有原子（单个）值”，lisi和zhaoliu员工的 emp_mobile 值违反了该规则。为了使表符合 1NF ，我们应该有如下表数据：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220706171130851.png" alt="image-20220706171130851"></p><p><strong>举例2：</strong></p><p>user 表的设计不符合第一范式</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220706171225292.png" alt="image-20220706171225292"></p><p>其中，user_info字段为用户信息，可以进一步拆分成更小粒度的字段，不符合数据库设计对第一范式的 要求。将user_info拆分后如下：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220706171242455.png" alt="image-20220706171242455"></p><p><strong>举例3：</strong></p><p>属性的原子性是 主观的 。例如，Employees关系中雇员姓名应当使用1个（fullname）、2个（firstname 和lastname）还是3个（firstname、middlename和lastname）属性表示呢？答案取决于应用程序。如果应 用程序需要分别处理雇员的姓名部分（如：用于搜索目的），则有必要把它们分开。否则，不需要。</p><p>表1：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220706171442919.png" alt="image-20220706171442919"></p><p>表2：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220706171456873.png" alt="image-20220706171456873"></p><h3 id="2-5-第二范式-2nd-NF"><a href="#2-5-第二范式-2nd-NF" class="headerlink" title="2.5 第二范式(2nd NF)"></a>2.5 第二范式(2nd NF)</h3><p>第二范式要求，在满足第一范式的基础上，还要<strong>满足数据库里的每一条数据记录，都是可唯一标识的。而且所有非主键字段，都必须完全依赖主键，不能只依赖主键的一部分</strong>。如果知道主键的所有属性的值，就可以检索到任何元组（行）的任何属性的任何值。（要求中的主键，其实可以扩展替换为候选键）。</p><p><strong>举例1：</strong></p><p><code>成绩表</code> （学号，课程号，成绩）关系中，（学号，课程号）可以决定成绩，但是学号不能决定成绩，课 程号也不能决定成绩，所以“（学号，课程号）→成绩”就是 <code>完全依赖关系</code> 。</p><p><strong>举例2：</strong></p><p><code>比赛表 player_game</code> ，里面包含球员编号、姓名、年龄、比赛编号、比赛时间和比赛场地等属性，这 里候选键和主键都为（球员编号，比赛编号），我们可以通过候选键（或主键）来决定如下的关系：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">(球员编号, 比赛编号) → (姓名, 年龄, 比赛时间, 比赛场地，得分)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是这个数据表不满足第二范式，因为数据表中的字段之间还存在着如下的对应关系：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">(球员编号) → (姓名，年龄)(比赛编号) → (比赛时间, 比赛场地)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>对于非主属性来说，并非完全依赖候选键。这样会产生怎样的问题呢？</p><ol><li><code>数据冗余</code> ：如果一个球员可以参加 m 场比赛，那么球员的姓名和年龄就重复了 m-1 次。一个比赛 也可能会有 n 个球员参加，比赛的时间和地点就重复了 n-1 次。 </li><li><code>插入异常</code> ：如果我们想要添加一场新的比赛，但是这时还没有确定参加的球员都有谁，那么就没法插入。 </li><li><code>删除异常</code> ：如果我要删除某个球员编号，如果没有单独保存比赛表的话，就会同时把比赛信息删 除掉。 </li><li><code>更新异常</code> ：如果我们调整了某个比赛的时间，那么数据表中所有这个比赛的时间都需要进行调 整，否则就会出现一场比赛时间不同的情况。</li></ol><p>为了避免出现上述的情况，我们可以把球员比赛表设计为下面的三张表。</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707122639894.png" alt="image-20220707122639894"></p><p>这样的话，每张数据表都符合第二范式，也就避免了异常情况的发生。</p><blockquote><p>1NF 告诉我们字段属性需要是原子性的，而 2NF 告诉我们一张表就是一个独立的对象，一张表只表达一个意思。</p></blockquote><p><strong>举例3：</strong></p><p>定义了一个名为 Orders 的关系，表示订单和订单行的信息：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707123038469.png" alt="image-20220707123038469"></p><p>违反了第二范式，因为有非主键属性仅依赖于候选键（或主键）的一部分。例如，可以仅通过orderid找 到订单的 orderdate，以及 customerid 和 companyname，而没有必要再去使用productid。</p><p>修改：</p><p>Orders表和OrderDetails表如下，此时符合第二范式。</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707123104009.png" alt="image-20220707123104009"></p><blockquote><p>小结：第二范式（2NF）要求实体的属性完全依赖主关键字。如果存在不完全依赖，那么这个属性和主关键字的这一部分应该分离出来形成一个新的实体，新实体与元实体之间是一对多的关系。</p></blockquote><h3 id="2-6-第三范式-3rd-NF"><a href="#2-6-第三范式-3rd-NF" class="headerlink" title="2.6 第三范式(3rd NF)"></a>2.6 第三范式(3rd NF)</h3><p>第三范式是在第二范式的基础上，确保数据表中的每一个非主键字段都和主键字段直接相关，也就是说，<strong>要求数据表中的所有非主键字段不能依赖于其他非主键字段</strong>。（即，不能存在非主属性A依赖于非主属性B，非主属性B依赖于主键C的情况，即存在“A-&gt;B-&gt;C”的决定关系）通俗地讲，该规则的意思是所有<code>非主键属性</code>之间不能由依赖关系，必须<code>相互独立</code>。</p><p>这里的主键可以扩展为候选键。</p><p><strong>举例1：</strong></p><p><code>部门信息表</code> ：每个部门有部门编号（dept_id）、部门名称、部门简介等信息。</p><p><code>员工信息表 </code>：每个员工有员工编号、姓名、部门编号。列出部门编号后就不能再将部门名称、部门简介 等与部门有关的信息再加入员工信息表中。</p><p>如果不存在部门信息表，则根据第三范式（3NF）也应该构建它，否则就会有大量的数据冗余。</p><p><strong>举例2：</strong></p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707124011654.png" alt="image-20220707124011654"></p><p>商品类别名称依赖于商品类别编号，不符合第三范式。</p><p>修改：</p><p>表1：符合第三范式的 <code>商品类别表</code> 的设计</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707124040899.png" alt="image-20220707124040899"></p><p>表2：符合第三范式的 <code>商品表</code> 的设计</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707124058174.png" alt="image-20220707124058174"></p><p>商品表goods通过商品类别id字段（category_id）与商品类别表goods_category进行关联。</p><p><strong>举例3：</strong></p><p><code>球员player表</code> ：球员编号、姓名、球队名称和球队主教练。现在，我们把属性之间的依赖关系画出来，如下图所示:</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707124136228.png" alt="image-20220707124136228"></p><p>你能看到球员编号决定了球队名称，同时球队名称决定了球队主教练，非主属性球队主教练就会传递依 赖于球员编号，因此不符合 3NF 的要求。</p><p>如果要达到 3NF 的要求，需要把数据表拆成下面这样：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707124152312.png" alt="image-20220707124152312"></p><p><strong>举例4：</strong></p><p>修改第二范式中的举例3。</p><p>此时的Orders关系包含 orderid、orderdate、customerid 和 companyname 属性，主键定义为 orderid。 customerid 和companyname均依赖于主键——orderid。例如，你需要通过orderid主键来查找代表订单中 客户的customerid，同样，你需要通过 orderid 主键查找订单中客户的公司名称（companyname）。然 而， customerid和companyname也是互相依靠的。为满足第三范式，可以改写如下：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707124212114.png" alt="image-20220707124212114"></p><blockquote><p>符合3NF后的数据模型通俗地讲，2NF和3NF通常以这句话概括：“每个非键属性依赖于键，依赖于 整个键，并且除了键别无他物”。</p></blockquote><h3 id="2-7-小结"><a href="#2-7-小结" class="headerlink" title="2.7 小结"></a>2.7 小结</h3><img src="../pic/MySQL索引及调优篇/image-20220707124343085.png" alt="image-20220707124343085" style="zoom:80%;float:left" /><h2 id="3-反范式化"><a href="#3-反范式化" class="headerlink" title="3. 反范式化"></a>3. 反范式化</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><img src="../pic/MySQL索引及调优篇/image-20220707124741675.png" alt="image-20220707124741675" style="zoom:80%;float:left" /><p><strong>规范化 vs 性能</strong></p><blockquote><ol><li>为满足某种商业目标 , 数据库性能比规范化数据库更重要 </li><li>在数据规范化的同时 , 要综合考虑数据库的性能 </li><li>通过在给定的表中添加额外的字段，以大量减少需要从中搜索信息所需的时间 </li><li>通过在给定的表中插入计算列，以方便查询</li></ol></blockquote><h3 id="3-2-应用举例"><a href="#3-2-应用举例" class="headerlink" title="3.2 应用举例"></a>3.2 应用举例</h3><p><strong>举例1：</strong></p><p>员工的信息存储在 <code>employees 表</code> 中，部门信息存储在 <code>departments 表</code> 中。通过 employees 表中的 department_id字段与 departments 表建立关联关系。如果要查询一个员工所在部门的名称：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select employee_id,department_namefrom employees e join departments don e.department_id &#x3D; d.department_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果经常需要进行这个操作，连接查询就会浪费很多时间。可以在 employees 表中增加一个冗余字段 department_name，这样就不用每次都进行连接操作了。</p><p><strong>举例2：</strong></p><p>反范式化的 <code>goods商品信息表</code> 设计如下：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707125118808.png" alt="image-20220707125118808"></p><p><strong>举例3：</strong></p><p>我们有 2 个表，分别是 <code>商品流水表（atguigu.trans ）</code>和 <code>商品信息表 （atguigu.goodsinfo）</code> 。商品流水表里有 400 万条流水记录，商品信息表里有 2000 条商品记录。</p><p>商品流水表：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707125401029.png" alt="image-20220707125401029"></p><p>商品信息表：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707125447317.png" alt="image-20220707125447317"></p><p>新的商品流水表如下所示：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707125500378.png" alt="image-20220707125500378"></p><p><strong>举例4：</strong></p><p><code>课程评论表 class_comment</code> ，对应的字段名称及含义如下：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707125531172.png" alt="image-20220707125531172"></p><p><code>学生表 student</code> ，对应的字段名称及含义如下：</p><img src="../pic/MySQL索引及调优篇/image-20220707125545891.png" alt="image-20220707125545891" style="zoom:80%;" /><p>在实际应用中，我们在显示课程评论的时候，通常会显示这个学生的昵称，而不是学生 ID，因此当我们 想要查询某个课程的前 1000 条评论时，需要关联 class_comment 和 student这两张表来进行查询。</p><p><strong>实验数据：模拟两张百万量级的数据表</strong></p><p>为了更好地进行 SQL 优化实验，我们需要给学生表和课程评论表随机模拟出百万量级的数据。我们可以 通过存储过程来实现模拟数据。</p><p><strong>反范式优化实验对比</strong></p><p>如果我们想要查询课程 ID 为 10001 的前 1000 条评论，需要写成下面这样：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT p.comment_text, p.comment_time, stu.stu_nameFROM class_comment AS p LEFT JOIN student AS stuON p.stu_id &#x3D; stu.stu_idWHERE p.class_id &#x3D; 10001ORDER BY p.comment_id DESCLIMIT 1000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果（1000 条数据行）：</p><img src="../pic/MySQL索引及调优篇/image-20220707125642908.png" alt="image-20220707125642908" style="zoom:80%;" /><p>运行时长为 0.395 秒，对于网站的响应来说，这已经很慢了，用户体验会非常差。</p><p>如果我们想要提升查询的效率，可以允许适当的数据冗余，也就是在商品评论表中增加用户昵称字段， 在 class_comment 数据表的基础上增加 stu_name 字段，就得到了 class_comment2 数据表。</p><p>这样一来，只需单表查询就可以得到数据集结果：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT comment_text, comment_time, stu_nameFROM class_comment2WHERE class_id &#x3D; 10001ORDER BY class_id DESC LIMIT 1000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果（1000 条数据）：</p><img src="../pic/MySQL索引及调优篇/image-20220707125718469.png" alt="image-20220707125718469" style="zoom:80%;" /><p>优化之后只需要扫描一次聚集索引即可，运行时间为 0.039 秒，查询时间是之前的 1&#x2F;10。 你能看到， 在数据量大的情况下，查询效率会有显著的提升。</p><h3 id="3-3-反范式的新问题"><a href="#3-3-反范式的新问题" class="headerlink" title="3.3 反范式的新问题"></a>3.3 反范式的新问题</h3><ul><li>存储 空间变大了 </li><li>一个表中字段做了修改，另一个表中冗余的字段也需要做同步修改，否则 数据不一致 </li><li>若采用存储过程来支持数据的更新、删除等额外操作，如果更新频繁，会非常 消耗系统资源 </li><li>在 数据量小 的情况下，反范式不能体现性能的优势，可能还会让数据库的设计更加复杂</li></ul><h3 id="3-4-反范式的适用场景"><a href="#3-4-反范式的适用场景" class="headerlink" title="3.4 反范式的适用场景"></a>3.4 反范式的适用场景</h3><p>当冗余信息有价值或者能 <code>大幅度提高查询效率</code> 的时候，我们才会采取反范式的优化。</p><h4 id="1-增加冗余字段的建议"><a href="#1-增加冗余字段的建议" class="headerlink" title="1. 增加冗余字段的建议"></a>1. 增加冗余字段的建议</h4><p>增加冗余字段一定要符合如下两个条件。只要满足这两个条件，才可以考虑增加夯余字段。</p><p>1）这个冗余字段<code>不需要经常进行修改</code>。</p><p>2）这个冗余字段<code>查询的时候不可或缺</code>。</p><h4 id="2-历史快照、历史数据的需要"><a href="#2-历史快照、历史数据的需要" class="headerlink" title="2. 历史快照、历史数据的需要"></a>2. 历史快照、历史数据的需要</h4><p>在现实生活中，我们经常需要一些冗余信息，比如订单中的收货人信息，包括姓名、电话和地址等。每 次发生的 <code>订单收货信息</code> 都属于 <code>历史快照</code> ，需要进行保存，但用户可以随时修改自己的信息，这时保存这 些冗余信息是非常有必要的。</p><p>反范式优化也常用在 <code>数据仓库</code> 的设计中，因为数据仓库通常<code>存储历史数据</code> ，对增删改的实时性要求不 强，对历史数据的分析需求强。这时适当允许数据的冗余度，更方便进行数据分析。</p><p>我简单总结下数据仓库和数据库在使用上的区别：</p><ol><li>数据库设计的目的在于<code>捕捉数据</code>，而数据仓库设计的目的在于<code>分析数据</code>。</li><li>数据库对数据的<code>增删改实时性</code>要求强，需要存储在线的用户数据，而数据仓库存储的一般是<code>历史数据</code>。</li><li>数据库设计需要<code>尽量避免冗余</code>，但为了提高查询效率也允许一定的<code>冗余度</code>，而数据仓库在设计上更偏向采用反范式设计，</li></ol><h2 id="4-BCNF-巴斯范式"><a href="#4-BCNF-巴斯范式" class="headerlink" title="4. BCNF(巴斯范式)"></a>4. BCNF(巴斯范式)</h2><p>人们在3NF的基础上进行了改进，提出了巴斯范式（BCNF），页脚巴斯 - 科德范式（Boyce - Codd Normal Form）。BCNF被认为没有新的设计规范加入，只是对第三范式中设计规范要求更强，使得数据库冗余度更小。所以，称为是<code>修正的第三范式</code>，或<code>扩充的第三范式</code>，BCNF不被称为第四范式。</p><p>若一个关系达到了第三范式，并且它只有一个候选键，或者它的每个候选键都是单属性，则该关系自然达到BC范式。</p><p>一般来说，一个数据库设符合3NF或者BCNF就可以了。</p><p><strong>1. 案例</strong></p><p>我们分析如下表的范式情况：</p><img src="../pic/MySQL索引及调优篇/image-20220707131428597.png" alt="image-20220707131428597" style="zoom:80%;" /><p>在这个表中，一个仓库只有一个管理员，同时一个管理员也只管理一个仓库。我们先来梳理下这些属性之间的依赖关系。</p><p>仓库名决定了管理员，管理员也决定了仓库名，同时（仓库名，物品名）的属性集合可以决定数量这个 属性。这样，我们就可以找到数据表的候选键。</p><p><code>候选键 </code>：是（管理员，物品名）和（仓库名，物品名），然后我们从候选键中选择一个作为主键 ，比 如（仓库名，物品名）。</p><p><code>主属性</code> ：包含在任一候选键中的属性，也就是仓库名，管理员和物品名。</p><p><code>非主属性</code> ：数量这个属性。</p><p><strong>2. 是否符合三范式</strong></p><p>如何判断一张表的范式呢？我们需要根据范式的等级，从低到高来进行判断。</p><p>首先，数据表每个属性都是原子性的，符合 1NF 的要求；</p><p>其次，数据表中非主属性”数量“都与候选键全部依赖，（仓库名，物品名）决定数量，（管理员，物品 名）决定数量。因此，数据表符合 2NF 的要求；</p><p>最后，数据表中的非主属性，不传递依赖于候选键。因此符合 3NF 的要求。</p><p><strong>3. 存在的问题</strong></p><p>既然数据表已经符合了 3NF 的要求，是不是就不存在问题了呢？我们来看下面的情况：</p><ol><li>增加一个仓库，但是还没有存放任何物品。根据数据表实体完整性的要求，主键不能有空值，因 此会出现 插入异常 ；</li><li>如果仓库更换了管理员，我们就可能会修改数据表中的多条记录 ；</li><li>如果仓库里的商品都卖空了，那么此时仓库名称和相应的管理员名称也会随之被删除。</li></ol><p>你能看到，即便数据表符合 3NF 的要求，同样可能存在插入，更新和删除数据的异常情况。</p><p><strong>4. 问题解决</strong></p><p>首先我们需要确认造成异常的原因：主属性仓库名对于候选键（管理员，物品名）是部分依赖的关系， 这样就有可能导致上面的异常情况。因此引入BCNF，<strong>它在 3NF 的基础上消除了主属性对候选键的部分依赖或者传递依赖关系</strong>。</p><ul><li>如果在关系R中，U为主键，A属性是主键的一个属性，若存在A-&gt;Y，Y为主属性，则该关系不属于 BCNF。</li></ul><p>根据 BCNF 的要求，我们需要把仓库管理关系 warehouse_keeper 表拆分成下面这样：</p><p><code>仓库表</code> ：（仓库名，管理员）</p><p><code>库存表 </code>：（仓库名，物品名，数量）</p><p>这样就不存在主属性对于候选键的部分依赖或传递依赖，上面数据表的设计就符合 BCNF。</p><p>再举例：</p><p>有一个 <code>学生导师表</code> ，其中包含字段：学生ID，专业，导师，专业GPA，这其中学生ID和专业是联合主键。</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707132038425.png" alt="image-20220707132038425"></p><p>这个表的设计满足三范式，但是这里存在另一个依赖关系，“专业”依赖于“导师”，也就是说每个导师只做一个专业方面的导师，只要知道了是哪个导师，我们自然就知道是哪个专业的了。</p><p>所以这个表的部分主键Major依赖于非主键属性Advisor，那么我们可以进行以下的调整，拆分成2个表：</p><p>学生导师表：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707132344634.png" alt="image-20220707132344634"></p><p>导师表：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707132355841.png" alt="image-20220707132355841"></p><h2 id="5-第四范式"><a href="#5-第四范式" class="headerlink" title="5. 第四范式"></a>5. 第四范式</h2><p>多值依赖的概念：</p><ul><li><code>多值依赖</code>即属性之间的一对多关系，记为K—&gt;—&gt;A。</li><li><code>函数依赖</code>事实上是单值依赖，所以不能表达属性值之间的一对多关系。</li><li><code>平凡的多值依赖</code>：全集U&#x3D;K+A，一个K可以对应于多个A，即K—&gt;—&gt;A。此时整个表就是一组一对多关系。</li><li><code>非平凡的多值依赖</code>：全集U&#x3D;K+A+B，一个K可以对应于多个A，也可以对应于多个B，A与B相互独立，即K—&gt;—&gt;A，K—&gt;—&gt;B。整个表有多组一对多关系，且有：”一”部分是相同的属性集合，“多”部分是相互独立的属性集合。</li></ul><p>第四范式即在满足巴斯 - 科德范式（BCNF）的基础上，消除非平凡且非函数依赖的多值依赖（即把同一表的多对多关系删除）。</p><p><strong>举例1：</strong>职工表(职工编号，职工孩子姓名，职工选修课程)。</p><p>在这个表中，同一个职工可能会有多个职工孩子姓名。同样，同一个职工也可能会有多个职工选修课程，即这里存在着多值事实，不符合第四范式。</p><p>如果要符合第四范式，只需要将上表分为两个表，使它们只有一个多值事实，例如： <code>职工表一</code> (职工编 号，职工孩子姓名)， <code>职工表二</code>(职工编号，职工选修课程)，两个表都只有一个多值事实，所以符合第四范式。</p><p><strong>举例2：</strong></p><p>比如我们建立课程、教师、教材的模型。我们规定，每门课程有对应的一组教师，每门课程也有对应的一组教材，一门课程使用的教材和教师没有关系。我们建立的关系表如下：</p><p>课程ID，教师ID，教材ID；这三列作为联合主键。</p><p>为了表述方便，我们用Name代替ID，这样更容易看懂：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707133830721.png" alt="image-20220707133830721"></p><p>这个表除了主键，就没有其他字段了，所以肯定满足BC范式，但是却存在 <code>多值依赖</code> 导致的异常。</p><p>假如我们下学期想采用一本新的英版高数教材，但是还没确定具体哪个老师来教，那么我们就无法在这 个表中维护Course高数和Book英版高数教材的的关系。</p><p>解决办法是我们把这个多值依赖的表拆解成2个表，分别建立关系。这是我们拆分后的表：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707134028730.png" alt="image-20220707134028730"></p><p>以及</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707134220820.png" alt="image-20220707134220820"></p><h2 id="6-第五范式、域键范式"><a href="#6-第五范式、域键范式" class="headerlink" title="6. 第五范式、域键范式"></a>6. 第五范式、域键范式</h2><p>除了第四范式外，我们还有更高级的第五范式（又称完美范式）和域键范式（DKNF）。</p><p>在满足第四范式（4NF）的基础上，消除不是由候选键所蕴含的连接依赖。<strong>如果关系模式R中的每一个连 接依赖均由R的候选键所隐含</strong>，则称此关系模式符合第五范式。</p><p>函数依赖是多值依赖的一种特殊的情况，而多值依赖实际上是连接依赖的一种特殊情况。但连接依赖不 像函数依赖和多值依赖可以由 <code>语义直接导出</code> ，而是在 <code>关系连接运算</code> 时才反映出来。存在连接依赖的关系 模式仍可能遇到数据冗余及插入、修改、删除异常等问题。</p><p>第五范式处理的是 <code>无损连接问题</code> ，这个范式基本 <code>没有实际意义</code> ，因为无损连接很少出现，而且难以察觉。而域键范式试图定义一个 <code>终极范式</code> ，该范式考虑所有的依赖和约束类型，但是实用价值也是最小的，只存在理论研究中。</p><h2 id="7-实战案例"><a href="#7-实战案例" class="headerlink" title="7. 实战案例"></a>7. 实战案例</h2><p>商超进货系统中的<code>进货单表</code>进行剖析：</p><p>进货单表：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707134636225.png" alt="image-20220707134636225"></p><p>这个表中的字段很多，表里的数据量也很惊人。大量重复导致表变得庞大，效率极低。如何改造？</p><blockquote><p>在实际工作场景中，这种由于数据表结构设计不合理，而导致的数据重复的现象并不少见。往往是系统虽然能够运行，承载能力却很差，稍微有点流量，就会出现内存不足、CPU使用率飙升的情况，甚至会导致整个项目失败。</p></blockquote><h3 id="7-1-迭代1次：考虑1NF"><a href="#7-1-迭代1次：考虑1NF" class="headerlink" title="7.1 迭代1次：考虑1NF"></a>7.1 迭代1次：考虑1NF</h3><p>第一范式要求：<strong>所有的字段都是基本数据类型，不可进行拆分</strong>。这里需要确认，所有的列中，每个字段只包含一种数据。</p><p>这张表里，我们把“property”这一字段，拆分成”specification (规格)” 和 “unit (单位)”，这两个字段如下：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707154400580.png" alt="image-20220707154400580"></p><h3 id="7-2-迭代2次：考虑2NF"><a href="#7-2-迭代2次：考虑2NF" class="headerlink" title="7.2 迭代2次：考虑2NF"></a>7.2 迭代2次：考虑2NF</h3><p>第二范式要求，在满足第一范式的基础上，<strong>还要满足数据表里的每一条数据记录，都是可唯一标识的。而且所有字段，都必须完全依赖主键，不能只依赖主键的一部分</strong>。</p><p>第1步，就是要确定这个表的主键。通过观察发现，字段“listnumber（单号）”+”barcode（条码）”可以唯一标识每一条记录，可以作为主键。</p><p>第2步，确定好了主键以后，判断哪些字段完全依赖主键，哪些字段只依赖于主键的一部分。把只依赖于主键一部分的字段拆出去，形成新的数据表。</p><p>首先，进货单明细表里面的”goodsname(名称)””specification(规格)””unit(单位)”这些信息是商品的属性，只依赖于”batcode(条码)”，不完全依赖主键，可以拆分出去。我们把这3个字段加上它们所依赖的字段”barcode(条码)”，拆分形成新的数据表”商品信息表”。</p><p>这样一来，原来的数据表就被拆分成了两个表。</p><p>商品信息表：</p><img src="../pic/MySQL索引及调优篇/image-20220707163807205.png" alt="image-20220707163807205" style="float:left;" /><p>进货单表：</p><img src="../pic/MySQL索引及调优篇/image-20220707163828614.png" alt="image-20220707163828614" style="float:left;" /><p>此外，字段”supplierid(供应商编号)””suppliername(供应商名称)””stock(仓库)“只依赖于”listnumber(单号)”，不完全依赖于主键，所以，我们可以把”supplierid””suppliername””stock”这3个字段拆出去，再加上它们依赖的字段”listnumber(单号)”，就形成了一个新的表”进货单头表”。剩下的字段，会组成新的表，我们叫它”进货单明细表”。</p><p>原来的数据表就拆分成了3个表。</p><p>进货单头表：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707164128704.png" alt="image-20220707164128704"></p><p>进货单明细表：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707164146216.png" alt="image-20220707164146216"></p><p>商品信息表：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707164227845.png" alt="image-20220707164227845"></p><p>现在，我们再来分析一下拆分后的3个表，保证这3个表都满足第二范式的要求。</p><p>第3步，在“商品信息表”中，字段“barcode”是有<code>可能存在重复</code>的，比如，用户门店可能有散装称重商品和自产商品，会存在条码共用的情况。所以，所有的字段都不能唯一标识表里的记录。这个时候，我们必须给这个表加上一个主键，比如说是<code>自增字段&quot;itemnumber&quot;</code>。</p><h3 id="7-3-迭代3次：考虑3NF"><a href="#7-3-迭代3次：考虑3NF" class="headerlink" title="7.3 迭代3次：考虑3NF"></a>7.3 迭代3次：考虑3NF</h3><p>我们的进货单头表，还有数据冗余的可能。因为”suppliername”依赖”supplierid”，那么就可以按照第三范式的原则进行拆分了。我们就进一步拆分进货单头表，把它拆解陈供货商表和进货单头表。</p><p>供货商表：</p><img src="../pic/MySQL索引及调优篇/image-20220707165011050.png" alt="image-20220707165011050" style="float:left;" /><p>进货单头表：</p><img src="../pic/MySQL索引及调优篇/image-20220707165038108.png" alt="image-20220707165038108" style="float:left;" /><p>这2个表都满足第三范式的要求了。</p><h3 id="7-4-反范式化：业务优先的原则"><a href="#7-4-反范式化：业务优先的原则" class="headerlink" title="7.4 反范式化：业务优先的原则"></a>7.4 反范式化：业务优先的原则</h3><img src="../pic/MySQL索引及调优篇/image-20220707165459547.png" alt="image-20220707165459547" style="zoom:80%;float:left" /><p>因此，最后我们可以把进货单表拆分成下面的4个表：</p><p>供货商表：</p><img src="../pic/MySQL索引及调优篇/image-20220707165011050.png" alt="image-20220707165011050" style="float:left;" /><p>进货单头表：</p><img src="../pic/MySQL索引及调优篇/image-20220707165038108.png" alt="image-20220707165038108" style="float:left;" /><p>进货单明细表：</p><img src="../pic/MySQL索引及调优篇/image-20220707164146216.png" alt="image-20220707164146216" style="zoom:80%;float:left" /><p>商品信息表：</p><img src="../pic/MySQL索引及调优篇/image-20220707164227845.png" alt="image-20220707164227845" style="zoom:80%;float:left" /><p>这样一来，我们就避免了冗余数据，而且还能够满足业务的需求，这样的数据库设计，才是合格的设计。</p><h2 id="8-ER模型"><a href="#8-ER模型" class="headerlink" title="8. ER模型"></a>8. ER模型</h2><img src="../pic/MySQL索引及调优篇/image-20220707170027637.png" alt="image-20220707170027637" style="zoom:80%;float:left" /><h3 id="8-1-ER模型包括哪些要素？"><a href="#8-1-ER模型包括哪些要素？" class="headerlink" title="8.1 ER模型包括哪些要素？"></a>8.1 ER模型包括哪些要素？</h3><p><strong>ER 模型中有三个要素，分别是实体、属性和关系。</strong></p><p><code>实体</code> ，可以看做是数据对象，往往对应于现实生活中的真实存在的个体。在 ER 模型中，用 矩形 来表 示。实体分为两类，分别是 强实体 和 弱实体 。强实体是指不依赖于其他实体的实体；弱实体是指对另 一个实体有很强的依赖关系的实体。</p><p><code>属性</code> ，则是指实体的特性。比如超市的地址、联系电话、员工数等。在 ER 模型中用 椭圆形 来表示。</p><p><code>关系</code> ，则是指实体之间的联系。比如超市把商品卖给顾客，就是一种超市与顾客之间的联系。在 ER 模 型中用 菱形 来表示。</p><p>注意：实体和属性不容易区分。这里提供一个原则：我们要从系统整体的角度出发去看，<strong>可以独立存在的是实体，不可再分的是属性</strong>。也就是说，属性不能包含其他属性。</p><h3 id="8-2-关系的类型"><a href="#8-2-关系的类型" class="headerlink" title="8.2 关系的类型"></a>8.2 关系的类型</h3><p>在 ER 模型的 3 个要素中，关系又可以分为 3 种类型，分别是 一对一、一对多、多对多。</p><p><code>一对一</code> ：指实体之间的关系是一一对应的，比如个人与身份证信息之间的关系就是一对一的关系。一个人只能有一个身份证信息，一个身份证信息也只属于一个人。</p><p><code>一对多</code> ：指一边的实体通过关系，可以对应多个另外一边的实体。相反，另外一边的实体通过这个关系，则只能对应唯一的一边的实体。比如说，我们新建一个班级表，而每个班级都有多个学生，每个学 生则对应一个班级，班级对学生就是一对多的关系。</p><p><code>多对多</code> ：指关系两边的实体都可以通过关系对应多个对方的实体。比如在进货模块中，供货商与超市之 间的关系就是多对多的关系，一个供货商可以给多个超市供货，一个超市也可以从多个供货商那里采购 商品。再比如一个选课表，有许多科目，每个科目有很多学生选，而每个学生又可以选择多个科目，这 就是多对多的关系。</p><h3 id="8-3-建模分析"><a href="#8-3-建模分析" class="headerlink" title="8.3 建模分析"></a>8.3 建模分析</h3><p>ER 模型看起来比较麻烦，但是对我们把控项目整体非常重要。如果你只是开发一个小应用，或许简单设 计几个表够用了，一旦要设计有一定规模的应用，在项目的初始阶段，建立完整的 ER 模型就非常关键 了。开发应用项目的实质，其实就是 建模 。</p><p>我们设计的案例是 电商业务 ，由于电商业务太过庞大且复杂，所以我们做了业务简化，比如针对 SKU（StockKeepingUnit，库存量单位）和SPU（Standard Product Unit，标准化产品单元）的含义上，我 们直接使用了SKU，并没有提及SPU的概念。本次电商业务设计总共有8个实体，如下所示。</p><ul><li>地址实体 </li><li>用户实体 </li><li>购物车实体 </li><li>评论实体 </li><li>商品实体 </li><li>商品分类实体 </li><li>订单实体 </li><li>订单详情实体</li></ul><p>其中， 用户 和 商品分类 是强实体，因为它们不需要依赖其他任何实体。而其他属于弱实体，因为它们 虽然都可以独立存在，但是它们都依赖用户这个实体，因此都是弱实体。知道了这些要素，我们就可以 给电商业务创建 ER 模型了，如图：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707170608782.png" alt="image-20220707170608782"></p><p>在这个图中，地址和用户之间的添加关系，是一对多的关系，而商品和商品详情示一对1的关系，商品和 订单是多对多的关系。 这个 ER 模型，包括了 8个实体之间的 8种关系。</p><p>（1）用户可以在电商平台添加多个地址； </p><p>（2）用户只能拥有一个购物车； </p><p>（3）用户可以生成多个订单； </p><p>（4）用户可以发表多条评论； </p><p>（5）一件商品可以有多条评论； </p><p>（6）每一个商品分类包含多种商品；</p><p>（7）一个订单可以包含多个商品，一个商品可以在多个订单里。 </p><p>（8）订单中又包含多个订单详情，因为一个订单中可能包含不同种类的商品</p><h3 id="8-4-ER-模型的细化"><a href="#8-4-ER-模型的细化" class="headerlink" title="8.4 ER 模型的细化"></a>8.4 ER 模型的细化</h3><p>有了这个 ER 模型，我们就可以从整体上 理解 电商的业务了。刚刚的 ER 模型展示了电商业务的框架， 但是只包括了订单，地址，用户，购物车，评论，商品，商品分类和订单详情这八个实体，以及它们之 间的关系，还不能对应到具体的表，以及表与表之间的关联。我们需要把 属性加上 ，用 椭圆 来表示， 这样我们得到的 ER 模型就更加完整了。</p><p>因此，我们需要进一步去设计一下这个 ER 模型的各个局部，也就是细化下电商的具体业务流程，然后把 它们综合到一起，形成一个完整的 ER 模型。这样可以帮助我们理清数据库的设计思路。</p><p>接下来，我们再分析一下各个实体都有哪些属性，如下所示。</p><p>（1） <code>地址实体</code> 包括用户编号、省、市、地区、收件人、联系电话、是否是默认地址。 </p><p>（2） <code>用户实体</code> 包括用户编号、用户名称、昵称、用户密码、手机号、邮箱、头像、用户级别。</p><p>（3） <code>购物车实体</code> 包括购物车编号、用户编号、商品编号、商品数量、图片文件url。</p><p>（4） <code>订单实体</code> 包括订单编号、收货人、收件人电话、总金额、用户编号、付款方式、送货地址、下单 时间。 </p><p>（5） <code>订单详情实体</code> 包括订单详情编号、订单编号、商品名称、商品编号、商品数量。 </p><p>（6） <code>商品实体</code> 包括商品编号、价格、商品名称、分类编号、是否销售，规格、颜色。 </p><p>（7） <code>评论实体</code> 包括评论id、评论内容、评论时间、用户编号、商品编号 </p><p>（8） <code>商品分类实体</code> 包括类别编号、类别名称、父类别编号</p><p>这样细分之后，我们就可以重新设计电商业务了，ER 模型如图：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707171022246.png" alt="image-20220707171022246"></p><h3 id="8-5-ER-模型图转换成数据表"><a href="#8-5-ER-模型图转换成数据表" class="headerlink" title="8.5 ER 模型图转换成数据表"></a>8.5 ER 模型图转换成数据表</h3><p>通过绘制 ER 模型，我们已经理清了业务逻辑，现在，我们就要进行非常重要的一步了：把绘制好的 ER 模型，转换成具体的数据表，下面介绍下转换的原则：</p><p>（1）一个 实体 通常转换成一个 数据表 ； </p><p>（2）一个 多对多的关系 ，通常也转换成一个 数据表 ； </p><p>（3）一个 1 对 1 ，或者 1 对多 的关系，往往通过表的 外键 来表达，而不是设计一个新的数据表； </p><p>（4） 属性 转换成表的 字段 。</p><p>下面结合前面的ER模型，具体讲解一下怎么运用这些转换的原则，把 ER 模型转换成具体的数据表，从 而把抽象出来的数据模型，落实到具体的数据库设计当中。</p><h4 id="1-一个实体转换成一个数据库"><a href="#1-一个实体转换成一个数据库" class="headerlink" title="1. 一个实体转换成一个数据库"></a>1. 一个实体转换成一个数据库</h4><p><strong>先来看一下强实体转换成数据表:</strong></p><p><code>用户实体</code>转换成用户表(user_info)的代码如下所示。</p><img src="../pic/MySQL索引及调优篇/image-20220707171335255.png" alt="image-20220707171335255" style="float:left;" /><img src="../pic/MySQL索引及调优篇/image-20220707171412363.png" alt="image-20220707171412363" style="float:left;" /><img src="../pic/MySQL索引及调优篇/image-20220707171915637.png" alt="image-20220707171915637" style="float:left;" /><p><strong>下面我们再把弱实体转换成数据表：</strong></p><img src="../pic/MySQL索引及调优篇/image-20220707172033399.png" alt="image-20220707172033399" style="float:left;" /><img src="../pic/MySQL索引及调优篇/image-20220707172052236.png" alt="image-20220707172052236" style="float:left;" /><img src="../pic/MySQL索引及调优篇/image-20220707172143793.png" alt="image-20220707172143793" style="float:left;" /><img src="../pic/MySQL索引及调优篇/image-20220707172217772.png" alt="image-20220707172217772" style="float:left;" /><img src="../pic/MySQL索引及调优篇/image-20220707172236606.png" alt="image-20220707172236606" style="float:left;" /><img src="../pic/MySQL索引及调优篇/image-20220707172259143.png" alt="image-20220707172259143" style="float:left;" /><h4 id="2-一个多对多的关系转换成一个数据表"><a href="#2-一个多对多的关系转换成一个数据表" class="headerlink" title="2. 一个多对多的关系转换成一个数据表"></a>2. 一个多对多的关系转换成一个数据表</h4><img src="../pic/MySQL索引及调优篇/image-20220707172350226.png" alt="image-20220707172350226" style="float:left;" /><h4 id="3-通过外键来表达1对多的关系"><a href="#3-通过外键来表达1对多的关系" class="headerlink" title="3. 通过外键来表达1对多的关系"></a>3. 通过外键来表达1对多的关系</h4><img src="../pic/MySQL索引及调优篇/image-20220707172609833.png" alt="image-20220707172609833" style="float:left;" /><h4 id="4-把属性转换成表的字段"><a href="#4-把属性转换成表的字段" class="headerlink" title="4. 把属性转换成表的字段"></a>4. 把属性转换成表的字段</h4><img src="../pic/MySQL索引及调优篇/image-20220707172819174.png" alt="image-20220707172819174" style="float:left;" /><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707172918017.png" alt="image-20220707172918017"></p><h2 id="9-数据表的设计原则"><a href="#9-数据表的设计原则" class="headerlink" title="9. 数据表的设计原则"></a>9. 数据表的设计原则</h2><p>综合以上内容，总结出数据表设计的一般原则：”三少一多”</p><p><strong>1. 数据表的个数越少越好</strong></p><img src="../pic/MySQL索引及调优篇/image-20220707173028203.png" alt="image-20220707173028203" style="float:left;" /><p><strong>2. 数据表中的字段个数越少越好</strong></p><img src="../pic/MySQL索引及调优篇/image-20220707173402491.png" alt="image-20220707173402491" style="float:left;" /><p><strong>3. 数据表中联合主键的字段个数越少越好</strong></p><img src="../pic/MySQL索引及调优篇/image-20220707173522971.png" alt="image-20220707173522971" style="float:left;" /><p><strong>4. 使用主键和外键越多越好</strong></p><img src="../pic/MySQL索引及调优篇/image-20220707173557568.png" alt="image-20220707173557568" style="float:left;" /><h2 id="10-数据库对象编写建议"><a href="#10-数据库对象编写建议" class="headerlink" title="10. 数据库对象编写建议"></a>10. 数据库对象编写建议</h2><h3 id="10-1-关于库"><a href="#10-1-关于库" class="headerlink" title="10.1 关于库"></a>10.1 关于库</h3><ol><li>【强制】库的名称必须控制在32个字符以内，只能使用英文字母、数字和下划线，建议以英文字 母开头。 </li><li>【强制】库名中英文 一律小写 ，不同单词采用 下划线 分割。须见名知意。 </li><li>【强制】库的名称格式：业务系统名称_子系统名。</li><li>【强制】库名禁止使用关键字（如type,order等）。</li><li>【强制】创建数据库时必须 显式指定字符集 ，并且字符集只能是utf8或者utf8mb4。 创建数据库SQL举例：CREATE DATABASE crm_fund DEFAULT CHARACTER SET ‘utf8’ ; </li><li>【建议】对于程序连接数据库账号，遵循 权限最小原则 使用数据库账号只能在一个DB下使用，不准跨库。程序使用的账号 原则上不准有drop权限 。 </li><li>【建议】临时库以 tmp_ 为前缀，并以日期为后缀； 备份库以 bak_ 为前缀，并以日期为后缀。</li></ol><h3 id="10-2-关于表、列"><a href="#10-2-关于表、列" class="headerlink" title="10.2 关于表、列"></a>10.2 关于表、列</h3><ol><li><p>【强制】表和列的名称必须控制在32个字符以内，表名只能使用英文字母、数字和下划线，建议 以 英文字母开头 。 </p></li><li><p>【强制】 表名、列名一律小写 ，不同单词采用下划线分割。须见名知意。 </p></li><li><p>【强制】表名要求有模块名强相关，同一模块的表名尽量使用 统一前缀 。比如：crm_fund_item </p></li><li><p>【强制】创建表时必须 显式指定字符集 为utf8或utf8mb4。 </p></li><li><p>【强制】表名、列名禁止使用关键字（如type,order等）。 </p></li><li><p>【强制】创建表时必须 显式指定表存储引擎 类型。如无特殊需求，一律为InnoDB。 </p></li><li><p>【强制】建表必须有comment。 </p></li><li><p>【强制】字段命名应尽可能使用表达实际含义的英文单词或 缩写 。如：公司 ID，不要使用 corporation_id, 而用corp_id 即可。 </p></li><li><p>【强制】布尔值类型的字段命名为 is_描述 。如member表上表示是否为enabled的会员的字段命 名为 is_enabled。 </p></li><li><p>【强制】禁止在数据库中存储图片、文件等大的二进制数据 通常文件很大，短时间内造成数据量快速增长，数据库进行数据库读取时，通常会进行大量的随 机IO操作，文件很大时，IO操作很耗时。通常存储于文件服务器，数据库只存储文件地址信息。 </p></li><li><p>【建议】建表时关于主键： 表必须有主键</p><p> (1)强制要求主键为id，类型为int或bigint，且为 auto_increment 建议使用unsigned无符号型。</p><p> (2)标识表里每一行主体的字段不要设为主键，建议 设为其他字段如user_id，order_id等，并建立unique key索引。因为如果设为主键且主键值为随机 插入，则会导致innodb内部页分裂和大量随机I&#x2F;O，性能下降。 </p></li><li><p>【建议】核心表（如用户表）必须有行数据的 创建时间字段 （create_time）和 最后更新时间字段 （update_time），便于查问题。 </p></li><li><p>【建议】表中所有字段尽量都是 NOT NULL 属性，业务可以根据需要定义 DEFAULT值 。 因为使用 NULL值会存在每一行都会占用额外存储空间、数据迁移容易出错、聚合函数计算结果偏差等问 题。 </p></li><li><p>【建议】所有存储相同数据的 列名和列类型必须一致 （一般作为关联列，如果查询时关联列类型 不一致会自动进行数据类型隐式转换，会造成列上的索引失效，导致查询效率降低）。 </p></li><li><p>【建议】中间表（或临时表）用于保留中间结果集，名称以 tmp_ 开头。 备份表用于备份或抓取源表快照，名称以 bak_ 开头。中间表和备份表定期清理。 1</p></li><li><p>【示范】一个较为规范的建表语句：</p></li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE user_info (&#96;id&#96; int unsigned NOT NULL AUTO_INCREMENT COMMENT &#39;自增主键&#39;,&#96;user_id&#96; bigint(11) NOT NULL COMMENT &#39;用户id&#39;,&#96;username&#96; varchar(45) NOT NULL COMMENT &#39;真实姓名&#39;,&#96;email&#96; varchar(30) NOT NULL COMMENT &#39;用户邮箱&#39;,&#96;nickname&#96; varchar(45) NOT NULL COMMENT &#39;昵称&#39;,&#96;birthday&#96; date NOT NULL COMMENT &#39;生日&#39;,&#96;sex&#96; tinyint(4) DEFAULT &#39;0&#39; COMMENT &#39;性别&#39;,&#96;short_introduce&#96; varchar(150) DEFAULT NULL COMMENT &#39;一句话介绍自己，最多50个汉字&#39;,&#96;user_resume&#96; varchar(300) NOT NULL COMMENT &#39;用户提交的简历存放地址&#39;,&#96;user_register_ip&#96; int NOT NULL COMMENT &#39;用户注册时的源ip&#39;,&#96;create_time&#96; timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#39;创建时间&#39;,&#96;update_time&#96; timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATECURRENT_TIMESTAMP COMMENT &#39;修改时间&#39;,&#96;user_review_status&#96; tinyint NOT NULL COMMENT &#39;用户资料审核状态，1为通过，2为审核中，3为未通过，4为还未提交审核&#39;,PRIMARY KEY (&#96;id&#96;),UNIQUE KEY &#96;uniq_user_id&#96; (&#96;user_id&#96;),KEY &#96;idx_username&#96;(&#96;username&#96;),KEY &#96;idx_create_time_status&#96;(&#96;create_time&#96;,&#96;user_review_status&#96;)) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8 COMMENT&#x3D;&#39;网站用户基本信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="17"><li>【建议】创建表时，可以使用可视化工具。这样可以确保表、字段相关的约定都能设置上。</li></ol><p>实际上，我们通常很少自己写 DDL 语句，可以使用一些可视化工具来创建和操作数据库和数据表。</p><p>可视化工具除了方便，还能直接帮我们将数据库的结构定义转化成 SQL 语言，方便数据库和数据表结构的导出和导入。</p><h3 id="10-3-关于索引"><a href="#10-3-关于索引" class="headerlink" title="10.3 关于索引"></a>10.3 关于索引</h3><ol><li>【强制】InnoDB表必须主键为id int&#x2F;bigint auto_increment，且主键值 禁止被更新 。 </li><li>【强制】InnoDB和MyISAM存储引擎表，索引类型必须为 BTREE 。 </li><li>【建议】主键的名称以 pk_ 开头，唯一键以 uni_ 或 uk_ 开头，普通索引以 idx_ 开头，一律使用小写格式，以字段的名称或缩写作为后缀。 </li><li>【建议】多单词组成的columnname，取前几个单词首字母，加末单词组成column_name。如: sample 表 member_id 上的索引：idx_sample_mid。 </li><li>【建议】单个表上的索引个数 不能超过6个 。 </li><li>【建议】在建立索引时，多考虑建立 联合索引 ，并把区分度最高的字段放在最前面。 </li><li>【建议】在多表 JOIN 的SQL里，保证被驱动表的连接列上有索引，这样JOIN 执行效率最高。 </li><li>【建议】建表或加索引时，保证表里互相不存在 冗余索引 。 比如：如果表里已经存在key(a,b)， 则key(a)为冗余索引，需要删除。</li></ol><h3 id="10-4-SQL编写"><a href="#10-4-SQL编写" class="headerlink" title="10.4 SQL编写"></a>10.4 SQL编写</h3><ol><li>【强制】程序端SELECT语句必须指定具体字段名称，禁止写成 *。 </li><li>【建议】程序端insert语句指定具体字段名称，不要写成INSERT INTO t1 VALUES(…)。 </li><li>【建议】除静态表或小表（100行以内），DML语句必须有WHERE条件，且使用索引查找。 </li><li>【建议】INSERT INTO…VALUES(XX),(XX),(XX).. 这里XX的值不要超过5000个。 值过多虽然上线很 快，但会引起主从同步延迟。 </li><li>【建议】SELECT语句不要使用UNION，推荐使用UNION ALL，并且UNION子句个数限制在5个以 内。 </li><li>【建议】线上环境，多表 JOIN 不要超过5个表。 </li><li>【建议】减少使用ORDER BY，和业务沟通能不排序就不排序，或将排序放到程序端去做。ORDER BY、GROUP BY、DISTINCT 这些语句较为耗费CPU，数据库的CPU资源是极其宝贵的。 </li><li>【建议】包含了ORDER BY、GROUP BY、DISTINCT 这些查询的语句，WHERE 条件过滤出来的结果 集请保持在1000行以内，否则SQL会很慢。 </li><li>【建议】对单表的多次alter操作必须合并为一次 对于超过100W行的大表进行alter table，必须经过DBA审核，并在业务低峰期执行，多个alter需整 合在一起。 因为alter table会产生 表锁 ，期间阻塞对于该表的所有写入，对于业务可能会产生极 大影响。 </li><li>【建议】批量操作数据时，需要控制事务处理间隔时间，进行必要的sleep。 </li><li>【建议】事务里包含SQL不超过5个。 因为过长的事务会导致锁数据较久，MySQL内部缓存、连接消耗过多等问题。 </li><li>【建议】事务里更新语句尽量基于主键或UNIQUE KEY，如UPDATE… WHERE id&#x3D;XX; 否则会产生间隙锁，内部扩大锁定范围，导致系统性能下降，产生死锁。</li></ol><h2 id="11-PowerDesigner的使用"><a href="#11-PowerDesigner的使用" class="headerlink" title="11. PowerDesigner的使用"></a>11. PowerDesigner的使用</h2><p>PowerDesigner是一款开发人员常用的数据库建模工具，用户利用该软件可以方便地制作 <code>数据流程图</code> 、 <code>概念数据模型</code> 、 <code>物理数据模型</code> ，它几乎包括了数据库模型设计的全过程，是Sybase公司为企业建模和设 计提供的一套完整的集成化企业级建模解决方案。</p><h3 id="11-1-开始界面"><a href="#11-1-开始界面" class="headerlink" title="11.1 开始界面"></a>11.1 开始界面</h3><p>当前使用的PowerDesigner版本是16.5的。打开软件即是此页面，可选择Create Model,也可以选择Do Not Show page Again,自行在打开软件后创建也可以！完全看个人的喜好，在此我在后面的学习中不在显示此页面。</p><img src="../pic/MySQL索引及调优篇/image-20220707175250944.png" alt="image-20220707175250944" style="zoom:80%;float:left" /><p>“Create Model”的作用类似于普通的一个文件，该文件可以单独存放也可以归类存放。</p><p> “Create Project”的作用类似于文件夹，负责把有关联关系的文件集中归类存放。</p><h3 id="11-2-概念数据模型"><a href="#11-2-概念数据模型" class="headerlink" title="11.2 概念数据模型"></a>11.2 概念数据模型</h3><p>常用的模型有4种，分别是 <code>概念模型(CDM Conceptual Data Model)</code> ， <code>物理模型（PDM,Physical Data Model）</code> ， <code>面向对象的模型（OOM Objcet Oriented Model）</code> 和 <code>业务模型（BPM Business Process Model）</code> ，我们先创建概念数据模型。</p><img src="../pic/MySQL索引及调优篇/image-20220707175350250.png" alt="image-20220707175350250" style="float:left;" /><p>点击上面的ok，即可出现下图左边的概念模型1，可以自定义概念模型的名字，在概念模型中使用最多的 就是如图所示的Entity(实体),Relationship(关系)</p><img src="../pic/MySQL索引及调优篇/image-20220707175604026.png" alt="image-20220707175604026" style="float:left;" /><p><strong>Entity实体</strong></p><p>选中右边框中Entity这个功能，即可出现下面这个方框，需要注意的是书写name的时候，code自行补全，name可以是英文的也可以是中文的，但是code必须是英文的。</p><img src="../pic/MySQL索引及调优篇/image-20220707175653689.png" alt="image-20220707175653689" style="float:left;" /><p><strong>填充实体字段</strong></p><p>General中的name和code填好后，就可以点击Attributes（属性）来设置name（名字），code(在数据库中 的字段名)，Data Type(数据类型) ，length(数据类型的长度)</p><ul><li>Name: 实体名字一般为中文，如论坛用户 </li><li>Code: 实体代号，一般用英文，如XXXUser </li><li>Comment:注释，对此实体详细说明 </li><li>Code属性：代号，一般用英文UID DataType </li><li>Domain域，表示属性取值范围如可以创建10个字符的地址域 </li><li>M:Mandatory强制属性，表示该属性必填。不能为空 </li><li>P:Primary Identifer是否是主标识符，表示实体唯一标识符 </li><li>D:Displayed显示出来，默认全部勾选</li></ul><img src="../pic/MySQL索引及调优篇/image-20220707175805226.png" alt="image-20220707175805226" style="float:left;" /><p>在此上图说明name和code的起名方法</p><img src="../pic/MySQL索引及调优篇/image-20220707175827417.png" alt="image-20220707175827417" style="float:left;" /><p><strong>设置主标识符</strong></p><p>如果不希望系统自动生成标识符而是手动设置的话，那么切换到Identifiers选项卡，添加一行Identifier， 然后单击左上角的“属性”按钮，然后弹出的标识属性设置对话框中单击“添加行”按钮，选择该标识中使用的属性。例如将学号设置为学生实体的标识。</p><img src="../pic/MySQL索引及调优篇/image-20220707175858031.png" alt="image-20220707175858031" style="float:left;" /><p><strong>放大模型</strong></p><p>创建好概念数据模型如图所示，但是创建好的字体很小，读者可以按着ctrl键同时滑动鼠标的可滑动按钮 即可放大缩写字体，同时也可以看到主标识符有一个*号的标志，同时也显示出来了，name,Data type和 length这些可见的属性</p><img src="../pic/MySQL索引及调优篇/image-20220707175925155.png" alt="image-20220707175925155" style="float:left;" /><p><strong>实体关系</strong></p><p>同理创建一个班级的实体（需要特别注意的是，点击完右边功能的按钮后需要点击鼠标指针状态的按钮 或者右击鼠标即可，不然很容易乱操作，这点注意一下就可以了），然后使用Relationship（关系）这个 按钮可以连接学生和班级之间的关系，发生一对多（班级对学生）或者多对一（学生对班级）的关系。 </p><p>如图所示</p><img src="../pic/MySQL索引及调优篇/image-20220707175954634.png" alt="image-20220707175954634" style="float:left;" /><p>需要注意的是点击Relationship这个按钮，就把班级和学生联系起来了，就是一条线，然后双击这条线进 行编辑，在General这块起name和code</p><img src="../pic/MySQL索引及调优篇/image-20220707180021612.png" alt="image-20220707180021612" style="float:left;" /><p>上面的name和code起好后就可以在Cardinalities这块查看班级和学生的关系，可以看到班级的一端是一 条线，学生的一端是三条，代表班级对学生是一对多的关系即one对many的关系，点击应用，然后确定 即可</p><img src="../pic/MySQL索引及调优篇/image-20220707180044291.png" alt="image-20220707180044291" style="float:left;" /><p>一对多和多对一练习完还有多对多的练习，如下图操作所示，老师实体和上面介绍的一样，自己将 name，data type等等修改成自己需要的即可，满足项目开发需求即可。（comment是解释说明，自己可以写相关的介绍和说明）</p><img src="../pic/MySQL索引及调优篇/image-20220707180113532.png" alt="image-20220707180113532" style="float:left;" /><p>多对多需要注意的是自己可以手动点击按钮将关系调整称为多对多的关系many对many的关系，然后点击应用和确定即可</p><img src="../pic/MySQL索引及调优篇/image-20220707180159184.png" alt="image-20220707180159184" style="float:left;" /><p>综上即可完成最简单的学生，班级，教师这种概念数据模型的设计，需要考虑数据的类型和主标识码， 是否为空。关系是一对一还是一对多还是多对多的关系，自己需要先规划好再设计，然后就ok了。</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707180254510.png" alt="image-20220707180254510"></p><h3 id="11-3-物理数据模型"><a href="#11-3-物理数据模型" class="headerlink" title="11.3 物理数据模型"></a>11.3 物理数据模型</h3><p>上面是概念数据模型，下面介绍一下物理数据模型，以后 经常使用 的就是物理数据模型。打开 PowerDesigner，然后点击File–&gt;New Model然后选择如下图所示的物理数据模型，物理数据模型的名字自己起，然后选择自己所使用的数据库即可。</p><img src="../pic/MySQL索引及调优篇/image-20220707180327712.png" alt="image-20220707180327712" style="float:left;" /><p>创建好主页面如图所示，但是右边的按钮和概念模型略有差别，物理模型最常用的三个是 <code>table(表)</code> ， <code>view(视图)</code>， <code>reference(关系) </code>；</p><img src="../pic/MySQL索引及调优篇/image-20220707180418090.png" alt="image-20220707180418090" style="float:left;" /><p>鼠标先点击右边table这个按钮然后在新建的物理模型点一下，即可新建一个表，然后双击新建如下图所示，在General的name和code填上自己需要的，点击应用即可），如下图：</p><img src="../pic/MySQL索引及调优篇/image-20220707180449212.png" alt="image-20220707180449212" style="float:left;" /><p>然后点击Columns,如下图设置，非常简单，需要注意的就是P（primary主键） , F （foreign key外键） , M（mandatory强制性的，代表不可为空） 这三个。</p><img src="../pic/MySQL索引及调优篇/image-20220707180537251.png" alt="image-20220707180537251" style="float:left;" /><p>在此设置学号的自增（MYSQL里面的自增是这个AUTO_INCREMENT），班级编号同理，不多赘述！</p><img src="../pic/MySQL索引及调优篇/image-20220707180556645.png" alt="image-20220707180556645" style="float:left;" /><p>在下面的这个点上对号即可，就设置好了自增</p><img src="../pic/MySQL索引及调优篇/image-20220707180619440.png" alt="image-20220707180619440" style="float:left;" /><p>全部完成后如下图所示。</p><img src="../pic/MySQL索引及调优篇/image-20220707180643107.png" alt="image-20220707180643107" style="float:left;" /><p>班级物理模型同理如下图所示创建即可</p><img src="../pic/MySQL索引及调优篇/image-20220707180723698.png" alt="image-20220707180723698" style="float:left;" /><img src="../pic/MySQL索引及调优篇/image-20220707180744600.png" alt="image-20220707180744600" style="float:left;" /><p>完成后如下图所示</p><img src="../pic/MySQL索引及调优篇/image-20220707180806150.png" alt="image-20220707180806150" style="float:left;" /><p>上面的设置好如上图所示，然后下面是关键的地方，点击右边按钮Reference这个按钮，因为是班级对学 生是一对多的，所以鼠标从学生拉到班级如下图所示，学生表将发生变化，学生表里面增加了一行，这 行是班级表的主键作为学生表的外键，将班级表和学生表联系起来。（仔细观察即可看到区别。）</p><img src="../pic/MySQL索引及调优篇/image-20220707180828164.png" alt="image-20220707180828164" style="float:left;" /><p>做完上面的操作，就可以双击中间的一条线，显示如下图，修改name和code即可</p><img src="../pic/MySQL索引及调优篇/image-20220707183743297.png" alt="image-20220707183743297" style="float:left;" /><p>但是需要注意的是，修改完毕后显示的结果却如下图所示，并没有办法直接像概念模型那样，修改过后 显示在中间的那条线上面，自己明白即可。</p><img src="../pic/MySQL索引及调优篇/image-20220707193816176.png" alt="image-20220707193816176" style="float:left;" /><p>学习了多对一或者一对多的关系，接下来学习多对对的关系，同理自己建好老师表，这里不在叙述，记得老师编号自增，建好如下图所示</p><img src="../pic/MySQL索引及调优篇/image-20220707193932694.png" alt="image-20220707193932694" style="float:left;" /><p>下面是多对多关系的关键，由于物理模型多对多的关系需要一个中间表来连接，如下图，只设置一个字 段，主键，自增</p><img src="../pic/MySQL索引及调优篇/image-20220707193957629.png" alt="image-20220707193957629" style="float:left;" /><p>点击应用，然后设置Columns，只添加一个字段</p><img src="../pic/MySQL索引及调优篇/image-20220707194048843.png" alt="image-20220707194048843" style="float:left;" /><p>这是设置字段递增，前面已经叙述过好几次</p><img src="../pic/MySQL索引及调优篇/image-20220707194111885.png" alt="image-20220707194111885" style="float:left;" /><p>设置好后如下图所示，需要注意的是有箭头的一方是一，无箭头的一方是多，即一对多的多对一的关系 需要搞清楚，学生也可以有很多老师，老师也可以有很多学生，所以学生和老师都可以是主体；</p><img src="../pic/MySQL索引及调优篇/image-20220707194138137.png" alt="image-20220707194138137" style="float:left;" /><p>可以看到添加关系以后学生和教师的关系表前后发生的变化</p><img src="../pic/MySQL索引及调优篇/image-20220707194158936.png" alt="image-20220707194158936" style="float:left;" /><h3 id="11-4-概念模型转为物理模型"><a href="#11-4-概念模型转为物理模型" class="headerlink" title="11.4 概念模型转为物理模型"></a>11.4 概念模型转为物理模型</h3><p>1：如下图所示先打开概念模型图，然后点击Tool,如下图所示</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707194228064.png" alt="image-20220707194228064"></p><p>点开的页面如下所示，name和code已经从概念模型1改成物理模型1了</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707194248236.png" alt="image-20220707194248236"></p><p>完成后如下图所示，将自行打开修改的物理模型，需要注意的是这些表的数据类型已经自行改变了，而 且中间表出现两个主键，即双主键</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707194308595.png" alt="image-20220707194308595"></p><h3 id="11-5-物理模型转为概念模型"><a href="#11-5-物理模型转为概念模型" class="headerlink" title="11.5 物理模型转为概念模型"></a>11.5 物理模型转为概念模型</h3><p>上面介绍了概念模型转物理模型，下面介绍一下物理模型转概念模型（如下图点击操作即可）</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707194405358.png" alt="image-20220707194405358"></p><p>然后出现如下图所示界面，然后将物理修改为概念 ，点击应用确认即可</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707194419360.png" alt="image-20220707194419360"></p><p>点击确认后将自行打开如下图所示的页面，自己观察有何变化，如果转换为oracle的，数据类型会发生变 化，比如Varchar2等等）；</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707194433407.png" alt="image-20220707194433407"></p><h3 id="11-6-物理模型导出SQL语句"><a href="#11-6-物理模型导出SQL语句" class="headerlink" title="11.6 物理模型导出SQL语句"></a>11.6 物理模型导出SQL语句</h3><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707194544714.png" alt="image-20220707194544714"></p><p>打开之后如图所示，修改好存在sql语句的位置和生成文件的名称即可</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707194557554.png" alt="image-20220707194557554"></p><p>在Selection中选择需要导出的表，然后点击应用和确认即可</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707194637242.png" alt="image-20220707194637242"></p><p>完成以后出现如下图所示，可以点击Edit或者close按钮</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707194727849.png" alt="image-20220707194727849"></p><p>自此，就完成了导出sql语句，就可以到自己指定的位置查看导出的sql语句了；PowerDesigner在以后在 项目开发过程中用来做需求分析和数据库的设计非常的方便和快捷。</p><h1 id="第12章-数据库其它调优策略"><a href="#第12章-数据库其它调优策略" class="headerlink" title="第12章_数据库其它调优策略"></a>第12章_数据库其它调优策略</h1><h2 id="1-数据库调优的措施"><a href="#1-数据库调优的措施" class="headerlink" title="1. 数据库调优的措施"></a>1. 数据库调优的措施</h2><h3 id="1-1-调优的目标"><a href="#1-1-调优的目标" class="headerlink" title="1.1 调优的目标"></a>1.1 调优的目标</h3><ul><li>尽可能节省系统资源 ，以便系统可以提供更大负荷的服务。（吞吐量更大） </li><li>合理的结构设计和参数调整，以提高用户操作响应的速度 。（响应速度更快） </li><li>减少系统的瓶颈，提高MySQL数据库整体的性能。</li></ul><h3 id="1-2-如何定位调优问题"><a href="#1-2-如何定位调优问题" class="headerlink" title="1.2 如何定位调优问题"></a>1.2 如何定位调优问题</h3><img src="../pic/MySQL索引及调优篇/image-20220707200915836.png" alt="image-20220707200915836" style="float:left;" /><p>如何确定呢？一般情况下，有如下几种方式：</p><img src="../pic/MySQL索引及调优篇/image-20220707201133424.png" alt="image-20220707201133424" style="float:left;" /><h3 id="1-3-调优的维度和步骤"><a href="#1-3-调优的维度和步骤" class="headerlink" title="1.3 调优的维度和步骤"></a>1.3 调优的维度和步骤</h3><p>我们需要调优的对象是整个数据库管理系统，它不仅包括 SQL 查询，还包括数据库的部署配置、架构 等。从这个角度来说，我们思考的维度就不仅仅局限在 SQL 优化上了。通过如下的步骤我们进行梳理：</p><h4 id="第1步：选择适合的-DBMS"><a href="#第1步：选择适合的-DBMS" class="headerlink" title="第1步：选择适合的 DBMS"></a>第1步：选择适合的 DBMS</h4><img src="../pic/MySQL索引及调优篇/image-20220707201443229.png" alt="image-20220707201443229" style="float:left;" /><h4 id="第2步：优化表设计"><a href="#第2步：优化表设计" class="headerlink" title="第2步：优化表设计"></a>第2步：优化表设计</h4><img src="../pic/MySQL索引及调优篇/image-20220707201617799.png" alt="image-20220707201617799" style="float:left;" /><h4 id="第3步：优化逻辑查询"><a href="#第3步：优化逻辑查询" class="headerlink" title="第3步：优化逻辑查询"></a>第3步：优化逻辑查询</h4><img src="../pic/MySQL索引及调优篇/image-20220707202059972.png" alt="image-20220707202059972" style="float:left;" /><h4 id="第4步：优化物理查询"><a href="#第4步：优化物理查询" class="headerlink" title="第4步：优化物理查询"></a>第4步：优化物理查询</h4><p>物理查询优化是在确定了逻辑查询优化之后，采用物理优化技术（比如索引等），通过计算代价模型对 各种可能的访问路径进行估算，从而找到执行方式中代价最小的作为执行计划。<strong>在这个部分中，我们需要掌握的重点是对索引的创建和使用。</strong></p><img src="../pic/MySQL索引及调优篇/image-20220707202156660.png" alt="image-20220707202156660" style="float:left;" /><h4 id="第5步：使用-Redis-或-Memcached-作为缓存"><a href="#第5步：使用-Redis-或-Memcached-作为缓存" class="headerlink" title="第5步：使用 Redis 或 Memcached 作为缓存"></a>第5步：使用 Redis 或 Memcached 作为缓存</h4><p>除了可以对 SQL 本身进行优化以外，我们还可以请外援提升查询的效率。</p><p>因为数据都是存放到数据库中，我们需要从数据库层中取出数据放到内存中进行业务逻辑的操作，当用 户量增大的时候，如果频繁地进行数据查询，会消耗数据库的很多资源。如果我们将常用的数据直接放 到内存中，就会大幅提升查询的效率。</p><p>键值存储数据库可以帮我们解决这个问题。</p><p>常用的键值存储数据库有 Redis 和 Memcached，它们都可以将数据存放到内存中。</p><img src="../pic/MySQL索引及调优篇/image-20220707202436467.png" alt="image-20220707202436467" style="float:left;" /><h4 id="第6步：库级优化"><a href="#第6步：库级优化" class="headerlink" title="第6步：库级优化"></a>第6步：库级优化</h4><img src="../pic/MySQL索引及调优篇/image-20220707202555506.png" alt="image-20220707202555506" style="float:left;" /><img src="../pic/MySQL索引及调优篇/image-20220707202732911.png" alt="image-20220707202732911" style="float:left;" /><img src="../pic/MySQL索引及调优篇/image-20220707203538155.png" alt="image-20220707203538155" style="float:left;" /><img src="../pic/MySQL索引及调优篇/image-20220707203607993.png" alt="image-20220707203607993" style="float:left;" /><blockquote><p>但需要注意的是，分拆在提升数据库性能的同时，也会增加维护和使用成本。</p></blockquote><h2 id="2-优化MySQL服务器"><a href="#2-优化MySQL服务器" class="headerlink" title="2. 优化MySQL服务器"></a>2. 优化MySQL服务器</h2><img src="../pic/MySQL索引及调优篇/image-20220707203818987.png" alt="image-20220707203818987" style="float:left;" /><h3 id="2-1-优化服务器硬件"><a href="#2-1-优化服务器硬件" class="headerlink" title="2.1 优化服务器硬件"></a>2.1 优化服务器硬件</h3><p>服务器的硬件性能直接决定着MySQL数据库的性能。硬件的性能瓶颈直接决定MySQL数据库的运行速度 和效率。针对性能瓶颈提高硬件配置，可以提高MySQL数据库查询、更新的速度。 </p><p>（1） <code>配置较大的内存</code> 。足够大的显存是提高MySQL数据库性能的方法之一。内存的速度比磁盘I&#x2F;O快得多，可以通过增加系统的<code>缓冲区容量</code>使数据在内存中停留的时间更长，以<code>减少磁盘I/O</code>。</p><p>（2） <code>配置高速磁盘系统 </code>，以减少读盘的等待时间，提高响应速度。磁盘的I&#x2F;O能力，也就是它的寻道能力，目前的SCSI高速旋转的是7200转&#x2F;分钟，这样的速度，一旦访问的用户量上去，磁盘的压力就会过大，如果是每天的网站pv (page view) 在150w，这样的一般的配置就无法满足这样的需求了。现在SSD盛行，在SSD上随机访问和顺序访问性能差不多，使用SSD可以减少随机IO带来的性能损耗。</p><p>（3） <code>合理分布磁盘I/O</code>，把磁盘I&#x2F;O分散在多个设备，以减少资源竞争，提高冰箱操作能力。</p><p>（4） <code>配置多处理器</code>, MySQL是多线程的数据库，多处理器可同时执行多个线程。</p><h3 id="2-2-优化MySQL的参数"><a href="#2-2-优化MySQL的参数" class="headerlink" title="2.2 优化MySQL的参数"></a>2.2 优化MySQL的参数</h3><img src="../pic/MySQL索引及调优篇/image-20220707204403406.png" alt="image-20220707204403406" style="float:left;" /><ul><li><p>innodb_buffer_pool_size ：这个参数是Mysql数据库最重要的参数之一，表示InnoDB类型的 表 和索引的最大缓存 。它不仅仅缓存 索引数据 ，还会缓存 表的数据 。这个值越大，查询的速度就会越 快。但是这个值太大会影响操作系统的性能。</p></li><li><p>key_buffer_size ：表示 索引缓冲区的大小 。索引缓冲区是所有的 线程共享 。增加索引缓冲区可 以得到更好处理的索引（对所有读和多重写）。当然，这个值不是越大越好，它的大小取决于内存 的大小。如果这个值太大，就会导致操作系统频繁换页，也会降低系统性能。对于内存在 4GB 左右 的服务器该参数可设置为 256M 或 384M 。</p></li><li><p>table_cache ：表示 同时打开的表的个数 。这个值越大，能够同时打开的表的个数越多。物理内 存越大，设置就越大。默认为2402，调到512-1024最佳。这个值不是越大越好，因为同时打开的表 太多会影响操作系统的性能。</p></li><li><p>query_cache_size ：表示 查询缓冲区的大小 。可以通过在MySQL控制台观察，如果 Qcache_lowmem_prunes的值非常大，则表明经常出现缓冲不够的情况，就要增加Query_cache_size 的值；如果Qcache_hits的值非常大，则表明查询缓冲使用非常频繁，如果该值较小反而会影响效 率，那么可以考虑不用查询缓存；Qcache_free_blocks，如果该值非常大，则表明缓冲区中碎片很 多。MySQL8.0之后失效。该参数需要和query_cache_type配合使用。</p></li><li><p>query_cache_type 的值是0时，所有的查询都不使用查询缓存区。但是query_cache_type&#x3D;0并不 会导致MySQL释放query_cache_size所配置的缓存区内存。</p><ul><li>当query_cache_type&#x3D;1时，所有的查询都将使用查询缓存区，除非在查询语句中指定 SQL_NO_CACHE ，如SELECT SQL_NO_CACHE * FROM tbl_name。</li><li>当query_cache_type&#x3D;2时，只有在查询语句中使用 SQL_CACHE 关键字，查询才会使用查询缓 存区。使用查询缓存区可以提高查询的速度，这种方式只适用于修改操作少且经常执行相同的 查询操作的情况。</li></ul></li><li><p>sort_buffer_size ：表示每个 需要进行排序的线程分配的缓冲区的大小 。增加这个参数的值可以 提高 ORDER BY 或 GROUP BY 操作的速度。默认数值是2 097 144字节（约2MB）。对于内存在4GB 左右的服务器推荐设置为6-8M，如果有100个连接，那么实际分配的总共排序缓冲区大小为100 × 6 ＝ 600MB。</p></li><li><p>join_buffer_size &#x3D; 8M ：表示 联合查询操作所能使用的缓冲区大小 ，和sort_buffer_size一样， 该参数对应的分配内存也是每个连接独享。</p></li><li><p>read_buffer_size ：表示 每个线程连续扫描时为扫描的每个表分配的缓冲区的大小（字节） 。当线 程从表中连续读取记录时需要用到这个缓冲区。SET SESSION read_buffer_size&#x3D;n可以临时设置该参 数的值。默认为64K，可以设置为4M。</p></li><li><p>innodb_flush_log_at_trx_commit ：表示 何时将缓冲区的数据写入日志文件 ，并且将日志文件 写入磁盘中。该参数对于innoDB引擎非常重要。该参数有3个值，分别为0、1和2。该参数的默认值 为1。</p><ul><li>值为 0 时，表示 每秒1次 的频率将数据写入日志文件并将日志文件写入磁盘。每个事务的 commit并不会触发前面的任何操作。该模式速度最快，但不太安全，mysqld进程的崩溃会导 致上一秒钟所有事务数据的丢失。</li><li>值为 1 时，表示 每次提交事务时 将数据写入日志文件并将日志文件写入磁盘进行同步。该模 式是最安全的，但也是最慢的一种方式。因为每次事务提交或事务外的指令都需要把日志写入 （flush）硬盘。</li><li>值为 2 时，表示 每次提交事务时 将数据写入日志文件， 每隔1秒 将日志文件写入磁盘。该模 式速度较快，也比0安全，只有在操作系统崩溃或者系统断电的情况下，上一秒钟所有事务数 据才可能丢失。</li></ul></li><li><p>innodb_log_buffer_size ：这是 InnoDB 存储引擎的 事务日志所使用的缓冲区 。为了提高性能， 也是先将信息写入 Innodb Log Buffer 中，当满足 innodb_flush_log_trx_commit 参数所设置的相应条 件（或者日志缓冲区写满）之后，才会将日志写到文件（或者同步到磁盘）中。</p></li><li><p>max_connections ：表示 允许连接到MySQL数据库的最大数量 ，默认值是 151 。如果状态变量 connection_errors_max_connections 不为零，并且一直增长，则说明不断有连接请求因数据库连接 数已达到允许最大值而失败，这是可以考虑增大max_connections 的值。在Linux 平台下，性能好的 服务器，支持 500-1000 个连接不是难事，需要根据服务器性能进行评估设定。这个连接数 不是越大 越好 ，因为这些连接会浪费内存的资源。过多的连接可能会导致MySQL服务器僵死。</p></li><li><p>back_log ：用于 控制MySQL监听TCP端口时设置的积压请求栈大小 。如果MySql的连接数达到 max_connections时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即 back_log，如果等待连接的数量超过back_log，将不被授予连接资源，将会报错。5.6.6 版本之前默 认值为 50 ， 之后的版本默认为 50 + （max_connections &#x2F; 5）， 对于Linux系统推荐设置为小于512 的整数，但最大不超过900。</p><p>如果需要数据库在较短的时间内处理大量连接请求， 可以考虑适当增大back_log 的值。</p></li><li><p>thread_cache_size ： 线程池缓存线程数量的大小 ，当客户端断开连接后将当前线程缓存起来， 当在接到新的连接请求时快速响应无需创建新的线程 。这尤其对那些使用短连接的应用程序来说可 以极大的提高创建连接的效率。那么为了提高性能可以增大该参数的值。默认为60，可以设置为 120。</p><p>可以通过如下几个MySQL状态值来适当调整线程池的大小：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show global status like &#39;Thread%&#39;;+-------------------+-------+| Variable_name | Value |+-------------------+-------+| Threads_cached | 2 || Threads_connected | 1 || Threads_created | 3 || Threads_running | 2 |+-------------------+-------+4 rows in set (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当 Threads_cached 越来越少，但 Threads_connected 始终不降，且 Threads_created 持续升高，可 适当增加 thread_cache_size 的大小。</p></li><li><p>wait_timeout ：指定 一个请求的最大连接时间 ，对于4GB左右内存的服务器可以设置为5-10。</p></li><li><p>interactive_timeout ：表示服务器在关闭连接前等待行动的秒数。</p></li></ul><p>这里给出一份my.cnf的参考配置：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqld]port &#x3D; 3306 serverid &#x3D; 1 socket &#x3D; &#x2F;tmp&#x2F;mysql.sock skip-locking #避免MySQL的外部锁定，减少出错几率增强稳定性。 skip-name-resolve #禁止MySQL对外部连接进行DNS解析，使用这一选项可以消除MySQL进行DNS解析的时间。但需要注意，如果开启该选项，则所有远程主机连接授权都要使用IP地址方式，否则MySQL将无法正常处理连接请求！ back_log &#x3D; 384key_buffer_size &#x3D; 256M max_allowed_packet &#x3D; 4M thread_stack &#x3D; 256Ktable_cache &#x3D; 128K sort_buffer_size &#x3D; 6M read_buffer_size &#x3D; 4Mread_rnd_buffer_size&#x3D;16M join_buffer_size &#x3D; 8M myisam_sort_buffer_size &#x3D;64M table_cache &#x3D; 512 thread_cache_size &#x3D; 64 query_cache_size &#x3D; 64Mtmp_table_size &#x3D; 256M max_connections &#x3D; 768 max_connect_errors &#x3D; 10000000wait_timeout &#x3D; 10 thread_concurrency &#x3D; 8 #该参数取值为服务器逻辑CPU数量*2，在本例中，服务器有2颗物理CPU，而每颗物理CPU又支持H.T超线程，所以实际取值为4*2&#x3D;8skip-networking #开启该选项可以彻底关闭MySQL的TCP&#x2F;IP连接方式，如果WEB服务器是以远程连接的方式访问MySQL数据库服务器则不要开启该选项！否则将无法正常连接！ table_cache&#x3D;1024innodb_additional_mem_pool_size&#x3D;4M #默认为2M innodb_flush_log_at_trx_commit&#x3D;1innodb_log_buffer_size&#x3D;2M #默认为1M innodb_thread_concurrency&#x3D;8 #你的服务器CPU有几个就设置为几。建议用默认一般为8 tmp_table_size&#x3D;64M #默认为16M，调到64-256最挂thread_cache_size&#x3D;120 query_cache_size&#x3D;32M<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很多情况还需要具体情况具体分析！</p><p><strong>举例：</strong></p><img src="../pic/MySQL索引及调优篇/image-20220707210351452.png" alt="image-20220707210351452" style="float:left;" /><p><strong>(1) 调整系统参数 InnoDB_flush_log_at_trx_commit</strong></p><img src="../pic/MySQL索引及调优篇/image-20220707210447501.png" alt="image-20220707210447501" style="float:left;" /><p><strong>(2)  调整系统参数 InnoDB_buffer_pool_size</strong></p><img src="../pic/MySQL索引及调优篇/image-20220707210555848.png" alt="image-20220707210555848" style="float:left;" /><p><strong>(3) 调整系统参数 InnoDB_buffer_pool_instances</strong></p><img src="../pic/MySQL索引及调优篇/image-20220707210720394.png" alt="image-20220707210720394" style="float:left;" /><h2 id="3-优化数据库结构"><a href="#3-优化数据库结构" class="headerlink" title="3. 优化数据库结构"></a>3. 优化数据库结构</h2><img src="../pic/MySQL索引及调优篇/image-20220707211709553.png" alt="image-20220707211709553" style="float:left;" /><h3 id="3-1-拆分表：冷热数据分离"><a href="#3-1-拆分表：冷热数据分离" class="headerlink" title="3.1 拆分表：冷热数据分离"></a>3.1 拆分表：冷热数据分离</h3><img src="../pic/MySQL索引及调优篇/image-20220707211802756.png" alt="image-20220707211802756" style="float:left;" /><p><strong>举例1：</strong> <code>会员members表</code> 存储会员登录认证信息，该表中有很多字段，如id、姓名、密码、地址、电 话、个人描述字段。其中地址、电话、个人描述等字段并不常用，可以将这些不常用的字段分解出另一 个表。将这个表取名叫members_detail，表中有member_id、address、telephone、description等字段。 这样就把会员表分成了两个表，分别为 <code>members表</code> 和 <code>members_detail表</code> 。</p><p>创建这两个表的SQL语句如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE members (    id int(11) NOT NULL AUTO_INCREMENT,    username varchar(50) DEFAULT NULL,    password varchar(50) DEFAULT NULL,    last_login_time datetime DEFAULT NULL,    last_login_ip varchar(100) DEFAULT NULL,    PRIMARY KEY(Id));CREATE TABLE members_detail (    Member_id int(11) NOT NULL DEFAULT 0,    address varchar(255) DEFAULT NULL,    telephone varchar(255) DEFAULT NULL,    description text);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果需要查询会员的基本信息或详细信息，那么可以用会员的id来查询。如果需要将会员的基本信息和 详细信息同时显示，那么可以将members表和members_detail表进行联合查询，查询语句如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM members LEFT JOIN members_detail on members.id &#x3D;members_detail.member_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过这种分解可以提高表的查询效率。对于字段很多且有些字段使用不频繁的表，可以通过这种分解的方式来优化数据库的性能。</p><h3 id="3-2-增加中间表"><a href="#3-2-增加中间表" class="headerlink" title="3.2 增加中间表"></a>3.2 增加中间表</h3><img src="../pic/MySQL索引及调优篇/image-20220707212800544.png" alt="image-20220707212800544" style="float:left;" /><p>举例1： 学生信息表 和 班级表 的SQL语句如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE &#96;class&#96; (&#96;id&#96; INT(11) NOT NULL AUTO_INCREMENT,&#96;className&#96; VARCHAR(30) DEFAULT NULL,&#96;address&#96; VARCHAR(40) DEFAULT NULL,&#96;monitor&#96; INT NULL ,PRIMARY KEY (&#96;id&#96;)) ENGINE&#x3D;INNODB AUTO_INCREMENT&#x3D;1 DEFAULT CHARSET&#x3D;utf8;CREATE TABLE &#96;student&#96; (&#96;id&#96; INT(11) NOT NULL AUTO_INCREMENT,&#96;stuno&#96; INT NOT NULL ,&#96;name&#96; VARCHAR(20) DEFAULT NULL,&#96;age&#96; INT(3) DEFAULT NULL,&#96;classId&#96; INT(11) DEFAULT NULL,PRIMARY KEY (&#96;id&#96;)) ENGINE&#x3D;INNODB AUTO_INCREMENT&#x3D;1 DEFAULT CHARSET&#x3D;utf8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在有一个模块需要经常查询带有学生名称（name）、学生所在班级名称（className）、学生班级班 长（monitor）的学生信息。根据这种情况可以创建一个 temp_student 表。temp_student表中存储学生名称（stu_name）、学生所在班级名称（className）和学生班级班长（monitor）信息。创建表的语句如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE &#96;temp_student&#96; (&#96;id&#96; INT(11) NOT NULL AUTO_INCREMENT,&#96;stu_name&#96; INT NOT NULL ,&#96;className&#96; VARCHAR(20) DEFAULT NULL,&#96;monitor&#96; INT(3) DEFAULT NULL,PRIMARY KEY (&#96;id&#96;)) ENGINE&#x3D;INNODB AUTO_INCREMENT&#x3D;1 DEFAULT CHARSET&#x3D;utf8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来，从学生信息表和班级表中查询相关信息存储到临时表中：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">insert into temp_student(stu_name,className,monitor)            select s.name,c.className,c.monitor            from student as s,class as c            where s.classId &#x3D; c.id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>以后，可以直接从temp_student表中查询学生名称、班级名称和班级班长，而不用每次都进行联合查 询。这样可以提高数据库的查询速度。</p><h3 id="3-3-增加冗余字段"><a href="#3-3-增加冗余字段" class="headerlink" title="3.3 增加冗余字段"></a>3.3 增加冗余字段</h3><p>设计数据库表时应尽量遵循范式理论的规约，尽可能减少冗余字段，让数据库设计看起来精致、优雅。 但是，合理地加入冗余字段可以提高查询速度。</p><p>表的规范化程度越高，表与表之间的关系就越多，需要连接查询的情况也就越多。尤其在数据量大，而 且需要频繁进行连接的时候，为了提升效率，我们也可以考虑增加冗余字段来减少连接。</p><p>这部分内容在《第11章_数据库的设计规范》章节中 反范式化小节 中具体展开讲解了。这里省略。</p><h3 id="3-4-优化数据类型"><a href="#3-4-优化数据类型" class="headerlink" title="3.4 优化数据类型"></a>3.4 优化数据类型</h3><img src="../pic/MySQL索引及调优篇/image-20220707213524137.png" alt="image-20220707213524137" style="float:left;" /><p><strong>情况1：对整数类型数据进行优化。</strong></p><p>遇到整数类型的字段可以用 INT 型 。这样做的理由是，INT 型数据有足够大的取值范围，不用担心数 据超出取值范围的问题。刚开始做项目的时候，首先要保证系统的稳定性，这样设计字段类型是可以 的。但在数据量很大的时候，数据类型的定义，在很大程度上会影响到系统整体的执行效率。</p><p>对于 非负型 的数据（如自增ID、整型IP）来说，要优先使用无符号整型 UNSIGNED 来存储。因为无符号 相对于有符号，同样的字节数，存储的数值范围更大。如tinyint有符号为-128-127，无符号为0-255，多 出一倍的存储空间。</p><p><strong>情况2：既可以使用文本类型也可以使用整数类型的字段，要选择使用整数类型。</strong></p><p>跟文本类型数据相比，大整数往往占用更少的存储空间 ，因此，在存取和比对的时候，可以占用更少的 内存空间。所以，在二者皆可用的情况下，尽量使用整数类型，这样可以提高查询的效率。如：将IP地 址转换成整型数据。</p><p><strong>情况3：避免使用TEXT、BLOB数据类型</strong></p><img src="../pic/MySQL索引及调优篇/image-20220707214640374.png" alt="image-20220707214640374" style="float:left;" /><p><strong>情况4：避免使用ENUM类型</strong></p><p>修改ENUM值需要使用ALTER语句。</p><p>ENUM类型的ORDER BY 操作效率低，需要额外操作。使用TINYINT来代替ENUM类型。</p><p><strong>情况5：使用TIMESTAMP存储时间</strong></p><p>TIMESTAMP存储的时间范围1970-01-01 00:00:01 ~ 2038-01_19-03:14:07。TIMESTAMP使用4字节，DATETIME使用8个字节，同时TIMESTAMP具有自动赋值以及自动更新的特性。</p><p><strong>情况6：用DECIMAL代替FLOAT和DOUBLE存储精确浮点数</strong></p><ol><li>非精准浮点： float, double</li><li>精准浮点：decimal</li></ol><p>Decimal类型为精准浮点数，在计算时不会丢失精度，尤其是财务相关的金融类数据。占用空间由定义的宽度决定，每4个字节可以存储9位数字，并且小数点要占用一个字节。可用于存储比bigint更大的整型数据。</p><p><strong>总之，遇到数据量大的项目时，一定要在充分了解业务需求的前提下，合理优化数据类型，这样才能充 分发挥资源的效率，使系统达到最优。</strong></p><h3 id="3-5-优化插入记录的速度"><a href="#3-5-优化插入记录的速度" class="headerlink" title="3.5 优化插入记录的速度"></a>3.5 优化插入记录的速度</h3><p>插入记录时，影响插入速度的主要是索引、唯一性校验、一次插入记录条数等。根据这些情况可以分别进行优化。这里我们分为MyISAM引擎和InnoDB引擎来讲。</p><p><strong>1. MyISAM引擎的表：</strong></p><p><strong>① 禁用索引</strong></p><img src="../pic/MySQL索引及调优篇/image-20220707215305640.png" alt="image-20220707215305640" style="float:left;" /><p><strong>② 禁用唯一性检查</strong></p><img src="../pic/MySQL索引及调优篇/image-20220707215356893.png" alt="image-20220707215356893" style="float:left;" /><p><strong>③ 使用批量插入</strong></p><p>插入多条记录时，可以使用一条INSERT语句插入一条数据，也可以使用一条INSERT语句插入多条数据。插入一条记录的INSERT语句情形如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">insert into student values(1,&#39;zhangsan&#39;,18,1);insert into student values(2,&#39;lisi&#39;,17,1);insert into student values(3,&#39;wangwu&#39;,17,1);insert into student values(4,&#39;zhaoliu&#39;,19,1);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用一条INSERT语句插入多条记录的情形如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">insert into student values(1,&#39;zhangsan&#39;,18,1),(2,&#39;lisi&#39;,17,1),(3,&#39;wangwu&#39;,17,1),(4,&#39;zhaoliu&#39;,19,1);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第2种情形的插入速度要比第1种情形快。</p><p><strong>④ 使用LOAD DATA INFILE 批量导入</strong></p><p>当需要批量导入数据时，如果能用LOAD DATA INFILE语句，就尽量使用。因为LOAD DATA INFILE语句导入数据的速度比INSERT语句块。</p><p><strong>2. InnoDB引擎的表：</strong></p><p><strong>① 禁用唯一性检查</strong></p><p>插入数据之前执行<code>set unique_checks=0</code>来禁止对唯一索引的检查，数据导入完成之后再运行<code>set unique_check=1</code>。这个和MyISAM引擎的使用方法一样。</p><p><strong>② 禁用外键检查</strong></p><img src="../pic/MySQL索引及调优篇/image-20220707220034534.png" alt="image-20220707220034534" style="float:left;" /><p><strong>③ 禁止自动提交</strong></p><img src="../pic/MySQL索引及调优篇/image-20220707220131891.png" alt="image-20220707220131891" style="float:left;" /><h3 id="3-6-使用非空约束"><a href="#3-6-使用非空约束" class="headerlink" title="3.6 使用非空约束"></a>3.6 使用非空约束</h3><img src="../pic/MySQL索引及调优篇/image-20220707220157606.png" alt="image-20220707220157606" style="float:left;" /><h3 id="3-7-分析表、检查表与优化表"><a href="#3-7-分析表、检查表与优化表" class="headerlink" title="3.7 分析表、检查表与优化表"></a>3.7 分析表、检查表与优化表</h3><p>MySQL提供了分析表、检查表和优化表的语句。<code>分析表</code>主要是分析关键字的分布，<code>检查表</code>主要是检查表是否存在错误，<code>优化表</code>主要是消除删除或者更新造成的空间浪费。</p><h4 id="1-分析表"><a href="#1-分析表" class="headerlink" title="1. 分析表"></a>1. 分析表</h4><p>MySQL中提供了ANALYZE TABLE语句分析表，ANALYZE TABLE语句的基本语法如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name[,tbl_name]…<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认的，MySQL服务会将 ANALYZE TABLE语句写到binlog中，以便在主从架构中，从服务能够同步数据。 可以添加参数LOCAL 或者 NO_WRITE_TO_BINLOG取消将语句写到binlog中。</p><p>使用 <code>ANALYZE TABLE</code> 分析表的过程中，数据库系统会自动对表加一个 <code>只读锁</code> 。在分析期间，只能读取 表中的记录，不能更新和插入记录。ANALYZE TABLE语句能够分析InnoDB和MyISAM类型的表，但是不能作用于视图。</p><p>ANALYZE TABLE分析后的统计结果会反应到 <code>cardinality</code> 的值，该值统计了表中某一键所在的列不重复 的值的个数。<strong>该值越接近表中的总行数，则在表连接查询或者索引查询时，就越优先被优化器选择使用</strong>。也就是索引列的cardinality的值与表中数据的总条数差距越大，即使查询的时候使用了该索引作为查 询条件，存储引擎实际查询的时候使用的概率就越小。下面通过例子来验证下。cardinality可以通过 SHOW INDEX FROM 表名查看。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; ANALYZE TABLE user;+--------------+---------+----------+---------+| Table        | Op      | Msg_type |Msg_text |+--------------+---------+----------+---------+| atguigu.user | analyze | status   | Ok      |+--------------+----------+---------+---------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面结果显示的信息说明如下：</p><ul><li>Table: 表示分析的表的名称。</li><li>Op: 表示执行的操作。analyze表示进行分析操作。</li><li>Msg_type: 表示信息类型，其值通常是状态 (status) 、信息 (info) 、注意 (note) 、警告 (warning) 和 错误 (error) 之一。</li><li>Msg_text: 显示信息。</li></ul><h4 id="2-检查表"><a href="#2-检查表" class="headerlink" title="2. 检查表"></a>2. 检查表</h4><p>MySQL中可以使用 <code>CHECK TABLE</code> 语句来检查表。CHECK TABLE语句能够检查InnoDB和MyISAM类型的表 是否存在错误。CHECK TABLE语句在执行过程中也会给表加上 <code>只读锁</code> 。</p><p>对于MyISAM类型的表，CHECK TABLE语句还会更新关键字统计数据。而且，CHECK TABLE也可以检查视 图是否有错误，比如在视图定义中被引用的表已不存在。该语句的基本语法如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CHECK TABLE tbl_name [, tbl_name] ... [option] ...option &#x3D; &#123;QUICK | FAST | MEDIUM | EXTENDED | CHANGED&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中，tbl_name是表名；option参数有5个取值，分别是QUICK、FAST、MEDIUM、EXTENDED和 CHANGED。各个选项的意义分别是：</p><ul><li>QUICK ：不扫描行，不检查错误的连接。 </li><li>FAST ：只检查没有被正确关闭的表。 </li><li>CHANGED ：只检查上次检查后被更改的表和没有被正确关闭的表。 </li><li>MEDIUM ：扫描行，以验证被删除的连接是有效的。也可以计算各行的关键字校验和，并使用计算出的校验和验证这一点。 </li><li>EXTENDED ：对每行的所有关键字进行一个全面的关键字查找。这可以确保表是100%一致的，但 是花的时间较长。</li></ul><p>option只对MyISAM类型的表有效，对InnoDB类型的表无效。比如：</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707221707254.png" alt="image-20220707221707254"></p><p>该语句对于检查的表可能会产生多行信息。最后一行有一个状态的 Msg_type 值，Msg_text 通常为 OK。 如果得到的不是 OK，通常要对其进行修复；是 OK 说明表已经是最新的了。表已经是最新的，意味着存 储引擎对这张表不必进行检查。</p><h4 id="3-优化表"><a href="#3-优化表" class="headerlink" title="3. 优化表"></a>3. 优化表</h4><p><strong>方式1：OPTIMIZE TABLE</strong></p><p>MySQL中使用 <code>OPTIMIZE TABLE</code> 语句来优化表。但是，OPTILMIZE TABLE语句只能优化表中的 <code>VARCHAR</code> 、 <code>BLOB</code> 或 <code>TEXT</code> 类型的字段。一个表使用了这些字段的数据类型，若已经 <code>删除</code> 了表的一大部 分数据，或者已经对含有可变长度行的表（含有VARCHAR、BLOB或TEXT列的表）进行了很多 <code>更新</code> ，则 应使用OPTIMIZE TABLE来重新利用未使用的空间，并整理数据文件的 <code>碎片</code> 。</p><p>OPTIMIZE TABLE 语句对InnoDB和MyISAM类型的表都有效。该语句在执行过程中也会给表加上 <code>只读锁</code> 。</p><p>OPTILMIZE TABLE语句的基本语法如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>LOCAL | NO_WRITE_TO_BINLOG关键字的意义和分析表相同，都是指定不写入二进制日志。</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707221901664.png" alt="image-20220707221901664"></p><p>执行完毕，Msg_text显示</p><blockquote><p>‘numysql.SYS_APP_USER’, ‘optimize’, ‘note’, ‘Table does not support optimize, doing recreate + analyze instead’</p></blockquote><p>原因是我服务器上的MySQL是InnoDB存储引擎。</p><p>到底优化了没有呢？看官网！</p><p><a><a href="https://dev.mysql.com/doc/refman/8.0/en/optimize-table.html">MySQL :: MySQL 8.0 Reference Manual :: 13.7.3.4 OPTIMIZE TABLE Statement</a></a></p><p>在MyISAM中，是先分析这张表，然后会整理相关的MySQL datafile，之后回收未使用的空间；在InnoDB 中，回收空间是简单通过Alter table进行整理空间。在优化期间，MySQL会创建一个临时表，优化完成之 后会删除原始表，然后会将临时表rename成为原始表。</p><blockquote><p>说明： 在多数的设置中，根本不需要运行OPTIMIZE TABLE。即使对可变长度的行进行了大量的更 新，也不需要经常运行，<code> 每周一次</code> 或 <code>每月一次</code> 即可，并且只需要对 <code>特定的表</code> 运行。</p></blockquote><img src="../pic/MySQL索引及调优篇/image-20220707222156765.png" alt="image-20220707222156765" style="float:left;" /><p><strong>方式二：使用mysqlcheck命令</strong></p><img src="../pic/MySQL索引及调优篇/image-20220707222305302.png" alt="image-20220707222305302" style="float:left;" /><h4 id="3-8-小结"><a href="#3-8-小结" class="headerlink" title="3.8 小结"></a>3.8 小结</h4><p>上述这些方法都是有利有弊的。比如：</p><ul><li>修改数据类型，节省存储空间的同时，你要考虑到数据不能超过取值范围； </li><li>增加冗余字段的时候，不要忘了确保数据一致性； </li><li>把大表拆分，也意味着你的查询会增加新的连接，从而增加额外的开销和运维的成本。</li></ul><p>因此，你一定要结合实际的业务需求进行权衡。</p><h2 id="4-大表优化"><a href="#4-大表优化" class="headerlink" title="4. 大表优化"></a>4. 大表优化</h2><p>当MySQL单表记录数过大时，数据库的CRUD性能会明显下降，一些常见的优化措施如下：</p><h3 id="4-1-限定查询的范围"><a href="#4-1-限定查询的范围" class="headerlink" title="4.1 限定查询的范围"></a>4.1 限定查询的范围</h3><p>禁止不带任何限制数据范围条件的查询语句。比如：我们当用户在查询订单历史的时候，我们可以控制 在一个月的范围内；</p><h3 id="4-2-读-x2F-写分离"><a href="#4-2-读-x2F-写分离" class="headerlink" title="4.2 读&#x2F;写分离"></a>4.2 读&#x2F;写分离</h3><p>经典的数据库拆分方案，主库负责写，从库负责读。</p><ul><li>一主一从模式：</li></ul><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707222606097.png" alt="image-20220707222606097"></p><ul><li>双主双从模式：</li></ul><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707222623485.png" alt="image-20220707222623485"></p><h3 id="4-3-垂直拆分"><a href="#4-3-垂直拆分" class="headerlink" title="4.3 垂直拆分"></a>4.3 垂直拆分</h3><p>当数据量级达到 <code>千万级</code> 以上时，有时候我们需要把一个数据库切成多份，放到不同的数据库服务器上， 减少对单一数据库服务器的访问压力。</p><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707222648112.png" alt="image-20220707222648112"></p><ul><li>如果数据库的数据表过多，可以采用<code>垂直分库</code>的方式，将关联的数据库部署在同一个数据库上。</li><li>如果数据库中的列过多，可以采用<code>垂直分表</code>的方式，将一张数据表分拆成多张数据表，把经常一起使用的列放在同一张表里。</li></ul><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707222910740.png" alt="image-20220707222910740"></p><p><code>垂直拆分的优点</code>： 可以使得列数据变小，在查询时减少读取的Block数，减少I&#x2F;O次数。此外，垂直分区可以简化表的结构，易于维护。 </p><p><code>垂直拆分的缺点</code>： 主键会出现冗余，需要管理冗余列，并会引起 JOIN 操作。此外，垂直拆分会让事务变得更加复杂。</p><h3 id="4-4-水平拆分"><a href="#4-4-水平拆分" class="headerlink" title="4.4 水平拆分"></a>4.4 水平拆分</h3><img src="../pic/MySQL索引及调优篇/image-20220707222954304.png" alt="image-20220707222954304" style="float:left;" /><p><img src="/../pic/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E8%B0%83%E4%BC%98%E7%AF%87/image-20220707222739120.png" alt="image-20220707222739120"></p><img src="../pic/MySQL索引及调优篇/image-20220707223024163.png" alt="image-20220707223024163" style="float:left;" /><p>下面补充一下数据库分片的两种常见方案：</p><ul><li><strong>客户端代理： 分片逻辑在应用端，封装在jar包中，通过修改或者封装JDBC层来实现。</strong> 当当网的 Sharding-JDBC 、阿里的TDDL是两种比较常用的实现。 </li><li><strong>中间件代理： 在应用和数据中间加了一个代理层。分片逻辑统一维护在中间件服务中。</strong>我们现在 谈的 Mycat 、360的Atlas、网易的DDB等等都是这种架构的实现。</li></ul><h2 id="5-其它调优策略"><a href="#5-其它调优策略" class="headerlink" title="5. 其它调优策略"></a>5. 其它调优策略</h2><h3 id="5-1-服务器语句超时处理"><a href="#5-1-服务器语句超时处理" class="headerlink" title="5.1 服务器语句超时处理"></a>5.1 服务器语句超时处理</h3><p>在MySQL 8.0中可以设置 服务器语句超时的限制 ，单位可以达到 毫秒级别 。当中断的执行语句超过设置的 毫秒数后，服务器将终止查询影响不大的事务或连接，然后将错误报给客户端。</p><p>设置服务器语句超时的限制，可以通过设置系统变量 MAX_EXECUTION_TIME 来实现。默认情况下， MAX_EXECUTION_TIME的值为0，代表没有时间限制。 例如：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SET GLOBAL MAX_EXECUTION_TIME&#x3D;2000;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SET SESSION MAX_EXECUTION_TIME&#x3D;2000; #指定该会话中SELECT语句的超时时间<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-2-创建全局通用表空间"><a href="#5-2-创建全局通用表空间" class="headerlink" title="5.2 创建全局通用表空间"></a>5.2 创建全局通用表空间</h3><img src="../pic/MySQL索引及调优篇/image-20220707223246684.png" alt="image-20220707223246684" style="float:left;" /><img src="../pic/MySQL索引及调优篇/image-20220707223349879.png" alt="image-20220707223349879" style="float:left;" /><h3 id="5-3-MySQL-8-0新特性：隐藏索引对调优的帮助"><a href="#5-3-MySQL-8-0新特性：隐藏索引对调优的帮助" class="headerlink" title="5.3 MySQL 8.0新特性：隐藏索引对调优的帮助"></a>5.3 MySQL 8.0新特性：隐藏索引对调优的帮助</h3><img src="../pic/MySQL索引及调优篇/image-20220707223420496.png" alt="image-20220707223420496" style="float:left;" />]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 索引 </tag>
            
            <tag> 范式 </tag>
            
            <tag> 页 </tag>
            
            <tag> explain </tag>
            
            <tag> 索引优化 </tag>
            
            <tag> 查询优化 </tag>
            
            <tag> 数据库调优 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础</title>
      <link href="/2022/07/25/mysql-ji-chu-pian/"/>
      <url>/2022/07/25/mysql-ji-chu-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="导入表的问题"><a href="#导入表的问题" class="headerlink" title="导入表的问题"></a>导入表的问题</h1><p><strong>导入数据时外键约束问题</strong></p><p>数据导入指令：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">source d:\xxx.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过FOREIGN_KEY_CHECKS解决，用法如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">set FOREIGN_KEY_CHECKS&#x3D;0;  #在导入前设置为不检查外键约束set FOREIGN_KEY_CHECKS&#x3D;1;  #在导入后恢复检查外键约束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="第三章-最基本的SELECT语句"><a href="#第三章-最基本的SELECT语句" class="headerlink" title="第三章_最基本的SELECT语句"></a>第三章_最基本的SELECT语句</h1><h2 id="1-SQL语言的规则和规范"><a href="#1-SQL语言的规则和规范" class="headerlink" title="1. SQL语言的规则和规范"></a>1. SQL语言的规则和规范</h2><h3 id="1-基本规则"><a href="#1-基本规则" class="headerlink" title="1) 基本规则"></a>1) 基本规则</h3><ul><li>SQL 可以写在一行或者多行。为了提高可读性，各子句分行写，必要时使用缩进 </li><li>每条命令以 ; 或 \g 或 \G 结束 </li><li>关键字不能被缩写也不能分行 </li><li>关于标点符号 <ul><li>必须保证所有的()、单引号、双引号是成对结束的 </li><li>必须使用英文状态下的半角输入方式 </li><li>字符串型和日期时间类型的数据可以使用单引号（’ ‘）表示 </li><li>列的别名，尽量使用双引号（” “），而且不建议省略as</li></ul></li></ul><h3 id="2-SQL大小写规范（建议遵守）"><a href="#2-SQL大小写规范（建议遵守）" class="headerlink" title="2) SQL大小写规范（建议遵守）"></a>2) SQL大小写规范（建议遵守）</h3><ul><li>MySQL 在 Windows 环境下是大小写不敏感的 </li><li>MySQL 在 Linux 环境下是大小写敏感的 <ul><li>数据库名、表名、表的别名、变量名是严格区分大小写的 </li><li>关键字、函数名、列名(或字段名)、列的别名(字段的别名) 是忽略大小写的。</li></ul></li><li>推荐采用统一的书写规范： <ul><li>数据库名、表名、表别名、字段名、字段别名等都小写 </li><li>SQL 关键字、函数名、绑定变量等都大写</li></ul></li></ul><h3 id="3-注释"><a href="#3-注释" class="headerlink" title="3) 注释"></a>3) 注释</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">单行注释：#注释文字(MySQL特有的方式)单行注释：-- 注释文字(--后面必须包含一个空格。)多行注释：&#x2F;* 注释文字 *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-命名规则"><a href="#4-命名规则" class="headerlink" title="4) 命名规则"></a>4) 命名规则</h3><ul><li>数据库、表名不得超过30个字符，变量名限制为29个 </li><li>必须只能包含 A–Z, a–z, 0–9, _共63个字符 </li><li>数据库名、表名、字段名等对象名中间不要包含空格 同一个MySQL软件中，数据库不能同名；同一个库中，表不能重名；</li><li>同一个表中，字段不能重名 必须保证你的字段没有和保留字、数据库系统或常用方法冲突。如果坚持使用，请在SQL语句中使 用&#96;（着重号）引起来 </li><li>保持字段名和类型的一致性，在命名字段并为其指定数据类型的时候一定要保证一致性。假如数据 类型在一个表里是整数，那在另一个表里可就别变成字符型了</li></ul><h2 id="2-基本的SELECT语句"><a href="#2-基本的SELECT语句" class="headerlink" title="2. 基本的SELECT语句"></a>2. 基本的SELECT语句</h2><h3 id="1-SELECT-…-FROM"><a href="#1-SELECT-…-FROM" class="headerlink" title="1) SELECT … FROM"></a>1) SELECT … FROM</h3><ul><li>语法</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT 标识选择哪些列FROM 标识从哪个表中选择<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>选择全部列</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT *FROM departments;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>选择特定的列：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT department_id, location_idFROM departments;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-列的别名"><a href="#2-列的别名" class="headerlink" title="2) 列的别名"></a>2) 列的别名</h3><ul><li>重命名一个列 </li><li>便于计算 </li><li>紧跟列名，也可以在列名和别名之间加入关键字AS，别名使用双引号，以便在别名中包含空格或特 殊的字符并区分大小写。 </li><li>AS 可以省略 </li><li>建议别名简短，见名知意 </li><li>举例：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT last_name AS name, commission_pct commFROM employees;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-去除重复行"><a href="#3-去除重复行" class="headerlink" title="3) 去除重复行"></a>3) 去除重复行</h3><p>DISTINCT关键字</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT DISTINCT department_id FROM employees;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-空值参与运算"><a href="#4-空值参与运算" class="headerlink" title="4) 空值参与运算"></a>4) 空值参与运算</h3><p>空值：null ( 不等同于0, ’ ‘, ’null‘ )</p><p>实际问题的解决方案：引入IFNULL</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT employee_id, salary &quot;月工资&quot;, salary * (1 + IFNULL(commission_pct, 0)) * 12 &quot;年工资&quot; FROM employees;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里你一定要注意，在 MySQL 里面， 空值不等于空字符串。一个空字符串的长度是 0，而一个空值的长 度是空。而且，在 MySQL 里面，空值是占用空间的。</p><h3 id="5-着重号-96-96"><a href="#5-着重号-96-96" class="headerlink" title="5) 着重号 &#96;&#96;"></a>5) 着重号 &#96;&#96;</h3><p>必须保证你的字段没有和保留字、数据库系统或常见方法冲突。</p><p>如果坚持使用，在SQL语句中使用 ` ` 引起来。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM &#96;order&#96;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-查询常数"><a href="#6-查询常数" class="headerlink" title="6) 查询常数"></a>6) 查询常数</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT &#39;小张科技&#39; as &quot;公司名&quot;, employee_id, last_name FROM employees;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-显示表结构"><a href="#3-显示表结构" class="headerlink" title="3. 显示表结构"></a>3. 显示表结构</h2><p>显示表中字段的详细信息</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DESCRIBE employees;或DESC employees;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; desc employees;+----------------+-------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+----------------+-------------+------+-----+---------+-------+| employee_id | int(6) | NO | PRI | 0 | || first_name | varchar(20) | YES | | NULL | || last_name | varchar(25) | NO | | NULL | || email | varchar(25) | NO | UNI | NULL | || phone_number | varchar(20) | YES | | NULL | || hire_date | date | NO | | NULL | || job_id | varchar(10) | NO | MUL | NULL | || salary | double(8,2) | YES | | NULL | || commission_pct | double(2,2) | YES | | NULL | || manager_id | int(6) | YES | MUL | NULL | || department_id | int(4) | YES | MUL | NULL | |+----------------+-------------+------+-----+---------+-------+11 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，各个字段的含义分别解释如下： </p><ul><li>Field：表示字段名称。 </li><li>Type：表示字段类型，这里 barcode、goodsname 是文本型的，price 是整数类型的。 </li><li>Null：表示该列是否可以存储NULL值。 </li><li>Key：表示该列是否已编制索引。</li><li>PRI表示该列是表主键的一部分；</li><li>UNI表示该列是UNIQUE索引的一 部分；</li><li>MUL表示在列中某个给定值允许出现多次。 </li><li>Default：表示该列是否有默认值，如果有，那么值是多少。 </li><li>Extra：表示可以获取的与给定列有关的附加信息，例如AUTO_INCREMENT等。</li></ul><h2 id="4-过滤数据"><a href="#4-过滤数据" class="headerlink" title="4. 过滤数据"></a>4. 过滤数据</h2><ul><li>语法：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT 字段1,字段2FROM 表名WHERE 过滤条件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用WHERE 子句，将不满足条件的行过滤掉。WHERE子句紧随 FROM子句。</p><ul><li>举例：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT employee_id, last_name, job_id, department_idFROM employeesWHERE department_id &#x3D; 90;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="第四章-运算符"><a href="#第四章-运算符" class="headerlink" title="第四章_运算符"></a>第四章_运算符</h1><p><strong>DUAL</strong> 伪表</p><h2 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1. 算术运算符"></a>1. 算术运算符</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT 100 + 0, 100 + 50 * 30, 100 - 35.5 FROM DUAL;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ul><li>一个整数类型的值对整数进行加法和减法操作，结果还是一个整数；</li><li>一个整数类型的值对浮点数进行加法和减法操作，结果是一个浮点数；</li><li>在Java中， + 的左右两边如果有字符串，那么表示字符串的拼接。但是在MySQL中 + 只表示数值相加。如果遇到非数值类型，先尝试转成数值，如果转失败，就按0计算。（注：MySQL 中字符串拼接要使用字符串函数CONCAT()实现）</li><li>在数学运算中，0不能用作除数，在MySQL中，一个数除以0为NULL。</li></ul></blockquote><h2 id="2-比较运算符"><a href="#2-比较运算符" class="headerlink" title="2. 比较运算符"></a>2. 比较运算符</h2><h3 id="1-等号运算符"><a href="#1-等号运算符" class="headerlink" title="1) 等号运算符"></a>1) 等号运算符</h3><p>比较运算符用来对表达式左边的操作数和右边的操作数进行比较，比较的结果为真则返回1，比较的结果 为假则返回0，其他情况则返回NULL。 </p><p>比较运算符经常被用来作为SELECT查询语句的条件来使用，返回符合条件的结果记录。</p><p>如果等号两边的值、字符串或表达式中有一个为NULL，则比较结果为NULL。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT 1 &#x3D; 1, 1 &#x3D; &#39;1&#39;, 1 &#x3D; 0, &#39;a&#39; &#x3D; &#39;a&#39;, (5 + 3) &#x3D; (2 + 6), &#39;&#39; &#x3D; NULL , NULL &#x3D; NULL;+-------+---------+-------+-----------+-------------------+-----------+-------------+| 1 &#x3D; 1 | 1 &#x3D; &#39;1&#39; | 1 &#x3D; 0 | &#39;a&#39; &#x3D; &#39;a&#39; | (5 + 3) &#x3D; (2 + 6) | &#39;&#39; &#x3D; NULL | NULL &#x3D; NULL |+-------+---------+-------+-----------+-------------------+-----------+-------------+|   1   |    1    |   0   |     1     |          1        |    NULL   |     NULL    |+-------+---------+-------+-----------+-------------------+-----------+-------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT 1 &#x3D; 2, 0 &#x3D; &#39;abc&#39;, 1 &#x3D; &#39;abc&#39; FROM DUAL;+-------+-----------+-----------+| 1 &#x3D; 2 | 0 &#x3D; &#39;abc&#39; | 1 &#x3D; &#39;abc&#39; |+-------+-----------+-----------+|   0   |     1     |     0     |+-------+-----------+-----------+1 row in set, 2 warnings (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>如果等号两边的值、字符串或表达式都为字符串，则MySQL会按照字符串进行比较，其比较的 是每个字符串中字符的ANSI编码是否相等。 </li><li>如果等号两边的值都是整数，则MySQL会按照整数来比较两个值的大小。 </li><li>如果等号两边的值一个是整数，另一个是字符串，则MySQL会将字符串转化为数字进行比较。 </li><li>如果等号两边的值、字符串或表达式中有一个为NULL，则比较结果为NULL。</li></ul></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ysql&gt; SELECT 1 &lt;&#x3D;&gt; &#39;1&#39;, 1 &lt;&#x3D;&gt; 0, &#39;a&#39; &lt;&#x3D;&gt; &#39;a&#39;, (5 + 3) &lt;&#x3D;&gt; (2 + 6), &#39;&#39; &lt;&#x3D;&gt; NULL,NULL &lt;&#x3D;&gt; NULL FROM dual;+-----------+---------+-------------+---------------------+-------------+---------------+| 1 &lt;&#x3D;&gt; &#39;1&#39; | 1 &lt;&#x3D;&gt; 0 | &#39;a&#39; &lt;&#x3D;&gt; &#39;a&#39; | (5 + 3) &lt;&#x3D;&gt; (2 + 6) | &#39;&#39; &lt;&#x3D;&gt; NULL | NULL &lt;&#x3D;&gt; NULL |+-----------+---------+-------------+---------------------+-------------+---------------+|     1     |    0    |      1      |           1         |      0      |       1       |+-----------+---------+-------------+---------------------+-------------+---------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，使用安全等于运算符时，两边的操作数的值都为NULL时，返回的结果为1而不是NULL，其他返回结果与等于运算符相同。</p><h3 id="2-不等于运算符"><a href="#2-不等于运算符" class="headerlink" title="2) 不等于运算符"></a>2) 不等于运算符</h3><p>不等于运算符（&lt;&gt;和!&#x3D;）用于判断两边的数字、字符串或者表达式的值是否不相等， 如果不相等则返回1，相等则返回0。不等于运算符不能判断NULL值。如果两边的值有任意一个为NULL， 或两边都为NULL，则结果为NULL。 SQL语句示例如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT 1 &lt;&gt; 1, 1 !&#x3D; 2, &#39;a&#39; !&#x3D; &#39;b&#39;, (3+4) &lt;&gt; (2+6), &#39;a&#39; !&#x3D; NULL, NULL &lt;&gt; NULL;+--------+--------+------------+----------------+-------------+--------------+| 1 &lt;&gt; 1 | 1 !&#x3D; 2 | &#39;a&#39; !&#x3D; &#39;b&#39; | (3+4) &lt;&gt; (2+6) | &#39;a&#39; !&#x3D; NULL | NULL &lt;&gt; NULL |+--------+--------+------------+----------------+-------------+--------------+|    0   |    1   |      1     |        1       |     NULL    |      NULL    |+--------+--------+------------+----------------+-------------+--------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此外，还有非符号类型的运算符：</p><img src="../pic/MySQL基础篇/image-20220531154418141.png" alt="image-20220531154418141" style="float:left;" /><h3 id="3-空运算符"><a href="#3-空运算符" class="headerlink" title="3) 空运算符"></a>3) 空运算符</h3><p>空运算符 (IS NULL 或者 ISNULL) 判断一个值是否为NULL，如果为NULL则返回1，否则返回0。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT NULL IS NULL, ISNULL(NULL), ISNULL(&#39;a&#39;), 1 IS NULL;+--------------+--------------+-------------+-----------+| NULL IS NULL | ISNULL(NULL) | ISNULL(&#39;a&#39;) | 1 IS NULL |+--------------+--------------+-------------+-----------+|      1       |       1      |      0      |     0     |+--------------+--------------+-------------+-----------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-非空运算符"><a href="#4-非空运算符" class="headerlink" title="4) 非空运算符"></a>4) 非空运算符</h3><p>非空运算符（IS NOT NULL）判断一个值是否不为NULL，如果不为NULL则返回1，否则返回0。</p><h3 id="5-最小值运算符"><a href="#5-最小值运算符" class="headerlink" title="5) 最小值运算符"></a>5) 最小值运算符</h3><p>语法格式为：LEAST(值1，值2，…，值n)。其中，“值n”表示参数列表中有n个值。在有 两个或多个参数的情况下，返回最小值。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT LEAST (1,0,2), LEAST(&#39;b&#39;,&#39;a&#39;,&#39;c&#39;), LEAST(1,NULL,2);+---------------+--------------------+-----------------+| LEAST (1,0,2) | LEAST(&#39;b&#39;,&#39;a&#39;,&#39;c&#39;) | LEAST(1,NULL,2) |+---------------+--------------------+-----------------+|       0       |          a         |        NULL     |+---------------+--------------------+-----------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由结果可以看到，当参数是整数或者浮点数时，LEAST将返回其中最小的值；当参数为字符串时，返回字 母表中顺序最靠前的字符；当比较值列表中有NULL时，不能判断大小，返回值为NULL。</p><h3 id="6-最大值运算符"><a href="#6-最大值运算符" class="headerlink" title="6) 最大值运算符"></a>6) 最大值运算符</h3><p>语法格式为：GREATEST(值1，值2，…，值n)。其中，n表示参数列表中有n个值。当有 两个或多个参数时，返回值为最大值。假如任意一个自变量为NULL，则GREATEST()的返回值为NULL。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT GREATEST(1,0,2), GREATEST(&#39;b&#39;,&#39;a&#39;,&#39;c&#39;), GREATEST(1,NULL,2);+-----------------+-----------------------+--------------------+| GREATEST(1,0,2) | GREATEST(&#39;b&#39;,&#39;a&#39;,&#39;c&#39;) | GREATEST(1,NULL,2) |+-----------------+-----------------------+--------------------+|         2       |             c         |         NULL       |+-----------------+-----------------------+--------------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由结果可以看到，当参数中是整数或者浮点数时，GREATEST将返回其中最大的值；当参数为字符串时， 返回字母表中顺序最靠后的字符；当比较值列表中有NULL时，不能判断大小，返回值为NULL。</p><h3 id="7-BETWEEN-AND运算符"><a href="#7-BETWEEN-AND运算符" class="headerlink" title="7) BETWEEN AND运算符"></a>7) BETWEEN AND运算符</h3><p>BETWEEN运算符使用的格式通常为SELECT D FROM TABLE WHERE C BETWEEN A AND B，此时，当C大于或等于A，并且C小于或等于B时，结果为1，否则结果为0。</p><h3 id="8-IN运算符"><a href="#8-IN运算符" class="headerlink" title="8) IN运算符"></a>8) IN运算符</h3><p>IN运算符用于判断给定的值是否是IN列表中的一个值，如果是则返回1，否则返回0。如果给 定的值为NULL，或者IN列表中存在NULL，则结果为NULL。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT &#39;a&#39; IN (&#39;a&#39;,&#39;b&#39;,&#39;c&#39;), 1 IN (2,3), NULL IN (&#39;a&#39;,&#39;b&#39;), &#39;a&#39; IN (&#39;a&#39;, NULL);+----------------------+------------+-------------------+--------------------+| &#39;a&#39; IN (&#39;a&#39;,&#39;b&#39;,&#39;c&#39;) | 1 IN (2,3) | NULL IN (&#39;a&#39;,&#39;b&#39;) | &#39;a&#39; IN (&#39;a&#39;, NULL) |+----------------------+------------+-------------------+--------------------+|            1         |      0     |         NULL      |          1         |+----------------------+------------+-------------------+--------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-NOT-IN运算符"><a href="#9-NOT-IN运算符" class="headerlink" title="9) NOT IN运算符"></a>9) NOT IN运算符</h3><p>NOT IN运算符用于判断给定的值是否不是IN列表中的一个值，如果不是IN列表中的一 个值，则返回1，否则返回0。</p><h3 id="10-LIKE运算符"><a href="#10-LIKE运算符" class="headerlink" title="10) LIKE运算符"></a>10) LIKE运算符</h3><p>LIKE运算符主要用来匹配字符串，通常用于模糊匹配，如果满足条件则返回1，否则返回 0。如果给定的值或者匹配条件为NULL，则返回结果为NULL。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">“%”：匹配0个或多个字符。“_”：只能匹配一个字符。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="11-ESCAPE"><a href="#11-ESCAPE" class="headerlink" title="11) ESCAPE"></a>11) ESCAPE</h3><p>回避特殊符号的：使用转义符。例如：将[%]转为[$%]、[]转为[$]，然后再加上[ESCAPE‘$’]即可。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT job_idFROM jobsWHERE job_id LIKE ‘IT\_%‘;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果使用\表示转义，要省略ESCAPE。如果不是\，则要加上ESCAPE。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT job_idFROM jobsWHERE job_id LIKE ‘IT$_%‘ escape ‘$‘;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="12-REGEXP运算符"><a href="#12-REGEXP运算符" class="headerlink" title="12) REGEXP运算符"></a>12) REGEXP运算符</h3><p>REGEXP运算符用来匹配字符串，语法格式为： expr REGEXP 匹配条件 。</p><blockquote><p>（1）‘^’匹配以该字符后面的字符开头的字符串。 </p><p>（2）‘$’匹配以该字符前面的字符结尾的字符串。 </p><p>（3）‘.’匹配任何一个单字符。 </p><p>（4）“[…]”匹配在方括号内的任何字符。例如，“[abc]”匹配“a”或“b”或“c”。为了命名字符的范围，使用一 个‘-’。“[a-z]”匹配任何字母，而“[0-9]”匹配任何数字。</p><p>（5）‘<em>’匹配零个或多个在它前面的字符。例如，“x</em>”匹配任何数量的‘x’字符，“[0-9]<em>”匹配任何数量的数字， 而“</em>”匹配任何数量的任何字符。</p></blockquote><h2 id="3-逻辑运算符"><a href="#3-逻辑运算符" class="headerlink" title="3. 逻辑运算符"></a>3. 逻辑运算符</h2><p>逻辑运算符主要用来判断表达式的真假，在MySQL中，逻辑运算符的返回结果为1、0或者NULL。 </p><p>MySQL中支持4种逻辑运算符如下：</p><p><img src="/../pic/MySQL%E5%9F%BA%E7%A1%80%E7%AF%87/image-20220531195405333.png" alt="image-20220531195405333"></p><h2 id="4-位运算"><a href="#4-位运算" class="headerlink" title="4. 位运算"></a>4. 位运算</h2><p>位运算符是在二进制数上进行计算的运算符。位运算符会先将操作数变成二进制数，然后进行位运算， 最后将计算结果从二进制变回十进制数。 </p><p>MySQL支持的位运算符如下：</p><p><img src="/../pic/MySQL%E5%9F%BA%E7%A1%80%E7%AF%87/image-20220531195442995.png" alt="image-20220531195442995"></p><h2 id="5-运算符的优先级"><a href="#5-运算符的优先级" class="headerlink" title="5. 运算符的优先级"></a>5. 运算符的优先级</h2><p>数字编号越大，优先级越高，优先级高的运算符先进行计算。</p><p><img src="/../pic/MySQL%E5%9F%BA%E7%A1%80%E7%AF%87/image-20220531195522668.png" alt="image-20220531195522668"></p><h2 id="扩展：使用正则表达式查询"><a href="#扩展：使用正则表达式查询" class="headerlink" title="扩展：使用正则表达式查询"></a>扩展：使用正则表达式查询</h2><p><img src="/../pic/MySQL%E5%9F%BA%E7%A1%80%E7%AF%87/image-20220531204253508.png" alt="image-20220531204253508"></p><h1 id="第五章-排序与分页"><a href="#第五章-排序与分页" class="headerlink" title="第五章_排序与分页"></a>第五章_排序与分页</h1><h2 id="1-排序规则"><a href="#1-排序规则" class="headerlink" title="1. 排序规则"></a>1. 排序规则</h2><ul><li><p>使用 ORDER BY 子句排序</p><ul><li>ASC（ascend）: 升序 </li><li>DESC（descend）:降序</li></ul></li><li><p>ORDER BY 子句在SELECT语句的结尾。</p></li></ul><h3 id="1-单列排序"><a href="#1-单列排序" class="headerlink" title="1) 单列排序"></a>1) 单列排序</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT last_name, job_id, department_id, hire_dateFROM employeesORDER BY hire_date;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-多列排序"><a href="#2-多列排序" class="headerlink" title="2) 多列排序"></a>2) 多列排序</h3><ul><li>可以使用不在SELECT列表中的列排序。 </li><li>在对多列进行排序的时候，首先排序的第一列必须有相同的列值，才会对第二列进行排序。如果第 一列数据中所有值都是唯一的，将不再对第二列进行排序。</li></ul><h2 id="2-分页"><a href="#2-分页" class="headerlink" title="2. 分页"></a>2. 分页</h2><ul><li>格式：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">LIMIT [位置偏移量,] 行数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>举例：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">--前10条记录：SELECT * FROM 表名 LIMIT 0,10;或者SELECT * FROM 表名 LIMIT 10;--第11至20条记录：SELECT * FROM 表名 LIMIT 10,10;--第21至30条记录：SELECT * FROM 表名 LIMIT 20,10;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>MySQL 8.0中可以使用“LIMIT 3 OFFSET 4”，意思是获取从第5条记录开始后面的3条记录，和“LIMIT 4,3;”返回的结果相同。</p></blockquote><ul><li>分页显式公式：（当前页数-1）* 每页条数，每页条数</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM tableLIMIT(PageNo - 1) * PageSize, PageSize;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>注意：LIMIT 子句必须放在整个SELECT语句的最后！</p></li><li><p>使用LIMIT的好处</p></li></ul><p>约束返回结果的数量可以 减少数据表的网络传输量 ，也可以 提升查询效率 。如果我们知道返回结果只有 1 条，就可以使用 LIMIT 1 ，告诉 SELECT 语句只需要返回一条记录即可。这样的好处就是 SELECT 不需 要扫描完整的表，只需要检索到一条符合条件的记录即可返回。</p><h1 id="第六章-多表查询"><a href="#第六章-多表查询" class="headerlink" title="第六章_多表查询"></a>第六章_多表查询</h1><h2 id="1-多表查询分类讲解"><a href="#1-多表查询分类讲解" class="headerlink" title="1. 多表查询分类讲解"></a>1. 多表查询分类讲解</h2><h3 id="1-自连接"><a href="#1-自连接" class="headerlink" title="1) 自连接"></a>1) 自连接</h3><p>题目：查询employees表，返回 &lt;员工 works for 老板&gt;</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT CONCAT(worker.last_name , &#39; works for &#39;, manager.last_name)FROM employees worker, employees managerWHERE worker.manager_id &#x3D; manager.employee_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-内连接与外连接"><a href="#2-内连接与外连接" class="headerlink" title="2) 内连接与外连接"></a>2) 内连接与外连接</h3><ul><li>内连接: 合并具有同一列的两个以上的表的行, 结果集中不包含一个表与另一个表不匹配的行</li></ul><p><strong>SQL92语法</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT emp.employee_id, dep.department_nameFROM employee emp, department depWHERE emp.&#96;department_id&#96; &#x3D; dep.&#96;department_id&#96;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>SQL99语法</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT emp.employee_id, dep.department_nameFROM employee emp JOIN department depON emp.&#96;department_id&#96; &#x3D; dep.&#96;department_id&#96;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>外连接: 两个表在连接过程中除了返回满足连接条件的行以外还返回左（或右）表中不满足条件的 行 ，这种连接称为左（或右） 外连接。没有匹配的行时, 结果表中相应的列为空(NULL)。 </li><li>如果是左外连接，则连接条件中左边的表也称为 主表 ，右边的表称为 从表 。</li></ul><p><strong>LEFT OUTER JOIN</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT last_name, department_nameFROM employees emp LEFT OUTER JOIN department depON emp.&#96;department_id&#96; &#x3D; dep.&#96;department_id&#96;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>如果是右外连接，则连接条件中右边的表也称为 主表 ，左边的表称为 从表 。</li></ul><p><strong>RIGHT OUTER JOIN</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT last_name, department_nameFROM employees emp RIGHT OUTER JOIN department depON emp.&#96;department_id&#96; &#x3D; dep.&#96;department_id&#96;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-UNION的使用"><a href="#2-UNION的使用" class="headerlink" title="2. UNION的使用"></a>2. UNION的使用</h2><p><strong>合并查询结果</strong> </p><p>利用UNION关键字，可以给出多条SELECT语句，并将它们的结果组合成单个结果集。合并 时，两个表对应的列数和数据类型必须相同，并且相互对应。各个SELECT语句之间使用UNION或UNION ALL关键字分隔。</p><p>语法格式：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT column,... FROM table1UNION [ALL]SELECT column,... FROM table2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>UNION操作符</strong></p><p>UNION 操作符返回两个查询的结果集的并集，去除重复记录。</p><p><strong>UNION ALL操作符</strong></p><p>UNION ALL操作符返回两个查询的结果集的并集。对于两个结果集的重复部分，不去重。</p><blockquote><p>注意：执行UNION ALL语句时所需要的资源比UNION语句少。如果明确知道合并数据后的结果数据不存在重复数据，或者不需要去除重复的数据，则尽量使用UNION ALL语句，以提高数据查询的效率。</p></blockquote><p>举例：查询部门编号&gt;90或邮箱包含a的员工信息</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#方式1SELECT * FROM employees WHERE email LIKE &#39;%a%&#39; OR department_id&gt;90;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#方式2SELECT * FROM employees WHERE email LIKE &#39;%a%&#39;UNIONSELECT * FROM employees WHERE department_id&gt;90;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>举例：查询中国用户中男性的信息以及美国用户中年男性的用户信息</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT id,cname FROM t_chinamale WHERE csex&#x3D;&#39;男&#39;UNION ALLSELECT id,tname FROM t_usmale WHERE tGender&#x3D;&#39;male&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-七种SQL-JOINS的实现"><a href="#3-七种SQL-JOINS的实现" class="headerlink" title="3.七种SQL JOINS的实现"></a>3.七种SQL JOINS的实现</h2><img src="../pic/MySQL基础篇/image-20220531224324213.png" alt="image-20220531224324213" style="zoom:80%;" /><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 中图：内连接SELECT employee_id,department_nameFROM employees e JOIN departments dON e.&#96;department_id&#96; &#x3D; d.&#96;department_id&#96;;# 左上图：左外连接SELECT employee_id,department_nameFROM employees e LEFT JOIN departments dON e.&#96;department_id&#96; &#x3D; d.&#96;department_id&#96;;# 右上图：右外连接SELECT employee_id,department_nameFROM employees e RIGHT JOIN departments dON e.&#96;department_id&#96; &#x3D; d.&#96;department_id&#96;;# 左中图：SELECT employee_id,department_nameFROM employees e LEFT JOIN departments dON e.&#96;department_id&#96; &#x3D; d.&#96;department_id&#96;WHERE d.&#96;department_id&#96; IS NULL;# 右中图：SELECT employee_id,department_nameFROM employees e RIGHT JOIN departments dON e.&#96;department_id&#96; &#x3D; d.&#96;department_id&#96;WHERE e.&#96;department_id&#96; IS NULL;# 左下图：满外连接# 方式1：左上图 UNION ALL 右中图SELECT employee_id,department_nameFROM employees e LEFT JOIN departments dON e.&#96;department_id&#96; &#x3D; d.&#96;department_id&#96;UNION ALLSELECT employee_id,department_nameFROM employees e RIGHT JOIN departments dON e.&#96;department_id&#96; &#x3D; d.&#96;department_id&#96;WHERE e.&#96;department_id&#96; IS NULL;# 方式2：左中图 UNION ALL 右上图SELECT employee_id,department_nameFROM employees e LEFT JOIN departments dON e.&#96;department_id&#96; &#x3D; d.&#96;department_id&#96;WHERE d.&#96;department_id&#96; IS NULLUNION ALLSELECT employee_id,department_nameFROM employees e RIGHT JOIN departments dON e.&#96;department_id&#96; &#x3D; d.&#96;department_id&#96;;# 右下图：左中图  UNION ALL 右中图SELECT employee_id,department_nameFROM employees e LEFT JOIN departments dON e.&#96;department_id&#96; &#x3D; d.&#96;department_id&#96;WHERE d.&#96;department_id&#96; IS NULLUNION ALLSELECT employee_id,department_nameFROM employees e RIGHT JOIN departments dON e.&#96;department_id&#96; &#x3D; d.&#96;department_id&#96;WHERE e.&#96;department_id&#96; IS NULL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-SQL99语法的新特性"><a href="#4-SQL99语法的新特性" class="headerlink" title="4. SQL99语法的新特性"></a>4. SQL99语法的新特性</h2><h3 id="1-自然连接"><a href="#1-自然连接" class="headerlink" title="1) 自然连接"></a>1) 自然连接</h3><p>SQL99 在 SQL92 的基础上提供了一些特殊语法，比如 NATURAL JOIN 用来表示自然连接。我们可以把 自然连接理解为 SQL92 中的等值连接。它会帮你自动查询两张连接表中 所有相同的字段 ，然后进行 等值 连接 。</p><p>在SQL92标准中：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT employee_id,last_name,department_nameFROM employees e JOIN departments dON e.&#96;department_id&#96; &#x3D; d.&#96;department_id&#96;AND e.&#96;manager_id&#96; &#x3D; d.&#96;manager_id&#96;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在 SQL99 中你可以写成：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT employee_id,last_name,department_nameFROM employees e NATURAL JOIN departments d;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-USING连接"><a href="#2-USING连接" class="headerlink" title="2) USING连接"></a>2) USING连接</h3><p>当我们进行连接的时候，SQL99还支持使用 USING 指定数据表里的 同名字段 进行等值连接。但是只能配 合JOIN一起使用。比如：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT employee_id,last_name,department_nameFROM employees e JOIN departments dUSING (department_id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>你能看出与自然连接 NATURAL JOIN 不同的是，USING 指定了具体的相同的字段名称，你需要在 USING 的括号 () 中填入要指定的同名字段。同时使用 JOIN…USING 可以简化 JOIN ON 的等值连接。它与下 面的 SQL 查询结果是相同的：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT employee_id,last_name,department_nameFROM employees e ,departments dWHERE e.department_id &#x3D; d.department_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h2><p>表连接的约束条件可以有三种方式：WHERE, ON, USING </p><ul><li>WHERE：适用于所有关联查询 </li><li>ON ：只能和JOIN一起使用，只能写关联条件。虽然关联条件可以并到WHERE中和其他条件一起 写，但分开写可读性更好。 </li><li>USING：只能和JOIN一起使用，而且要求两个关联字段在关联表中名称一致，而且只能表示关联字 段值相等</li></ul><blockquote><p>我们要控制连接表的数量 。</p><p>多表连接就相当于嵌套 for 循环一样，非常消耗资源，会让 SQL 查询性能下 降得很严重，因此不要连接不必要的表。</p><p>在许多 DBMS 中，也都会有最大连接表的限制。</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 习题巩固# 注意：当两个表外连接之后，组成主表和从表，主表的连接字段是不为空的，从表的连接字段可能为空，因此从表的关键字段用来判断是否为空。# 1.查询哪些部门没有员工# 方式一SELECT d.department_idFROM departments d LEFT JOIN employees eON d.&#96;department_id&#96; &#x3D; e.&#96;department_id&#96;WHERE e.&#96;department_id&#96; IS NULL;# 方式二SELECT department_idFROM departments dWHERE NOT EXISTS (SELECT *    FROM employees e    WHERE e.&#96;department_id&#96; &#x3D; d.&#96;department_id&#96;);# 2.查询哪个城市没有部门SELECT l.location_id, l.cityFROM locations l LEFT JOIN departments dON l.&#96;location_id&#96; &#x3D; d.&#96;location_id&#96;WHERE d.&#96;location_id&#96; IS NULL;# 3.查询部门名为 Sales 或 IT 的员工信息SELECT e.employee_id, e.last_name, e.department_idFROM employees e JOIN department dON e.&#96;department_id&#96; &#x3D; d.&#96;department_id&#96;WHERE d.&#96;department_name&#96; IN (&#39;Sales&#39;, &#39;IT&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第七章-单行函数"><a href="#第七章-单行函数" class="headerlink" title="第七章_单行函数"></a>第七章_单行函数</h1><h2 id="1-数值函数"><a href="#1-数值函数" class="headerlink" title="1. 数值函数"></a>1. 数值函数</h2><h3 id="1-基本函数"><a href="#1-基本函数" class="headerlink" title="1) 基本函数"></a>1) 基本函数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>ABS(x)</td><td>返回x的绝对值</td></tr><tr><td>SIGN(X)</td><td>单元格</td></tr><tr><td>PI()</td><td>返回圆周率的值</td></tr><tr><td>CEIL(x)，CEILING(x)</td><td>返回大于或等于某个值的最小整数</td></tr><tr><td>FLOOR(x)</td><td>返回小于或等于某个值的最大整数</td></tr><tr><td>LEAST(e1,e2,e3…)</td><td>返回列表中的最小值</td></tr><tr><td>GREATEST(e1,e2,e3…)</td><td>返回列表中的最大值</td></tr><tr><td>MOD(x,y)</td><td>返回X除以Y后的余数</td></tr><tr><td>RAND()</td><td>返回0~1的随机值</td></tr><tr><td>RAND(x)</td><td>返回0~1的随机值，其中x的值用作种子值，相同的X值会产生相同的随机 数</td></tr><tr><td>ROUND(x)</td><td>返回一个对x的值进行四舍五入后，最接近于X的整数</td></tr><tr><td>ROUND(x,y)</td><td>返回一个对x的值进行四舍五入后最接近X的值，并保留到小数点后面Y位</td></tr><tr><td>TRUNCATE(x,y)</td><td>返回数字x截断为y位小数的结果</td></tr><tr><td>SQRT(x)</td><td>返回x的平方根。当X的值为负数时，返回NULL</td></tr></tbody></table><h3 id="2-角度与弧度互换函数"><a href="#2-角度与弧度互换函数" class="headerlink" title="2) 角度与弧度互换函数"></a>2) 角度与弧度互换函数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>RADIANS(x)</td><td>将角度转化为弧度，其中，参数x为角度值</td></tr><tr><td>DEGREES(x)</td><td>将弧度转化为角度，其中，参数x为弧度值</td></tr></tbody></table><h3 id="3-三角函数"><a href="#3-三角函数" class="headerlink" title="3) 三角函数"></a>3) 三角函数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>SIN(x)</td><td>将角度转化为弧度，其中，参数x为角度值</td></tr><tr><td>ASIN(x)</td><td>将弧度转化为角度，其中，参数x为弧度值</td></tr><tr><td>COS(x)</td><td>返回x的余弦值，其中，参数x为弧度值</td></tr><tr><td>ACOS(x)</td><td>返回x的反余弦值，即获取余弦为x的值。如果x的值不在-1到1之间，则返回NULL</td></tr><tr><td>TAN(x)</td><td>返回x的正切值，其中，参数x为弧度值</td></tr><tr><td>ATAN(x)</td><td>返回x的反正切值，即返回正切值为x的值</td></tr><tr><td>ATAN2(m,n)</td><td>返回两个参数的反正切值</td></tr><tr><td>COT(x)</td><td>返回x的余切值，其中，X为弧度值</td></tr></tbody></table><h3 id="4-指数与对数函数"><a href="#4-指数与对数函数" class="headerlink" title="4) 指数与对数函数"></a>4) 指数与对数函数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>POW(x,y)，POWER(X,Y)</td><td>返回x的y次方</td></tr><tr><td>EXP(X)</td><td>返回e的X次方，其中e是一个常数，2.718281828459045</td></tr><tr><td>LN(X)，LOG(X)</td><td>返回以e为底的X的对数，当X &lt;&#x3D; 0 时，返回的结果为NULL</td></tr><tr><td>LOG10(X)</td><td>返回以10为底的X的对数，当X &lt;&#x3D; 0 时，返回的结果为NULL</td></tr><tr><td>LOG2(X)</td><td>返回以2为底的X的对数，当X &lt;&#x3D; 0 时，返回NULL</td></tr></tbody></table><h3 id="5-进制间的转换"><a href="#5-进制间的转换" class="headerlink" title="5) 进制间的转换"></a>5) 进制间的转换</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>BIN(x)</td><td>返回x的二进制编码</td></tr><tr><td>HEX(x)</td><td>返回x的十六进制编码</td></tr><tr><td>OCT(x)</td><td>返回x的八进制编码</td></tr><tr><td>CONV(x,f1,f2)</td><td>返回f1进制数变成f2进制数</td></tr></tbody></table><h2 id="2-字符串函数"><a href="#2-字符串函数" class="headerlink" title="2. 字符串函数"></a>2. 字符串函数</h2><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>ASCII(S)</td><td>返回字符串S中的第一个字符的ASCII码值</td></tr><tr><td>CHAR_LENGTH(s)</td><td>返回字符串s的字符数。作用与CHARACTER_LENGTH(s)相同</td></tr><tr><td>LENGTH(s)</td><td>返回字符串s的字节数，和字符集有关</td></tr><tr><td>CONCAT(s1,s2,……,sn)</td><td>连接s1,s2,……,sn为一个字符串</td></tr><tr><td>CONCAT_WS(x, s1,s2,……,sn)</td><td>同CONCAT(s1,s2,…)函数，但是每个字符串之间要加上x</td></tr><tr><td>INSERT(str, idx, len, replacestr)</td><td>将字符串str从第idx位置开始，len个字符长的子串替换为字符串replacestr</td></tr><tr><td>REPLACE(str, a, b)</td><td>用字符串b替换字符串str中所有出现的字符串a</td></tr><tr><td>UPPER(s) 或 UCASE(s)</td><td>将字符串s的所有字母转成大写字母</td></tr><tr><td>LOWER(s) 或LCASE(s)</td><td>将字符串s的所有字母转成小写字母</td></tr><tr><td>LEFT(str,n)</td><td>返回字符串str最左边的n个字符</td></tr><tr><td>RIGHT(str,n)</td><td>返回字符串str最右边的n个字符</td></tr><tr><td>LPAD(str, len, pad)</td><td>用字符串pad对str最左边进行填充，直到str的长度为len个字符</td></tr><tr><td>RPAD(str ,len, pad)</td><td>用字符串pad对str最右边进行填充，直到str的长度为len个字符</td></tr><tr><td>LTRIM(s)</td><td>去掉字符串s左侧的空格</td></tr><tr><td>RTRIM(s)</td><td>去掉字符串s右侧的空格</td></tr><tr><td>TRIM(s)</td><td>去掉字符串s开始与结尾的空格</td></tr><tr><td>TRIM(s1 FROM s)</td><td>去掉字符串s开始与结尾的s1</td></tr><tr><td>TRIM(LEADING s1 FROM s)</td><td>去掉字符串s开始处的s1</td></tr><tr><td>TRIM(TRAILING s1 FROM s)</td><td>去掉字符串s结尾处的s1</td></tr><tr><td>REPEAT(str, n)</td><td>返回str重复n次的结果</td></tr><tr><td>SPACE(n)</td><td>返回n个空格</td></tr><tr><td>STRCMP(s1,s2)</td><td>比较字符串s1,s2的ASCII码值的大小</td></tr><tr><td>SUBSTR(s,index,len)</td><td>返回从字符串s的index位置其len个字符，作用与SUBSTRING(s,n,len)、 MID(s,n,len)相同</td></tr><tr><td>LOCATE(substr,str)</td><td>返回字符串substr在字符串str中首次出现的位置，作用于POSITION(substr IN str)、INSTR(str,substr)相同。未找到，返回0</td></tr><tr><td>ELT(m,s1,s2,…,sn)</td><td>返回指定位置的字符串，如果m&#x3D;1，则返回s1，如果m&#x3D;2，则返回s2，如果m&#x3D;n，则返回sn</td></tr><tr><td>FIELD(s,s1,s2,…,sn)</td><td>返回字符串s在字符串列表中第一次出现的位置</td></tr><tr><td>FIND_IN_SET(s1,s2)</td><td>返回字符串s1在字符串s2中出现的位置。其中，字符串s2是一个以逗号分隔的字符串</td></tr><tr><td>REVERSE(s)</td><td>返回s反转后的字符串</td></tr><tr><td>NULLIF(value1,value2)</td><td>比较两个字符串，如果value1与value2相等，则返回NULL，否则返回 value1</td></tr></tbody></table><blockquote><p>注意：MySQL中，字符串的位置是从1开始的。</p></blockquote><h2 id="3-日期和时间函数"><a href="#3-日期和时间函数" class="headerlink" title="3. 日期和时间函数"></a>3. 日期和时间函数</h2><h3 id="1-获取日期、时间"><a href="#1-获取日期、时间" class="headerlink" title="1) 获取日期、时间"></a>1) 获取日期、时间</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>CURDATE() ，CURRENT_DATE()</td><td>返回当前日期，只包含年、 月、日</td></tr><tr><td>CURTIME() ， CURRENT_TIME()</td><td>返回当前时间，只包含时、 分、秒</td></tr><tr><td>NOW() &#x2F; SYSDATE() &#x2F; CURRENT_TIMESTAMP() &#x2F; LOCALTIME() &#x2F; LOCALTIMESTAMP()</td><td>返回当前系统日期和时间</td></tr><tr><td>UTC_DATE()</td><td>返回UTC（世界标准时间） 日期</td></tr><tr><td>UTC_TIME()</td><td>返回UTC（世界标准时间） 时间</td></tr></tbody></table><h3 id="2-日期与时间戳的转换"><a href="#2-日期与时间戳的转换" class="headerlink" title="2) 日期与时间戳的转换"></a>2) 日期与时间戳的转换</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>UNIX_TIMESTAMP()</td><td>以UNIX时间戳的形式返回当前时间。SELECT UNIX_TIMESTAMP() - &gt;1634348884</td></tr><tr><td>UNIX_TIMESTAMP(date)</td><td>将时间date以UNIX时间戳的形式返回。</td></tr><tr><td>FROM_UNIXTIME(timestamp)</td><td>将UNIX时间戳的时间转换为普通格式的时间</td></tr></tbody></table><h3 id="3-获取月份、星期、星期数、天数等函数"><a href="#3-获取月份、星期、星期数、天数等函数" class="headerlink" title="3) 获取月份、星期、星期数、天数等函数"></a>3) 获取月份、星期、星期数、天数等函数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>YEAR(date) &#x2F; MONTH(date) &#x2F; DAY(date)</td><td>返回具体的日期值</td></tr><tr><td>HOUR(time) &#x2F; MINUTE(time) &#x2F; SECOND(time)</td><td>返回具体的时间值</td></tr><tr><td>FROM_UNIXTIME(timestamp)</td><td>将UNIX时间戳的时间转换为普通格式的时间</td></tr><tr><td>MONTHNAME(date)</td><td>返回月份：January，…</td></tr><tr><td>DAYNAME(date)</td><td>返回星期几：MONDAY，TUESDAY…..SUNDAY</td></tr><tr><td>WEEKDAY(date)</td><td>返回周几，注意，周1是0，周2是1，。。。周日是6</td></tr><tr><td>QUARTER(date)</td><td>返回日期对应的季度，范围为1～4</td></tr><tr><td>WEEK(date) ， WEEKOFYEAR(date)</td><td>返回一年中的第几周</td></tr><tr><td>DAYOFYEAR(date)</td><td>返回日期是一年中的第几天</td></tr><tr><td>DAYOFMONTH(date)</td><td>返回日期位于所在月份的第几天</td></tr><tr><td>DAYOFWEEK(date)</td><td>返回周几，注意：周日是1，周一是2，。。。周六是 7</td></tr></tbody></table><h3 id="4-日期的操作函数"><a href="#4-日期的操作函数" class="headerlink" title="4) 日期的操作函数"></a>4) 日期的操作函数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>EXTRACT(type FROM date)</td><td>返回指定日期中特定的部分，type指定返回的值</td></tr></tbody></table><p>EXTRACT(type FROM date)函数中type的取值与含义：</p><p><img src="/../pic/MySQL%E5%9F%BA%E7%A1%80%E7%AF%87/image-20220601162705975.png" alt="image-20220601162705975"></p><h3 id="5-时间和秒钟转换的函数"><a href="#5-时间和秒钟转换的函数" class="headerlink" title="5) 时间和秒钟转换的函数"></a>5) 时间和秒钟转换的函数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>TIME_TO_SEC(time)</td><td>将 time 转化为秒并返回结果值。转化的公式为： 小时*3600+分钟 *60+秒</td></tr><tr><td>SEC_TO_TIME(seconds)</td><td>将 seconds 描述转化为包含小时、分钟和秒的时间</td></tr></tbody></table><h3 id="6-计算日期和时间的函数"><a href="#6-计算日期和时间的函数" class="headerlink" title="6) 计算日期和时间的函数"></a>6) 计算日期和时间的函数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>DATE_ADD(datetime, INTERVAL expr type)， ADDDATE(date,INTERVAL expr type)</td><td>返回与给定日期时间相差INTERVAL时间段的日期时间</td></tr><tr><td>DATE_SUB(date,INTERVAL expr type)， SUBDATE(date,INTERVAL expr type)</td><td>返回与date相差INTERVAL时间间隔的日期</td></tr></tbody></table><p>上述函数中type的取值：</p><p><img src="/../pic/MySQL%E5%9F%BA%E7%A1%80%E7%AF%87/image-20220601165055639.png" alt="image-20220601165055639"></p><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>ADDTIME(time1,time2)</td><td>返回time1加上time2的时间。当time2为一个数字时，代表的是 秒 ，可以为负数</td></tr><tr><td>SUBTIME(time1,time2)</td><td>返回time1减去time2后的时间。当time2为一个数字时，代表的 是 秒 ，可以为负数</td></tr><tr><td>DATEDIFF(date1,date2)</td><td>返回date1 - date2的日期间隔天数</td></tr><tr><td>TIMEDIFF(time1, time2)</td><td>返回time1 - time2的时间间隔</td></tr><tr><td>FROM_DAYS(N)</td><td>返回从0000年1月1日起，N天以后的日期</td></tr><tr><td>TO_DAYS(date)</td><td>返回日期date距离0000年1月1日的天数</td></tr><tr><td>LAST_DAY(date)</td><td>返回date所在月份的最后一天的日期</td></tr><tr><td>MAKEDATE(year,n)</td><td>针对给定年份与所在年份中的天数返回一个日期</td></tr><tr><td>MAKETIME(hour,minute,second)</td><td>将给定的小时、分钟和秒组合成时间并返回</td></tr><tr><td>PERIOD_ADD(time,n)</td><td>返回time加上n后的时间</td></tr></tbody></table><h3 id="7-日期的格式化与解析"><a href="#7-日期的格式化与解析" class="headerlink" title="7)  日期的格式化与解析"></a>7)  日期的格式化与解析</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>DATE_FORMAT(date,fmt)</td><td>按照字符串fmt格式化日期date值</td></tr><tr><td>TIME_FORMAT(time,fmt)</td><td>按照字符串fmt格式化时间time值</td></tr><tr><td>GET_FORMAT(date_type,format_type)</td><td>返回日期字符串的显示格式</td></tr><tr><td>STR_TO_DATE(str, fmt)</td><td>按照字符串fmt对str进行解析，解析为一个日期</td></tr></tbody></table><p>上述 非GET_FORMAT 函数中fmt参数常用的格式符：</p><table><thead><tr><th>格式符</th><th>说明</th><th>格式符</th><th>说明</th></tr></thead><tbody><tr><td>%Y</td><td>4位数字表示年份</td><td>%y</td><td>表示两位数字表示年份</td></tr><tr><td>%M</td><td>月名表示月份（January,….）</td><td>%m</td><td>两位数字表示月份 （01,02,03。。。）</td></tr><tr><td>%b</td><td>缩写的月名（Jan.，Feb.，….）</td><td>%c</td><td>数字表示月份（1,2,3,…）</td></tr><tr><td>%D</td><td>英文后缀表示月中的天数 （1st,2nd,3rd,…）</td><td>%d</td><td>两位数字表示月中的天数(01,02…)</td></tr><tr><td>%e</td><td>数字形式表示月中的天数 （1,2,3,4,5…..）</td><td></td><td></td></tr><tr><td>%H</td><td>两位数字表示小数，24小时制 （01,02..）</td><td>%h 和%I</td><td>两位数字表示小时，12小时制 （01,02..）</td></tr><tr><td>%k</td><td>数字形式的小时，24小时制(1,2,3)</td><td>%l</td><td>数字形式表示小时，12小时制 （1,2,3,4….）</td></tr><tr><td>%i</td><td>两位数字表示分钟（00,01,02）</td><td>%S 和%s</td><td>两位数字表示秒(00,01,02…)</td></tr><tr><td>%W</td><td>一周中的星期名称（Sunday…）</td><td>%a</td><td>一周中的星期缩写（Sun.， Mon.,Tues.，..）</td></tr><tr><td>%w</td><td>以数字表示周中的天数 (0&#x3D;Sunday,1&#x3D;Monday….)</td><td></td><td></td></tr><tr><td>%j</td><td>以3位数字表示年中的天数(001,002…)</td><td>%U</td><td>以数字表示年中的第几周， （1,2,3。。）其中Sunday为周中第一 天</td></tr><tr><td>%u</td><td>以数字表示年中的第几周， （1,2,3。。）其中Monday为周中第一 天</td><td></td><td></td></tr><tr><td>%T</td><td>24小时制</td><td>%r</td><td>12小时制</td></tr><tr><td>%p</td><td>AM或PM</td><td>%%</td><td>表示%</td></tr></tbody></table><h2 id="4-流程控制函数"><a href="#4-流程控制函数" class="headerlink" title="4. 流程控制函数"></a>4. 流程控制函数</h2><p>流程处理函数可以根据不同的条件，执行不同的处理流程，可以在SQL语句中实现不同的条件选择。 MySQL中的流程处理函数主要包括IF()、IFNULL()和CASE()函数。</p><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>IF(value,value1,value2)</td><td>如果value的值为TRUE，返回value1， 否则返回value2</td></tr><tr><td>IFNULL(value1, value2)</td><td>如果value1不为NULL，返回value1，否则返回value2</td></tr><tr><td>CASE WHEN 条件1 THEN 结果1 WHEN 条件2 THEN 结果2 …. [ELSE resultn] END</td><td>相当于Java的if…else if…else…</td></tr><tr><td>CASE expr WHEN 常量值1 THEN 值1 WHEN 常量值1 THEN 值1 …. [ELSE 值n] END</td><td>相当于Java的switch…case…</td></tr></tbody></table><h2 id="5-加密与解密函数"><a href="#5-加密与解密函数" class="headerlink" title="5. 加密与解密函数"></a>5. 加密与解密函数</h2><p>加密与解密函数主要用于对数据库中的数据进行加密和解密处理，以防止数据被他人窃取。这些函数在保证数据库安全时非常有用。</p><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>PASSWORD(str)</td><td>返回字符串str的加密版本，41位长的字符串。加密结果不可逆 ，常用于用户的密码加密</td></tr><tr><td>MD5(str)</td><td>返回字符串str的md5加密后的值，也是一种加密方式。若参数为 NULL，则会返回NULL</td></tr><tr><td>SHA(str)</td><td>从原明文密码str计算并返回加密后的密码字符串，当参数为 NULL时，返回NULL。 SHA加密算法比MD5更加安全 。</td></tr><tr><td>ENCODE(value,password_seed)</td><td>返回使用password_seed作为加密密码加密value</td></tr><tr><td>DECODE(value,password_seed)</td><td>返回使用password_seed作为加密密码解密value</td></tr></tbody></table><h2 id="6-MySQL信息函数"><a href="#6-MySQL信息函数" class="headerlink" title="6. MySQL信息函数"></a>6. MySQL信息函数</h2><p>MySQL中内置了一些可以查询MySQL信息的函数，这些函数主要用于帮助数据库开发或运维人员更好地 对数据库进行维护工作。</p><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>VERSION()</td><td>返回当前MySQL的版本号</td></tr><tr><td>CONNECTION_ID()</td><td>返回当前MySQL服务器的连接数</td></tr><tr><td>DATABASE()，SCHEMA()</td><td>返回MySQL命令行当前所在的数据库</td></tr><tr><td>USER()，CURRENT_USER()、SYSTEM_USER()， SESSION_USER()</td><td>返回当前连接MySQL的用户名，返回结果格式为 “主机名@用户名”</td></tr><tr><td>CHARSET(value)</td><td>返回字符串value自变量的字符集</td></tr><tr><td>COLLATION(value)</td><td>返回字符串value的比较规则</td></tr></tbody></table><p>MySQL中有些函数无法对其进行具体的分类，但是这些函数在MySQL的开发和运维过程中也是不容忽视 的。</p><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>FORMAT(value,n)</td><td>返回对数字value进行格式化后的结果数据。n表示 四舍五入 后保留 到小数点后n位</td></tr><tr><td>CONV(value,from,to)</td><td>将value的值进行不同进制之间的转换</td></tr><tr><td>INET_ATON(ipvalue)</td><td>将以点分隔的IP地址转化为一个数字</td></tr><tr><td>INET_NTOA(value)</td><td>将数字形式的IP地址转化为以点分隔的IP地址</td></tr><tr><td>BENCHMARK(n,expr)</td><td>将表达式expr重复执行n次。用于测试MySQL处理expr表达式所耗费 的时间</td></tr><tr><td>CONVERT(value USING char_code)</td><td>将value所使用的字符编码修改为char_code</td></tr></tbody></table><h1 id="第八章-聚合函数"><a href="#第八章-聚合函数" class="headerlink" title="第八章_聚合函数"></a>第八章_聚合函数</h1><h2 id="1-聚合函数介绍"><a href="#1-聚合函数介绍" class="headerlink" title="1. 聚合函数介绍"></a>1. 聚合函数介绍</h2><ul><li>什么是聚合函数</li></ul><p>聚合函数作用于一组数据，并对一组数据返回一个值。</p><ul><li>聚合函数类型<ul><li>AVG()</li><li>SUM()</li><li>MAX()</li><li>MIN()</li><li>COUNT()</li></ul></li></ul><h3 id="1-AVG和SUM函数"><a href="#1-AVG和SUM函数" class="headerlink" title="1) AVG和SUM函数"></a>1) AVG和SUM函数</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT AVG(salary), MAX(salary),MIN(salary), SUM(salary)FROM employeesWHERE job_id LIKE &#39;%REP%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-MIN和MAX函数"><a href="#2-MIN和MAX函数" class="headerlink" title="2) MIN和MAX函数"></a>2) MIN和MAX函数</h3><p>可以对任意数据类型的数据使用 MIN 和 MAX 函数。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT MIN(hire_date), MAX(hire_date)FROM employees;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-COUNT函数"><a href="#3-COUNT函数" class="headerlink" title="3) COUNT函数"></a>3) COUNT函数</h3><p>COUNT(*)返回表中记录总数，适用于任意数据类型。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT COUNT(*)FROM employeesWHERE department_id &#x3D; 50;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>COUNT(expr) 返回expr不为空的记录总数。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT COUNT(commission_pct)FROM employeesWHERE department_id &#x3D; 50;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>问题：用count(*)，count(1)，count(列名)谁好呢?</li></ul><p>其实，对于MyISAM引擎的表是没有区别的。这种引擎内部有一计数器在维护着行数。 Innodb引擎的表用count(*),count(1)直接读行数，复杂度是O(n)，因为innodb真的要去数一遍。但好 于具体的count(列名)。</p><ul><li>问题：能不能使用count(列名)替换count(*)?</li></ul><p>不要使用 count(列名)来替代 count(<em>) ， count(</em>) 是 SQL92 定义的标准统计行数的语法，跟数 据库无关，跟 NULL 和非 NULL 无关。 说明：count(*)会统计值为 NULL 的行，而 count(列名)不会统计此列为 NULL 值的行。</p><h2 id="2-GROUP-BY"><a href="#2-GROUP-BY" class="headerlink" title="2. GROUP BY"></a>2. GROUP BY</h2><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1) 基本使用"></a>1) 基本使用</h3><p>可以使用GROUP BY子句将表中的数据分成若干组</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT column, group_function(column)FROM table[WHERE condition][GROUP BY group_by_expression][ORDER BY column];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结论1：SELECT中出现的非组函数的字段必须声明在GROUP BY中。</p><p>​反之，GROUP BY中声明的字段可以不出现在SELECT中。</p><p>结论2：GROUP BY声明在FROM后面、WHERE后面、ORDER BY前面、LIMIT前面。</p></blockquote><h3 id="2-使用WITH-ROLLUP"><a href="#2-使用WITH-ROLLUP" class="headerlink" title="2) 使用WITH ROLLUP"></a>2) 使用WITH ROLLUP</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT department_id,AVG(salary)FROM employeesWHERE department_id &gt; 80GROUP BY department_id WITH ROLLUP;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意： 当使用ROLLUP时，不能同时使用ORDER BY子句进行结果排序，即ROLLUP和ORDER BY是互相排斥的。</p></blockquote><h2 id="3-HAVING"><a href="#3-HAVING" class="headerlink" title="3. HAVING"></a>3. HAVING</h2><h3 id="1-基本使用-1"><a href="#1-基本使用-1" class="headerlink" title="1) 基本使用"></a>1) 基本使用</h3><p>过滤分组：HAVING子句 </p><ol><li>行已经被分组。 </li><li>使用了聚合函数。 </li><li>满足HAVING 子句中条件的分组将被显示。 </li><li>HAVING 不能单独使用，必须要跟 GROUP BY 一起使用。</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT department_id, MAX(salary)FROM employeesGROUP BY department_idHAVING MAX(salary)&gt;10000 ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>要求</strong></p><ul><li>如果过滤条件中使用了聚合函数，则必须使用HAVING来替换WHERE。否则，报错。</li><li>当过滤条件中没有聚合函数时，则次过滤条件声明在WHERE中或HAVING中都可以。但是，建议声明在WHERE中的执行效率高。</li><li>HAVING必须声明在GROUP BY 的后面</li><li>开发中，我们使用HAVING的前提是SQL中使用了GROUP BY。</li></ul><h3 id="2-WHERE和HAVING的对比"><a href="#2-WHERE和HAVING的对比" class="headerlink" title="2) WHERE和HAVING的对比"></a>2) WHERE和HAVING的对比</h3><p><strong>区别1：WHERE 可以直接使用表中的字段作为筛选条件，但不能使用分组中的计算函数作为筛选条件； HAVING 必须要与 GROUP BY 配合使用，可以把分组计算的函数和分组字段作为筛选条件。</strong></p><p>这决定了，在需要对数据进行分组统计的时候，HAVING 可以完成 WHERE 不能完成的任务。这是因为， 在查询语法结构中，WHERE 在 GROUP BY 之前，所以无法对分组结果进行筛选。HAVING 在 GROUP BY 之 后，可以使用分组字段和分组中的计算函数，对分组的结果集进行筛选，这个功能是 WHERE 无法完成 的。另外，WHERE排除的记录不再包括在分组中。</p><p><strong>区别2：如果需要通过连接从关联表中获取需要的数据，WHERE 是先筛选后连接，而 HAVING 是先连接 后筛选。</strong></p><p>这一点，就决定了在关联查询中，WHERE 比 HAVING 更高效。因为 WHERE 可以先筛选，用一 个筛选后的较小数据集和关联表进行连接，这样占用的资源比较少，执行效率也比较高。HAVING 则需要 先把结果集准备好，也就是用未被筛选的数据集进行关联，然后对这个大的数据集进行筛选，这样占用 的资源就比较多，执行效率也较低。</p><p>小结如下：</p><table><thead><tr><th>关键字</th><th>用法</th><th>缺点</th></tr></thead><tbody><tr><td>WHERE</td><td>先筛选数据再关联，执行效率高</td><td>不能使用分组中的计算函数进行筛选</td></tr><tr><td>HAVING</td><td>可以使用分组中的计算函数</td><td>在最后的结果集中进行筛选，执行效率较低</td></tr></tbody></table><p><strong>开发中的选择：</strong> </p><p>WHERE 和 HAVING 也不是互相排斥的，我们可以在一个查询里面同时使用 WHERE 和 HAVING。包含分组 统计函数的条件用 HAVING，普通条件用 WHERE。这样，我们就既利用了 WHERE 条件的高效快速，又发 挥了 HAVING 可以使用包含分组统计函数的查询条件的优点。当数据量特别大的时候，运行效率会有很 大的差别。</p><h2 id="4-SELECT的执行过程"><a href="#4-SELECT的执行过程" class="headerlink" title="4. SELECT的执行过程"></a>4. SELECT的执行过程</h2><h3 id="1-查询的结构"><a href="#1-查询的结构" class="headerlink" title="1) 查询的结构"></a>1) 查询的结构</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#方式1：SELECT ...,....,...FROM ...,...,....WHERE 多表的连接条件AND 不包含组函数的过滤条件GROUP BY ...,...HAVING 包含组函数的过滤条件ORDER BY ... ASC&#x2F;DESCLIMIT ...,...#方式2：SELECT ...,....,...FROM ... JOIN ...ON 多表的连接条件JOIN ...ON ...WHERE 不包含组函数的过滤条件AND&#x2F;OR 不包含组函数的过滤条件GROUP BY ...,...HAVING 包含组函数的过滤条件ORDER BY ... ASC&#x2F;DESCLIMIT ...,...#其中：#（1）from：从哪些表中筛选#（2）on：关联多表查询时，去除笛卡尔积#（3）where：从表中筛选的条件#（4）group by：分组依据#（5）having：在统计结果中再次筛选#（6）order by：排序#（7）limit：分页<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>需要记住 SELECT 查询时的两个顺序：</strong></p><p><font color=red>1. 关键字的顺序是不能颠倒的：</font></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT ... FROM ... WHERE ... GROUP BY ... HAVING ... ORDER BY ... LIMIT...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color=red>1. SELECT 语句的执行顺序</font>（在 MySQL 和 Oracle 中，SELECT 执行顺序基本相同）：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">FROM -&gt; WHERE -&gt; GROUP BY -&gt; HAVING -&gt; SELECT 的字段 -&gt; DISTINCT -&gt; ORDER BY -&gt; LIMIT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>比如你写了一个 SQL 语句，那么它的关键字顺序和执行顺序是下面这样的：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT DISTINCT player_id, player_name, count(*) as num # 顺序 5FROM player JOIN team ON player.team_id &#x3D; team.team_id # 顺序 1WHERE height &gt; 1.80 # 顺序 2GROUP BY player.team_id # 顺序 3HAVING num &gt; 2 # 顺序 4ORDER BY num DESC # 顺序 6LIMIT 2 # 顺序 7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 SELECT 语句执行这些步骤的时候，每个步骤都会产生一个 虚拟表 ，然后将这个虚拟表传入下一个步 骤中作为输入。需要注意的是，这些步骤隐含在 SQL 的执行过程中，对于我们来说是不可见的。</p><h3 id="2-SQL的执行原理"><a href="#2-SQL的执行原理" class="headerlink" title="2) SQL的执行原理"></a>2) SQL的执行原理</h3><p>SELECT 是先执行 FROM 这一步的。在这个阶段，如果是多张表联查，还会经历下面的几个步骤：</p><ol><li>首先先通过 CROSS JOIN 求笛卡尔积，相当于得到虚拟表 vt（virtual table）1-1；</li><li>通过 ON 进行筛选，在虚拟表 vt1-1 的基础上进行筛选，得到虚拟表 vt1-2；</li><li>添加外部行。如果我们使用的是左连接、右链接或者全连接，就会涉及到外部行，也就是在虚拟 表 vt1-2 的基础上增加外部行，得到虚拟表 vt1-3。</li></ol><ul><li><p>当然如果我们操作的是两张以上的表，还会重复上面的步骤，直到所有表都被处理完为止。这个过程得 到是我们的原始数据。</p></li><li><p>然后进入第三步和第四步，也就是 GROUP 和 HAVING 阶段 。在这个阶段中，实际上是在虚拟表 vt2 的 基础上进行分组和分组过滤，得到中间的虚拟表 vt3 和 vt4 。</p></li><li><p>当我们完成了条件筛选部分之后，就可以筛选表中提取的字段，也就是进入到 SELECT 和 DISTINCT 阶段 。</p></li><li><p>首先在 SELECT 阶段会提取想要的字段，然后在 DISTINCT 阶段过滤掉重复的行，分别得到中间的虚拟表 vt5-1 和 vt5-2 。</p></li><li><p>当我们提取了想要的字段数据之后，就可以按照指定的字段进行排序，也就是 ORDER BY 阶段 ，得到 虚拟表 vt6 。</p></li><li><p>最后在 vt6 的基础上，取出指定行的记录，也就是 LIMIT 阶段 ，得到最终的结果，对应的是虚拟表 vt7 。</p></li><li><p>当然我们在写 SELECT 语句的时候，不一定存在所有的关键字，相应的阶段就会省略。</p></li></ul><p>同时因为 SQL 是一门类似英语的结构化查询语言，所以我们在写 SELECT 语句的时候，还要注意相应的 关键字顺序，所谓底层运行的原理，就是我们刚才讲到的执行顺序。</p><h1 id="第九章-子查询"><a href="#第九章-子查询" class="headerlink" title="第九章_子查询"></a>第九章_子查询</h1><h2 id="1-基本使用-2"><a href="#1-基本使用-2" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h2><ul><li>子查询的基本语法结构：</li></ul><p><img src="/../pic/MySQL%E5%9F%BA%E7%A1%80%E7%AF%87/image-20220603133759153.png" alt="image-20220603133759153"></p><ul><li>子查询（内查询）在主查询之前一次执行完成。</li><li>子查询的结果被主查询（外查询）使用 。</li><li><strong>注意事项</strong><ul><li>子查询要包含在括号内</li><li>将子查询放在比较条件的右侧</li><li>单行操作符对应单行子查询，多行操作符对应多行子查询</li></ul></li></ul><h2 id="2-子查询的分类"><a href="#2-子查询的分类" class="headerlink" title="2. 子查询的分类"></a>2. 子查询的分类</h2><p><strong>分类方式1：</strong></p><p>我们按内查询的结果返回一条还是多条记录，将子查询分为 单行子查询 、 多行子查询 。</p><ul><li>单行子查询</li></ul><p><img src="/../pic/MySQL%E5%9F%BA%E7%A1%80%E7%AF%87/image-20220603135507360.png" alt="image-20220603135507360"></p><ul><li>多行子查询</li></ul><p><img src="/../pic/MySQL%E5%9F%BA%E7%A1%80%E7%AF%87/image-20220603135544144.png" alt="image-20220603135544144"></p><p><strong>分类方式2：</strong></p><p>我们按内查询是否被执行多次，将子查询划分为 相关(或关联)子查询 和 不相关(或非关联)子查询 。 </p><p>子查询从数据表中查询了数据结果，如果这个数据结果只执行一次，然后这个数据结果作为主查询的条件进行执行，那么这样的子查询叫做不相关子查询。 </p><p>同样，如果子查询需要执行多次，即采用循环的方式，先从外部查询开始，每次都传入子查询进行查询，然后再将结果反馈给外部，这种嵌套的执行方式就称为相关子查询。</p><h2 id="3-单行子查询"><a href="#3-单行子查询" class="headerlink" title="3. 单行子查询"></a>3. 单行子查询</h2><h3 id="1-单行比较操作符"><a href="#1-单行比较操作符" class="headerlink" title="1) 单行比较操作符"></a>1) 单行比较操作符</h3><table><thead><tr><th>操作符</th><th>含义</th></tr></thead><tbody><tr><td>&#x3D;</td><td>equal to</td></tr><tr><td>&gt;</td><td>greater than</td></tr><tr><td>&gt;&#x3D;</td><td>greater than or equal to</td></tr><tr><td>&lt;</td><td>less than</td></tr><tr><td>&lt;&#x3D;</td><td>less than or equal to</td></tr><tr><td>&lt;&gt;</td><td>not equal to</td></tr></tbody></table><h3 id="2-代码示例"><a href="#2-代码示例" class="headerlink" title="2) 代码示例"></a>2) 代码示例</h3><ul><li>题目：返回job_id与141号员工相同，salary比143号员工多的员工姓名，job_id和工资</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT last_name, job_id, salaryFROM eployeesWHERE job_id &#x3D; (SELECT job_idFROM eployees    WHERE employee_id &#x3D; 141)AND salary &gt; (SELECT salaryFROM eployees    WHERE employee_id &#x3D; 143);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>题目：查询与141号或174号员工的manager_id和department_id相同的其他员工的employee_id， manager_id，department_id</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 实现方式一：不成对比较SELECT employee_id, manager_id, department_idFROM employeesWHERE manager_id IN        (SELECT manager_id        FROM employees        WHERE employee_id IN (174,141))AND department_id IN        (SELECT department_id        FROM employees        WHERE employee_id IN (174,141))AND employee_id NOT IN(174,141);# 实现方式二：成对比较SELECT employee_id, manager_id, department_idFROM employeesWHERE (manager_id, department_id) IN        (SELECT manager_id, department_id        FROM employees        WHERE employee_id IN (141,174))AND employee_id NOT IN (141,174);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>题目：查询最低工资大于50号部门最低工资的部门id和其最低工资</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT department_id, MIN(salary)FROM employeesGROUP BY department_idHAVING MIN(salary) &gt;            (SELECT MIN(salary)            FROM employees            WHERE department_id &#x3D; 50);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-CASE中的子查询"><a href="#3-CASE中的子查询" class="headerlink" title="3) CASE中的子查询"></a>3) CASE中的子查询</h3><p>题目：显式员工的employee_id,last_name和location。其中，若员工department_id与location_id为1800 的department_id相同，则location为’Canada’，其余则为’USA’。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT employee_id, last_name,    (CASE department_id    WHEN        (SELECT department_id FROM departments        WHERE location_id &#x3D; 1800)    THEN &#39;Canada&#39; ELSE &#39;USA&#39; END) locationFROM employees;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-子查询中的空值问题"><a href="#4-子查询中的空值问题" class="headerlink" title="4) 子查询中的空值问题"></a>4) 子查询中的空值问题</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT last_name, job_idFROM employeesWHERE job_id &#x3D;(SELECT job_idFROM employeesWHERE last_name &#x3D; &#39;Haas&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>子查询不返回任何行</p></blockquote><h3 id="5-非法使用子查询"><a href="#5-非法使用子查询" class="headerlink" title="5) 非法使用子查询"></a>5) 非法使用子查询</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT employee_id, last_nameFROM employeesWHERE salary &#x3D;(SELECT MIN(salary)FROM employeesGROUP BY department_id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>多行子查询使用单行比较符</p></blockquote><h2 id="4-多行子查询"><a href="#4-多行子查询" class="headerlink" title="4. 多行子查询"></a>4. 多行子查询</h2><ul><li>也称为集合比较子查询</li><li>内查询返回多行</li><li>使用多行比较操作符</li></ul><h3 id="1-多行比较操作符"><a href="#1-多行比较操作符" class="headerlink" title="1) 多行比较操作符"></a>1) 多行比较操作符</h3><table><thead><tr><th>操作符</th><th>含义</th></tr></thead><tbody><tr><td>IN</td><td>等于列表中的任意一个</td></tr><tr><td>ANY</td><td>需要和单行比较操作符一起使用，和子查询返回的某一个值比较</td></tr><tr><td>ALL</td><td>需要和单行比较操作符一起使用，和子查询返回的所有值比较</td></tr><tr><td>SOME</td><td>实际上是ANY的别名，作用相同，一般常使用ANY</td></tr></tbody></table><h3 id="2-代码示例-1"><a href="#2-代码示例-1" class="headerlink" title="2) 代码示例"></a>2) 代码示例</h3><ul><li>题目：返回其它job_id中比job_id为‘IT_PROG’部门任一工资低的员工的员工号、姓名、job_id 以及salary</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT employee_id, last_name, job_id, salaryFROM employeesWHERE job_id &lt;&gt; &#39;IT_PROG&#39; AND salary &lt; ANY(SELECT salary    FROM emplyees    WHERE job_id &#x3D; &#39;IT_PROG&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>题目：查询平均工资最低的部门id</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#方式1：SELECT department_idFROM employeesGROUP BY department_idHAVING AVG(salary) &#x3D; (        SELECT MIN(avg_sal)        FROM (            SELECT AVG(salary) avg_sal            FROM employees            GROUP BY department_id            ) dept_avg_sal);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#方式2：SELECT department_idFROM employeesGROUP BY department_idHAVING AVG(salary) &lt;&#x3D; ALL (        SELECT AVG(salary) avg_sal        FROM employees        GROUP BY department_id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-空值问题"><a href="#3-空值问题" class="headerlink" title="3) 空值问题"></a>3) 空值问题</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT last_nameFROM employeesWHERE employee_id NOT IN (    SELECT manager_id    FROM employees    WHERE manager_id IS NOT NULL);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-相关子查询"><a href="#5-相关子查询" class="headerlink" title="5. 相关子查询"></a>5. 相关子查询</h2><p>如果子查询的执行依赖于外部查询，通常情况下都是因为子查询中的表用到了外部的表，并进行了条件 关联，因此每执行一次外部查询，子查询都要重新计算一次，这样的子查询就称之为 关联子查询 。 </p><p>相关子查询按照一行接一行的顺序执行，主查询的每一行都执行一次子查询。</p><p><img src="/../pic/MySQL%E5%9F%BA%E7%A1%80%E7%AF%87/image-20220603154919387.png" alt="image-20220603154919387"></p><p><img src="/../pic/MySQL%E5%9F%BA%E7%A1%80%E7%AF%87/image-20220603155013864.png" alt="image-20220603155013864"></p><blockquote><p>说明：子查询中使用主查询中的列</p></blockquote><h3 id="1-代码示例"><a href="#1-代码示例" class="headerlink" title="1) 代码示例"></a>1) 代码示例</h3><ul><li>题目：查询员工中工资大于本部门平均工资的员工的last_name,salary和其department_id</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 方式一：使用相关子查询SELECT last_name, salary, departmentFROM employees e1WHERE salary &gt; (SELECT AVG(salary)    FROM employees e2    WHERE department_id &#x3D; e1.&#96;department_id&#96;);# 方式二：在FROM中声明子查询SELECT e.last_name, e.salary, e.department_idFROM employees e, (    SELECT department_id, AVG(salary) avg_sal    FROM employees    GROUP BY department_id) t_dept_avg_salaryWHERE e.department_id &#x3D; t_dept_avg_salary.department_idAND e.salary &gt; t_dept_avg_salary.avg_sal;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在ORDER BY 中使用子查询：</p><ul><li>查询员工的id,salary,按照department_name 排序</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT employee_id, salaryFROM employees eORDER BY (SELECT department_name    FROM departments d    WHERE e.&#96;department_id&#96; &#x3D; d.&#96;department_id&#96;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>题目：若employees表中employee_id与job_history表中employee_id相同的数目不小于2，输出这些相同 id的员工的employee_id,last_name和其job_id</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT e.employee_id, last_name,e.job_idFROM employees eWHERE 2 &lt;&#x3D; (SELECT COUNT(*)        FROM job_history        WHERE employee_id &#x3D; e.employee_id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-EXISTS-与-NOT-EXISTS-关键字"><a href="#2-EXISTS-与-NOT-EXISTS-关键字" class="headerlink" title="2) EXISTS 与 NOT EXISTS 关键字"></a>2) EXISTS 与 NOT EXISTS 关键字</h3><ul><li>关联子查询通常也会和 EXISTS操作符一起来使用，用来检查在子查询中是否存在满足条件的行。</li><li>如果在子查询中不存在满足条件的行：<ul><li>条件返回 FALSE</li><li>继续在子查询中查找</li></ul></li><li>如果在子查询中存在满足条件的行：<ul><li>不在子查询中继续查找</li><li>条件返回 TRUE</li></ul></li><li>NOT EXISTS关键字表示如果不存在某种条件，则返回TRUE，否则返回FALSE。</li></ul><p>题目：查询公司管理者的employee_id，last_name，job_id，department_id信息</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 方式一：EXISTSSELECT employee_id, last_name, job_id, department_idFROM employees e1WHERE EXISTS ( SELECT *        FROM employees e2        WHERE e2.manager_id &#x3D;        e1.employee_id);# 方式二：自连接SELECT DISTINCT e1.employee_id, e1.last_name, e1.job_id, e1.department_idFROM employees e1 JOIN employees e2ON e1.employee_id &#x3D; e2.manager_id;# 方式三：INSELECT employee_id, last_name, job_id, department_idWHERE employee_id IN (        SELECT DISTINCT manager_id        FROM employees);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>题目：查询departments表中，不存在于employees表中的部门的department_id和department_name</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 方式一：SELECT d.department_id, d.department_nameFROM departments e RIGHT JOIN departments dON e.&#96;department_id&#96; &#x3D; d.&#96;department_id&#96;WHERE e.&#96;department_id&#96; IS NULL;# 方式二：SELECT department_id, department_nameFROM departments dWHERE NOT EXISTS (SELECT *    FROM employees e    WHERE d.&#96;department_id&#96; &#x3D; e.&#96;department_id&#96;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-相关更新"><a href="#3-相关更新" class="headerlink" title="3) 相关更新"></a>3) 相关更新</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">UPDATE table1 alias1SET column &#x3D; (SELECT expressionFROM table2 alias2WHERE alias1.column &#x3D; alias2.column);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用相关子查询依据一个表中的数据更新另一个表的数据。</p><p>题目：在employees中增加一个department_name字段，数据为员工对应的部门名称</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 1）ALTER TABLE employeesADD(department_name VARCHAR2(14));# 2）UPDATE employees eSET department_name &#x3D; (SELECT department_nameFROM departments dWHERE e.department_id &#x3D; d.department_id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-相关删除"><a href="#4-相关删除" class="headerlink" title="4) 相关删除"></a>4) 相关删除</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELETE FROM table1 alias1WHERE column operator (SELECT expressionFROM table2 alias2WHERE alias1.column &#x3D; alias2.column);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用相关子查询依据一个表中的数据删除另一个表的数据。</p><p>题目：删除表employees中，其与emp_history表皆有的数据</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELETE FROM employees eWHERE employee_id in(    SELECT employee_id    FROM emp_history    WHERE employee_id &#x3D; e.employee_id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-思考题"><a href="#6-思考题" class="headerlink" title="6. 思考题"></a>6. 思考题</h2><p>问题：谁的工资比Abel的高？ 解答：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#方式1：自连接SELECT e2.last_name,e2.salaryFROM employees e1,employees e2WHERE e1.last_name &#x3D; &#39;Abel&#39;AND e1.&#96;salary&#96; &lt; e2.&#96;salary&#96;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#方式2：子查询SELECT last_name,salaryFROM employeesWHERE salary &gt; (    SELECT salary    FROM employees    WHERE last_name &#x3D; &#39;Abel&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>问题：以上两种方式有好坏之分吗？ </p><p>解答：自连接方式好！ </p><p>题目中可以使用子查询，也可以使用自连接。一般情况建议你使用自连接，因为在许多 DBMS 的处理过 程中，对于自连接的处理速度要比子查询快得多。 可以这样理解：子查询实际上是通过未知表进行查询后的条件判断，而自连接是通过已知的自身数据表 进行条件判断，因此在大部分 DBMS 中都对自连接处理进行了优化。</p><h2 id="7-课后练习"><a href="#7-课后练习" class="headerlink" title="7. 课后练习"></a>7. 课后练习</h2><ol><li>查询和Zlotkey相同部门的员工姓名和工资</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT last_name, salaryFROM employeesWHERE department_id &#x3D; (SELECT department_id    FROM employees    WHERE last_name &#x3D; &#39;Zlotkey&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>查询工资比公司平均工资高的员工的员工号，姓名和工资。</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT employee_id, last_name, salaryFROM employeesWHERE salary &gt; (SELECT AVG(salary)    FROM employee);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>选择工资大于所有JOB_ID &#x3D; ‘SA_MAN’ 的员工的工资的员工的last_name, job_id, salary</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT last_name, job_id, salaryFROM employeesWHERE salary &gt; ALL (SELECT salary    FROM employees    WHERE job_id &#x3D; &#39;SA_MAN&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>查询和姓名中包含字母u的员工在相同部门的员工的员工号和姓名</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT employee_id, last_nameFROM eployeesWHERE department_id IN (    SELECT DISTINCT department_id    FROM employees    WHERE last_name LIKE &#39;%u%&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>查询在部门的location_id为1700的部门工作的员工的员工号</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT employee_idFROM employeesWHERE department_id IN (SELECT department_id    FROM departments    WHERE location_id &#x3D; 1700);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>查询管理者是King的员工姓名和工资</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT last_name, salaryFROM employeesWHERE manage_id IN (SELECT employee_id    FROM employees    WHERE last_name &#x3D; &#39;King&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>查询工资最低的员工信息 (last_name, salary)</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT last_name, salaryFROM employeesWHERE salary &#x3D; (SELECT MIN(salary)    FROM employees);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li>查询平均工资最低的部门信息</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 方式一SELECT *FROM departmentsWHERE department_id &#x3D; (SELECT department_id    FROM employees    GROUP BY department_id    HAVING AVG(salary) &#x3D; (    SELECT MIN(avg_sal)        FROM (        SELECT AVG(salary) avg_sal            FROM employees            GROUP BY department_id        ) t_dept_avg_sal    ));# 方式二SELECT *FROM departmentsWHERE department_id &#x3D; (SELECT department_id    FROM employees    GROUP BY department_id    HAVING AVG(salary) &lt;&#x3D; ALL (        SELECT AVG(salary) avg_sal        FROM employees        GROUP BY department_id    ));# 方式三: LIMITSELECT *FROM departmentsWHERE department_id IN (    SELECT department_id    FROM employees    GROUP BY department_id    HAVING AVG(salary) &#x3D; (    SELECT AVG(salary) avg_sal        FROM employees        GROUP BY department_id        ORDER BY avg_sal ASC        LIMIT 1    ));# 方式四SELECT d.*FROM departments d, (SELECT department_id, AVG(salary) avg_sal    FROM employees    GROUP BY department_id    ORDER BY avg_sal ASC    LIMIT 0,1) t_dept_avg_salWHERE d.&#96;department_id&#96; &#x3D; t_dept_avg_sal.&#96;department_id&#96;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="9"><li>查询平均工资最低的部门信息和该部门的平均工资 (相关子查询)</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT d.*, (SELECT AVG(salary) FROM employees WHERE department_id &#x3D; d.&#96;department_id&#96;) avg_salFROM departments d, (SELECT department_id, AVG(salary) avg_sal    FROM employees    GROUP BY department_id    ORDER BY avg_sal ASC    LIMIT 0,1) t_dept_avg_salWHERE d.&#96;department_id&#96; &#x3D; t_dept_avg_sal.&#96;department_id&#96;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="10"><li>查询平均工资最高的job信息</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT *FROM jobsWHERE job_id &#x3D; (SELECT job_id    FROM employees    GROUP BY job_id    HAVING AVG(salary) &#x3D; (    SELECT MAX(avg_sal)        FROM (        SELECT AVG(salary) avg_sal            FROM employees            GROUP BY job_id        ) t_job_avg_sal    ));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="11"><li>查询平均工资高于公司平均工资的部门有哪些？</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT depatment_idFROM employeesWHERE department_id IS NOT NULLGROUP BY department_idHAVING AVG(salary) &gt; (SELECT AVG(salary)    FROM eployees);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="12"><li>查询出公司中所有manager的详细信息</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 方式1：自连接SELECT DISTINCT *FROM employees emp, employees managerWHERE emp.&#96;manager_id&#96; &#x3D; manager.&#96;employee_id&#96;;SELECT DISTINCT *FROM employees emp JOIN employees managerON emp.&#96;manager_id&#96; &#x3D; manager.&#96;employee_id&#96;; # 方式2：子查询SELECT *FROM employeesWHERE employee_id IN (SELECT manager_id    FROM employees);# 方式3：EXISTSSELECT *FROM employees managerWHERE EXISTS (SELECT *    FROM employees emp    WHERE manager.&#96;employee_id&#96; &#x3D; emp.&#96;manager_id&#96;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="13"><li>各个部门中，最高工资中最低的那个部门的最低工资是多少？</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 方式一：SELECT MIN(salary)FROM employeesWHERE department_id &#x3D; (    SELECT department_id    FROM employeesGROUP BY department_idHAVING MAX(salary) &#x3D; (    SELECT MIN(max_sal)        FROM (        SELECT MAX(salary) max_sal            FROM employees            GROUP BY department_id        ) t_dept_max_sal    ) );# 方式二：SELECT MIN(salary)FROM employeesWHERE department_id &#x3D; (    SELECT department_id    FROM employeesGROUP BY department_idHAVING MAX(salary) &lt;&#x3D; ALL (        SELECT MAX(salary)        FROM employees        GROUP BY department_id    ) );# 方式三：SELECT MIN(salary)FROM employeesWHERE department_id &#x3D; (    SELECT department_id    FROM employeesGROUP BY department_idHAVING MAX(salary) &#x3D; (        SELECT MAX(salary) max_sal        FROM employees        GROUP BY department_id        ORDER BY max_sal ASC        LIMIT 0,1    ) );# 方式四：FROM employees e, (SELECT department_id, MAX(salary) max_sal    FROM employees    GROUP BY department_id    ORDER BY max_sal ASC    LIMIT 0,1) t_dept_max_salWHERE e.&#96;department_id&#96; &#x3D; t_dept_max_sal.&#96;department_id&#96;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="14"><li>查询平均工资最高的部门的manager的详细信息：last_name, department_id, email, salary</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT last_name, department_id, email, salaryFROM employeesWHERE employee_id IN (SELECT DISTINCT manager_id    FROM employees    WHERE department_id &#x3D; (    SELECT department_id        FROM employees        GROUP BY department_id        HAVING AVG(salary) &#x3D; (        SELECT MAX(avg_sal)            FROM (            SELECT AVG(salary) avg_sal                FROM employees                GROUP BY department_id            ) t_dept_avg_sal        )    ));SELECT last_name, department_id, email, salaryFROM employeesWHERE employee_id IN (    SELECT DISTINCT manager_id    FROM employees e, (        SELECT department_id, AVG(salary) avg_sal        FROM employees        GROUP BY department_id        ORDER BY avg_sal DESC        LIMIT 0,1    ) t_dept_avg_sal    WHERE e.&#96;department_id&#96; &#x3D; t_dept_avg_sal.&#96;department_id&#96;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="15"><li>查询部门的部门号，其中不包括job_id是”ST_CLERK”的部门号</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT department_idFROM departmentsWHERE department_id NOT IN (SELECT DISTINCT department_id    FROM employees    WHERE job_id &#x3D; &#96;ST_CLERK&#96;);SELECT department_idFROM department dWHERE NOT EXISTS (SELECT *    FROM employees e    WHERE d.&#96;department_id&#96; &#x3D; e.&#96;department_id&#96;    AND e.&#96;job_id&#96; &#x3D; &#39;ST_CLERK&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="16"><li>选择所有没有管理者的员工的last_name</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT last_nameFROM employees empWHERE NOT EXISTS (SELECT *    FROM employees mgr    WHERE emp.&#96;manager_id&#96; &#x3D; mgr.&#96;employee_id&#96;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="17"><li>查询员工号、姓名、雇用时间、工资，其中员工的管理者为 ‘De Haan’</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT employee_id, last_name, hire_date, salaryFROM employeeWHERE manager_id IN (SELECT manager_id    FROM employee    WHERE last_name &#x3D; &#39;De Haan&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="18"><li>查询各部门中工资比本部门平均工资高的员工的员工号，姓名和工资（相关子查询）</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT department_id, last_name, salaryFROM employees e1WHERE salary &gt; (SELECT AVG(salary)    FROM employees e2    WHERE e2.&#96;department_id&#96; &#x3D; e1.&#96;department_id&#96;);SELECT e.last_name, e.salary, e.department_idFROM employees e, (SELECT department_id, AVG(salary) avg_sal    FROM employees    GROUP BY department_id) t_dept_avg_salWHERE e.&#96;department_id&#96; &#x3D; t_dept_avg_sal.&#96;department_id&#96;AND e.&#96;salary&#96; &gt; t_dept_avg_sal.&#96;avg_sal&#96;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="19"><li>查询每个部门下的部门人数大于5的部门名称（相关子查询）</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT department_nameFROM departments dWHERE 5 &lt; (SELECT COUNT(*)    FROM employees e    WHERE d.&#96;department_id&#96; &#x3D; e.&#96;department_id&#96;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="20"><li>查询每个国家下的部门个数大于2的国家编号（相关子查询）</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT country_idFROM locations lWHERE 2 &lt; (SELECT COUNT(*)    FROM department d    WHERE l.&#96;location_id&#96; &#x3D; d.&#96;location_id&#96;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第十章-创建和管理表"><a href="#第十章-创建和管理表" class="headerlink" title="第十章_创建和管理表"></a>第十章_创建和管理表</h1><h2 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1. 基础知识"></a>1. 基础知识</h2><h3 id="1-标识符命名规则"><a href="#1-标识符命名规则" class="headerlink" title="1) 标识符命名规则"></a>1) 标识符命名规则</h3><ul><li>数据库名、表名不得超过30个字符，变量名限制为29个 </li><li>必须只能包含 A–Z, a–z, 0–9, _共63个字符 </li><li>数据库名、表名、字段名等对象名中间不要包含空格 </li><li>同一个MySQL软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名 </li><li>必须保证你的字段没有和保留字、数据库系统或常用方法冲突。如果坚持使用，请在SQL语句中使 用&#96;（着重号）引起来 </li><li>保持字段名和类型的一致性：在命名字段并为其指定数据类型的时候一定要保证一致性，假如数据 类型在一个表里是整数，那在另一个表里可就别变成字符型了</li></ul><h3 id="2-MySQL中的数据类型"><a href="#2-MySQL中的数据类型" class="headerlink" title="2) MySQL中的数据类型"></a>2) MySQL中的数据类型</h3><table><thead><tr><th>类型</th><th>数据变量</th></tr></thead><tbody><tr><td>整数类型</td><td>TINYINT、SMALLINT、MEDIUMINT、INT(或INTEGER)、BIGINT</td></tr><tr><td>浮点类型</td><td>FLOAT、DOUBLE</td></tr><tr><td>定点数类型</td><td>DECIMAL</td></tr><tr><td>位类型</td><td>BIT</td></tr><tr><td>日期时间类型</td><td>YEAR、TIME、DATE、DATETIME、TIMESTAMP</td></tr><tr><td>文本字符串类型</td><td>CHAR、VARCHAR、TINYTEXT、TEXT、MEDIUMTEXT、LONGTEXT</td></tr><tr><td>枚举类型</td><td>ENUM</td></tr><tr><td>集合类型</td><td>SET</td></tr><tr><td>二进制字符串类型</td><td>BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB、LONGBLOB</td></tr><tr><td>JSON类型</td><td>JSON对象、JSON数组</td></tr><tr><td>空间数据类型</td><td>单值：GEOMETRY、POINT、LINESTRING、POLYGON； 集合：MULTIPOINT、MULTILINESTRING、MULTIPOLYGON、 GEOMETRYCOLLECTION</td></tr></tbody></table><p>其中，常用的几类类型介绍如下：</p><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>INT</td><td>从-2^31到2^31-1的整型数据。存储大小为 4个字节</td></tr><tr><td>CHAR(size)</td><td>FLOAT、DOUBLE</td></tr><tr><td>VARCHAR(size)</td><td>DECIMAL</td></tr><tr><td>FLOAT(M,D)</td><td>BIT</td></tr><tr><td>DOUBLE(M,D)</td><td>YEAR、TIME、DATE、DATETIME、TIMESTAMP</td></tr><tr><td>DECIMAL(M,D)</td><td>CHAR、VARCHAR、TINYTEXT、TEXT、MEDIUMTEXT、LONGTEXT</td></tr><tr><td>DATE</td><td>ENUM</td></tr><tr><td>BLOB</td><td>SET</td></tr><tr><td>TEXT</td><td>BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB、LONGBLOB</td></tr></tbody></table><h2 id="2-创建和管理数据库"><a href="#2-创建和管理数据库" class="headerlink" title="2. 创建和管理数据库"></a>2. 创建和管理数据库</h2><h3 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1) 创建数据库"></a>1) 创建数据库</h3><ul><li><p>方式1：创建数据库</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE DATABASE 数据库名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>方式2：创建数据库并指定字符集</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE DATABASE 数据库名 CHARACTER SET 字符集;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>方式3：判断数据库是否已经存在，不存在则创建数据库（ 推荐 ）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE DATABASE IF NOT EXISTS 数据库名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>如果MySQL中已经存在相关的数据库，则忽略创建语句，不再创建数据库。</p><blockquote><p>注意：DATABASE 不能改名。一些可视化工具可以改名，它是建新库，把所有表复制到新库，再删 旧库完成的。</p></blockquote><h3 id="2-使用数据库"><a href="#2-使用数据库" class="headerlink" title="2) 使用数据库"></a>2) 使用数据库</h3><ul><li><p>查看当前所有的数据库</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW DATABASES; #有一个S，代表多个数据库<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看当前正在使用的数据库</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT DATABASE(); #使用的一个 mysql 中的全局函数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看指定库下所有的表</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW TABLES FROM 数据库名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看数据库的创建信息</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW CREATE DATABASE 数据库名;或者：SHOW CREATE DATABASE 数据库名\G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>使用&#x2F;切换数据库</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">USE 数据库名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><blockquote><p>注意：要操作表格和数据之前必须先说明是对哪个数据库进行操作，否则就要对所有对象加上“数 据库名.”。</p></blockquote><h3 id="3-修改数据库"><a href="#3-修改数据库" class="headerlink" title="3) 修改数据库"></a>3) 修改数据库</h3><ul><li><p>更改数据库字符集</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER DATABASE 数据库名 CHARACTER SET 字符集; #比如：gbk、utf8等<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>方式1：删除指定的数据库</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DROP DATABASE 数据库名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>方式2：删除指定的数据库（ 推荐 ）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DROP DATABASE IF EXISTS 数据库名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="3-创建表"><a href="#3-创建表" class="headerlink" title="3. 创建表"></a>3. 创建表</h2><h3 id="1-创建方式1"><a href="#1-创建方式1" class="headerlink" title="1) 创建方式1"></a>1) 创建方式1</h3><ul><li>语法格式：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE [IF NOT EXISTS] 表名(字段1, 数据类型 [约束条件] [默认值],字段2, 数据类型 [约束条件] [默认值],字段3, 数据类型 [约束条件] [默认值],……[表约束条件]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>加上了IF NOT EXISTS关键字，则表示：如果当前数据库中不存在要创建的数据表，则创建数据表； 如果当前数据库中已经存在要创建的数据表，则忽略建表语句，不再创建数据表。</p></blockquote><h3 id="2-创建方式2"><a href="#2-创建方式2" class="headerlink" title="2) 创建方式2"></a>2) 创建方式2</h3><ul><li>使用 AS subquery 选项，将创建表和插入数据结合起来</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE 表名[(column, column, ...)]AS subquery;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>指定的列和子查询中的列要一一对应</li><li>通过列名和默认值定义列</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE dept80ASSELECT employee_id, last_name, salary*12 ANNSAL, hire_dateFROM employeesWHERE department_id &#x3D; 80;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-查看数据表结构"><a href="#3-查看数据表结构" class="headerlink" title="3) 查看数据表结构"></a>3) 查看数据表结构</h3><p>在MySQL中创建好数据表之后，可以查看数据表的结构。MySQL支持使用 DESCRIBE&#x2F;DESC 语句查看数据 表结构，也支持使用 SHOW CREATE TABLE 语句查看数据表结构。</p><p>语法格式如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW CREATE TABLE 表名\G<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用SHOW CREATE TABLE语句不仅可以查看表创建时的详细语句，还可以查看存储引擎和字符编码。</p><h2 id="4-修改表"><a href="#4-修改表" class="headerlink" title="4. 修改表"></a>4. 修改表</h2><p>修改表指的是修改数据库中已经存在的数据表的结构。</p><p>使用 ALTER TABLE 语句可以实现：</p><ul><li>向已有的表中添加列</li><li>修改现有表中的列</li><li>删除现有表中的列</li><li>重命名现有表中的列</li></ul><h3 id="1-追加一个列"><a href="#1-追加一个列" class="headerlink" title="1) 追加一个列"></a>1) 追加一个列</h3><p>语法格式如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE 表名 ADD 【COLUMN】 字段名 字段类型 【FIRST|AFTER 字段名】;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE dept80ADD job_id varchar(15);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-修改一个列"><a href="#2-修改一个列" class="headerlink" title="2) 修改一个列"></a>2) 修改一个列</h3><ul><li>可以修改列的数据类型，长度、默认值和位置 </li><li>修改字段数据类型、长度、默认值、位置的语法格式如下：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE 表名 MODIFY 【COLUMN】 字段名1 字段类型 【DEFAULT 默认值】【FIRST|AFTER 字段名2】;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>举例：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE dept80MODIFY salary double(9,2) default 1000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>对默认值的修改只影响今后对表的修改</li><li>此外，还可以通过此种方式修改列的约束。</li></ul><h3 id="3-重命名一个列"><a href="#3-重命名一个列" class="headerlink" title="3) 重命名一个列"></a>3) 重命名一个列</h3><p>使用 CHANGE old_column new_column dataType子句重命名列。语法格式如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE 表名 CHANGE 【column】 列名 新列名 新数据类型;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE dept80CHANGE department_name dept_name varchar(15);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-删除一个列"><a href="#4-删除一个列" class="headerlink" title="4) 删除一个列"></a>4) 删除一个列</h3><p>删除表中某个字段的语法格式如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE 表名 DROP 【COLUMN】字段名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-更改表名"><a href="#5-更改表名" class="headerlink" title="5) 更改表名"></a>5) 更改表名</h3><ul><li>方式一：使用RENAME</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">RENAME TABLE empTO myemp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>方式二：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER table deptRENAME [TO] detail_dept; -- [TO]可以省略<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>必须是对象的拥有者</li></ul><h2 id="5-删除表"><a href="#5-删除表" class="headerlink" title="5. 删除表"></a>5. 删除表</h2><ul><li>在MySQL中，当一张数据表 没有与其他任何数据表形成关联关系 时，可以将当前数据表直接删除。 </li><li>数据和结构都被删除 </li><li>所有正在运行的相关事务被提交 </li><li>所有相关索引被删除 </li><li>语法格式：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DROP TABLE [IF EXISTS] 数据表1 [, 数据表2, …, 数据表n];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>IF EXISTS 的含义为：如果当前数据库中存在相应的数据表，则删除数据表；如果当前数据库中不存 在相应的数据表，则忽略删除语句，不再执行删除数据表的操作。</p><p>举例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DROP TABLE dept80;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>DROP TABLE 语句不能回滚</li></ul><h2 id="6-清空表"><a href="#6-清空表" class="headerlink" title="6. 清空表"></a>6. 清空表</h2><ul><li>TRUNCATE TABLE语句：<ul><li>删除表中所有的数据</li><li>释放表的存储空间</li></ul></li><li>举例：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">TRUNCATE TABLE detail_dept;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>TRUNCATE语句不能回滚，而使用 DELETE 语句删除数据，可以回滚</li></ul><blockquote><p>阿里开发规范： 【参考】TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少，但 TRUNCATE 无 事务且不触发 TRIGGER，有可能造成事故，故不建议在开发代码中使用此语句。 说明：TRUNCATE TABLE 在功能上与不带 WHERE 子句的 DELETE 语句相同。</p></blockquote><h2 id="7-内容扩展"><a href="#7-内容扩展" class="headerlink" title="7. 内容扩展"></a>7. 内容扩展</h2><h3 id="拓展1：阿里巴巴《Java开发手册》之MySQL字段命名"><a href="#拓展1：阿里巴巴《Java开发手册》之MySQL字段命名" class="headerlink" title="拓展1：阿里巴巴《Java开发手册》之MySQL字段命名"></a>拓展1：阿里巴巴《Java开发手册》之MySQL字段命名</h3><ul><li><p>【 强制 】表名、字段名必须使用小写字母或数字，禁止出现数字开头，禁止两个下划线中间只出 现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。</p><ul><li>正例：aliyun_admin，rdc_config，level3_name</li><li>反例：AliyunAdmin，rdcConfig，level_3_name</li></ul></li><li><p>【 强制 】禁用保留字，如 desc、range、match、delayed 等，请参考 MySQL 官方保留字。</p></li><li><p>【 强制 】表必备三字段：id, gmt_create, gmt_modified。</p><ul><li>说明：其中 id 必为主键，类型为BIGINT UNSIGNED、单表时自增、步长为 1。gmt_create, gmt_modified 的类型均为 DATETIME 类型，前者现在时表示主动式创建，后者过去分词表示被 动式更新</li></ul></li><li><p>【 推荐 】表的命名最好是遵循 “业务名称_表的作用”。</p><ul><li>正例：alipay_task 、 force_project、 trade_config</li></ul></li><li><p>【 推荐 】库名与应用名称尽量一致。</p></li><li><p>【参考】合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检索速度。</p><ul><li>正例：无符号值可以避免误存负数，且扩大了表示范围。</li></ul></li></ul><h3 id="扩展2：操作注意要求"><a href="#扩展2：操作注意要求" class="headerlink" title="扩展2：操作注意要求"></a>扩展2：操作注意要求</h3><ul><li>表删除 操作将把表的定义和表中的数据一起删除，并且MySQL在执行删除操作时，不会有任何的确认信 息提示，因此执行删除操时应当慎重。在删除表前，最好对表中的数据进行 备份 ，这样当操作失误时可 以对数据进行恢复，以免造成无法挽回的后果。</li><li>同样的，在使用 ALTER TABLE 进行表的基本修改操作时，在执行操作过程之前，也应该确保对数据进 行完整的 备份 ，因为数据库的改变是 无法撤销 的，如果添加了一个不需要的字段，可以将其删除；相 同的，如果删除了一个需要的列，该列下面的所有数据都将会丢失。</li></ul><h3 id="扩展3：MySQL8新特性—DDL的原子化"><a href="#扩展3：MySQL8新特性—DDL的原子化" class="headerlink" title="扩展3：MySQL8新特性—DDL的原子化"></a>扩展3：MySQL8新特性—DDL的原子化</h3><p>在MySQL 8.0版本中，InnoDB表的DDL支持事务完整性，即 DDL操作要么成功要么回滚 。DDL操作回滚日志 写入到data dictionary数据字典表mysql.innodb_ddl_log（该表是隐藏的表，通过show tables无法看到） 中，用于回滚操作。通过设置参数，可将DDL操作日志打印输出到MySQL错误日志中。</p><h1 id="第11章-数据处理之增删改"><a href="#第11章-数据处理之增删改" class="headerlink" title="第11章_数据处理之增删改"></a>第11章_数据处理之增删改</h1><h2 id="1-插入数据"><a href="#1-插入数据" class="headerlink" title="1. 插入数据"></a>1. 插入数据</h2><h3 id="1-方式1：VALUES的方式添加"><a href="#1-方式1：VALUES的方式添加" class="headerlink" title="1) 方式1：VALUES的方式添加"></a>1) 方式1：VALUES的方式添加</h3><p>使用这种语法一次只能向表中插入一条数据。</p><p><strong>情况1：为表的所有字段按默认顺序插入数据</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO 表名VALUES (value1,value2,....);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>值列表中需要为表的每一个字段指定值，并且值的顺序必须和数据表中字段定义时的顺序相同。</p><p>举例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO departmentsVALUES (70, &#39;Pub&#39;, 100, 1700);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>情况2: 指定字段名插入数据</strong></p><p>为表的指定字段插入数据，就是在INSERT语句中只向部分字段中插入值，而其他字段的值为表定义时的 默认值。 在 INSERT 子句中随意列出列名，但是一旦列出，VALUES中要插入的value1,….valuen需要与 column1,…columnn列一一对应。如果类型不同，将无法插入，并且MySQL会产生错误。 </p><p>举例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO departments(department_id, department_name)VALUES (80, &#39;IT&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>情况3：同时插入多条记录</strong></p><p>INSERT语句可以同时向数据表中插入多条记录，插入时指定多个值列表，每个值列表之间用逗号分隔 开，基本语法格式如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO table_nameVALUES(value1 [,value2, …, valuen]),(value1 [,value2, …, valuen]),……(value1 [,value2, …, valuen]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO table_name(column1 [, column2, …, columnn])VALUES(value1 [,value2, …, valuen]),(value1 [,value2, …, valuen]),……(value1 [,value2, …, valuen]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用INSERT同时插入多条记录时，MySQL会返回一些在执行单行插入时没有的额外信息，这些信息的含 义如下：</p><ul><li>Records：表明插入的记录条数。 </li><li>Duplicates：表明插入时被忽略的记录，原因可能是这 些记录包含了重复的主键值。 </li><li>Warnings：表明有问题的数据值，例如发生数据类型转换。</li></ul><blockquote><p>一个同时插入多行记录的INSERT语句等同于多个单行插入的INSERT语句，但是多行的INSERT语句 在处理过程中 效率更高 。因为MySQL执行单条INSERT语句插入多行数据比使用多条INSERT语句 快，所以在插入多条记录时最好选择使用单条INSERT语句的方式插入。</p></blockquote><h3 id="2-方式2：将查询结果插入到表中"><a href="#2-方式2：将查询结果插入到表中" class="headerlink" title="2) 方式2：将查询结果插入到表中"></a>2) 方式2：将查询结果插入到表中</h3><p>INSERT还可以将SELECT语句查询的结果插入到表中，此时不需要把每一条记录的值一个一个输入，只需要使用一条INSERT语句和一条SELECT语句组成的组合语句即可快速地从一个或多个表中向一个表中插入多行</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSET INTO 目标表名(tar_column1 [, tar_column2, ..., tar_columnn])SELECT(src_column1 [, src_column2, …, src_columnn])FROM 源表名[WHERE condition]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在 INSERT 语句中加入子查询。 </li><li>不必书写 VALUES 子句。 </li><li>子查询中的值列表应与 INSERT 子句中的列名对应。</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO emp2SELECT *FROM employeesWHERE department_id &#x3D; 90;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO sales_reps(id, name, salary, commission_pct)SELECT employee_id, last_name, salary, commission_pctFROM employeesWHERE job_id LIKE &#39;%REP%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-更新数据"><a href="#2-更新数据" class="headerlink" title="2. 更新数据"></a>2. 更新数据</h2><ul><li>使用 UPDATE 语句更新数据。语法如下：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">UPDATE table_nameSET column1&#x3D;value1, column2&#x3D;value2, ..., column&#x3D;valuen[WHERE condition]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>可以一次更新多条数据。</p></li><li><p>如果需要回滚数据，需要保证在DML前，进行设置：SET AUTOCOMMIT &#x3D; FALSE;</p></li><li><p>使用 WHERE 子句指定需要更新的数据。</p></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">UPDATE employeesSET department_id &#x3D; 70WHERE employee_id &#x3D; 113;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>如果省略 WHERE 子句，则表中的所有数据都将被更新。</li></ul><h2 id="3-删除数据"><a href="#3-删除数据" class="headerlink" title="3. 删除数据"></a>3. 删除数据</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELETE FROM table_name [WHERE &lt;condition&gt;];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>table_name指定要执行删除操作的表；“[WHERE ]”为可选参数，指定删除条件，如果没有WHERE子句， DELETE语句将删除表中的所有记录。</p><h2 id="4-MySQL8新特性：计算列"><a href="#4-MySQL8新特性：计算列" class="headerlink" title="4. MySQL8新特性：计算列"></a>4. MySQL8新特性：计算列</h2><p>什么叫计算列呢？简单来说就是某一列的值是通过别的列计算得来的。例如，a列值为1、b列值为2，c列 不需要手动插入，定义a+b的结果为c的值，那么c就是计算列，是通过别的列计算得来的。</p><p>在MySQL 8.0中，CREATE TABLE 和 ALTER TABLE 中都支持增加计算列。下面以CREATE TABLE为例进行讲解。</p><p>举例：定义数据表tb1，然后定义字段id、字段a、字段b和字段c，其中字段c为计算列，用于计算a+b的 值。 首先创建测试表tb1，语句如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE tb1(id INT,a INT,b INT,c INT GENERATED ALWAYS AS (a + b) VIRTUAL);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第12章-MySQL数据类型精讲"><a href="#第12章-MySQL数据类型精讲" class="headerlink" title="第12章_MySQL数据类型精讲"></a>第12章_MySQL数据类型精讲</h1><h2 id="1-MySQL中的数据类型"><a href="#1-MySQL中的数据类型" class="headerlink" title="1. MySQL中的数据类型"></a>1. MySQL中的数据类型</h2><table><thead><tr><th>类型</th><th>举例</th></tr></thead><tbody><tr><td>整数类型</td><td>TINYINT、SMALLINT、MEDIUMINT、INT(或INTEGER)、BIGINT</td></tr><tr><td>浮点类型</td><td>FLOAT、DOUBLE</td></tr><tr><td>定点数类型</td><td>DECIMAL</td></tr><tr><td>位类型</td><td>BIT</td></tr><tr><td>日期时间类型</td><td>YEAR、TIME、DATE、DATETIME、TIMESTAMP</td></tr><tr><td>文本字符串类型</td><td>CHAR、VARCHAR、TINYTEXT、TEXT、MEDIUMTEXT、LONGTEXT</td></tr><tr><td>枚举类型</td><td>ENUM</td></tr><tr><td>集合类型</td><td>SET</td></tr><tr><td>二进制字符串类型</td><td>BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB、LONGBLOB</td></tr><tr><td>JSON类型</td><td>JSON对象、JSON数组</td></tr><tr><td>空间数据类型</td><td>单值类型：GEOMETRY、POINT、LINESTRING、POLYGON； 集合类型：MULTIPOINT、MULTILINESTRING、MULTIPOLYGON、 GEOMETRYCOLLECTION</td></tr></tbody></table><p>常见数据类型的属性，如下：</p><table><thead><tr><th>MySQL关键字</th><th>含义</th></tr></thead><tbody><tr><td>NULL</td><td>TINYINT、SMALLINT、MEDIUMINT、INT(或INTEGER)、BIGINT</td></tr><tr><td>NOT NULL</td><td>FLOAT、DOUBLE</td></tr><tr><td>DEFAULT</td><td>DECIMAL</td></tr><tr><td>PRIMARY KEY</td><td>BIT</td></tr><tr><td>AUTO_INCREMENT</td><td>YEAR、TIME、DATE、DATETIME、TIMESTAMP</td></tr><tr><td>UNSIGNED</td><td>CHAR、VARCHAR、TINYTEXT、TEXT、MEDIUMTEXT、LONGTEXT</td></tr><tr><td>CHARACTER SET name</td><td>ENUM</td></tr></tbody></table><h2 id="2-整数类型"><a href="#2-整数类型" class="headerlink" title="2. 整数类型"></a>2. 整数类型</h2><h3 id="1-类型介绍"><a href="#1-类型介绍" class="headerlink" title="1) 类型介绍"></a>1) 类型介绍</h3><p>整数类型一共有 5 种，包括 TINYINT、SMALLINT、MEDIUMINT、INT（INTEGER）和 BIGINT。 </p><p>它们的区别如下表所示：</p><table><thead><tr><th>整数类型</th><th>字节</th><th>有符号数取值范围</th><th>无符号数取值范围</th></tr></thead><tbody><tr><td>TINYINT</td><td>1</td><td>-128~127</td><td>0~255</td></tr><tr><td>SMALLINT</td><td>2</td><td>-32768~32767</td><td>0~65535</td></tr><tr><td>MEDIUMINT</td><td>3</td><td>-8388608~8388607</td><td>0~16777215</td></tr><tr><td>INT、INTEGER</td><td>4</td><td>-2147483648~2147483647</td><td>0~4294967295</td></tr><tr><td>BIGINT</td><td>8</td><td>-9223372036854775808~9223372036854775807</td><td>0~18446744073709551615</td></tr></tbody></table><h3 id="2-可选属性"><a href="#2-可选属性" class="headerlink" title="2) 可选属性"></a>2) 可选属性</h3><p>整数类型的可选属性有三个：</p><ul><li>M</li></ul><p>M : 表示显示宽度，M的取值范围是(0, 255)。例如，int(5)：当数据宽度小于5位的时候在数字前面需要用 字符填满宽度。该项功能需要配合“ ZEROFILL ”使用，表示用“0”填满宽度，否则指定显示宽度无效。 如果设置了显示宽度，那么插入的数据宽度超过显示宽度限制，会不会截断或插入失败？ </p><p>答案：不会对插入的数据有任何影响，还是按照类型的实际宽度进行保存，即 显示宽度与类型可以存储的 值范围无关 。从MySQL 8.0.17开始，整数数据类型不推荐使用显示宽度属性。 整型数据类型可以在定义表结构时指定所需要的显示宽度，如果不指定，则系统为每一种类型指定默认 的宽度值。</p><p>举例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE test_int1 ( x TINYINT, y SMALLINT, z MEDIUMINT, m INT, n BIGINT );<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看表结构 （MySQL5.7中显式如下，MySQL8中不再显式范围）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; desc test_int1;+-------+--------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+-------+--------------+------+-----+---------+-------+| x | tinyint(4) | YES | | NULL | || y | smallint(6) | YES | | NULL | || z | mediumint(9) | YES | | NULL | || m | int(11) | YES | | NULL | || n | bigint(20) | YES | | NULL | |+-------+--------------+------+-----+---------+-------+5 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>TINYINT有符号数和无符号数的取值范围分别为-128~127和0~255，由于负号占了一个数字位，因此 TINYINT默认的显示宽度为4。同理，其他整数类型的默认显示宽度与其有符号数的最小值的宽度相同。</p><ul><li>UNSIGNED</li></ul><p>UNSIGNED : 无符号类型（非负），所有的整数类型都有一个可选的属性UNSIGNED（无符号属性），无 符号整数类型的最小取值为0。所以，如果需要在MySQL数据库中保存非负整数值时，可以将整数类型设 置为无符号类型。 int类型默认显示宽度为int(11)，无符号int类型默认显示宽度为int(10)。</p><ul><li>ZEROFILL</li></ul><p>ZEROFILL : 0填充,（如果某列是ZEROFILL，那么MySQL会自动为当前列添加UNSIGNED属性），如果指 定了ZEROFILL只是表示不够M位时，用0在左边填充，如果超过M位，只要不超过数据存储范围即可。 </p><p>原来，在 int(M) 中，M 的值跟 int(M) 所占多少存储空间并无任何关系。 int(3)、int(4)、int(8) 在磁盘上都 是占用 4 bytes 的存储空间。也就是说，int(M)，必须和UNSIGNED ZEROFILL一起使用才有意义。如果整 数值超过M位，就按照实际位数存储。只是无须再用字符 0 进行填充。</p><h3 id="3-适用场景"><a href="#3-适用场景" class="headerlink" title="3) 适用场景"></a>3) 适用场景</h3><p>TINYINT ：一般用于枚举数据，比如系统设定取值范围很小且固定的场景。 </p><p>SMALLINT ：可以用于较小范围的统计数据，比如统计工厂的固定资产库存数量等。 </p><p>MEDIUMINT ：用于较大整数的计算，比如车站每日的客流量等。 </p><p>INT、INTEGER ：取值范围足够大，一般情况下不用考虑超限问题，用得最多。比如商品编号。 </p><p>BIGINT ：只有当你处理特别巨大的整数时才会用到。比如双十一的交易量、大型门户网站点击量、证 券公司衍生产品持仓等。</p><h3 id="4-如何选择？"><a href="#4-如何选择？" class="headerlink" title="4) 如何选择？"></a>4) 如何选择？</h3><p>在评估用哪种整数类型的时候，你需要考虑 存储空间 和 可靠性 的平衡问题：一方 面，用占用字节数少 的整数类型可以节省存储空间；另一方面，要是为了节省存储空间， 使用的整数类型取值范围太小，一 旦遇到超出取值范围的情况，就可能引起 系统错误 ，影响可靠性。 </p><p>举个例子，商品编号采用的数据类型是 INT。原因就在于，客户门店中流通的商品种类较多，而且，每 天都有旧商品下架，新商品上架，这样不断迭代，日积月累。 </p><p>如果使用 SMALLINT 类型，虽然占用字节数比 INT 类型的整数少，但是却不能保证数据不会超出范围 65535。相反，使用 INT，就能确保有足够大的取值范围，不用担心数据超出范围影响可靠性的问题。 </p><p>你要注意的是，在实际工作中，系统故障产生的成本远远超过增加几个字段存储空间所产生的成本。因 此，我建议你首先确保数据不会超过取值范围，在这个前提之下，再去考虑如何节省存储空间。</p><h2 id="3-浮点类型"><a href="#3-浮点类型" class="headerlink" title="3. 浮点类型"></a>3. 浮点类型</h2><h3 id="1-类型介绍-1"><a href="#1-类型介绍-1" class="headerlink" title="1) 类型介绍"></a>1) 类型介绍</h3><p>浮点数和定点数类型的特点是可以 处理小数 ，你可以把整数看成小数的一个特例。因此，浮点数和定点 数的使用场景，比整数大多了。 MySQL支持的浮点数类型，分别是 FLOAT、DOUBLE、REAL。</p><ul><li><p>FLOAT 表示单精度浮点数； </p></li><li><p>DOUBLE 表示双精度浮点数；</p></li><li><p>REAL默认就是 DOUBLE。如果你把 SQL 模式设定为启用“ REAL_AS_FLOAT ”，那 么，MySQL 就认为 REAL 是 FLOAT。如果要启用“REAL_AS_FLOAT”，可以通过以下 SQL 语句实现：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SET sql_mode &#x3D; “REAL_AS_FLOAT”;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><strong>问题：为什么浮点数类型的无符号数取值范围，只相当于有符号数取值范围的一半，也就是只相当于 有符号数取值范围大于等于零的部分呢？</strong></p><p>MySQL 存储浮点数的格式为： 符号(S) 、 尾数(M) 和 阶码(E) 。因此，无论有没有符号，MySQL 的浮 点数都会存储表示符号的部分。因此， 所谓的无符号数取值范围，其实就是有符号数取值范围大于等于 零的部分。</p><h3 id="2-数据精度说明"><a href="#2-数据精度说明" class="headerlink" title="2) 数据精度说明"></a>2) 数据精度说明</h3><p>对于浮点类型，在MySQL中单精度值使用 4 个字节，双精度值使用 8 个字节。</p><ul><li><p>MySQL允许使用 非标准语法 （其他数据库未必支持，因此如果涉及到数据迁移，则最好不要这么 用）： FLOAT(M,D) 或 DOUBLE(M,D) 。这里，M称为 精度 ，D称为 标度 。(M,D)中 M&#x3D;整数位+小数 位，D&#x3D;小数位。 D&lt;&#x3D;M&lt;&#x3D;255，0&lt;&#x3D;D&lt;&#x3D;30。 </p><p>例如，定义为FLOAT(5,2)的一个列可以显示为-999.99-999.99。如果超过这个范围会报错。</p></li><li><p>FLOAT和DOUBLE类型在不指定(M,D)时，默认会按照实际的精度（由实际的硬件和操作系统决定） 来显示。</p></li><li><p>说明：浮点类型，也可以加 UNSIGNED ，但是不会改变数据范围，例如：FLOAT(3,2) UNSIGNED仍然 只能表示0-9.99的范围。</p></li><li><p>不管是否显式设置了精度(M,D)，这里MySQL的处理方案如下：</p><ul><li>如果存储时，整数部分超出了范围，MySQL就会报错，不允许存这样的值</li><li>如果存储时，小数点部分若超出范围，就分以下情况：<ul><li>若四舍五入后，整数部分没有超出范围，则只警告，但能成功操作并四舍五入删除多余 的小数位后保存。例如在FLOAT(5,2)列内插入999.009，近似结果是999.01。</li><li>若四舍五入后，整数部分超出范围，则MySQL报错，并拒绝处理。如FLOAT(5,2)列内插入 999.995和-999.995都会报错。</li></ul></li></ul></li><li><p>从MySQL 8.0.17开始，FLOAT(M,D) 和DOUBLE(M,D)用法在官方文档中已经明确不推荐使用，将来可 能被移除。另外，关于浮点型FLOAT和DOUBLE的UNSIGNED也不推荐使用了，将来也可能被移除。</p></li></ul><h3 id="3-精度误差说明"><a href="#3-精度误差说明" class="headerlink" title="3) 精度误差说明"></a>3) 精度误差说明</h3><p>浮点数类型有个缺陷，就是不精准。下面我来重点解释一下为什么 MySQL 的浮点数不够精准。比如，我 们设计一个表，有f1这个字段，插入值分别为0.47,0.44,0.19，我们期待的运行结果是：0.47 + 0.44 + 0.19 &#x3D; 1.1。而使用sum之后查询：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE test_double2(f1 DOUBLE);INSERT INTO test_double2VALUES(0.47),(0.44),(0.19);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT SUM(f1)-&gt; FROM test_double2;+--------------------+| SUM(f1) |+--------------------+| 1.0999999999999999 |+--------------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询结果是 1.0999999999999999。看到了吗？虽然误差很小，但确实有误差。 你也可以尝试把数据类型 改成 FLOAT，然后运行求和查询，得到的是， 1.0999999940395355。显然，误差更大了。</p><p>那么，为什么会存在这样的误差呢？问题还是出在 MySQL 对浮点类型数据的存储方式上。</p><p>MySQL 用 4 个字节存储 FLOAT 类型数据，用 8 个字节来存储 DOUBLE 类型数据。无论哪个，都是采用二 进制的方式来进行存储的。比如 9.625，用二进制来表达，就是 1001.101，或者表达成 1.001101×2^3。如 果尾数不是 0 或 5（比如 9.624），你就无法用一个二进制数来精确表达。进而，就只好在取值允许的范 围内进行四舍五入。</p><p>在编程中，如果用到浮点数，要特别注意误差问题，因为浮点数是不准确的，所以我们要避免使用“&#x3D;”来 判断两个数是否相等。同时，在一些对精确度要求较高的项目中，千万不要使用浮点数，不然会导致结 果错误，甚至是造成不可挽回的损失。那么，MySQL 有没有精准的数据类型呢？当然有，这就是定点数 类型： DECIMAL 。</p><h2 id="4-定点数类型"><a href="#4-定点数类型" class="headerlink" title="4. 定点数类型"></a>4. 定点数类型</h2><h3 id="1-类型介绍-2"><a href="#1-类型介绍-2" class="headerlink" title="1) 类型介绍"></a>1) 类型介绍</h3><ul><li>MySQL中的定点数类型只有 DECIMAL 一种类型。</li></ul><table><thead><tr><th>类型</th><th>字节</th><th>有符号数取值范围</th></tr></thead><tbody><tr><td>DECIMAL(M,D),DEC,NUMERIC</td><td>M+2字节</td><td>有效范围由M和D决定</td></tr></tbody></table><p>使用 DECIMAL(M,D) 的方式表示高精度小数。其中，M被称为精度，D被称为标度。0&lt;&#x3D;M&lt;&#x3D;65， 0&lt;&#x3D;D&lt;&#x3D;30，D</p><ul><li>DECIMAL(M,D)的最大取值范围与DOUBLE类型一样，但是有效的数据范围是由M和D决定的。 DECIMAL 的存储空间并不是固定的，由精度值M决定，总共占用的存储空间为M+2个字节。也就是 说，在一些对精度要求不高的场景下，比起占用同样字节长度的定点数，浮点数表达的数值范围可 以更大一些。</li><li>定点数在MySQL内部是以 字符串 的形式进行存储，这就决定了它一定是精准的。</li><li>当DECIMAL类型不指定精度和标度时，其默认为DECIMAL(10,0)。当数据的精度超出了定点数类型的 精度范围时，则MySQL同样会进行四舍五入处理。</li><li>浮点数 vs 定点数<ul><li>浮点数相对于定点数的优点是在长度一定的情况下，浮点类型取值范围大，但是不精准，适用 于需要取值范围大，又可以容忍微小误差的科学计算场景（比如计算化学、分子建模、流体动 力学等）</li><li>定点数类型取值范围相对小，但是精准，没有误差，适合于对精度要求极高的场景 （比如涉 及金额计算的场景）</li></ul></li></ul><h3 id="2-开发中的经验"><a href="#2-开发中的经验" class="headerlink" title="2) 开发中的经验"></a>2) 开发中的经验</h3><p>“由于 DECIMAL 数据类型的精准性，在我们的项目中，除了极少数（比如商品编号）用到整数类型 外，其他的数值都用的是 DECIMAL，原因就是这个项目所处的零售行业，要求精准，一分钱也不能 差。 ” ——来自某项目经理</p><h2 id="5-位类型：BIT"><a href="#5-位类型：BIT" class="headerlink" title="5. 位类型：BIT"></a>5. 位类型：BIT</h2><p>BIT类型中存储的是二进制值，类似010110。</p><table><thead><tr><th>二进制字符串类型</th><th>长度</th><th>长度范围</th><th>占用空间</th></tr></thead><tbody><tr><td>BIT(M)</td><td>M</td><td>1 &lt;&#x3D; M &lt;&#x3D; 64</td><td>约为(M + 7)&#x2F;8个字节</td></tr></tbody></table><p>BIT类型，如果没有指定(M)，默认是1位。这个1位，表示只能存1位的二进制值。这里(M)是表示二进制的 位数，位数最小值为1，最大值为64。</p><h2 id="6-日期与时间类型"><a href="#6-日期与时间类型" class="headerlink" title="6. 日期与时间类型"></a>6. 日期与时间类型</h2><p>日期与时间是重要的信息，在我们的系统中，几乎所有的数据表都用得到。原因是客户需要知道数据的 时间标签，从而进行数据查询、统计和处理。</p><p>MySQL有多种表示日期和时间的数据类型，不同的版本可能有所差异，MySQL8.0版本支持的日期和时间 类型主要有：YEAR类型、TIME类型、DATE类型、DATETIME类型和TIMESTAMP类型。</p><ul><li>YEAR 类型通常用来表示年 </li><li>DATE 类型通常用来表示年、月、日 </li><li>TIME 类型通常用来表示时、分、秒 </li><li>DATETIME 类型通常用来表示年、月、日、时、分、秒 </li><li>TIMESTAMP 类型通常用来表示带时区的年、月、日、时、分、秒</li></ul><table><thead><tr><th>类型</th><th>名称</th><th>字节</th><th>日期格式</th><th>最小值</th><th>最大值</th></tr></thead><tbody><tr><td>YEAR</td><td>年</td><td>1</td><td>YYYY或YY</td><td>1901</td><td>2155</td></tr><tr><td>TIME</td><td>时间</td><td>3</td><td>HH:MM:SS</td><td>-838:59:59</td><td>838:59:59</td></tr><tr><td>DATE</td><td>日期</td><td>3</td><td>YYYY-MM-DD</td><td>1000-01-01</td><td>9999-12-03</td></tr><tr><td>DATETIME</td><td>日期时间</td><td>8</td><td>YYYY-MM-DD HH:MM:SS</td><td>1000-01-01 00:00:00</td><td>9999-12-31 23:59:59</td></tr><tr><td>TIMESTAMP</td><td>日期时间</td><td>4</td><td>YYYY-MM-DD HH:MM:SS</td><td>1970-01-01 00:00:00 UTC</td><td>2038-01-19 03:14:07UTC</td></tr></tbody></table><p>可以看到，不同数据类型表示的时间内容不同、取值范围不同，而且占用的字节数也不一样，你要根据 实际需要灵活选取。</p><p>为什么时间类型 TIME 的取值范围不是 -23:59:59～23:59:59 呢？原因是 MySQL 设计的 TIME 类型，不光表 示一天之内的时间，而且可以用来表示一个时间间隔，这个时间间隔可以超过 24 小时。</p><h2 id="7-文本字符串类型"><a href="#7-文本字符串类型" class="headerlink" title="7. 文本字符串类型"></a>7. 文本字符串类型</h2><p>MySQL中，文本字符串总体上分为 CHAR 、 VARCHAR 、 TINYTEXT 、 TEXT 、 MEDIUMTEXT 、 LONGTEXT 、 ENUM 、 SET 等类型。</p><h2 id="8-ENUM类型"><a href="#8-ENUM类型" class="headerlink" title="8. ENUM类型"></a>8. ENUM类型</h2><p>ENUM类型也叫作枚举类型，ENUM类型的取值范围需要在定义字段时进行指定。设置字段值时，ENUM 类型只允许从成员中选取单个值，不能一次选取多个值。 其所需要的存储空间由定义ENUM类型时指定的成员个数决定。</p><table><thead><tr><th>文本字符串类型</th><th>长度</th><th>长度范围</th><th>占用的存储空间</th></tr></thead><tbody><tr><td>ENUM</td><td>L</td><td>1 &lt;&#x3D; L &lt;&#x3D; 65535</td><td>1或2个字节</td></tr></tbody></table><ul><li>当ENUM类型包含1～255个成员时，需要1个字节的存储空间； </li><li>当ENUM类型包含256～65535个成员时，需要2个字节的存储空间。 </li><li>ENUM类型的成员个数的上限为65535个。</li></ul><h2 id="9-SET类型"><a href="#9-SET类型" class="headerlink" title="9. SET类型"></a>9. SET类型</h2><p>当SET类型包含的成员个数不同时，其所占用的存储空间也是不同的，具体如下：</p><table><thead><tr><th>成员个数范围（L表示实际成员个数）</th><th>占用的存储空间</th></tr></thead><tbody><tr><td>1 &lt;&#x3D; L &lt;&#x3D; 8</td><td>1个字节</td></tr><tr><td>9 &lt;&#x3D; L &lt;&#x3D; 16</td><td>2个字节</td></tr><tr><td>17 &lt;&#x3D; L &lt;&#x3D; 24</td><td>3个字节</td></tr><tr><td>25 &lt;&#x3D; L &lt;&#x3D; 32</td><td>4个字节</td></tr><tr><td>33 &lt;&#x3D; L &lt;&#x3D; 64</td><td>8个字节</td></tr></tbody></table><p>SET类型在存储数据时成员个数越多，其占用的存储空间越大。注意：SET类型在选取成员时，可以一次 选择多个成员，这一点与ENUM类型不同。</p><h2 id="13-小结及选择建议"><a href="#13-小结及选择建议" class="headerlink" title="13. 小结及选择建议"></a>13. 小结及选择建议</h2><p>在定义数据类型时，如果确定是 整数 ，就用 INT ； 如果是 小数 ，一定用定点数类型 DECIMAL(M,D) ； 如果是日期与时间，就用 DATETIME 。 这样做的好处是，首先确保你的系统不会因为数据类型定义出错。不过，凡事都是有两面的，可靠性 好，并不意味着高效。比如，TEXT 虽然使用方便，但是效率不如 CHAR(M) 和 VARCHAR(M)。</p><p><strong>阿里巴巴《Java开发手册》之MySQL数据库：</strong></p><ul><li><p>任何字段如果为非负数，必须是 UNSIGNED </p></li><li><p>【 强制 】小数类型为 DECIMAL，禁止使用 FLOAT 和 DOUBLE。 </p><p>说明：在存储的时候，FLOAT 和 DOUBLE 都存在精度损失的问题，很可能在比较值的时候，得到不正确的结果。如果存储的数据范围超过 DECIMAL 的范围，建议将数据拆成整数和小数并分开存储。 </p></li><li><p>【 强制 】如果存储的字符串长度几乎相等，使用 CHAR 定长字符串类型。</p></li><li><p>【 强制 】VARCHAR 是可变长字符串，不预先分配存储空间，长度不要超过 5000。如果存储长度大于此值，定义字段类型为 TEXT，独立出来一张表，用主键来对应，避免影响其它字段索引效率。</p></li></ul><h1 id="第13章-约束"><a href="#第13章-约束" class="headerlink" title="第13章_约束"></a>第13章_约束</h1><h2 id="1-约束的分类"><a href="#1-约束的分类" class="headerlink" title="1. 约束的分类"></a>1. 约束的分类</h2><ul><li>根据约束数据列的限制，约束可分为：<ul><li>单列约束：每个约束只约束一列</li><li>多列约束：每个约束可约束多列数据</li></ul></li><li>根据约束的作用范围，约束可分为：<ul><li>列级约束：只能作用在一个列上，跟在列的定义后面</li><li>表级约束：可以作用在多个列上，不与列一起，而是单独定义</li></ul></li><li>根据约束起的作用，约束可分为：<ul><li>NOT NULL 非空约束，规定某个字段不能为空 </li><li>UNIQUE 唯一约束，规定某个字段在整个表中是唯一的 </li><li>PRIMARY KEY 主键(非空且唯一)约束 </li><li>FOREIGN KEY 外键约束 </li><li>CHECK 检查约束 </li><li>DEFAULT 默认值约束</li></ul></li></ul><blockquote><p>注意： MySQL不支持check约束，但可以使用check约束，而没有任何效果 </p></blockquote><ul><li>如何添加&#x2F; 删除约束？</li></ul><p>CREATE TABLE时添加约束</p><p>ALTER TABLE时增加约束、删除约束</p><ul><li>查看某个表已有的约束</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#information_schema数据库名（系统库）#table_constraints表名称（专门存储各个表的约束）SELECT * FROM information_schema.table_constraintsWHERE table_name &#x3D; &#39;表名称&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-非空约束"><a href="#2-非空约束" class="headerlink" title="2. 非空约束"></a>2. 非空约束</h2><h3 id="1-作用"><a href="#1-作用" class="headerlink" title="1) 作用"></a>1) 作用</h3><p>限定某个字段&#x2F; 某列的值不允许为空</p><h3 id="2-关键字"><a href="#2-关键字" class="headerlink" title="2) 关键字"></a>2) 关键字</h3><p>NOT NULL</p><h3 id="3-特点"><a href="#3-特点" class="headerlink" title="3) 特点"></a>3) 特点</h3><ul><li>默认，所有的类型的值都可以是NULL，包括INT、FLOAT等数据类型 </li><li>非空约束只能出现在表对象的列上，只能某个列单独限定非空，不能组合非空 </li><li>一个表可以有很多列都分别限定了非空 </li><li>空字符串’’不等于NULL，0也不等于NULL</li></ul><h3 id="4-添加非空约束"><a href="#4-添加非空约束" class="headerlink" title="4) 添加非空约束"></a>4) 添加非空约束</h3><p><strong>1. 建表时</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE 表名称(字段名 数据类型,字段名 数据类型 NOT NULL,字段名 数据类型 NOT NULL);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2. 建表后</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table 表名称 modify 字段名 数据类型 not null;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-删除非空约束"><a href="#5-删除非空约束" class="headerlink" title="5) 删除非空约束"></a>5) 删除非空约束</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table 表名称 modify 字段名 数据类型 NULL;#去掉not null，相当于修改某个非注解字段，该字段允许为空或alter table 表名称 modify 字段名 数据类型;#去掉not null，相当于修改某个非注解字段，该字段允许为空<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-唯一性约束"><a href="#3-唯一性约束" class="headerlink" title="3. 唯一性约束"></a>3. 唯一性约束</h2><h3 id="1-作用-1"><a href="#1-作用-1" class="headerlink" title="1) 作用"></a>1) 作用</h3><p>用来限制某个字段&#x2F;某列的值不能重复。</p><h3 id="2-关键字-1"><a href="#2-关键字-1" class="headerlink" title="2) 关键字"></a>2) 关键字</h3><p>UNIQUE</p><h3 id="3-特点-1"><a href="#3-特点-1" class="headerlink" title="3) 特点"></a>3) 特点</h3><ul><li>同一个表可以有多个唯一约束。</li><li>唯一约束可以是某一个列的值唯一，也可以多个列组合的值唯一。 </li><li>唯一性约束允许列值为空。 </li><li>在创建唯一约束的时候，如果不给唯一约束命名，就默认和列名相同。 </li><li>MySQL会给唯一约束的列上默认创建一个唯一索引。</li></ul><h3 id="4-添加唯一约束"><a href="#4-添加唯一约束" class="headerlink" title="4) 添加唯一约束"></a>4) 添加唯一约束</h3><p><strong>1. 建表时</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table 表名称(字段名 数据类型,字段名 数据类型 unique,字段名 数据类型 unique key,字段名 数据类型);create table 表名称(字段名 数据类型,字段名 数据类型,字段名 数据类型,[constraint 约束名] unique key(字段名));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE USER(id INT NOT NULL,NAME VARCHAR(25),PASSWORD VARCHAR(16),-- 使用表级约束语法CONSTRAINT uk_name_pwd UNIQUE(NAME,PASSWORD));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>表示用户名和密码组合不能重复</p></blockquote><p><strong>2. 建表后指定唯一键约束</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#字段列表中如果是一个字段，表示该列的值唯一。如果是两个或更多个字段，那么复合唯一，即多个字段的组合是唯一的#方式1：alter table 表名称 add unique key(字段列表);#方式2：alter table 表名称 modify 字段名 字段类型 unique;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-关于复合唯一约束"><a href="#5-关于复合唯一约束" class="headerlink" title="5) 关于复合唯一约束"></a>5) 关于复合唯一约束</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table 表名称(字段名 数据类型,字段名 数据类型,字段名 数据类型,unique key(字段列表) #字段列表中写的是多个字段名，多个字段名用逗号分隔，表示那么是复合唯一，即多个字段的组合是唯一的);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-删除唯一约束"><a href="#6-删除唯一约束" class="headerlink" title="6) 删除唯一约束"></a>6) 删除唯一约束</h3><ul><li>添加唯一性约束的列上也会自动创建唯一索引。 </li><li>删除唯一约束只能通过删除唯一索引的方式删除。 </li><li>删除时需要指定唯一索引名，唯一索引名就和唯一约束名一样。 </li><li>如果创建唯一约束时未指定名称，如果是单列，就默认和列名相同；</li><li>如果是组合列，那么默认和() 中排在第一个的列名相同。也可以自定义唯一性约束名。</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM information_schema.table_constraints WHERE table_name &#x3D; &#39;表名&#39;; #查看都有哪些约束<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE USERDROP INDEX uk_name_pwd;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>注意：可以通过 show index from 表名称;        #查看表的索引</p></blockquote><h2 id="4-PRIMARY-KEY-约束"><a href="#4-PRIMARY-KEY-约束" class="headerlink" title="4. PRIMARY KEY 约束"></a>4. PRIMARY KEY 约束</h2><h3 id="1-作用-2"><a href="#1-作用-2" class="headerlink" title="1) 作用"></a>1) 作用</h3><p>用来唯一标识表中的一行记录。</p><h3 id="2-关键字-2"><a href="#2-关键字-2" class="headerlink" title="2) 关键字"></a>2) 关键字</h3><p>primary key</p><h3 id="3-特点-2"><a href="#3-特点-2" class="headerlink" title="3) 特点"></a>3) 特点</h3><p>主键约束相当于唯一约束+非空约束的组合，主键约束列不允许重复，也不允许出现空值。</p><ul><li>一个表最多只能有一个主键约束，建立主键约束可以在列级别创建，也可以在表级别上创建。 </li><li>主键约束对应着表中的一列或者多列（复合主键） </li><li>如果是多列组合的复合主键约束，那么这些列都不允许为空值，并且组合的值不允许重复。 </li><li>MySQL的主键名总是PRIMARY，就算自己命名了主键约束名也没用。 </li><li>当创建主键约束时，系统默认会在所在的列或列组合上建立对应的主键索引（能够根据主键查询的，就根据主键查询，效率更高。如果删除主键约束了，主键约束对应的索引就自动删除了。 </li><li>需要注意的一点是，不要修改主键字段的值。因为主键是数据记录的唯一标识，如果修改了主键的值，就有可能会破坏数据的完整性。</li></ul><h3 id="4-添加主键约束"><a href="#4-添加主键约束" class="headerlink" title="4) 添加主键约束"></a>4) 添加主键约束</h3><p><strong>1. 建表时指定主键约束</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table 表名称(字段名 数据类型 primary key, #列级模式字段名 数据类型,字段名 数据类型);create table 表名称(字段名 数据类型,字段名 数据类型,字段名 数据类型,[constraint 约束名] primary key(字段名) #表级模式);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2. 建表后增加主键约束</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE 表名称 ADD PRIMARY KEY(字段列表); #字段列表可以是一个字段，也可以是多个字段，如果是多个字段的话，是复合主键<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-关于复合主键"><a href="#5-关于复合主键" class="headerlink" title="5) 关于复合主键"></a>5) 关于复合主键</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table 表名称(字段名 数据类型,字段名 数据类型,字段名 数据类型,primary key(字段名1,字段名2) #表示字段1和字段2的组合是唯一的，也可以有更多个字段);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-删除主键约束"><a href="#6-删除主键约束" class="headerlink" title="6) 删除主键约束"></a>6) 删除主键约束</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table 表名称 drop primary key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>说明：删除主键约束，不需要指定主键名，因为一个表只有一个主键，删除主键约束后，非空还存在。</p></blockquote><h2 id="5-自增列：AUTO-INCREMENT"><a href="#5-自增列：AUTO-INCREMENT" class="headerlink" title="5. 自增列：AUTO_INCREMENT"></a>5. 自增列：AUTO_INCREMENT</h2><h3 id="1-作用-3"><a href="#1-作用-3" class="headerlink" title="1) 作用"></a>1) 作用</h3><p>某个字段的值自增</p><h3 id="2-关键字-3"><a href="#2-关键字-3" class="headerlink" title="2) 关键字"></a>2) 关键字</h3><p>auto_increment</p><h3 id="3-特点-3"><a href="#3-特点-3" class="headerlink" title="3) 特点"></a>3) 特点</h3><p>（1）一个表最多只能有一个自增长列 </p><p>（2）当需要产生唯一标识符或顺序值时，可设置自增长 </p><p>（3）自增长列约束的列必须是键列（主键列，唯一键列） </p><p>（4）自增约束的列的数据类型必须是整数类型 </p><p>（5）如果自增列指定了 0 和 null，会在当前最大值的基础上自增；如果自增列手动指定了具体值，直接赋值为具体值。</p><h3 id="4-如何指定自增约束"><a href="#4-如何指定自增约束" class="headerlink" title="4) 如何指定自增约束"></a>4) 如何指定自增约束</h3><p><strong>1. 建表时</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table 表名称(字段名 数据类型 primary key auto_increment,字段名 数据类型 unique key not null,字段名 数据类型 unique key,字段名 数据类型 not null default 默认值,);create table 表名称(字段名 数据类型 default 默认值 ,字段名 数据类型 unique key auto_increment,字段名 数据类型 not null default 默认值,primary key(字段名));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2. 建表后</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table 表名称 modify 字段名 数据类型 auto_increment;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-删除自增约束"><a href="#5-删除自增约束" class="headerlink" title="5) 删除自增约束"></a>5) 删除自增约束</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#alter table 表名称 modify 字段名 数据类型 auto_increment;#给这个字段增加自增约束alter table 表名称 modify 字段名 数据类型; #去掉auto_increment相当于删除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-MySQL-8-0新特性—自增变量的持久化"><a href="#6-MySQL-8-0新特性—自增变量的持久化" class="headerlink" title="6) MySQL 8.0新特性—自增变量的持久化"></a>6) MySQL 8.0新特性—自增变量的持久化</h3><p>在MySQL 8.0之前，自增主键AUTO_INCREMENT的值如果大于max(primary key)+1，在MySQL重启后，会重置AUTO_INCREMENT&#x3D;max(primary key)+1，这种现象在某些情况下会导致业务主键冲突或者其他难以发现的问题。 下面通过案例来对比不同的版本中自增变量是否持久化。 在MySQL 5.7版本中，测试步骤如 下： 创建的数据表中包含自增主键的id字段，语句如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE test1(id INT PRIMARY KEY AUTO_INCREMENT);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在MySQL 5.7系统中，对于自增主键的分配规则，是由InnoDB数据字典 内部一个 计数器 来决定的，而该计数器只在 内存中维护 ，并不会持久化到磁盘中。当数据库重启时，该 计数器会被初始化。</p><p>在MySQL 8.0将自增主键的计数器持久化到 重做日志 中。每次计数器发生改变，都会将其写入重做日志 中。如果数据库重启，InnoDB会根据重做日志中的信息来初始化计数器的内存值。</p><h2 id="6-FOREIGN-KEY-约束"><a href="#6-FOREIGN-KEY-约束" class="headerlink" title="6. FOREIGN KEY 约束"></a>6. FOREIGN KEY 约束</h2><h3 id="1-作用-4"><a href="#1-作用-4" class="headerlink" title="1) 作用"></a>1) 作用</h3><p>限定某个表的某个字段的引用完整性。</p><h3 id="2-关键字-4"><a href="#2-关键字-4" class="headerlink" title="2) 关键字"></a>2) 关键字</h3><p>FOREIGN KEY</p><h3 id="3-主表和从表-x2F-父表和子表"><a href="#3-主表和从表-x2F-父表和子表" class="headerlink" title="3) 主表和从表&#x2F;父表和子表"></a>3) 主表和从表&#x2F;父表和子表</h3><p>主表（父表）：被引用的表，被参考的表 </p><p>从表（子表）：引用别人的表，参考别人的表</p><h3 id="4-特点"><a href="#4-特点" class="headerlink" title="4) 特点"></a>4) 特点</h3><p>（1）从表的外键列，必须引用&#x2F;参考主表的主键或唯一约束的列为什么？因为被依赖&#x2F;被参考的值必须是唯一的 </p><p>（2）在创建外键约束时，如果不给外键约束命名，默认名不是列名，而是自动产生一个外键名（例如 student_ibfk_1;），也可以指定外键约束名。 </p><p>（3）创建(CREATE)表时就指定外键约束的话，<strong>先创建主表</strong>，再创建从表 </p><p>（4）删表时，<strong>先删从表</strong>（或先删除外键约束），再删除主表 </p><p>（5）当主表的记录被从表参照时，主表的记录将不允许删除，如果要删除数据，需要先删除从表中依赖该记录的数据，然后才可以删除主表的数据 </p><p>（6）在“从表”中指定外键约束，并且一个表可以建立多个外键约束 </p><p>（7）从表的外键列与主表被参照的列名字可以不相同，但是数据类型必须一样，逻辑意义一致。如果类型不一样，创建子表时，就会出现错误“ERROR 1005 (HY000): Can’t create table’database.tablename’(errno: 150)”。 例如：都是表示部门编号，都是int类型。</p><p>（8）当创建外键约束时，系统默认会在所在的列上建立对应的普通索引。但是索引名是外键的约束名。（根据外键查询效率很高） </p><p>（9）删除外键约束后，必须手动删除对应的索引</p><h3 id="5-添加外键约束"><a href="#5-添加外键约束" class="headerlink" title="5) 添加外键约束"></a>5) 添加外键约束</h3><p><strong>1. 建表时</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table 主表名称(字段1 数据类型 primary key,字段2 数据类型);create table 从表名称(字段1 数据类型 primary key,字段2 数据类型,[CONSTRAINT &lt;外键约束名称&gt;] FOREIGN KEY（从表的某个字段) references 主表名(被参考字段));#(从表的某个字段)的数据类型必须与主表名(被参考字段)的数据类型一致，逻辑意义也一样#(从表的某个字段)的字段名可以与主表名(被参考字段)的字段名一样，也可以不一样-- FOREIGN KEY: 在表级指定子表中的列-- REFERENCES: 标示在父表中的列<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table dept( #主表did int primary key, #部门编号dname varchar(50) #部门名称);create table emp(#从表eid int primary key, #员工编号ename varchar(5), #员工姓名deptid int, #员工所在的部门foreign key (deptid) references dept(did) #在从表中指定外键约束#emp表的deptid和和dept表的did的数据类型一致，意义都是表示部门的编号);说明：（1）主表dept必须先创建成功，然后才能创建emp表，指定外键成功。（2）删除表时，先删除从表emp，再删除主表dept<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2. 建表后</strong></p><p>一般情况下，表与表的关联都是提前设计好了的，因此，会在创建表的时候就把外键约束定义好。不 过，如果需要修改表的设计（比如添加新的字段，增加新的关联关系），但没有预先定义外键约束，那 么，就要用修改表的方式来补充定义。</p><p>格式：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE 从表名 ADD [CONSTRAINT 约束名] FOREIGN KEY (从表的字段) REFERENCES 主表名(被引用字段) [on update xx][on delete xx];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE emp1ADD [CONSTRAINT emp_dept_id_fk] FOREIGN KEY(dept_id) REFERENCES dept(dept_id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-约束等级"><a href="#6-约束等级" class="headerlink" title="6) 约束等级"></a>6) 约束等级</h3><ul><li><code>Cascade方式 </code>：在父表上update&#x2F;delete记录时，同步update&#x2F;delete掉子表的匹配记录 </li><li><code>Set null方式</code> ：在父表上update&#x2F;delete记录时，将子表上匹配记录的列设为null，但是要注意子 表的外键列不能为not null </li><li><code>No action方式</code> ：如果子表中有匹配的记录，则不允许对父表对应候选键进行update&#x2F;delete操作 </li><li><code>Restrict方式</code> ：同no action， 都是立即检查外键约束 </li><li><code>Set default方式</code> （在可视化工具SQLyog中可能显示空白）：父表有变更时，子表将外键列设置 成一个默认的值，但Innodb不能识别x</li></ul><p>如果没有指定等级，就相当于Restrict方式。 对于外键约束，最好是采用: ON UPDATE CASCADE ON DELETE RESTRICT 的方式。</p><h3 id="7-删除外键约束"><a href="#7-删除外键约束" class="headerlink" title="7) 删除外键约束"></a>7) 删除外键约束</h3><p>流程如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">(1)第一步先查看约束名和删除外键约束SELECT * FROM information_schema.table_constraints WHERE table_name &#x3D; &#39;表名称&#39;;  #查看某个表的约束名ALTER TABLE 从表名 DROP FOREIGN KEY 外键约束名;（2）第二步查看索引名和删除索引。（注意，只能手动删除）SHOW INDEX FROM 表名称; #查看某个表的索引名ALTER TABLE 从表名 DROP INDEX 索引名;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-开发场景"><a href="#8-开发场景" class="headerlink" title="8) 开发场景"></a>8) 开发场景</h3><p><strong>问题1：如果两个表之间有关系（一对一、一对多），比如：员工表和部门表（一对多），它们之间是否 一定要建外键约束？</strong></p><p>答：不是的</p><p><strong>问题2：建和不建外键约束有什么区别？</strong></p><p>答：建外键约束，你的操作（创建表、删除表、添加、修改、删除）会受到限制，从语法层面受到限 制。例如：在员工表中不可能添加一个员工信息，它的部门的值在部门表中找不到。 </p><p>不建外键约束，你的操作（创建表、删除表、添加、修改、删除）不受限制，要保证数据的 引用完整 性 ，只能依靠程序员的自觉 ，或者是 在Java程序中进行限定 。例如：在员工表中，可以添加一个员工的 信息，它的部门指定为一个完全不存在的部门。</p><p><strong>问题3：那么建和不建外键约束和查询有没有关系？</strong></p><p>答：没有</p><blockquote><p>在 MySQL 里，外键约束是有成本的，需要消耗系统资源。对于大并发的 SQL 操作，有可能会不适合。比如大型网站的中央数据库，可能会因为外键约束的系统开销而变得非常慢 。所以， MySQL 允许你不使用系统自带的外键约束，在 应用层面 完成检查数据一致性的逻辑。也就是说，即使你不 用外键约束，也要想办法通过应用层面的附加逻辑，来实现外键约束的功能，确保数据的一致性。</p></blockquote><h3 id="9-阿里开发规范"><a href="#9-阿里开发规范" class="headerlink" title="9)  阿里开发规范"></a>9)  阿里开发规范</h3><p>【 强制 】不得使用外键与级联，一切外键概念必须在应用层解决。 </p><p>说明：（概念解释）学生表中的 student_id 是主键，那么成绩表中的 student_id 则为外键。如果更新学 生表中的 student_id，同时触发成绩表中的 student_id 更新，即为级联更新。外键与级联更新适用于 单 机低并发 ，不适合 分布式 、 高并发集群 ；级联更新是强阻塞，存在数据库 更新风暴 的风险；外键影响 数据库的 插入速度 。</p><h2 id="7-CHECK-约束"><a href="#7-CHECK-约束" class="headerlink" title="7. CHECK 约束"></a>7. CHECK 约束</h2><h3 id="1-作用-5"><a href="#1-作用-5" class="headerlink" title="1) 作用"></a>1) 作用</h3><p>检查某个字段的值是否符号xx要求，一般指的是值的范围</p><h3 id="2-关键字-5"><a href="#2-关键字-5" class="headerlink" title="2) 关键字"></a>2) 关键字</h3><p>CHECK</p><h3 id="3-说明"><a href="#3-说明" class="headerlink" title="3) 说明"></a>3) 说明</h3><p>MySQL5.7 可以使用check约束，但check约束对数据验证没有任何作用。添加数据时，没有任何错误或警告</p><p>但是<strong>MySQL 8.0中可以使用check约束了</strong>。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table employee(eid int primary key,ename varchar(5),gender char check (&#39;男&#39; or &#39;女&#39;));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-DEFAULT约束"><a href="#8-DEFAULT约束" class="headerlink" title="8. DEFAULT约束"></a>8. DEFAULT约束</h2><h3 id="1-作用-6"><a href="#1-作用-6" class="headerlink" title="1) 作用"></a>1) 作用</h3><p>给某个字段&#x2F;某列指定默认值，一旦设置默认值，在插入数据时，如果此字段没有显式赋值，则赋值为默认值。</p><h3 id="2-关键字-6"><a href="#2-关键字-6" class="headerlink" title="2) 关键字"></a>2) 关键字</h3><p>DEFAULT</p><h3 id="3-添加默认值"><a href="#3-添加默认值" class="headerlink" title="3) 添加默认值"></a>3) 添加默认值</h3><p><strong>1. 建表时</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table 表名称(字段名 数据类型 primary key,字段名 数据类型 unique key not null,字段名 数据类型 unique key,字段名 数据类型 not null default 默认值,);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2. 建表后</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table 表名称 modify 字段名 数据类型 default 默认值;#如果这个字段原来有非空约束，你还保留非空约束，那么在加默认值约束时，还得保留非空约束，否则非空约束就被删除了#同理，在给某个字段加非空约束也一样，如果这个字段原来有默认值约束，你想保留，也要在modify语句中保留默认值约束，否则就删除了alter table 表名称 modify 字段名 数据类型 default 默认值 not null;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>删除默认值</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table 表名称 modify 字段名 数据类型; #删除默认值约束，也不保留非空约束alter table 表名称 modify 字段名 数据类型 not null; #删除默认值约束，保留非空约束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="9-面试"><a href="#9-面试" class="headerlink" title="9. 面试"></a>9. 面试</h2><p><strong>面试1、为什么建表时，加 not null default ‘’ 或 default 0</strong></p><p>答：不想让表中出现null值。</p><p><strong>面试2、为什么不想要 null 的值</strong></p><p>答:</p><p>（1）不好比较。null是一种特殊值，比较时只能用专门的is null 和 is not null来比较。碰到运算符，通 常返回null。 </p><p>（2）效率不高。影响提高索引效果。因此，我们往往在建表时 not null default ‘’ 或 default 0</p><p><strong>面试3、带AUTO_INCREMENT约束的字段值是从1开始的吗？</strong></p><p>在MySQL中，默认AUTO_INCREMENT的初始 值是1，每新增一条记录，字段值自动加1。设置自增属性（AUTO_INCREMENT）的时候，还可以指定第 一条插入记录的自增字段的值，这样新插入的记录的自增字段值从初始值开始递增，如在表中插入第一 条记录，同时指定id值为5，则以后插入的记录的id值就会从6开始往上增加。添加主键约束时，往往需要 设置字段自动增加属性。</p><p><strong>面试4、并不是每个表都可以任意选择存储引擎？</strong></p><p>外键约束（FOREIGN KEY）不能跨引擎使用。</p><p>MySQL支持多种存储引擎，每一个表都可以指定一个不同的存储引擎，需要注意的是：外键约束是用来 保证数据的参照完整性的，如果表之间需要关联外键，却指定了不同的存储引擎，那么这些表之间是不 能创建外键约束的。所以说，存储引擎的选择也不完全是随意的。</p><h1 id="第14章-视图"><a href="#第14章-视图" class="headerlink" title="第14章_视图"></a>第14章_视图</h1><h2 id="1-常见的数据库对象"><a href="#1-常见的数据库对象" class="headerlink" title="1. 常见的数据库对象"></a>1. 常见的数据库对象</h2><table><thead><tr><th>对象</th><th>描述</th></tr></thead><tbody><tr><td>表(TABLE)</td><td>表是存储数据的逻辑单元，以行和列的形式存在，列就是字段，行就是记录</td></tr><tr><td>数据字典</td><td>就是系统表，存放数据库相关信息的表。系统表的数据通常由数据库系统维护， 程序员通常不应该修改，只可查看</td></tr><tr><td>约束 (CONSTRAINT)</td><td>执行数据校验的规则，用于保证数据完整性的规则</td></tr><tr><td>视图(VIEW)</td><td>一个或者多个数据表里的数据的逻辑显示，视图并不存储数据</td></tr><tr><td>索引(INDEX)</td><td>用于提高查询性能，相当于书的目录</td></tr><tr><td>存储过程 (PROCEDURE)</td><td>用于完成一次完整的业务处理，没有返回值，但可通过传出参数将多个值传给调 用环境</td></tr><tr><td>存储函数 (FUNCTION)</td><td>用于完成一次特定的计算，具有一个返回值</td></tr><tr><td>触发器 (TRIGGER)</td><td>相当于一个事件监听器，当数据库发生特定事件后，触发器被触发，完成相应的处理</td></tr></tbody></table><h2 id="2-视图概述"><a href="#2-视图概述" class="headerlink" title="2. 视图概述"></a>2. 视图概述</h2><ul><li>视图是一种 虚拟表 ，本身是 不具有数据 的，占用很少的内存空间，它是 SQL 中的一个重要概念。 </li><li>视图建立在已有表的基础上, 视图赖以建立的这些表称为基表。</li></ul><p><img src="/../pic/MySQL%E5%9F%BA%E7%A1%80%E7%AF%87/image-20220608173721188.png" alt="image-20220608173721188"></p><ul><li>视图的创建和删除只影响视图本身，不影响对应的基表。但是当对视图中的数据进行增加、删除和 修改操作时，数据表中的数据会相应地发生变化，反之亦然。</li><li>视图提供数据内容的语句为 SELECT 语句, 可以将视图理解为存储起来的 SELECT 语句 <ul><li>在数据库中，视图不会保存数据，数据真正保存在数据表中。当对视图中的数据进行增加、删 除和修改操作时，数据表中的数据会相应地发生变化；反之亦然。</li></ul></li><li>视图，是向用户提供基表数据的另一种表现形式。通常情况下，小型项目的数据库可以不使用视 图，但是在大型项目中，以及数据表比较复杂的情况下，视图的价值就凸显出来了，它可以帮助我 们把经常查询的结果集放到虚拟表中，提升使用效率。理解和使用起来都非常方便。</li></ul><h2 id="3-创建视图"><a href="#3-创建视图" class="headerlink" title="3. 创建视图"></a>3. 创建视图</h2><ul><li>在 CREATE VIEW 语句中嵌入子查询</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE [OR REPLACE][ALGORITHM &#x3D; &#123;UNDEFINED | MERGE | TEMPTABLE&#125;]VIEW 视图名称 [(字段列表)]AS 查询语句[WITH [CASCADED|LOCAL] CHECK OPTION]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>精简版</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE VIEW 视图名称AS 查询语句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-创建单表视图"><a href="#1-创建单表视图" class="headerlink" title="1) 创建单表视图"></a>1) 创建单表视图</h3><p>举例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 方式一：CREATE VIEW empvu80ASSELECT employee_id, last_name, salaryFROM employeesWHERE department_id &#x3D; 80;# 方式二：CREATE VIEW empsalary8000(emp_id, NAME, monthly_sal) # 小括号内字段个数与SELECT中字段个数相同ASSELECT employee_id, last_name, salaryFROM employeesWHERE salary &gt; 8000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询视图：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT *FROM salvu80;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-创建多表联合视图"><a href="#2-创建多表联合视图" class="headerlink" title="2) 创建多表联合视图"></a>2) 创建多表联合视图</h3><p>举例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE VIEW empviewASSELECT employee_id emp_id,last_name NAME,department_nameFROM employees e,departments dWHERE e.department_id &#x3D; d.department_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE VIEW dept_sum_vu(name, minsal, maxsal, avgsal)ASSELECT d.department_name, MIN(e.salary), MAX(e.salary),AVG(e.salary)FROM employees e, departments dWHERE e.department_id &#x3D; d.department_idGROUP BY d.department_name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>利用视图对数据进行格式化</li></ul><p>常需要输出某个格式的内容，比如我们想输出员工姓名和对应的部门名，对应格式为 emp_name(department_name)，就可以使用视图来完成数据格式化的操作：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE VIEW emp_departASSELECT CONCAT(last_name,&#39;(&#39;,department_name,&#39;)&#39;) AS emp_deptFROM employees e JOIN departments dWHERE e.department_id &#x3D; d.department_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-基于视图创建视图"><a href="#3-基于视图创建视图" class="headerlink" title="3) 基于视图创建视图"></a>3) 基于视图创建视图</h3><p>当我们创建好一张视图之后，还可以在它的基础上继续创建视图。</p><p>举例：联合“emp_dept”视图和“emp_year_salary”视图查询员工姓名、部门名称、年薪信息创建 “emp_dept_ysalary”视图。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE VIEW emp_dept_ysalaryASSELECT emp_dept.ename,dname,year_salaryFROM emp_dept INNER JOIN emp_year_salaryON emp_dept.ename &#x3D; emp_year_salary.ename;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-查看视图"><a href="#4-查看视图" class="headerlink" title="4. 查看视图"></a>4. 查看视图</h2><p>语法1：查看数据库的表对象、视图对象</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW TABLES;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>语法2：查看视图的结构</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DESC &#x2F; DESCRIBE 视图名称;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>语法3：查看视图的属性信息</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 查看视图信息（显示数据表的存储引擎、版本、数据行数和数据大小等）SHOW TABLE STATUS LIKE &#39;视图名称&#39;\G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行结果显示，注释Comment为VIEW，说明该表为视图，其他的信息为NULL，说明这是一个虚表。 语法4：查看视图的详细定义信息</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW CREATE VIEW 视图名称;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-更新视图的数据"><a href="#5-更新视图的数据" class="headerlink" title="5. 更新视图的数据"></a>5. 更新视图的数据</h2><h3 id="1-一般情况"><a href="#1-一般情况" class="headerlink" title="1) 一般情况"></a>1) 一般情况</h3><p>MySQL支持使用INSERT、UPDATE和DELETE语句对视图中的数据进行插入、更新和删除操作。当视图中的 数据发生变化时，数据表中的数据也会发生变化，反之亦然。</p><p>举例：UPDATE操作</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">UPDATE emp_tel SET tel &#x3D; &#39;13789091234&#39; WHERE ename &#x3D; &#39;孙洪亮&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例：DELETE操作</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELETE FROM emp_tel WHERE ename &#x3D; &#39;孙洪亮&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-不可更新的视图"><a href="#2-不可更新的视图" class="headerlink" title="2) 不可更新的视图"></a>2) 不可更新的视图</h3><p>要使视图可更新，视图中的行和底层基本表中的行之间必须存在 一对一 的关系。另外当视图定义出现如下情况时，视图不支持更新操作：</p><ul><li>在定义视图的时候指定了“ALGORITHM &#x3D; TEMPTABLE”，视图将不支持INSERT和DELETE操作； </li><li>视图中不包含基表中所有被定义为非空又未指定默认值的列，视图将不支持INSERT操作； </li><li>在定义视图的SELECT语句中使用了 JOIN联合查询 ，视图将不支持INSERT和DELETE操作； </li><li>在定义视图的SELECT语句后的字段列表中使用了 数学表达式 或 子查询 ，视图将不支持INSERT，也 不支持UPDATE使用了数学表达式、子查询的字段值； </li><li>在定义视图的SELECT语句后的字段列表中使用 DISTINCT 、 聚合函数 、 GROUP BY 、 HAVING 、 UNION 等，视图将不支持INSERT、UPDATE、DELETE； </li><li>在定义视图的SELECT语句中包含了子查询，而子查询中引用了FROM后面的表，视图将不支持 INSERT、UPDATE、DELETE； </li><li>视图定义基于一个 不可更新视图 ； 常量视图。</li></ul><blockquote><p>虽然可以更新视图数据，但总的来说，视图作为虚拟表 ，主要用于方便查询 ，不建议更新视图的数据。对视图数据的更改，都是通过对实际数据表里数据的操作来完成的。</p></blockquote><h2 id="6-修改、删除视图"><a href="#6-修改、删除视图" class="headerlink" title="6. 修改、删除视图"></a>6. 修改、删除视图</h2><h3 id="1-修改视图"><a href="#1-修改视图" class="headerlink" title="1) 修改视图"></a>1) 修改视图</h3><p>方式1：使用CREATE OR REPLACE VIEW 子句修改视图</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE OR REPLACE VIEW empvu80(id_number, name, sal, department_id)ASSELECT employee_id, first_name || &#39; &#39; || last_name, salary, department_idFROM employeesWHERE department_id &#x3D; 80;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>说明：CREATE VIEW 子句中各列的别名应和子查询中各列相对应。</p></blockquote><p>方式2：ALTER VIEW</p><p>修改视图的语法是：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER VIEW 视图名称AS查询语句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-删除视图"><a href="#2-删除视图" class="headerlink" title="2) 删除视图"></a>2) 删除视图</h3><ul><li>删除视图只是删除视图的定义，并不会删除基表的数据。 </li><li>删除视图的语法是：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DROP VIEW IF EXISTS 视图名称;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>举例：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DROP VIEW empvu80;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>说明：基于视图a、b创建了新的视图c，如果将视图a或者视图b删除，会导致视图c的查询失败。这 样的视图c需要手动删除或修改，否则影响使用。</li></ul><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h2><h3 id="1-优点"><a href="#1-优点" class="headerlink" title="1) 优点"></a>1) 优点</h3><p><strong>1. 操作简单</strong></p><p>将经常使用的查询操作定义为视图，可以使开发人员不需要关心视图对应的数据表的结构、表与表之间的关联关系，也不需要关心数据表之间的业务逻辑和查询条件，而只需要简单地操作视图即可，极大简化了开发人员对数据库的操作。</p><p><strong>2. 减少数据冗余</strong></p><p>视图跟实际数据表不一样，它存储的是查询语句。所以，在使用的时候，我们要通过定义视图的查询语 句来获取结果集。而视图本身不存储数据，不占用数据存储的资源，减少了数据冗余。</p><p><strong>3. 数据安全</strong></p><p>MySQL将用户对数据的 访问限制 在某些数据的结果集上，而这些数据的结果集可以使用视图来实现。用 户不必直接查询或操作数据表。这也可以理解为视图具有 隔离性 。视图相当于在用户和实际的数据表之间加了一层虚拟表。</p><p>同时，MySQL可以根据权限将用户对数据的访问限制在某些视图上，用户不需要查询数据表，可以直接通过视图获取数据表中的信息。这在一定程度上保障了数据表中数据的安全性。</p><p><strong>4. 适应灵活多变的需求</strong></p><p>当业务系统的需求发生变化后，如果需要改动数据表的结构，则工作量相对较 大，可以使用视图来减少改动的工作量。这种方式在实际工作中使用得比较多。</p><p><strong>5. 能够分解复杂的查询逻辑</strong></p><p> 数据库中如果存在复杂的查询逻辑，则可以将问题进行分解，创建多个视图 获取数据，再将创建的多个视图结合起来，完成复杂的查询逻辑。</p><h3 id="2-不足"><a href="#2-不足" class="headerlink" title="2) 不足"></a>2) 不足</h3><p>如果我们在实际数据表的基础上创建了视图，那么，如果实际数据表的结构变更了，我们就需要及时对相关的视图进行相应的维护。特别是嵌套的视图（就是在视图的基础上创建视图），维护会变得比较复杂， 可读性不好 ，容易变成系统的潜在隐患。因为创建视图的 SQL 查询可能会对字段重命名，也可能包含复杂的逻辑，这些都会增加维护的成本。 </p><p>实际项目中，如果视图过多，会导致数据库维护成本的问题。 </p><p>所以，在创建视图的时候，你要结合实际项目需求，综合考虑视图的优点和不足，这样才能正确使用视图，使系统整体达到最优。</p><h1 id="第15章-存储过程与函数"><a href="#第15章-存储过程与函数" class="headerlink" title="第15章_存储过程与函数"></a>第15章_存储过程与函数</h1><p>MySQL从5.0版本开始支持存储过程和函数。存储过程和函数能够将复杂的SQL逻辑封装在一起，应用程 序无须关注存储过程和函数内部复杂的SQL逻辑，而只需要简单地调用存储过程和函数即可。</p><h2 id="1-存储过程概述"><a href="#1-存储过程概述" class="headerlink" title="1. 存储过程概述"></a>1. 存储过程概述</h2><h3 id="1-理解"><a href="#1-理解" class="headerlink" title="1) 理解"></a>1) 理解</h3><p><strong>含义：</strong>存储过程的英文是 Stored Procedure 。它的思想很简单，就是一组经过 预先编译的 SQL 语句 的封装。</p><p>执行过程：存储过程预先存储在 MySQL 服务器上，需要执行的时候，客户端只需要向服务器端发出调用存储过程的命令，服务器端就可以把预先存储好的这一系列 SQL 语句全部执行。</p><p><strong>好处：</strong></p><ul><li>1、简化操作，提高了sql语句的重用性，减少了开发程序员的压力。</li><li>2、减少操作过程中的失误，提高效率。</li><li>3、减少网络传输量（客户端不需要把所有的 SQL 语句通过网络发给服务器）。</li><li>4、减少了 SQL 语句暴露在 网上的风险，也提高了数据查询的安全性。</li></ul><p><strong>和视图、函数的对比：</strong></p><p>它和视图有着同样的优点，清晰、安全，还可以减少网络传输量。不过它和视图不同，视图是虚拟表 ，通常不对底层数据表直接操作，而存储过程是程序化的 SQL，可以 直接操作底层数据表 ，相比于面向集合的操作方式，能够实现一些更复杂的数据处理。</p><p>一旦存储过程被创建出来，使用它就像使用函数一样简单，我们直接通过调用存储过程名即可。相较于函数，存储过程是 没有返回值 的。</p><h3 id="2-分类"><a href="#2-分类" class="headerlink" title="2) 分类"></a>2) 分类</h3><p>存储过程的参数类型可以是IN、OUT和INOUT。根据这点分类如下：</p><p>1、没有参数（无参数无返回） </p><p>2、仅仅带 IN 类型（有参数无返回） </p><p>3、仅仅带 OUT 类型（无参数有返回） </p><p>4、既带 IN 又带 OUT（有参数有返回） </p><p>5、带 INOUT（有参数有返回）</p><p>注意：IN、OUT、INOUT 都可以在一个存储过程中带多个。</p><h2 id="2-创建存储过程"><a href="#2-创建存储过程" class="headerlink" title="2. 创建存储过程"></a>2. 创建存储过程</h2><h3 id="1-语法分析"><a href="#1-语法分析" class="headerlink" title="1) 语法分析"></a>1) 语法分析</h3><p><strong>语法：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE PROCEDURE 存储过程名(IN|OUT|INOUT 参数名 参数类型,...)[characteristics ...]BEGIN存储过程体END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>说明：</strong></p><p>1、参数前面的符号的意思</p><ul><li><p>IN ：当前参数为输入参数，也就是表示入参；</p><p>存储过程只是读取这个参数的值。如果没有定义参数种类， 默认就是 IN ，表示输入参数。</p></li><li><p>OUT ：当前参数为输出参数，也就是表示出参；</p><p>执行完成之后，调用这个存储过程的客户端或者应用程序就可以读取这个参数返回的值了。</p></li><li><p>INOUT ：当前参数既可以为输入参数，也可以为输出参数。</p></li></ul><p>2、形参类型可以是 MySQL数据库中的任意类型。</p><p>3、characteristics 表示创建存储过程时指定的对存储过程的约束条件，其取值信息如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">LANGUAGE SQL| [NOT] DETERMINISTIC| &#123; CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA &#125;| SQL SECURITY &#123; DEFINER | INVOKER &#125;| COMMENT &#39;string&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>LANGUAGE SQL ：说明存储过程执行体是由SQL语句组成的，当前系统支持的语言为SQL。</p></li><li><p>[NOT] DETERMINISTIC ：指明存储过程执行的结果是否确定。DETERMINISTIC表示结果是确定 的。每次执行存储过程时，相同的输入会得到相同的输出。NOT DETERMINISTIC表示结果是不确定 的，相同的输入可能得到不同的输出。如果没有指定任意一个值，默认为NOT DETERMINISTIC。</p></li><li><p>{ CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA } ：指明子程序使 用SQL语句的限制。</p><ul><li>CONTAINS SQL表示当前存储过程的子程序包含SQL语句，但是并不包含读写数据的SQL语句；</li><li>NO SQL表示当前存储过程的子程序中不包含任何SQL语句； </li><li>READS SQL DATA表示当前存储过程的子程序中包含读数据的SQL语句； </li><li>MODIFIES SQL DATA表示当前存储过程的子程序中包含写数据的SQL语句。 </li><li>默认情况下，系统会指定为CONTAINS SQL。</li></ul></li><li><p>SQL SECURITY { DEFINER | INVOKER } ：执行当前存储过程的权限，即指明哪些用户能够执行当前存储过程。</p><ul><li>DEFINER 表示只有当前存储过程的创建者或者定义者才能执行当前存储过程；</li><li>INVOKER 表示拥有当前存储过程的访问权限的用户能够执行当前存储过程。</li></ul></li><li><p>COMMENT ‘string’ ：注释信息，可以用来描述存储过程。</p></li></ul><p>4、存储过程体中可以有多条 SQL 语句，如果仅仅一条SQL 语句，则可以省略 BEGIN 和 END</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">1. BEGIN…END：BEGIN…END 中间包含了多个语句，每个语句都以（;）号为结束符。2. DECLARE：DECLARE 用来声明变量，使用的位置在于 BEGIN…END 语句中间，而且需要在其他语句使用之前进行变量的声明。3. SET：赋值语句，用于对变量进行赋值。4. SELECT… INTO：把从数据表中查询的结果存放到变量中，也就是为变量赋值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、需要设置新的结束标记</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER 新的结束标记<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为MySQL默认的语句结束符号为分号‘;’。为了避免与存储过程中SQL语句结束符相冲突，需要使用 DELIMITER改变存储过程的结束符。</p><p>比如：“DELIMITER &#x2F;&#x2F;”语句的作用是将MySQL的结束符设置为&#x2F;&#x2F;，并以“END &#x2F;&#x2F;”结束存储过程。存储过程定 义完毕之后再使用“DELIMITER ;”恢复默认结束符。DELIMITER也可以指定其他符号作为结束符。</p><p>当使用DELIMITER命令时，应该避免使用反斜杠（‘\’）字符，因为反斜线是MySQL的转义字符。 </p><p>示例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER $CREATE PROCEDURE 存储过程名(IN|OUT|INOUT 参数名 参数类型,...)[characteristics ...]BEGINsql语句1;sql语句2;END $<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-代码举例"><a href="#2-代码举例" class="headerlink" title="2)  代码举例"></a>2)  代码举例</h3><p>举例1：创建存储过程select_all_data()，查看 emps 表的所有数据</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER $CREATE PROCEDURE select_all_data()BEGINSELECT * FROM emps;END $DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例2：创建存储过程avg_employee_salary()，返回所有员工的平均工资</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER &#x2F;&#x2F;CREATE PROCEDURE avg_employee_salary ()BEGINSELECT AVG(salary) AS avg_salary FROM emps;END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-调用存储过程"><a href="#3-调用存储过程" class="headerlink" title="3. 调用存储过程"></a>3. 调用存储过程</h2><h3 id="1-调用格式"><a href="#1-调用格式" class="headerlink" title="1) 调用格式"></a>1) 调用格式</h3><p>存储过程有多种调用方法。存储过程必须使用CALL语句调用，并且存储过程和数据库相关，如果要执行其他数据库中的存储过程，需要指定数据库名称，例如CALL dbname.procname。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CALL 存储过程名(实参列表)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>格式：</strong></p><p>1、调用in模式的参数：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CALL sp1(&#39;值&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、调用out模式的参数：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SET @name;CALL sp1(@name);SELECT @name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3、调用inout模式的参数：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SET @name&#x3D;值;CALL sp1(@name);SELECT @name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-代码举例-1"><a href="#2-代码举例-1" class="headerlink" title="2) 代码举例"></a>2) 代码举例</h3><p><strong>举例1：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER &#x2F;&#x2F;CREATE PROCEDURE CountProc(IN sid INT,OUT num INT)BEGINSELECT COUNT(*) INTO num FROM fruitsWHERE s_id &#x3D; sid;END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用存储过程：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CALL CountProc (101, @num);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看返回结果：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT @num;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>举例2：</strong>创建存储过程，实现累加运算，计算 1+2+…+n 等于多少。具体的代码如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER &#x2F;&#x2F;CREATE PROCEDURE &#96;add_num&#96;(IN n INT)BEGINDECLARE i INT;DECLARE sum INT;SET i &#x3D; 1;SET sum &#x3D; 0;WHILE i &lt;&#x3D; n DOSET sum &#x3D; sum + i;SET i &#x3D; i +1;END WHILE;SELECT sum;END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接使用 CALL add_num(50); 即可。这里我传入的参数为 50，也就是统计 1+2+…+50 的积累之和。</p><h3 id="3-如何调试"><a href="#3-如何调试" class="headerlink" title="3) 如何调试"></a>3) 如何调试</h3><p>在 MySQL 中，存储过程不像普通的编程语言（比如 VC++、Java 等）那样有专门的集成开发环境。因 此，你可以通过 SELECT 语句，把程序执行的中间结果查询出来，来调试一个 SQL 语句的正确性。调试 成功之后，把 SELECT 语句后移到下一个 SQL 语句之后，再调试下一个 SQL 语句。这样 逐步推进 ，就可以完成对存储过程中所有操作的调试了。当然，你也可以把存储过程中的 SQL 语句复制出来，逐段单独 调试。</p><h2 id="4-存储函数的使用"><a href="#4-存储函数的使用" class="headerlink" title="4. 存储函数的使用"></a>4. 存储函数的使用</h2><h3 id="1-语法分析-1"><a href="#1-语法分析-1" class="headerlink" title="1) 语法分析"></a>1) 语法分析</h3><p>学过的函数：LENGTH、SUBSTR、CONCAT等</p><p>语法格式：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE FUNCTION 函数名(参数名 参数类型,...)RETURNS 返回值类型[characteristics ...]BEGIN函数体 #函数体中肯定有 RETURN 语句END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><p>1、参数列表：指定参数为IN、OUT或INOUT只对PROCEDURE是合法的，FUNCTION中总是默认为IN参数。 </p><p>2、RETURNS type 语句表示函数返回数据的类型； RETURNS子句只能对FUNCTION做指定，对函数而言这是 强制 的。它用来指定函数的返回类型，而且函 数体必须包含一个 RETURN value 语句。 </p><p>3、characteristic 创建函数时指定的对函数的约束。取值与创建存储过程时相同，这里不再赘述。 </p><p>4、函数体也可以用BEGIN…END来表示SQL代码的开始和结束。如果函数体只有一条语句，也可以省略 BEGIN…END。</p><h3 id="2-调用存储函数"><a href="#2-调用存储函数" class="headerlink" title="2) 调用存储函数"></a>2) 调用存储函数</h3><p>在MySQL中，存储函数的使用方法与MySQL内部函数的使用方法是一样的。换言之，用户自己定义的存储函数与MySQL内部函数是一个性质的。区别在于，存储函数是 用户自己定义 的，而内部函数是MySQL 的 开发者定义 的。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT 函数名(实参列表)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-代码举例"><a href="#3-代码举例" class="headerlink" title="3) 代码举例"></a>3) 代码举例</h3><p><strong>举例1：</strong></p><p>创建存储函数，名称为email_by_name()，参数定义为空，该函数查询Abel的email，并返回，数据类型为字符串型。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER &#x2F;&#x2F;CREATE FUNCTION email_by_name()RETURNS VARCHAR(25)DETERMINISTICCONTAINS SQLBEGINRETURN (SELECT email FROM employees WHERE last_name &#x3D; &#39;Abel&#39;);END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT email_by_name();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>举例2：</strong></p><p>创建存储函数，名称为email_by_id()，参数传入emp_id，该函数查询emp_id的email，并返回，数据类型 为字符串型。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER &#x2F;&#x2F;CREATE FUNCTION email_by_id(emp_id INT)RETURNS VARCHAR(25)DETERMINISTICCONTAINS SQLBEGINRETURN (SELECT email FROM employees WHERE employee_id &#x3D; emp_id);END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SET @emp_id &#x3D; 102;SELECT email_by_id(@emp_id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><p>若在创建存储函数中报错“ you might want to use the less safe log_bin_trust_function_creators variable ”，有两种处理方法：</p><ul><li><p>方式1：</p><p>加上必要的函数特性“[NOT] DETERMINISTIC”和“{CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA}”</p></li><li><p>方式2：</p></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SET GLOBAL log_bin_trust_function_creators &#x3D; 1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-对比存储函数与存储过程"><a href="#4-对比存储函数与存储过程" class="headerlink" title="4) 对比存储函数与存储过程"></a>4) 对比存储函数与存储过程</h3><table><thead><tr><th></th><th>关键字</th><th>调用语法</th><th>返回值</th><th>应用场景</th></tr></thead><tbody><tr><td>存储过程</td><td>PROCEDURE</td><td>CALL 存储过程()</td><td>理解为有0个或多个</td><td>一般用于更新</td></tr><tr><td>存储函数</td><td>FUNCTION</td><td>SELECT 函数 ()</td><td>只能是一个</td><td>一般用于查询结果为一个值并返回时</td></tr></tbody></table><p>此外，<strong>存储函数可以放在查询语句中使用，存储过程不行</strong>。反之，存储过程的功能更加强大，包括能够 执行对表的操作（比如创建表，删除表等）和事务操作，这些功能是存储函数不具备的。</p><h2 id="5-存储过程和函数的查看、修改、删除"><a href="#5-存储过程和函数的查看、修改、删除" class="headerlink" title="5. 存储过程和函数的查看、修改、删除"></a>5. 存储过程和函数的查看、修改、删除</h2><h3 id="1-查看"><a href="#1-查看" class="headerlink" title="1) 查看"></a>1) 查看</h3><p> 创建完之后，怎么知道我们创建的存储过程、存储函数是否成功了呢？</p><p>MySQL存储了存储过程和函数的状态信息，用户可以使用SHOW STATUS语句或SHOW CREATE语句来查 看，也可直接从系统的information_schema数据库中查询。这里介绍3种方法。</p><ol><li>使用SHOW CREATE语句查看存储过程和函数的创建信息</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW CREATE &#123;PROCEDURE | FUNCTION&#125; 存储过程名或函数名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>使用SHOW STATUS语句查看存储过程和函数的状态信息</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW &#123;PROCEDURE | FUNCTION&#125; STATUS [LIKE &#39;pattern&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>从information_schema.Routines表中查看存储过程和函数的信息</li></ol><p>MySQL中存储过程和函数的信息存储在information_schema数据库下的Routines表中。可以通过查询该表的记录来查询存储过程和函数的信息。其基本语法形式如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM information_schema.RoutinesWHERE ROUTINE_NAME&#x3D;&#39;存储过程或函数的名&#39; [AND ROUTINE_TYPE &#x3D; &#123;&#39;PROCEDURE|FUNCTION&#39;&#125;];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>说明：如果在MySQL数据库中存在存储过程和函数名称相同的情况，最好指定ROUTINE_TYPE查询条件来 指明查询的是存储过程还是函数。</p><h3 id="2-修改"><a href="#2-修改" class="headerlink" title="2) 修改"></a>2) 修改</h3><p>修改存储过程或函数，不影响存储过程或函数功能，只是修改相关特性。使用ALTER语句实现。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER &#123;PROCEDURE | FUNCTION&#125; 存储过程或函数的名 [characteristic ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，characteristic指定存储过程或函数的特性，其取值信息与创建存储过程、函数时的取值信息略有不同。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#123; CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA &#125;| SQL SECURITY &#123; DEFINER | INVOKER &#125;| COMMENT &#39;string&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>CONTAINS SQL ，表示子程序包含SQL语句，但不包含读或写数据的语句。 </p></li><li><p>NO SQL ，表示子程序中不包含SQL语句。 </p></li><li><p>READS SQL DATA ，表示子程序中包含读数据的语句。 </p></li><li><p>MODIFIES SQL DATA ，表示子程序中包含写数据的语句。 </p></li><li><p>SQL SECURITY { DEFINER | INVOKER } ，指明谁有权限来执行。 </p><ul><li>DEFINER ，表示只有定义者自己才能够执行。 </li><li>INVOKER ，表示调用者可以执行。</li></ul></li><li><p>COMMENT ‘string’ ，表示注释信息。</p></li></ul><blockquote><p>修改存储过程使用ALTER PROCEDURE语句，修改存储函数使用ALTER FUNCTION语句。但是，这两 个语句的结构是一样的，语句中的所有参数也是一样的。</p></blockquote><h3 id="3-删除"><a href="#3-删除" class="headerlink" title="3) 删除"></a>3) 删除</h3><p>删除存储过程和函数，可以使用DROP语句，其语法结构如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DROP &#123;PROCEDURE | FUNCTION&#125; [IF EXISTS] 存储过程或函数的名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6-关于存储过程使用的争议"><a href="#6-关于存储过程使用的争议" class="headerlink" title="6. 关于存储过程使用的争议"></a>6. 关于存储过程使用的争议</h2><h3 id="1-优点-1"><a href="#1-优点-1" class="headerlink" title="1) 优点"></a>1) 优点</h3><p>1、存储过程可以一次编译多次使用。存储过程只在创建时进行编译，之后的使用都不需要重新编译， 这就提升了 SQL 的执行效率。</p><p>2、可以减少开发工作量。将代码 封装 成模块，实际上是编程的核心思想之一，这样可以把复杂的问题 拆解成不同的模块，然后模块之间可以 重复使用 ，在减少开发工作量的同时，还能保证代码的结构清 晰。 </p><p>3、存储过程的安全性强。我们在设定存储过程的时候可以 设置对用户的使用权限 ，这样就和视图一样具 有较强的安全性。 </p><p>4、可以减少网络传输量。因为代码封装到存储过程中，每次使用只需要调用存储过程即可，这样就减 少了网络传输量。 </p><p>5、良好的封装性。在进行相对复杂的数据库操作时，原本需要使用一条一条的 SQL 语句，可能要连接 多次数据库才能完成的操作，现在变成了一次存储过程，只需要 连接一次即可 。</p><h3 id="2-缺点"><a href="#2-缺点" class="headerlink" title="2) 缺点"></a>2) 缺点</h3><blockquote><p>阿里开发规范 【强制】禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。</p></blockquote><p>1、可移植性差。存储过程不能跨数据库移植，比如在 MySQL、Oracle 和 SQL Server 里编写的存储过 程，在换成其他数据库时都需要重新编写。 </p><p>2、调试困难。只有少数 DBMS 支持存储过程的调试。对于复杂的存储过程来说，开发和维护都不容 易。虽然也有一些第三方工具可以对存储过程进行调试，但要收费。 </p><p>3、存储过程的版本管理很困难。比如数据表索引发生变化了，可能会导致存储过程失效。我们在开发 软件的时候往往需要进行版本管理，但是存储过程本身没有版本控制，版本迭代更新的时候很麻烦。 </p><p>4、它不适合高并发的场景。高并发的场景需要减少数据库的压力，有时数据库会采用分库分表的方式，而且对可扩展性要求很高，在这种情况下，存储过程会变得难以维护， 增加数据库的压力 ，显然就不适用了。</p><h3 id="3-小结"><a href="#3-小结" class="headerlink" title="3) 小结"></a>3) 小结</h3><p>存储过程既方便，又有局限性。尽管不同的公司对存储过程的态度不一，但是对于我们开发人员来说， 不论怎样，掌握存储过程都是必备的技能之一。</p><h1 id="第16章-变量、流程控制与游标"><a href="#第16章-变量、流程控制与游标" class="headerlink" title="第16章_变量、流程控制与游标"></a>第16章_变量、流程控制与游标</h1><p>在MySQL数据库的存储过程和函数中，可以使用变量来存储查询或计算的中间结果数据，或者输出最终的结果数据。</p><h2 id="1-变量"><a href="#1-变量" class="headerlink" title="1. 变量"></a>1. 变量</h2><p>在MySQL数据库的存储过程和函数中，可以使用变量来存储查询或计算的中间结果数据，或者输出最终 的结果数据。 </p><p>在 MySQL 数据库中，变量分为 系统变量 以及 用户自定义变量 。</p><h3 id="1-系统变量"><a href="#1-系统变量" class="headerlink" title="1) 系统变量"></a>1) 系统变量</h3><p><strong>系统变量分类</strong></p><p>变量由系统定义，不是用户定义，属于 服务器 层面。启动MySQL服务，生成MySQL服务实例期间， MySQL将为MySQL服务器内存中的系统变量赋值，这些系统变量定义了当前MySQL服务实例的属性、特 征。这些系统变量的值要么是 编译MySQL时参数 的默认值，要么是 配置文件 （例如my.ini等）中的参数 值。大家可以通过网址 <a href="https://dev.mysql.com/doc/refman/8.0/en/server-systemvariables.html">https://dev.mysql.com/doc/refman/8.0/en/server-systemvariables.html</a> 查看MySQL文档的系统变量。</p><p>系统变量分为全局系统变量（需要添加 global 关键字）以及会话系统变量（需要添加 session 关键字），有时也把全局系统变量简称为全局变量，有时也把会话系统变量称为local变量。如果不写，默认会话级别。静态变量（在 MySQL 服务实例运行期间它们的值不能使用 set 动态修改）属于特殊的全局系统变量。</p><p>每一个MySQL客户机成功连接MySQL服务器后，都会产生与之对应的会话。会话期间，MySQL服务实例会在MySQL服务器内存中生成与该会话对应的会话系统变量，这些会话系统变量的初始值是全局系统变量值的复制。如下图：</p><img src="../pic/MySQL基础篇/image-20220613135809104.png" alt="image-20220613135809104" style="zoom:80%;" /><ul><li>全局系统变量针对于所有会话（连接）有效，但 不能跨重启</li><li>会话系统变量仅针对于当前会话（连接）有效。会话期间，当前会话对某个会话系统变量值的修改，不会影响其他会话同一个会话系统变量的值。 </li><li>会话1对某个全局系统变量值的修改会导致会话2中同一个全局系统变量值的修改。</li></ul><p>在MySQL中有些系统变量只能是全局的，例如 max_connections 用于限制服务器的最大连接数；有些系 统变量作用域既可以是全局又可以是会话，例如 character_set_client 用于设置客户端的字符集；有些系 统变量的作用域只能是当前会话，例如 pseudo_thread_id 用于标记当前会话的 MySQL 连接 ID。</p><p><strong>查看系统变量</strong></p><ul><li>查看所有或部分系统变量</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#查看所有全局变量SHOW GLOBAL VARIABLES;#查看所有会话变量SHOW SESSION VARIABLES;或SHOW VARIABLES;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#查看满足条件的部分系统变量。SHOW GLOBAL VARIABLES LIKE &#39;%标识符%&#39;;#查看满足条件的部分会话变量SHOW SESSION VARIABLES LIKE &#39;%标识符%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>查看指定系统变量</strong></p><p>作为 MySQL 编码规范，MySQL 中的系统变量以 两个“@” 开头，其中“@@global”仅用于标记全局系统变量，“@@session”仅用于标记会话系统变量。“@@”首先标记会话系统变量，如果会话系统变量不存在， 则标记全局系统变量。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#查看指定的系统变量的值SELECT @@global.变量名;#查看指定的会话变量的值SELECT @@session.变量名;#或者SELECT @@变量名;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>修改系统变量的值</strong></p><p>有些时候，数据库管理员需要修改系统变量的默认值，以便修改当前会话或者MySQL服务实例的属性、 特征。具体方法：</p><p>方式1：修改MySQL 配置文件 ，继而修改MySQL系统变量的值（该方法需要重启MySQL服务） </p><p>方式2：在MySQL服务运行期间，使用“set”命令重新设置系统变量的值</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#为某个系统变量赋值#方式1：SET @@global.变量名&#x3D;变量值;#方式2：SET GLOBAL 变量名&#x3D;变量值;#为某个会话变量赋值#方式1：SET @@session.变量名&#x3D;变量值;#方式2：SET SESSION 变量名&#x3D;变量值;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-用户变量"><a href="#2-用户变量" class="headerlink" title="2) 用户变量"></a>2) 用户变量</h3><p><strong>用户变量分类</strong></p><p>用户变量是用户自己定义的，作为 MySQL 编码规范，MySQL 中的用户变量以一个“@” 开头。根据作用范围不同，又分为 会话用户变量 和 局部变量 。 </p><ul><li>会话用户变量：作用域和会话变量一样，只对 当前连接 会话有效。 </li><li>局部变量：只在 BEGIN 和 END 语句块中有效。局部变量只能在 存储过程和函数 中使用。</li></ul><p><strong>会话用户变量</strong></p><ul><li>变量的定义</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#方式1：“&#x3D;”或“:&#x3D;”SET @用户变量 &#x3D; 值;SET @用户变量 :&#x3D; 值;#方式2：“:&#x3D;” 或 INTO关键字SELECT @用户变量 :&#x3D; 表达式 [FROM 等子句];SELECT 表达式 INTO @用户变量 [FROM 等子句];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看用户变量的值 (查看、比较、运算等)</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT @用户变量<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>局部变量</strong></p><p>定义：可以使用 DECLARE 语句定义一个局部变量 </p><p>作用域：仅仅在定义它的 BEGIN … END 中有效 </p><p>位置：只能放在 BEGIN … END 中，而且只能放在第一句</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">BEGIN#声明局部变量DECLARE 变量名1 变量数据类型 [DEFAULT 变量默认值];DECLARE 变量名2,变量名3,... 变量数据类型 [DEFAULT 变量默认值];#为局部变量赋值SET 变量名1 &#x3D; 值;SELECT 值 INTO 变量名2 [FROM 子句];#查看局部变量的值SELECT 变量1,变量2,变量3;END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>定义变量</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DECLARE 变量名 类型 [default 值]; # 如果没有DEFAULT子句，初始值为NULL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>变量赋值</li></ol><p>方式1：一般用于赋简单的值</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SET 变量名&#x3D;值;SET 变量名:&#x3D;值;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>方式2：一般用于赋表中的字段值</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT 字段名或表达式 INTO 变量名 FROM 表;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>使用变量 (查看、比较、运算等)</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT 局部变量名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例1：声明局部变量，并分别赋值为employees表中employee_id为102的last_name和salary</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER &#x2F;&#x2F;CREATE PROCEDURE set_value()BEGINDECLARE emp_name VARCHAR(25);DECLARE sal DOUBLE(10,2);SELECT last_name, salary INTO emp_name,salFROM employeesWHERE employee_id &#x3D; 102;SELECT emp_name, sal;END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例2：声明两个变量，求和并打印 （分别使用会话用户变量、局部变量的方式实现）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#方式1：使用用户变量SET @m&#x3D;1;SET @n&#x3D;1;SET @sum&#x3D;@m+@n;SELECT @sum;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#方式2：使用局部变量DELIMITER &#x2F;&#x2F;CREATE PROCEDURE add_value()BEGIN#局部变量DECLARE m INT DEFAULT 1;DECLARE n INT DEFAULT 3;DECLARE SUM INT;SET SUM &#x3D; m+n;SELECT SUM;END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>对比会话用户变量与局部变量</strong></p><table><thead><tr><th></th><th>作用域</th><th>定义位置</th><th>语法</th></tr></thead><tbody><tr><td>会话用户变量</td><td>当前会话</td><td>会话的任何地方</td><td>加@符号，不用指定类型</td></tr><tr><td>局部变量</td><td>定义它的BEGIN END中</td><td>BEGIN END的第一句话</td><td>一般不用加@,需要指定类型</td></tr></tbody></table><h2 id="2-定义条件与处理程序"><a href="#2-定义条件与处理程序" class="headerlink" title="2. 定义条件与处理程序"></a>2. 定义条件与处理程序</h2><p>定义条件 是事先定义程序执行过程中可能遇到的问题， 处理程序 定义了在遇到问题时应当采取的处理方式，并且保证存储过程或函数在遇到警告或错误时能继续执行。这样可以增强存储程序处理问题的能力，避免程序异常停止运行。</p><p>说明：定义条件和处理程序在存储过程、存储函数中都是支持的。</p><h3 id="1-案例分析"><a href="#1-案例分析" class="headerlink" title="1) 案例分析"></a>1) 案例分析</h3><p>案例分析：创建一个名称为“UpdateDataNoCondition”的存储过程。代码如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER &#x2F;&#x2F;CREATE PROCEDURE UpdateDataNoCondition()BEGINSET @x &#x3D; 1;UPDATE employees SET email &#x3D; NULL WHERE last_name &#x3D; &#39;Abel&#39;;SET @x &#x3D; 2;UPDATE employees SET email &#x3D; &#39;aabbel&#39; WHERE last_name &#x3D; &#39;Abel&#39;;SET @x &#x3D; 3;END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用存储过程：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; CALL UpdateDataNoCondition();ERROR 1048 (23000): Column &#39;email&#39; cannot be nullmysql&gt; SELECT @x;+------+| @x |+------+| 1 |+------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，此时@x变量的值为1。结合创建存储过程的SQL语句代码可以得出：在存储过程中未定义条件 和处理程序，且当存储过程中执行的SQL语句报错时，MySQL数据库会抛出错误，并退出当前SQL逻辑， 不再向下继续执行。</p><h3 id="2-定义条件"><a href="#2-定义条件" class="headerlink" title="2) 定义条件"></a>2) 定义条件</h3><p>定义条件就是给MySQL中的错误码命名，这有助于存储的程序代码更清晰。它将一个 错误名字 和 指定的 错误条件 关联起来。这个名字可以随后被用在定义处理程序的 DECLARE HANDLER 语句中。</p><p>定义条件使用DECLARE语句，语法格式如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DECLARE 错误名称 CONDITION FOR 错误码（或错误条件）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>错误码的说明：</p><ul><li>MySQL_error_code 和 sqlstate_value 都可以表示MySQL的错误。<ul><li>MySQL_error_code是数值类型错误代码。 </li><li>sqlstate_value是长度为5的字符串类型错误代码。</li></ul></li></ul><p>例如，在ERROR 1418 (HY000)中，1418是MySQL_error_code，’HY000’是sqlstate_value。 </p><p>例如，在ERROR 1142（42000）中，1142是MySQL_error_code，’42000’是sqlstate_value。</p><p>举例1：定义“Field_Not_Be_NULL”错误名与MySQL中违反非空约束的错误类型是“ERROR 1048 (23000)”对应。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#使用MySQL_error_codeDECLARE Field_Not_Be_NULL CONDITION FOR 1048;#使用sqlstate_valueDECLARE Field_Not_Be_NULL CONDITION FOR SQLSTATE &#39;23000&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-定义处理程序"><a href="#3-定义处理程序" class="headerlink" title="3) 定义处理程序"></a>3) 定义处理程序</h3><p>可以为SQL执行过程中发生的某种类型的错误定义特殊的处理程序。定义处理程序时，使用DECLARE语句 的语法如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DECLARE 处理方式 HANDLER FOR 错误类型 处理语句<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>处理方式：处理方式有3个取值：CONTINUE、EXIT、UNDO。</p><ul><li>CONTINUE ：表示遇到错误不处理，继续执行。</li><li>EXIT ：表示遇到错误马上退出。</li><li>UNDO ：表示遇到错误后撤回之前的操作。MySQL中暂时不支持这样的操作。</li></ul></li><li><p>错误类型（即条件）可以有如下取值：</p><ul><li>SQLSTATE ‘字符串错误码’ ：表示长度为5的sqlstate_value类型的错误代码； </li><li>MySQL_error_code ：匹配数值类型错误代码； </li><li>错误名称 ：表示DECLARE … CONDITION定义的错误条件名称。 </li><li>SQLWARNING ：匹配所有以01开头的SQLSTATE错误代码； </li><li>NOT FOUND ：匹配所有以02开头的SQLSTATE错误代码； </li><li>SQLEXCEPTION ：匹配所有没有被SQLWARNING或NOT FOUND捕获的SQLSTATE错误代码；</li></ul></li><li><p>处理语句：如果出现上述条件之一，则采用对应的处理方式，并执行指定的处理语句。语句可以是 像“ SET 变量 &#x3D; 值 ”这样的简单语句，也可以是使用 BEGIN … END 编写的复合语句。</p></li></ul><p>定义处理程序的几种方式，代码如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#方法1：捕获sqlstate_valueDECLARE CONTINUE HANDLER FOR SQLSTATE &#39;42S02&#39; SET @info &#x3D; &#39;NO_SUCH_TABLE&#39;;#方法2：捕获mysql_error_valueDECLARE CONTINUE HANDLER FOR 1146 SET @info &#x3D; &#39;NO_SUCH_TABLE&#39;;#方法3：先定义条件，再调用DECLARE no_such_table CONDITION FOR 1146;DECLARE CONTINUE HANDLER FOR NO_SUCH_TABLE SET @info &#x3D; &#39;NO_SUCH_TABLE&#39;;#方法4：使用SQLWARNINGDECLARE EXIT HANDLER FOR SQLWARNING SET @info &#x3D; &#39;ERROR&#39;;#方法5：使用NOT FOUNDDECLARE EXIT HANDLER FOR NOT FOUND SET @info &#x3D; &#39;NO_SUCH_TABLE&#39;;#方法6：使用SQLEXCEPTIONDECLARE EXIT HANDLER FOR SQLEXCEPTION SET @info &#x3D; &#39;ERROR&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-案例解决"><a href="#4-案例解决" class="headerlink" title="4) 案例解决"></a>4) 案例解决</h3><p>在存储过程中，定义处理程序，捕获sqlstate_value值，当遇到MySQL_error_code值为1048时，执行 CONTINUE操作，并且将@proc_value的值设置为-1。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER &#x2F;&#x2F;CREATE PROCEDURE UpdateDataNoCondition()BEGIN    #定义处理程序    DECLARE CONTINUE HANDLER FOR 1048 SET @proc_value &#x3D; -1;    SET @x &#x3D; 1;    UPDATE employees SET email &#x3D; NULL WHERE last_name &#x3D; &#39;Abel&#39;;    SET @x &#x3D; 2;    UPDATE employees SET email &#x3D; &#39;aabbel&#39; WHERE last_name &#x3D; &#39;Abel&#39;;    SET @x &#x3D; 3;END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-流程控制"><a href="#3-流程控制" class="headerlink" title="3. 流程控制"></a>3. 流程控制</h2><p>解决复杂问题不可能通过一个 SQL 语句完成，我们需要执行多个 SQL 操作。流程控制语句的作用就是控 制存储过程中 SQL 语句的执行顺序，是我们完成复杂操作必不可少的一部分。只要是执行的程序，流程就分为三大类：</p><ul><li>顺序结构 ：程序从上往下依次执行 </li><li>分支结构 ：程序按条件进行选择执行，从两条或多条路径中选择一条执行 </li><li>循环结构 ：程序满足一定条件下，重复执行一组语句</li></ul><p>针对于MySQL 的流程控制语句主要有 3 类。注意：只能用于存储程序。</p><ul><li>条件判断语句 ：IF 语句和 CASE 语句 </li><li>循环语句 ：LOOP、WHILE 和 REPEAT 语句 </li><li>跳转语句 ：ITERATE 和 LEAVE 语句</li></ul><h3 id="1-分支结构之-IF"><a href="#1-分支结构之-IF" class="headerlink" title="1) 分支结构之 IF"></a>1) 分支结构之 IF</h3><ul><li>IF 语句的语法结构是：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">IF 表达式1 THEN 操作1[ELSEIF 表达式2 THEN 操作2]……[ELSE 操作N]END IF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>根据表达式的结果为TRUE或FALSE执行相应的语句。这里“[]”中的内容是可选的。</p><ul><li><p>特点：① 不同的表达式对应不同的操作 ② 使用在begin end中</p></li><li><p>举例1：</p></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">IF val IS NULLTHEN SELECT &#39;val is null&#39;;ELSE SELECT &#39;val is not null&#39;;END IF;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>举例2：声明存储过程“update_salary_by_eid1”，定义IN参数emp_id，输入员工编号。判断该员工薪资如果低于8000元并且入职时间超过5年，就涨薪500元；否则就不变。</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER &#x2F;&#x2F;CREATE PROCEDURE update_salary_by_eid1(IN emp_id INT)BEGIN    DECLARE emp_salary DOUBLE;    DECLARE hire_year DOUBLE;    SELECT salary INTO emp_salary FROM employees WHERE employee_id &#x3D; emp_id;    SELECT DATEDIFF(CURDATE(),hire_date)&#x2F;365 INTO hire_year    FROM employees WHERE employee_id &#x3D; emp_id;    IF emp_salary &lt; 8000 AND hire_year &gt; 5    THEN UPDATE employees SET salary &#x3D; salary + 500 WHERE employee_id &#x3D; emp_id;    END IF;END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-分支结构之-CASE"><a href="#2-分支结构之-CASE" class="headerlink" title="2) 分支结构之 CASE"></a>2) 分支结构之 CASE</h3><ul><li>CASE 语句的语法结构1：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#情况一：类似于switchCASE 表达式WHEN 值1 THEN 结果1或语句1(如果是语句，需要加分号)WHEN 值2 THEN 结果2或语句2(如果是语句，需要加分号)...ELSE 结果n或语句n(如果是语句，需要加分号)END [case]（如果是放在begin end中需要加上case，如果放在select后面不需要）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>CASE 语句的语法结构2：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#情况二：类似于多重ifCASEWHEN 条件1 THEN 结果1或语句1(如果是语句，需要加分号)WHEN 条件2 THEN 结果2或语句2(如果是语句，需要加分号)...ELSE 结果n或语句n(如果是语句，需要加分号)END [case]（如果是放在begin end中需要加上case，如果放在select后面不需要）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>举例1：使用CASE流程控制语句的第1种格式，判断val值等于1、等于2，或者两者都不等。</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CASE val    WHEN 1 THEN SELECT &#39;val is 1&#39;;    WHEN 2 THEN SELECT &#39;val is 2&#39;;    ELSE SELECT &#39;val is not 1 or 2&#39;;END CASE;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>举例2：声明存储过程“update_salary_by_eid4”，定义IN参数emp_id，输入员工编号。判断该员工 薪资如果低于9000元，就更新薪资为9000元；薪资大于等于9000元且低于10000的，但是奖金比例 为NULL的，就更新奖金比例为0.01；其他的涨薪100元。</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER &#x2F;&#x2F;CREATE PROCEDURE update_salary_by_eid4(IN emp_id INT)BEGIN    DECLARE emp_sal DOUBLE;    DECLARE bonus DECIMAL(3,2);    SELECT salary INTO emp_sal FROM employees WHERE employee_id &#x3D; emp_id;    SELECT commission_pct INTO bonus FROM employees WHERE employee_id &#x3D; emp_id;    CASE    WHEN emp_sal&lt;9000    THEN UPDATE employees SET salary&#x3D;9000 WHERE employee_id &#x3D; emp_id;    WHEN emp_sal&lt;10000 AND bonus IS NULL    THEN UPDATE employees SET commission_pct&#x3D;0.01 WHERE employee_id &#x3D; emp_id;    ELSE    UPDATE employees SET salary&#x3D;salary+100 WHERE employee_id &#x3D; emp_id;    END CASE;END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>举例3：声明存储过程update_salary_by_eid5，定义IN参数emp_id，输入员工编号。判断该员工的 入职年限，如果是0年，薪资涨50；如果是1年，薪资涨100；如果是2年，薪资涨200；如果是3年， 薪资涨300；如果是4年，薪资涨400；其他的涨薪500。</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER &#x2F;&#x2F;CREATE PROCEDURE update_salary_by_eid5(IN emp_id INT)BEGIN    DECLARE emp_sal DOUBLE;    DECLARE hire_year DOUBLE;    SELECT salary INTO emp_sal FROM employees WHERE employee_id &#x3D; emp_id;    SELECT ROUND(DATEDIFF(CURDATE(),hire_date)&#x2F;365) INTO hire_year FROM employees    WHERE employee_id &#x3D; emp_id;    CASE hire_year        WHEN 0 THEN UPDATE employees SET salary&#x3D;salary+50 WHERE employee_id &#x3D; emp_id;        WHEN 1 THEN UPDATE employees SET salary&#x3D;salary+100 WHERE employee_id &#x3D; emp_id;        WHEN 2 THEN UPDATE employees SET salary&#x3D;salary+200 WHERE employee_id &#x3D; emp_id;        WHEN 3 THEN UPDATE employees SET salary&#x3D;salary+300 WHERE employee_id &#x3D; emp_id;        WHEN 4 THEN UPDATE employees SET salary&#x3D;salary+400 WHERE employee_id &#x3D; emp_id;        ELSE UPDATE employees SET salary&#x3D;salary+500 WHERE employee_id &#x3D; emp_id;    END CASE;END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-循环结构之LOOP"><a href="#3-循环结构之LOOP" class="headerlink" title="3) 循环结构之LOOP"></a>3) 循环结构之LOOP</h3><p>LOOP循环语句用来重复执行某些语句。LOOP内的语句一直重复执行直到循环被退出（使用LEAVE子 句），跳出循环过程。</p><p>LOOP语句的基本格式如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">[loop_label:] LOOP循环执行的语句END LOOP [loop_label]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中，loop_label表示LOOP语句的标注名称，该参数可以省略。</p><p>举例1：使用LOOP语句进行循环操作，id值小于10时将重复执行循环过程。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DECLARE id INT DEFAULT 0;add_loop:LOOP    SET id &#x3D; id +1;    IF id &gt;&#x3D; 10 THEN LEAVE add_loop;    END IF;END LOOP add_loop;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例2：当市场环境变好时，公司为了奖励大家，决定给大家涨工资。声明存储过程 “update_salary_loop()”，声明OUT参数num，输出循环次数。存储过程中实现循环给大家涨薪，薪资涨为 原来的1.1倍。直到全公司的平均薪资达到12000结束。并统计循环次数。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER &#x2F;&#x2F;CREATE PROCEDURE update_salary_loop(OUT num INT)BEGINDECLARE avg_salary DOUBLE;DECLARE loop_count INT DEFAULT 0;SELECT AVG(salary) INTO avg_salary FROM employees;label_loop:LOOP        IF avg_salary &gt;&#x3D; 12000 THEN LEAVE label_loop;        END IF;        UPDATE employees SET salary &#x3D; salary * 1.1;        SET loop_count &#x3D; loop_count + 1;        SELECT AVG(salary) INTO avg_salary FROM employees;    END LOOP label_loop;    SET num &#x3D; loop_count;END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-循环结构之WHILE"><a href="#4-循环结构之WHILE" class="headerlink" title="4) 循环结构之WHILE"></a>4) 循环结构之WHILE</h3><p>WHILE语句创建一个带条件判断的循环过程。WHILE在执行语句执行时，先对指定的表达式进行判断，如 果为真，就执行循环内的语句，否则退出循环。WHILE语句的基本格式如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">[while_label:] WHILE 循环条件 DO循环体END WHILE [while_label];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>while_label为WHILE语句的标注名称；如果循环条件结果为真，WHILE语句内的语句或语句群被执行，直 至循环条件为假，退出循环。</p><ul><li>举例1：WHILE语句示例，i值小于10时，将重复执行循环过程，代码如下：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER &#x2F;&#x2F;CREATE PROCEDURE test_while()BEGIN    DECLARE i INT DEFAULT 0;    WHILE i &lt; 10 DO    SET i &#x3D; i + 1;    END WHILE;    SELECT i;END &#x2F;&#x2F;DELIMITER ;#调用CALL test_while();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>举例2：市场环境不好时，公司为了渡过难关，决定暂时降低大家的薪资。声明存储过程 “update_salary_while()”，声明OUT参数num，输出循环次数。存储过程中实现循环给大家降薪，薪资降 为原来的90%。直到全公司的平均薪资达到5000结束。并统计循环次数。</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER &#x2F;&#x2F;CREATE PROCEDURE update_salary_while(OUT num INT)BEGIN    DECLARE avg_sal DOUBLE ;    DECLARE while_count INT DEFAULT 0;    SELECT AVG(salary) INTO avg_sal FROM employees;    WHILE avg_sal &gt; 5000 DO        UPDATE employees SET salary &#x3D; salary * 0.9;        SET while_count &#x3D; while_count + 1;        SELECT AVG(salary) INTO avg_sal FROM employees;    END WHILE;    SET num &#x3D; while_count;END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-循环结构之REPEAT"><a href="#5-循环结构之REPEAT" class="headerlink" title="5) 循环结构之REPEAT"></a>5) 循环结构之REPEAT</h3><p>REPEAT语句创建一个带条件判断的循环过程。与WHILE循环不同的是，REPEAT 循环首先会执行一次循环，然后在 UNTIL 中进行表达式的判断，如果满足条件就退出，即 END REPEAT；如果条件不满足，则会就继续执行循环，直到满足退出条件为止。</p><p>REPEAT语句的基本格式如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">[repeat_label:] REPEAT循环体的语句UNTIL 结束循环的条件表达式END REPEAT [repeat_label]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>repeat_label为REPEAT语句的标注名称，该参数可以省略；REPEAT语句内的语句或语句群被重复，直至 expr_condition为真。</p><p>举例1：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER &#x2F;&#x2F;CREATE PROCEDURE test_repeat()BEGIN    DECLARE i INT DEFAULT 0;    REPEAT    SET i &#x3D; i + 1;    UNTIL i &gt;&#x3D; 10    END REPEAT;    SELECT i;END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例2：当市场环境变好时，公司为了奖励大家，决定给大家涨工资。声明存储过程 “update_salary_repeat()”，声明OUT参数num，输出循环次数。存储过程中实现循环给大家涨薪，薪资涨 为原来的1.15倍。直到全公司的平均薪资达到13000结束。并统计循环次数。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER &#x2F;&#x2F;CREATE PROCEDURE update_salary_repeat(OUT num INT)BEGIN    DECLARE avg_sal DOUBLE ;    DECLARE repeat_count INT DEFAULT 0;    SELECT AVG(salary) INTO avg_sal FROM employees;    REPEAT    UPDATE employees SET salary &#x3D; salary * 1.15;    SET repeat_count &#x3D; repeat_count + 1;    SELECT AVG(salary) INTO avg_sal FROM employees;    UNTIL avg_sal &gt;&#x3D; 13000    END REPEAT;    SET num &#x3D; repeat_count;END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>对比三种循环结构：</strong></p><ol><li><p>这三种循环都可以省略名称，但如果循环中添加了循环控制语句（LEAVE或ITERATE）则必须添加名称。 </p></li><li><p>LOOP：一般用于实现简单的”死”循环 WHILE：先判断后执行 </p></li><li><p>REPEAT：先执行后判断，无条件至少执行一次</p></li></ol><h3 id="6-跳转语句之LEAVE语句"><a href="#6-跳转语句之LEAVE语句" class="headerlink" title="6) 跳转语句之LEAVE语句"></a>6) 跳转语句之LEAVE语句</h3><p>LEAVE语句：可以用在循环语句内，或者以 BEGIN 和 END 包裹起来的程序体内，表示跳出循环或者跳出 程序体的操作。如果你有面向过程的编程语言的使用经验，你可以把 LEAVE 理解为 break。</p><p>基本格式如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">LEAVE 标记名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，label参数表示循环的标志。LEAVE和BEGIN … END或循环一起被使用。</p><p>举例1：创建存储过程 “leave_begin()”，声明INT类型的IN参数num。给BEGIN…END加标记名，并在 BEGIN…END中使用IF语句判断num参数的值。</p><p>如果num&lt;&#x3D;0，则使用LEAVE语句退出BEGIN…END； 如果num&#x3D;1，则查询“employees”表的平均薪资； 如果num&#x3D;2，则查询“employees”表的最低薪资； 如果num&gt;2，则查询“employees”表的最高薪资。</p><p>IF语句结束后查询“employees”表的总人数。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER &#x2F;&#x2F;CREATE PROCEDURE leave_begin(IN num INT)    begin_label: BEGIN        IF num&lt;&#x3D;0        THEN LEAVE begin_label;        ELSEIF num&#x3D;1        THEN SELECT AVG(salary) FROM employees;        ELSEIF num&#x3D;2        THEN SELECT MIN(salary) FROM employees;        ELSE        SELECT MAX(salary) FROM employees;        END IF;        SELECT COUNT(*) FROM employees;    END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例2： 当市场环境不好时，公司为了渡过难关，决定暂时降低大家的薪资。声明存储过程“leave_while()”，声明 OUT参数num，输出循环次数，存储过程中使用WHILE循环给大家降低薪资为原来薪资的90%，直到全公司的平均薪资小于等于10000，并统计循环次数。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER &#x2F;&#x2F;CREATE PROCEDURE leave_while(OUT num INT)BEGIN    DECLARE avg_sal DOUBLE;#记录平均工资    DECLARE while_count INT DEFAULT 0; #记录循环次数    SELECT AVG(salary) INTO avg_sal FROM employees; #① 初始化条件    while_label:WHILE TRUE DO #② 循环条件    #③ 循环体    IF avg_sal &lt;&#x3D; 10000 THEN    LEAVE while_label;    END IF;    UPDATE employees SET salary &#x3D; salary * 0.9;    SET while_count &#x3D; while_count + 1;    #④ 迭代条件    SELECT AVG(salary) INTO avg_sal FROM employees;    END WHILE;    #赋值    SET num &#x3D; while_count;END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-跳转语句之ITERATE语句"><a href="#7-跳转语句之ITERATE语句" class="headerlink" title="7) 跳转语句之ITERATE语句"></a>7) 跳转语句之ITERATE语句</h3><p>ITERATE语句：只能用在循环语句（LOOP、REPEAT和WHILE语句）内，表示重新开始循环，将执行顺序转到语句段开头处。如果你有面向过程的编程语言的使用经验，你可以把 ITERATE 理解为 continue，意思为“再次循环”。</p><p>语句基本格式如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ITERATE label<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>label参数表示循环的标志。ITERATE语句必须跟在循环标志前面。</p><p>举例： 定义局部变量num，初始值为0。循环结构中执行num + 1操作。</p><ul><li>如果num &lt; 10，则继续执行循环；</li><li>如果num &gt; 15，则退出循环结构；</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER &#x2F;&#x2F;CREATE PROCEDURE test_iterate()BEGIN    DECLARE num INT DEFAULT 0;    my_loop:LOOP    SET num &#x3D; num + 1;        IF num &lt; 10        THEN ITERATE my_loop;        ELSEIF num &gt; 15        THEN LEAVE my_loop;        END IF;        SELECT &#39;MySQL&#39;;    END LOOP my_loop;END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-游标"><a href="#4-游标" class="headerlink" title="4. 游标"></a>4. 游标</h2><h3 id="1-什么是游标（或光标）"><a href="#1-什么是游标（或光标）" class="headerlink" title="1)  什么是游标（或光标）"></a>1)  什么是游标（或光标）</h3><p>虽然我们也可以通过筛选条件 WHERE 和 HAVING，或者是限定返回记录的关键字 LIMIT 返回一条记录， 但是，却无法在结果集中像指针一样，向前定位一条记录、向后定位一条记录，或者是随意定位到某一 条记录 ，并对记录的数据进行处理。</p><p>这个时候，就可以用到游标。游标，提供了一种灵活的操作方式，让我们能够对结果集中的每一条记录进行定位，并对指向的记录中的数据进行操作的数据结构。游标让 SQL 这种面向集合的语言有了面向过程开发的能力。</p><p>在 SQL 中，游标是一种临时的数据库对象，可以指向存储在数据库表中的数据行指针。这里游标 充当了 指针的作用 ，我们可以通过操作游标来对数据行进行操作。</p><p>MySQL中游标可以在存储过程和函数中使用。 </p><h3 id="2-使用游标步骤"><a href="#2-使用游标步骤" class="headerlink" title="2) 使用游标步骤"></a>2) 使用游标步骤</h3><p>游标必须在声明处理程序之前被声明，并且变量和条件还必须在声明游标或处理程序之前被声明。 </p><p>如果我们想要使用游标，一般需要经历四个步骤。不同的 DBMS 中，使用游标的语法可能略有不同。</p><p><strong>第一步，声明游标</strong></p><p>在MySQL中，使用DECLARE关键字来声明游标，其语法的基本形式如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DECLARE cursor_name CURSOR FOR select_statement;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个语法适用于 MySQL，SQL Server，DB2 和 MariaDB。如果是用 Oracle 或者 PostgreSQL，需要写成：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DECLARE cursor_name CURSOR IS select_statement;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要使用 SELECT 语句来获取数据结果集，而此时还没有开始遍历数据，这里 select_statement 代表的是 SELECT 语句，返回一个用于创建游标的结果集。</p><p>比如：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DECLARE cur_emp CURSOR FORSELECT employee_id,salary FROM employees;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>第二步，打开游标</strong></p><p>打开游标的语法如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">OPEN cursor_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当我们定义好游标之后，如果想要使用游标，必须先打开游标。打开游标的时候 SELECT 语句的查询结果集就会送到游标工作区，为后面游标的 逐条读取 结果集中的记录做准备。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">OPEN cur_emp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>第三步，使用游标（从游标中取得数据）</strong></p><p>语法如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">FETCH cursor_name INTO var_name [, var_name] ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这句的作用是使用 cursor_name 这个游标来读取当前行，并且将数据保存到 var_name 这个变量中，游标指针指到下一行。如果游标读取的数据行有多个列名，则在 INTO 关键字后面赋值给多个变量名即可。</p><p>注意：var_name必须在声明游标之前就定义好。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">FETCH cur_emp INTO emp_id, emp_sal ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：<strong>游标的查询结果集中的字段数，必须跟 INTO 后面的变量数一致</strong>，否则，在存储过程执行的时 候，MySQL 会提示错误。</p><p><strong>第四步，关闭游标</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CLOSE cursor_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有 OPEN 就会有 CLOSE，也就是打开和关闭游标。当我们使用完游标后需要关闭掉该游标。因为游标会 占用系统资源 ，如果不及时关闭，游标会一直保持到存储过程结束，影响系统运行的效率。而关闭游标 的操作，会释放游标占用的系统资源。</p><p>关闭游标之后，我们就不能再检索查询结果中的数据行，如果需要检索只能再次打开游标。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CLOSE cur_emp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-举例"><a href="#3-举例" class="headerlink" title="3) 举例"></a>3) 举例</h3><p>创建存储过程“get_count_by_limit_total_salary()”，声明IN参数 limit_total_salary，DOUBLE类型；声明 OUT参数total_count，INT类型。函数的功能可以实现累加薪资最高的几个员工的薪资值，直到薪资总和达到limit_total_salary参数的值，返回累加的人数给total_count。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER &#x2F;&#x2F;CREATE PROCEDURE get_count_by_limit_total_salary(IN limit_total_salary DOUBLE, OUT total_count INT)BEGINDECLARE sum_salary DOUBLE DEFAULT 0; # 记录累加的总工资DECLARE cursor_salary DOUBLE DEFAULT 0; # 记录某一个工资值DECLARE emp_count INT DEFAULT 0; # 记录循环个数# 定义游标DECLARE emp_cursor CURSOR FOR SELECT salary FROM employees ORDER BY salary DESC;# 打开游标OPEN emp_cursor;REPEAT# 使用游标(从游标中获取数据)FETCH emp_cursor INTO cursor_salary;SET sum_salary &#x3D; sum_salary + cursor_salary;SET emp_count &#x3D; emp_count + 1;UNTIL sum_salary &gt;&#x3D; limit_total_salaryEND REPEAT;set total_count &#x3D; emp_count;# 关闭游标CLOSE emp_cursor;END &#x2F;&#x2F;DELIMITER;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-小结"><a href="#4-小结" class="headerlink" title="4) 小结"></a>4) 小结</h3><p>游标是 MySQL 的一个重要的功能，为 逐条读取 结果集中的数据，提供了完美的解决方案。跟在应用层面实现相同的功能相比，游标可以在存储程序中使用，效率高，程序也更加简洁。 </p><p>但同时也会带来一些性能问题，比如在使用游标的过程中，会对数据行进行 加锁 ，这样在业务并发量大 的时候，不仅会影响业务之间的效率，还会 消耗系统资源 ，造成内存不足，这是因为游标是在内存中进行的处理。 </p><p>建议：养成用完之后就关闭的习惯，这样才能提高系统的整体效率。</p><h2 id="补充：MySQL-8-0的新特性—全局变量的持久化"><a href="#补充：MySQL-8-0的新特性—全局变量的持久化" class="headerlink" title="补充：MySQL 8.0的新特性—全局变量的持久化"></a>补充：MySQL 8.0的新特性—全局变量的持久化</h2><p>在MySQL数据库中，全局变量可以通过SET GLOBAL语句来设置。例如，设置服务器语句超时的限制，可 以通过设置系统变量max_execution_time来实现：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SET GLOBAL MAX_EXECUTION_TIME&#x3D;2000;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用SET GLOBAL语句设置的变量值只会 临时生效 。 数据库重启 后，服务器又会从MySQL配置文件中读取 变量的默认值。 MySQL 8.0版本新增了 SET PERSIST 命令。例如，设置服务器的最大连接数为1000：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SET PERSIST global max_connections &#x3D; 1000;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>MySQL会将该命令的配置保存到数据目录下的 mysqld-auto.cnf 文件中，下次启动时会读取该文件，用其中的配置来覆盖默认的配置文件。</p><h1 id="第17章-触发器"><a href="#第17章-触发器" class="headerlink" title="第17章_触发器"></a>第17章_触发器</h1><p>在实际开发中，我们经常会遇到这样的情况：有 2 个或者多个相互关联的表，如 商品信息 和 库存信息 分 别存放在 2 个不同的数据表中，我们在添加一条新商品记录的时候，为了保证数据的完整性，必须同时 在库存表中添加一条库存记录。 </p><p>这样一来，我们就必须把这两个关联的操作步骤写到程序里面，而且要用 事务 包裹起来，确保这两个操 作成为一个 原子操作 ，要么全部执行，要么全部不执行。要是遇到特殊情况，可能还需要对数据进行手动维护，这样就很 容易忘记其中的一步 ，导致数据缺失。 </p><p>这个时候，咱们可以使用触发器。你可以创建一个触发器，让商品信息数据的插入操作自动触发库存数据的插入操作。这样一来，就不用担心因为忘记添加库存数据而导致的数据缺失了。</p><h2 id="1-触发器概述"><a href="#1-触发器概述" class="headerlink" title="1. 触发器概述"></a>1. 触发器概述</h2><p>触发器是由 事件来触发 某个操作，这些事件包括 INSERT 、 UPDATE 、 DELETE 事件。所谓事件就是指用户的动作或者触发某项行为。如果定义了触发程序，当数据库执行这些语句时候，就相当于事件发生 了，就会 自动 激发触发器执行相应的操作。</p><p>当对数据表中的数据执行插入、更新和删除操作，需要自动执行一些数据库逻辑时，可以使用触发器来实现。</p><h2 id="2-触发器的创建"><a href="#2-触发器的创建" class="headerlink" title="2. 触发器的创建"></a>2. 触发器的创建</h2><h3 id="1-语法"><a href="#1-语法" class="headerlink" title="1) 语法"></a>1) 语法</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TRIGGER 触发器名称&#123;BEFORE|AFTER&#125; &#123;INSERT|UPDATE|DELETE&#125; ON 表名FOR EACH ROW触发器执行的语句块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li>表名 ：表示触发器监控的对象。 </li><li>BEFORE|AFTER ：表示触发的时间。BEFORE 表示在事件之前触发；AFTER 表示在事件之后触发。 </li><li>INSERT|UPDATE|DELETE ：表示触发的事件。<ul><li>INSERT 表示插入记录时触发； </li><li>UPDATE 表示更新记录时触发； </li><li>DELETE 表示删除记录时触发。</li></ul></li><li>触发器执行的语句块 ：可以是单条SQL语句，也可以是由BEGIN…END结构组成的复合语句块。</li></ul><h3 id="2-代码举例-2"><a href="#2-代码举例-2" class="headerlink" title="2) 代码举例"></a>2) 代码举例</h3><p><strong>举例1：</strong></p><ol><li>创建数据表：</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE test_trigger (id INT PRIMARY KEY AUTO_INCREMENT,t_note VARCHAR(30));CREATE TABLE test_trigger_log (id INT PRIMARY KEY AUTO_INCREMENT,t_log VARCHAR(30));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>创建触发器：创建名称为before_insert的触发器，向test_trigger数据表插入数据之前，向 test_trigger_log数据表中插入before_insert的日志信息。</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER &#x2F;&#x2F;CREATE TRIGGER before_insertBEFORE INSERT ON test_triggerFOR EACH ROWBEGIN    INSERT INTO test_trigger_log (t_log)    VALUES(&#39;before_insert&#39;);END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>向test_trigger数据表中插入数据</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO test_trigger (t_note) VALUES (&#39;测试 BEFORE INSERT 触发器&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>查看test_trigger_log数据表中的数据</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT * FROM test_trigger_log;+----+---------------+| id | t_log |+----+---------------+| 1 | before_insert |+----+---------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>举例2：</strong></p><p>定义触发器“salary_check_trigger”，基于员工表“employees”的INSERT事件，在INSERT之前检查 将要添加的新员工薪资是否大于他领导的薪资，如果大于领导薪资，则报sqlstate_value为’HY000’的错 误，从而使得添加失败。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELIMITER &#x2F;&#x2F;CREATE TRIGGER salary_check_triggerBEFORE INSERT ON employees FOR EACH ROWBEGIN    DECLARE mgrsalary DOUBLE;    SELECT salary INTO mgrsalary FROM employees WHERE employee_id &#x3D; NEW.manager_id;    IF NEW.salary &gt; mgrsalary THEN    SIGNAL SQLSTATE &#39;HY000&#39; SET MESSAGE_TEXT &#x3D; &#39;薪资高于领导薪资错误&#39;;    END IF;END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面触发器声明过程中的NEW关键字代表INSERT添加语句的新记录。</p><h2 id="3-查看、删除触发器"><a href="#3-查看、删除触发器" class="headerlink" title="3. 查看、删除触发器"></a>3. 查看、删除触发器</h2><h3 id="1-查看触发器"><a href="#1-查看触发器" class="headerlink" title="1)  查看触发器"></a>1)  查看触发器</h3><p>查看触发器是查看数据库中已经存在的触发器的定义、状态和语法信息等。</p><p>方式1：查看当前数据库的所有触发器的定义</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW TRIGGERS\G<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方式2：查看当前数据库中某个触发器的定义</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW CREATE TRIGGER 触发器名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方式3：从系统库information_schema的TRIGGERS表中查询“salary_check_trigger”触发器的信息。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM information_schema.TRIGGERS;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-删除触发器"><a href="#2-删除触发器" class="headerlink" title="2) 删除触发器"></a>2) 删除触发器</h3><p>触发器也是数据库对象，删除触发器也用DROP语句，语法格式如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DROP TRIGGER IF EXISTS 触发器名称;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-触发器的优缺点"><a href="#4-触发器的优缺点" class="headerlink" title="4. 触发器的优缺点"></a>4. 触发器的优缺点</h2><h3 id="1-优点-2"><a href="#1-优点-2" class="headerlink" title="1) 优点"></a>1) 优点</h3><p><strong>1、触发器可以确保数据的完整性。</strong></p><p>假设我们用 进货单头表 （demo.importhead）来保存进货单的总体信息，包括进货单编号、供货商编号、仓库编号、总计进货数量、总计进货金额和验收日期。</p><table><thead><tr><th>listnumber                  (进货单编号)</th><th>supplierid                 (进货商编号)</th><th>stockid             (参库编号)</th><th>quantity            (总计数量)</th><th>importvalue           (总计金额)</th><th>confirmationdate        （验收日期)</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>用进货单明细表 （demo.importdetails）来保存进货商品的明细，包括进货单编号、商品编号、进货数 量、进货价格和进货金额。</p><table><thead><tr><th>listnumber                          (进货单编号)</th><th>itemnumber                      (商品编号)</th><th>quantity                     (进货数量)</th><th>importprice                     (进货价格)</th><th>importvalue                   （进货金额)</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>每当我们录入、删除和修改一条进货单明细数据的时候，进货单明细表里的数据就会发生变动。这个时候，在进货单头表中的总计数量和总计金额就必须重新计算，否则，进货单头表中的总计数量和总计金 额就不等于进货单明细表中数量合计和金额合计了，这就是数据不一致。</p><p>为了解决这个问题，我们就可以使用触发器，规定每当进货单明细表有数据插入、修改和删除的操作 时，自动触发 2 步操作：</p><p>1）重新计算进货单明细表中的数量合计和金额合计；</p><p>2）用第一步中计算出来的值更新进货单头表中的合计数量与合计金额。</p><p>这样一来，进货单头表中的合计数量与合计金额的值，就始终与进货单明细表中计算出来的合计数量与 合计金额的值相同，数据就是一致的，不会互相矛盾。</p><p><strong>2、触发器可以帮助我们记录操作日志。</strong></p><p>利用触发器，可以具体记录什么时间发生了什么。比如，记录修改会员储值金额的触发器，就是一个很好的例子。这对我们还原操作执行时的具体场景，更好地定位问题原因很有帮助。</p><p><strong>3、触发器还可以用在操作数据前，对数据进行合法性检查。</strong></p><p>比如，超市进货的时候，需要库管录入进货价格。但是，人为操作很容易犯错误，比如说在录入数量的时候，把条形码扫进去了；录入金额的时候，看串了行，录入的价格远超售价，导致账面上的巨亏…… 这些都可以通过触发器，在实际插入或者更新操作之前，对相应的数据进行检查，及时提示错误，防止错误数据进入系统。</p><h3 id="2-缺点-1"><a href="#2-缺点-1" class="headerlink" title="2) 缺点"></a>2) 缺点</h3><p><strong>1、触发器最大的一个问题就是可读性差。</strong></p><p>因为触发器存储在数据库中，并且由事件驱动，这就意味着触发器有可能不受应用层的控制 。这对系统维护是非常有挑战的。</p><p><strong>2、相关数据的变更，可能会导致触发器出错。</strong></p><p>特别是数据表结构的变更，都可能会导致触发器出错，进而影响数据操作的正常运行。这些都会由于触发器本身的隐蔽性，影响到应用中错误原因排查的效率。</p><h3 id="3-注意点"><a href="#3-注意点" class="headerlink" title="3) 注意点"></a>3) 注意点</h3><p>注意，如果在子表中定义了外键约束，并且外键指定了ON UPDATE&#x2F;DELETE CASCADE&#x2F;SET NULL子句，此时修改父表被引用的键值或删除父表被引用的记录行时，也会引起子表的修改和删除操作，此时基于子表的UPDATE和DELETE语句定义的触发器并不会被激活。</p><p>例如：基于子表员工表（t_employee）的DELETE语句定义了触发器t1，而子表的部门编号（did）字段定义了外键约束引用了父表部门表（t_department）的主键列部门编号（did），并且该外键加了“ON DELETE SET NULL”子句，那么如果此时删除父表部门表（t_department）在子表员工表（t_employee） 有匹配记录的部门记录时，会引起子表员工表（t_employee）匹配记录的部门编号（did）修改为NULL， mysql&gt; update demo.membermaster set memberdeposit&#x3D;20 where memberid &#x3D; 2; ERROR 1054 (42S22): Unknown column ‘aa’ in ‘field list’ 但是此时不会激活触发器t1。只有直接对子表员工表（t_employee）执行DELETE语句时才会激活触发器 t1。</p><h1 id="第18章-MySQL8其他新特性"><a href="#第18章-MySQL8其他新特性" class="headerlink" title="第18章_MySQL8其他新特性"></a>第18章_MySQL8其他新特性</h1><h2 id="1-MySQL8新特性概述"><a href="#1-MySQL8新特性概述" class="headerlink" title="1. MySQL8新特性概述"></a>1. MySQL8新特性概述</h2><p>MySQL从5.7版本直接跳跃发布了8.0版本 ，可见这是一个令人兴奋的里程碑版本。MySQL 8版本在功能上做了显著的改进与增强，开发者对MySQL的源代码进行了重构，最突出的一点是多MySQL Optimizer优化器进行了改进。不仅在速度上得到了改善，还为用户带来了更好的性能和更棒的体验。</p><h3 id="1-MySQL8-0-新增特性"><a href="#1-MySQL8-0-新增特性" class="headerlink" title="1) MySQL8.0 新增特性"></a>1) MySQL8.0 新增特性</h3><ol><li><p>更简便的NoSQL支持 NoSQL泛指非关系型数据库和数据存储。随着互联网平台的规模飞速发展，传统 的关系型数据库已经越来越不能满足需求。从5.6版本开始，MySQL就开始支持简单的NoSQL存储功能。 MySQL 8对这一功能做了优化，以更灵活的方式实现NoSQL功能，不再依赖模式（schema）。 </p></li><li><p>更好的索引 在查询中，正确地使用索引可以提高查询的效率。MySQL 8中新增了 隐藏索引 和 降序索 引 。隐藏索引可以用来测试去掉索引对查询性能的影响。在查询中混合存在多列索引时，使用降序索引 可以提高查询的性能。 </p></li><li><p>更完善的JSON支持 MySQL从5.7开始支持原生JSON数据的存储，MySQL 8对这一功能做了优化，增加 了聚合函数 JSON_ARRAYAGG() 和 JSON_OBJECTAGG() ，将参数聚合为JSON数组或对象，新增了行内 操作符 -&gt;&gt;，是列路径运算符 -&gt;的增强，对JSON排序做了提升，并优化了JSON的更新操作。 </p></li><li><p>安全和账户管理 MySQL 8中新增了 caching_sha2_password 授权插件、角色、密码历史记录和FIPS 模式支持，这些特性提高了数据库的安全性和性能，使数据库管理员能够更灵活地进行账户管理工作。 </p></li><li><p>InnoDB的变化 InnoDB是MySQL默认的存储引擎 ，是事务型数据库的首选引擎，支持事务安全表 （ACID），支持行锁定和外键。在MySQL 8 版本中，InnoDB在自增、索引、加密、死锁、共享锁等方面 做了大量的 改进和优化 ，并且支持原子数据定义语言（DDL），提高了数据安全性，对事务提供更好的 支持。</p></li><li><p>数据字典 在之前的MySQL版本中，字典数据都存储在元数据文件和非事务表中。从MySQL 8开始新增 了事务数据字典，在这个字典里存储着数据库对象信息，这些数据字典存储在内部事务表中。 </p></li><li><p>原子数据定义语句 MySQL 8开始支持原子数据定义语句（Automic DDL），即 原子DDL 。目前，只有 InnoDB存储引擎支持原子DDL。原子数据定义语句（DDL）将与DDL操作相关的数据字典更新、存储引擎 操作、二进制日志写入结合到一个单独的原子事务中，这使得即使服务器崩溃，事务也会提交或回滚。 使用支持原子操作的存储引擎所创建的表，在执行DROP TABLE、CREATE TABLE、ALTER TABLE、 RENAME TABLE、TRUNCATE TABLE、CREATE TABLESPACE、DROP TABLESPACE等操作时，都支持原子操 作，即事务要么完全操作成功，要么失败后回滚，不再进行部分提交。 对于从MySQL 5.7复制到MySQL 8 版本中的语句，可以添加 IF EXISTS 或 IF NOT EXISTS 语句来避免发生错误。 </p></li><li><p>资源管理 MySQL 8开始支持创建和管理资源组，允许将服务器内运行的线程分配给特定的分组，以便 线程根据组内可用资源执行。组属性能够控制组内资源，启用或限制组内资源消耗。数据库管理员能够 根据不同的工作负载适当地更改这些属性。 目前，CPU时间是可控资源，由“虚拟CPU”这个概念来表 示，此术语包含CPU的核心数，超线程，硬件线程等等。服务器在启动时确定可用的虚拟CPU数量。拥有 对应权限的数据库管理员可以将这些CPU与资源组关联，并为资源组分配线程。 资源组组件为MySQL中的资源组管理提供了SQL接口。资源组的属性用于定义资源组。MySQL中存在两个默认组，系统组和用户 组，默认的组不能被删除，其属性也不能被更改。对于用户自定义的组，资源组创建时可初始化所有的 属性，除去名字和类型，其他属性都可在创建之后进行更改。 在一些平台下，或进行了某些MySQL的配 置时，资源管理的功能将受到限制，甚至不可用。例如，如果安装了线程池插件，或者使用的是macOS 系统，资源管理将处于不可用状态。在FreeBSD和Solaris系统中，资源线程优先级将失效。在Linux系统 中，只有配置了CAP_SYS_NICE属性，资源管理优先级才能发挥作用。</p></li><li><p>字符集支持 MySQL 8中默认的字符集由 latin1 更改为 utf8mb4 ，并首次增加了日语所特定使用的集 合，utf8mb4_ja_0900_as_cs。 </p></li><li><p>优化器增强 MySQL优化器开始支持隐藏索引和降序索引。隐藏索引不会被优化器使用，验证索引的必 要性时不需要删除索引，先将索引隐藏，如果优化器性能无影响就可以真正地删除索引。降序索引允许 优化器对多个列进行排序，并且允许排序顺序不一致。 </p></li><li><p>公用表表达式 公用表表达式（Common Table Expressions）简称为CTE，MySQL现在支持递归和非递 归两种形式的CTE。CTE通过在SELECT语句或其他特定语句前 使用WITH语句对临时结果集 进行命名。</p><p>基础语法如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">WITH cte_name (col_name1,col_name2 ...) AS (Subquery)SELECT * FROM cte_name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p>​Subquery代表子查询，子查询前使用WITH语句将结果集命名为cte_name，在后续的查询中即可使用 cte_name进行查询。</p><ol start="12"><li>窗口函数 MySQL 8开始支持窗口函数。在之前的版本中已存在的大部分 聚合函数 在MySQL 8中也可以 作为窗口函数来使用。</li></ol><p><img src="/../pic/MySQL%E5%9F%BA%E7%A1%80%E7%AF%87/image-20220613202507072.png" alt="image-20220613202507072"></p><ol start="13"><li>正则表达式支持 MySQL在8.0.4以后的版本中采用支持Unicode的国际化组件库实现正则表达式操作， 这种方式不仅能提供完全的Unicode支持，而且是多字节安全编码。MySQL增加了REGEXP_LIKE()、 EGEXP_INSTR()、REGEXP_REPLACE()和 REGEXP_SUBSTR()等函数来提升性能。另外，regexp_stack_limit和 regexp_time_limit 系统变量能够通过匹配引擎来控制资源消耗。</li><li>内部临时表 TempTable存储引擎取代MEMORY存储引擎成为内部临时表的默认存储引擎 。TempTable存储 引擎为VARCHAR和VARBINARY列提供高效存储。internal_tmp_mem_storage_engine会话变量定义了内部 临时表的存储引擎，可选的值有两个，TempTable和MEMORY，其中TempTable为默认的存储引擎。 temptable_max_ram系统配置项定义了TempTable存储引擎可使用的最大内存数量。</li><li>日志记录 在MySQL 8中错误日志子系统由一系列MySQL组件构成。这些组件的构成由系统变量 log_error_services来配置，能够实现日志事件的过滤和写入。 WITH cte_name (col_name1,col_name2 …) AS (Subquery) SELECT * FROM cte_name; </li><li>备份锁 新的备份锁允许在线备份期间执行数据操作语句，同时阻止可能造成快照不一致的操作。新 备份锁由 LOCK INSTANCE FOR BACKUP 和 UNLOCK INSTANCE 语法提供支持，执行这些操作需要备份管理 员特权。 </li><li>增强的MySQL复制 MySQL 8复制支持对 JSON文档 进行部分更新的 二进制日志记录 ，该记录 使用紧凑 的二进制格式 ，从而节省记录完整JSON文档的空间。当使用基于语句的日志记录时，这种紧凑的日志记 录会自动完成，并且可以通过将新的binlog_row_value_options系统变量值设置为PARTIAL_JSON来启用。</li></ol><h3 id="2-MySQL8-0-移除的旧特性"><a href="#2-MySQL8-0-移除的旧特性" class="headerlink" title="2) MySQL8.0 移除的旧特性"></a>2) MySQL8.0 移除的旧特性</h3><p>在MySQL 5.7版本上开发的应用程序如果使用了MySQL8.0 移除的特性，语句可能会失败，或者产生不同 的执行结果。为了避免这些问题，对于使用了移除特性的应用，应当尽力修正避免使用这些特性，并尽 可能使用替代方法。</p><ol><li>查询缓存 查询缓存已被移除 ，删除的项有： （1）语句：FLUSH QUERY CACHE和RESET QUERY CACHE。 （2）系统变量：query_cache_limit、query_cache_min_res_unit、query_cache_size、 query_cache_type、query_cache_wlock_invalidate。 （3）状态变量：Qcache_free_blocks、 Qcache_free_memory、Qcache_hits、Qcache_inserts、Qcache_lowmem_prunes、Qcache_not_cached、 Qcache_queries_in_cache、Qcache_total_blocks。 （4）线程状态：checking privileges on cached query、checking query cache for query、invalidating query cache entries、sending cached result to client、storing result in query cache、waiting for query cache lock。</li><li>加密相关 删除的加密相关的内容有：ENCODE()、DECODE()、ENCRYPT()、DES_ENCRYPT()和 DES_DECRYPT()函数，配置项des-key-file，系统变量have_crypt，FLUSH语句的DES_KEY_FILE选项， HAVE_CRYPT CMake选项。 对于移除的ENCRYPT()函数，考虑使用SHA2()替代，对于其他移除的函数，使 用AES_ENCRYPT()和AES_DECRYPT()替代。 </li><li>空间函数相关 在MySQL 5.7版本中，多个空间函数已被标记为过时。这些过时函数在MySQL 8中都已被 移除，只保留了对应的ST_和MBR函数。 </li><li>\N和NULL 在SQL语句中，解析器不再将\N视为NULL，所以在SQL语句中应使用NULL代替\N。这项变化 不会影响使用LOAD DATA INFILE或者SELECT…INTO OUTFILE操作文件的导入和导出。在这类操作中，NULL 仍等同于\N。 </li><li>mysql_install_db 在MySQL分布中，已移除了mysql_install_db程序，数据字典初始化需要调用带着– initialize或者–initialize-insecure选项的mysqld来代替实现。另外，–bootstrap和INSTALL_SCRIPTDIR CMake也已被删除。 </li><li>通用分区处理程序 通用分区处理程序已从MySQL服务中被移除。为了实现给定表分区，表所使用的存 储引擎需要自有的分区处理程序。 提供本地分区支持的MySQL存储引擎有两个，即InnoDB和NDB，而在 MySQL 8中只支持InnoDB。 </li><li>系统和状态变量信息 在INFORMATION_SCHEMA数据库中，对系统和状态变量信息不再进行维护。 GLOBAL_VARIABLES、SESSION_VARIABLES、GLOBAL_STATUS、SESSION_STATUS表都已被删除。另外，系 统变量show_compatibility_56也已被删除。被删除的状态变量有Slave_heartbeat_period、 Slave_last_heartbeat,Slave_received_heartbeats、Slave_retried_transactions、Slave_running。以上被删除 的内容都可使用性能模式中对应的内容进行替代。 </li><li>mysql_plugin工具 mysql_plugin工具用来配置MySQL服务器插件，现已被删除，可使用–plugin-load或- -plugin-load-add选项在服务器启动时加载插件或者在运行时使用INSTALL PLUGIN语句加载插件来替代该 工具。</li></ol><h2 id="2-新特性1：窗口函数"><a href="#2-新特性1：窗口函数" class="headerlink" title="2. 新特性1：窗口函数"></a>2. 新特性1：窗口函数</h2><h3 id="1-使用窗口函数前后对比"><a href="#1-使用窗口函数前后对比" class="headerlink" title="1) 使用窗口函数前后对比"></a>1) 使用窗口函数前后对比</h3><p>假设我现在有这样一个数据表，它显示了某购物网站在每个城市每个区的销售额：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE sales(id INT PRIMARY KEY AUTO_INCREMENT,city VARCHAR(15),county VARCHAR(15),sales_value DECIMAL);INSERT INTO sales(city,county,sales_value)VALUES(&#39;北京&#39;,&#39;海淀&#39;,10.00),(&#39;北京&#39;,&#39;朝阳&#39;,20.00),(&#39;上海&#39;,&#39;黄埔&#39;,30.00),(&#39;上海&#39;,&#39;长宁&#39;,10.00);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT * FROM sales;+----+------+--------+-------------+| id | city | county | sales_value |+----+------+--------+-------------+| 1  | 北京  |  海淀   |      10    || 2  | 北京  |  朝阳   |      20    || 3  | 上海  |  黄埔   |      30    || 4  | 上海  |  长宁   |      10    |+----+------+--------+-------------+4 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需求：现在计算这个网站在每个城市的销售总额、在全国的销售总额、每个区的销售额占所在城市销售额中的比率，以及占总销售额中的比率。</p><p>如果用分组和聚合函数，就需要分好几步来计算。</p><p>第一步，计算总销售金额，并存入临时表 a：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TEMPORARY TABLE a -- 创建临时表SELECT SUM(sales_value) AS sales_value -- 计算总计金额FROM sales;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看一下临时表 a ：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT * FROM a;+-------------+| sales_value |+-------------+| 70 |+-------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步，计算每个城市的销售总额并存入临时表 b：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TEMPORARY TABLE b -- 创建临时表SELECT city, SUM(sales_value) AS sales_value -- 计算城市销售合计FROM salesGROUP BY city;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查看临时表 b ：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT * FROM b;+------+-------------+| city | sales_value |+------+-------------+| 北京  |     30      || 上海  |     40      |+------+-------------+2 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三步，计算各区的销售占所在城市的总计金额的比例，和占全部销售总计金额的比例。我们可以通过下面的连接查询获得需要的结果：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT s.city AS 城市,s.county AS 区,s.sales_value AS 区销售额,-&gt; b.sales_value AS 市销售额,s.sales_value&#x2F;b.sales_value AS 市比率,-&gt; a.sales_value AS 总销售额,s.sales_value&#x2F;a.sales_value AS 总比率-&gt; FROM sales s-&gt; JOIN b ON (s.city&#x3D;b.city) -- 连接市统计结果临时表-&gt; JOIN a -- 连接总计金额临时表-&gt; ORDER BY s.city,s.county;+------+------+----------+----------+--------+----------+--------+| 城市 | 区 | 区销售额 | 市销售额 | 市比率 | 总销售额 | 总比率 |+------+------+----------+----------+--------+----------+--------+| 上海 | 长宁 | 10 | 40 | 0.2500 | 70 | 0.1429 || 上海 | 黄埔 | 30 | 40 | 0.7500 | 70 | 0.4286 || 北京 | 朝阳 | 20 | 30 | 0.6667 | 70 | 0.2857 || 北京 | 海淀 | 10 | 30 | 0.3333 | 70 | 0.1429 |+------+------+----------+----------+--------+----------+--------+4 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果显示：市销售金额、市销售占比、总销售金额、总销售占比都计算出来了。</p><p>同样的查询，如果用窗口函数，就简单多了。我们可以用下面的代码来实现：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT city AS 城市,county AS 区,sales_value AS 区销售额,-&gt; SUM(sales_value) OVER(PARTITION BY city) AS 市销售额, -- 计算市销售额-&gt; sales_value&#x2F;SUM(sales_value) OVER(PARTITION BY city) AS 市比率,-&gt; SUM(sales_value) OVER() AS 总销售额, -- 计算总销售额-&gt; sales_value&#x2F;SUM(sales_value) OVER() AS 总比率-&gt; FROM sales-&gt; ORDER BY city,county;+------+------+----------+----------+--------+----------+--------+| 城市 | 区 | 区销售额 | 市销售额 | 市比率 | 总销售额 | 总比率 |+------+------+----------+----------+--------+----------+--------+| 上海 | 长宁 | 10 | 40 | 0.2500 | 70 | 0.1429 || 上海 | 黄埔 | 30 | 40 | 0.7500 | 70 | 0.4286 || 北京 | 朝阳 | 20 | 30 | 0.6667 | 70 | 0.2857 || 北京 | 海淀 | 10 | 30 | 0.3333 | 70 | 0.1429 |+------+------+----------+-----------+--------+----------+--------+4 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果显示，我们得到了与上面那种查询同样的结果。 </p><p>使用窗口函数，只用了一步就完成了查询。而且，由于没有用到临时表，执行的效率也更高了。很显 然，在这种需要用到分组统计的结果对每一条记录进行计算的场景下，使用窗口函数更好。</p><h3 id="2-窗口函数分类"><a href="#2-窗口函数分类" class="headerlink" title="2) 窗口函数分类"></a>2) 窗口函数分类</h3><p>MySQL从8.0版本开始支持窗口函数。窗口函数的作用类似于在查询中对数据进行分组，不同的是，分组操作会把分组的结果聚合成一条记录，而窗口函数是将结果置于每一条数据记录中。</p><p>窗口函数可以分为 静态窗口函数 和 动态窗口函数 。</p><ul><li>静态窗口函数的窗口大小是固定的，不会因为记录的不同而不同；</li><li>动态窗口函数的窗口大小会随着记录的不同而变化。</li></ul><p>MySQL官方网站窗口函数的网址为<a href="https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptio">https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptio</a> ns.html#function_row-number。 </p><p>窗口函数总体上可以分为序号函数、分布函数、前后函数、首尾函数和其他函数，如下表：</p><p><img src="/../pic/MySQL%E5%9F%BA%E7%A1%80%E7%AF%87/image-20220613210116486.png" alt="image-20220613210116486"></p><h3 id="3-语法结构"><a href="#3-语法结构" class="headerlink" title="3) 语法结构"></a>3) 语法结构</h3><p>窗口函数的语法结构是：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">函数 OVER（[PARTITION BY 字段名 ORDER BY 字段名 ASC|DESC]）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者是：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">函数 OVER 窗口名 … WINDOW 窗口名 AS （[PARTITION BY 字段名 ORDER BY 字段名 ASC|DESC]）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>OVER 关键字指定函数窗口的范围。<ul><li>如果省略后面括号中的内容，则窗口会包含满足WHERE条件的所有记录，窗口函数会基于所有满足WHERE条件的记录进行计算。</li><li>如果OVER关键字后面的括号不为空，则可以使用如下语法设置窗口。</li></ul></li><li>窗口名：为窗口设置一个别名，用来标识窗口。</li><li>PARTITION BY子句：指定窗口函数按照哪些字段进行分组。分组后，窗口函数可以在每个分组中分别执行。</li><li>ORDER BY子句：指定窗口函数按照哪些字段进行排序。执行排序操作使窗口函数按照排序后的数据记录的顺序进行编号。</li><li>FRAME子句：为分区中的某个子集定义规则，可以用来作为滑动窗口使用。</li></ul><h3 id="4-分类讲解"><a href="#4-分类讲解" class="headerlink" title="4) 分类讲解"></a>4) 分类讲解</h3><p>创建表：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE goods(id INT PRIMARY KEY AUTO_INCREMENT,category_id INT,category VARCHAR(15),NAME VARCHAR(30),price DECIMAL(10,2),stock INT,upper_time DATETIME);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加数据：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO goods(category_id,category,NAME,price,stock,upper_time)VALUES(1, &#39;女装&#x2F;女士精品&#39;, &#39;T恤&#39;, 39.90, 1000, &#39;2020-11-10 00:00:00&#39;),(1, &#39;女装&#x2F;女士精品&#39;, &#39;连衣裙&#39;, 79.90, 2500, &#39;2020-11-10 00:00:00&#39;),(1, &#39;女装&#x2F;女士精品&#39;, &#39;卫衣&#39;, 89.90, 1500, &#39;2020-11-10 00:00:00&#39;),(1, &#39;女装&#x2F;女士精品&#39;, &#39;牛仔裤&#39;, 89.90, 3500, &#39;2020-11-10 00:00:00&#39;),(1, &#39;女装&#x2F;女士精品&#39;, &#39;百褶裙&#39;, 29.90, 500, &#39;2020-11-10 00:00:00&#39;),(1, &#39;女装&#x2F;女士精品&#39;, &#39;呢绒外套&#39;, 399.90, 1200, &#39;2020-11-10 00:00:00&#39;),(2, &#39;户外运动&#39;, &#39;自行车&#39;, 399.90, 1000, &#39;2020-11-10 00:00:00&#39;),(2, &#39;户外运动&#39;, &#39;山地自行车&#39;, 1399.90, 2500, &#39;2020-11-10 00:00:00&#39;),(2, &#39;户外运动&#39;, &#39;登山杖&#39;, 59.90, 1500, &#39;2020-11-10 00:00:00&#39;),(2, &#39;户外运动&#39;, &#39;骑行装备&#39;, 399.90, 3500, &#39;2020-11-10 00:00:00&#39;),(2, &#39;户外运动&#39;, &#39;运动外套&#39;, 799.90, 500, &#39;2020-11-10 00:00:00&#39;),(2, &#39;户外运动&#39;, &#39;滑板&#39;, 499.90, 1200, &#39;2020-11-10 00:00:00&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面针对goods表中的数据来验证每个窗口函数的功能。</p><h4 id="1-序号函数"><a href="#1-序号函数" class="headerlink" title="1) 序号函数"></a>1) 序号函数</h4><p><strong>1. ROW_NUMBER()函数</strong></p><p>ROW_NUMBER()函数能够对数据中的序号进行顺序显示。</p><p>举例：查询 goods 数据表中每个商品分类下价格降序排列的各个商品信息。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT ROW_NUMBER() OVER(PARTITION BY category_id ORDER BY price DESC) ASrow_num, id, category_id, category, NAME, price, stockFROM goods;+---------+----+-------------+---------------+------------+---------+-------+| row_num | id | category_id |    category   |     NAME   |  price  | stock |+---------+----+-------------+---------------+------------+---------+-------+|    1    |  6 |     1       |  女装&#x2F;女士精品  | 呢绒外套     | 399.90  | 1200  ||    2    |  3 |     1       |  女装&#x2F;女士精品  | 卫衣        | 89.90   | 1500  ||    3    |  4 |     1       |  女装&#x2F;女士精品  | 牛仔裤       | 89.90   | 3500  ||    4    |  2 |     1       |  女装&#x2F;女士精品  | 连衣裙       | 79.90   | 2500  ||    5    |  1 |     1       |  女装&#x2F;女士精品  | T恤         | 39.90   | 1000  ||    6    |  5 |     1       |  女装&#x2F;女士精品  | 百褶裙       | 29.90   | 500   ||    1    |  8 |     2       |     户外运动   | 山地自行车    | 1399.90 | 2500  ||    2    | 11 |     2       |     户外运动   | 运动外套      | 799.90  | 500  ||    3    | 12 |     2       |     户外运动   | 滑板         | 499.90  | 1200  ||    4    |  7 |     2       |     户外运动   | 自行车       | 399.90  | 1000  ||    5    | 10 |     2       |     户外运动   | 骑行装备     | 399.90  | 3500  ||    6    |  9 |     2       |     户外运动   | 登山杖       | 59.90   | 1500  |+---------+----+-------------+---------------+------------+---------+-------+12 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例：查询 goods 数据表中每个商品分类下价格最高的3种商品信息。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT *-&gt; FROM (-&gt; SELECT ROW_NUMBER() OVER(PARTITION BY category_id ORDER BY price DESC) ASrow_num,-&gt; id, category_id, category, NAME, price, stock-&gt; FROM goods) t-&gt; WHERE row_num &lt;&#x3D; 3;+---------+----+-------------+---------------+------------+---------+-------+| row_num | id | category_id |     category  |      NAME  |  price  | stock |+---------+----+-------------+---------------+------------+---------+-------+|     1   |  6 |      1      | 女装&#x2F;女士精品   | 呢绒外套     | 399.90  | 1200  ||     2   |  3 |      1      | 女装&#x2F;女士精品   | 卫衣        | 89.90   | 1500  ||     3   |  4 |      1      | 女装&#x2F;女士精品   | 牛仔裤      | 89.90    | 3500 ||     1   |  8 |      2      | 户外运动       | 山地自行车   | 1399.90  | 2500 ||     2   | 11 |      2      | 户外运动       | 运动外套     | 799.90  | 500   ||     3   | 12 |      2      | 户外运动       | 滑板        | 499.90   | 1200 |+---------+----+-------------+---------------+------------+----------+-------+6 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在名称为“女装&#x2F;女士精品”的商品类别中，有两款商品的价格为89.90元，分别是卫衣和牛仔裤。两款商品 的序号都应该为2，而不是一个为2，另一个为3。此时，可以使用RANK()函数和DENSE_RANK()函数解 决。</p><p><strong>2．RANK()函数</strong></p><p>使用RANK()函数能够对序号进行并列排序，并且会跳过重复的序号，比如序号为1、1、3。 </p><p>举例：使用RANK()函数获取 goods 数据表中各类别的价格从高到低排序的各商品信息。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT RANK() OVER(PARTITION BY category_id ORDER BY price DESC) AS row_num,-&gt; id, category_id, category, NAME, price, stock-&gt; FROM goods;+---------+----+-------------+---------------+------------+---------+-------+| row_num | id | category_id | category      | NAME       | price   | stock |+---------+----+-------------+---------------+------------+---------+-------+|     1   | 6  |     1       | 女装&#x2F;女士精品   | 呢绒外套     | 399.90  | 1200  ||     2   | 3  |     1       | 女装&#x2F;女士精品   | 卫衣        | 89.90   | 1500  ||     2   | 4  |     1       | 女装&#x2F;女士精品   | 牛仔裤      | 89.90   | 3500   ||     4   | 2  |     1       | 女装&#x2F;女士精品   | 连衣裙      | 79.90   | 2500   ||     5   | 1  |     1       | 女装&#x2F;女士精品   | T恤        | 39.90   | 1000   ||     6   | 5  |     1       | 女装&#x2F;女士精品   | 百褶裙      | 29.90   | 500    ||     1   | 8  |     2       | 户外运动       | 山地自行车   | 1399.90 | 2500   ||     2   | 11 |     2       | 户外运动       | 运动外套     | 799.90  | 500   ||     3   | 12 |     2       | 户外运动       | 滑板        | 499.90  | 1200   ||     4   | 7  |     2       | 户外运动       | 自行车      | 399.90   | 1000  ||     4   | 10 |     2       | 户外运动       | 骑行装备    | 399.90   | 3500  ||     6   | 9  |     2       | 户外运动       | 登山杖      | 59.90   | 1500   |+---------+----+-------------+---------------+------------+---------+-------+12 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3．DENSE_RANK()函数</strong></p><p>DENSE_RANK()函数对序号进行并列排序，并且不会跳过重复的序号，比如序号为1、1、2。 举例：使用DENSE_RANK()函数获取 goods 数据表中各类别的价格从高到低排序的各商品信息。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT DENSE_RANK() OVER(PARTITION BY category_id ORDER BY price DESC) ASrow_num,-&gt; id, category_id, category, NAME, price, stock-&gt; FROM goods;+---------+----+-------------+---------------+------------+---------+-------+| row_num | id | category_id | category      | NAME       | price   | stock |+---------+----+-------------+---------------+------------+---------+-------+|    1    | 6  |      1      | 女装&#x2F;女士精品   |     呢绒外套 | 399.90 | 1200   ||    2    | 3  |      1      | 女装&#x2F;女士精品   |     卫衣    | 89.90  | 1500   ||    2    | 4  |      1      | 女装&#x2F;女士精品   |     牛仔裤  | 89.90   | 3500  ||    3    | 2  |      1      | 女装&#x2F;女士精品   |     连衣裙  | 79.90   | 2500  ||    4    | 1  |      1      | 女装&#x2F;女士精品   |     T恤    | 39.90   | 1000  ||    5    | 5  |      1      | 女装&#x2F;女士精品   |     百褶裙  | 29.90   | 500   ||    1    | 8  |      2      | 户外运动       |    山地自行车| 1399.90 | 2500 ||    2    | 11 |      2      | 户外运动       |    运动外套  | 799.90 | 500    ||    3    | 12 |      2      | 户外运动       |    滑板     | 499.90 | 1200   ||    4    | 7  |      2      | 户外运动       |    自行车    | 399.90 | 1000   ||    4    | 10 |      2      | 户外运动       |    骑行装备  | 399.90 | 3500   ||    5    | 9  |      2      | 户外运动       |    登山杖    | 59.90 | 1500   |+---------+----+-------------+---------------+------------+---------+-------+12 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-分布函数"><a href="#2-分布函数" class="headerlink" title="2) 分布函数"></a>2) 分布函数</h4><p><strong>1．PERCENT_RANK()函数</strong></p><p>PERCENT_RANK()函数是等级值百分比函数。按照如下方式进行计算。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">(rank - 1) &#x2F; (rows - 1)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，rank的值为使用RANK()函数产生的序号，rows的值为当前窗口的总记录数。</p><p>举例：计算 goods 数据表中名称为“女装&#x2F;女士精品”的类别下的商品的PERCENT_RANK值。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#写法一：SELECT RANK() OVER (PARTITION BY category_id ORDER BY price DESC) AS r,PERCENT_RANK() OVER (PARTITION BY category_id ORDER BY price DESC) AS pr,id, category_id, category, NAME, price, stockFROM goodsWHERE category_id &#x3D; 1;#写法二：mysql&gt; SELECT RANK() OVER w AS r,-&gt; PERCENT_RANK() OVER w AS pr,-&gt; id, category_id, category, NAME, price, stock-&gt; FROM goods-&gt; WHERE category_id &#x3D; 1 WINDOW w AS (PARTITION BY category_id ORDER BY priceDESC);+---+-----+----+-------------+---------------+----------+--------+-------+| r | pr  | id | category_id | category      | NAME     | price  | stock |+---+-----+----+-------------+---------------+----------+--------+-------+| 1 | 0   | 6  |          1  | 女装&#x2F;女士精品   |   呢绒外套 | 399.90 | 1200 || 2 | 0.2 | 3  |          1  | 女装&#x2F;女士精品   |   卫衣    | 89.90 | 1500 || 2 | 0.2 | 4  |          1  | 女装&#x2F;女士精品   |   牛仔裤  | 89.90 | 3500 || 4 | 0.6 | 2  |          1  | 女装&#x2F;女士精品   |   连衣裙  | 79.90 | 2500 || 5 | 0.8 | 1  |          1  | 女装&#x2F;女士精品   |   T恤    | 39.90 | 1000 || 6 | 1   | 5  |          1  | 女装&#x2F;女士精品   |   百褶裙  | 29.90 | 500 |+---+-----+----+-------------+---------------+----------+--------+-------+6 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2．CUME_DIST()函数</strong></p><p>CUME_DIST()函数主要用于查询小于或等于某个值的比例。 </p><p>举例：查询goods数据表中小于或等于当前价格的比例。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT CUME_DIST() OVER(PARTITION BY category_id ORDER BY price ASC) AS cd,-&gt; id, category, NAME, price-&gt; FROM goods;+---------------------+----+---------------+------------+---------+|                cd   | id | category      | NAME       | price   |+---------------------+----+---------------+------------+---------+| 0.16666666666666666 | 5  | 女装&#x2F;女士精品   | 百褶裙      | 29.90 || 0.3333333333333333  | 1  | 女装&#x2F;女士精品   | T恤        | 39.90 || 0.5                 | 2  | 女装&#x2F;女士精品   | 连衣裙      | 79.90 || 0.8333333333333334  | 3  | 女装&#x2F;女士精品   | 卫衣       | 89.90 || 0.8333333333333334  | 4  | 女装&#x2F;女士精品   | 牛仔裤     | 89.90 || 1                   | 6  | 女装&#x2F;女士精品   | 呢绒外套    | 399.90 || 0.16666666666666666 | 9  | 户外运动       | 登山杖      | 59.90 || 0.5                 | 7  | 户外运动       | 自行车      | 399.90 || 0.5                 | 10 | 户外运动       | 骑行装备     | 399.90 || 0.6666666666666666  | 12 | 户外运动       | 滑板        | 499.90 || 0.8333333333333334  | 11 | 户外运动       | 运动外套     | 799.90 || 1                   | 8  | 户外运动       | 山地自行车   | 1399.90 |+---------------------+----+---------------+------------+---------+12 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-前后函数"><a href="#3-前后函数" class="headerlink" title="3) 前后函数"></a>3) 前后函数</h4><p><strong>1．LAG(expr,n)函数</strong></p><p>LAG(expr,n)函数返回当前行的前n行的expr的值。 </p><p>举例：查询goods数据表中前一个商品价格与当前商品价格的差值。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT id, category, NAME, price, pre_price, price - pre_price AS diff_price-&gt; FROM (-&gt; SELECT id, category, NAME, price,LAG(price,1) OVER w AS pre_price-&gt; FROM goods-&gt; WINDOW w AS (PARTITION BY category_id ORDER BY price)) t;+----+---------------+------------+---------+-----------+------------+| id | category | NAME | price | pre_price | diff_price |+----+---------------+------------+---------+-----------+------------+| 5 | 女装&#x2F;女士精品 | 百褶裙 | 29.90 | NULL | NULL || 1 | 女装&#x2F;女士精品 | T恤 | 39.90 | 29.90 | 10.00 || 2 | 女装&#x2F;女士精品 | 连衣裙 | 79.90 | 39.90 | 40.00 || 3 | 女装&#x2F;女士精品 | 卫衣 | 89.90 | 79.90 | 10.00 || 4 | 女装&#x2F;女士精品 | 牛仔裤 | 89.90 | 89.90 | 0.00 || 6 | 女装&#x2F;女士精品 | 呢绒外套 | 399.90 | 89.90 | 310.00 || 9 | 户外运动 | 登山杖 | 59.90 | NULL | NULL || 7 | 户外运动 | 自行车 | 399.90 | 59.90 | 340.00 || 10 | 户外运动 | 骑行装备 | 399.90 | 399.90 | 0.00 || 12 | 户外运动 | 滑板 | 499.90 | 399.90 | 100.00 || 11 | 户外运动 | 运动外套 | 799.90 | 499.90 | 300.00 || 8 | 户外运动 | 山地自行车 | 1399.90 | 799.90 | 600.00 |+----+---------------+------------+---------+-----------+------------+12 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2．LEAD(expr,n)函数</strong></p><p>LEAD(expr,n)函数返回当前行的后n行的expr的值。 </p><p>举例：查询goods数据表中后一个商品价格与当前商品价格的差值。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT id, category, NAME, behind_price, price,behind_price - price ASdiff_price-&gt; FROM(-&gt; SELECT id, category, NAME, price,LEAD(price, 1) OVER w AS behind_price-&gt; FROM goods WINDOW w AS (PARTITION BY category_id ORDER BY price)) t;+----+---------------+------------+--------------+---------+------------+| id | category      | NAME       | behind_price | price   | diff_price |+----+---------------+------------+--------------+---------+------------+| 5  | 女装&#x2F;女士精品   | 百褶裙       | 39.90       | 29.90 | 10.00 || 1  | 女装&#x2F;女士精品   | T恤         | 79.90       | 39.90 | 40.00 || 2  | 女装&#x2F;女士精品   | 连衣裙      | 89.90        | 79.90 | 10.00 || 3  | 女装&#x2F;女士精品   | 卫衣        | 89.90       | 89.90 | 0.00 || 4  | 女装&#x2F;女士精品   | 牛仔裤       | 399.90     | 89.90 | 310.00 || 6  | 女装&#x2F;女士精品   | 呢绒外套     | NULL       | 399.90 | NULL || 9  | 户外运动       | 登山杖       | 399.90    | 59.90 | 340.00 || 7  | 户外运动       | 自行车       | 399.90    | 399.90 | 0.00 || 10 | 户外运动       | 骑行装备     | 499.90     | 399.90 | 100.00 || 12 | 户外运动       | 滑板         | 799.90    | 499.90 | 300.00 || 11 | 户外运动       | 运动外套     | 1399.90    | 799.90 | 600.00 || 8  | 户外运动       | 山地自行车   | NULL       | 1399.90 | NULL |+----+---------------+------------+--------------+---------+------------+12 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-首尾函数"><a href="#4-首尾函数" class="headerlink" title="4) 首尾函数"></a>4) 首尾函数</h4><p><strong>1．FIRST_VALUE(expr)函数</strong></p><p>FIRST_VALUE(expr)函数返回第一个expr的值。</p><p>举例：按照价格排序，查询第1个商品的价格信息。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT id, category, NAME, price, stock,FIRST_VALUE(price) OVER w ASfirst_price-&gt; FROM goods WINDOW w AS (PARTITION BY category_id ORDER BY price);+----+---------------+------------+---------+-------+-------------+| id | category      | NAME | price | stock | first_price |+----+---------------+------------+---------+-------+-------------+| 5  | 女装&#x2F;女士精品   | 百褶裙 | 29.90 | 500 | 29.90 || 1  | 女装&#x2F;女士精品   | T恤 | 39.90 | 1000 | 29.90 || 2  | 女装&#x2F;女士精品   | 连衣裙 | 79.90 | 2500 | 29.90 || 3  | 女装&#x2F;女士精品   | 卫衣 | 89.90 | 1500 | 29.90 || 4  | 女装&#x2F;女士精品   | 牛仔裤 | 89.90 | 3500 | 29.90 || 6  | 女装&#x2F;女士精品   | 呢绒外套 | 399.90 | 1200 | 29.90 || 9  | 户外运动       | 登山杖 | 59.90 | 1500 | 59.90 || 7  | 户外运动       | 自行车 | 399.90 | 1000 | 59.90 || 10 | 户外运动       | 骑行装备 | 399.90 | 3500 | 59.90 || 12 | 户外运动       | 滑板 | 499.90 | 1200 | 59.90 || 11 | 户外运动       | 运动外套 | 799.90 | 500 | 59.90 || 8  | 户外运动       | 山地自行车 | 1399.90 | 2500 | 59.90 |+----+---------------+------------+---------+-------+-------------+12 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>LAST_VALUE(expr)函数</strong></p><p>LAST_VALUE(expr)函数返回最后一个expr的值。 </p><p>举例：按照价格排序，查询最后一个商品的价格信息。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT id, category, NAME, price, stock,LAST_VALUE(price) OVER w AS last_price-&gt; FROM goods WINDOW w AS (PARTITION BY category_id ORDER BY price);+----+---------------+------------+---------+-------+------------+| id | category      | NAME | price | stock | last_price |+----+---------------+------------+---------+-------+------------+| 5  | 女装&#x2F;女士精品   | 百褶裙 | 29.90 | 500 | 29.90 || 1  | 女装&#x2F;女士精品   | T恤 | 39.90 | 1000 | 39.90 || 2  | 女装&#x2F;女士精品   | 连衣裙 | 79.90 | 2500 | 79.90 || 3  | 女装&#x2F;女士精品   | 卫衣 | 89.90 | 1500 | 89.90 || 4  | 女装&#x2F;女士精品   | 牛仔裤 | 89.90 | 3500 | 89.90 || 6  | 女装&#x2F;女士精品   | 呢绒外套 | 399.90 | 1200 | 399.90 || 9  | 户外运动       | 登山杖 | 59.90 | 1500 | 59.90 || 7  | 户外运动       | 自行车 | 399.90 | 1000 | 399.90 || 10 | 户外运动       | 骑行装备 | 399.90 | 3500 | 399.90 || 12 | 户外运动       | 滑板 | 499.90 | 1200 | 499.90 || 11 | 户外运动       | 运动外套 | 799.90 | 500 | 799.90 || 8  | 户外运动       | 山地自行车 | 1399.90 | 2500 | 1399.90 |+----+---------------+------------+---------+-------+------------+12 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-其他函数"><a href="#5-其他函数" class="headerlink" title="5) 其他函数"></a>5) 其他函数</h4><p><strong>1．NTH_VALUE(expr,n)函数</strong></p><p>NTH_VALUE(expr,n)函数返回第n个expr的值。 举例：查询goods数据表中排名第2和第3的价格信息。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT id, category, NAME, price,NTH_VALUE(price,2) OVER w AS second_price,-&gt; NTH_VALUE(price,3) OVER w AS third_price-&gt; FROM goods WINDOW w AS (PARTITION BY category_id ORDER BY price);+----+---------------+------------+---------+--------------+-------------+| id | category      | NAME       | price   | second_price | third_price |+----+---------------+------------+---------+--------------+-------------+| 5  | 女装&#x2F;女士精品   | 百褶裙 | 29.90 | NULL | NULL || 1  | 女装&#x2F;女士精品   | T恤 | 39.90 | 39.90 | NULL || 2  | 女装&#x2F;女士精品   | 连衣裙 | 79.90 | 39.90 | 79.90 || 3  | 女装&#x2F;女士精品   | 卫衣 | 89.90 | 39.90 | 79.90 || 4  | 女装&#x2F;女士精品   | 牛仔裤 | 89.90 | 39.90 | 79.90 || 6  | 女装&#x2F;女士精品   | 呢绒外套 | 399.90 | 39.90 | 79.90 || 9  | 户外运动       | 登山杖 | 59.90 | NULL | NULL || 7  | 户外运动       | 自行车 | 399.90 | 399.90 | 399.90 || 10 | 户外运动       | 骑行装备 | 399.90 | 399.90 | 399.90 || 12 | 户外运动       | 滑板 | 499.90 | 399.90 | 399.90 || 11 | 户外运动       | 运动外套 | 799.90 | 399.90 | 399.90 || 8  | 户外运动       | 山地自行车 | 1399.90 | 399.90 | 399.90 |+----+---------------+------------+---------+--------------+-------------+12 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2．NTILE(n)函数</strong></p><p>NTILE(n)函数将分区中的有序数据分为n个桶，记录桶编号。 </p><p>举例：将goods表中的商品按照价格分为3组。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT NTILE(3) OVER w AS nt,id, category, NAME, price-&gt; FROM goods WINDOW w AS (PARTITION BY category_id ORDER BY price);+----+----+---------------+------------+---------+| nt | id | category      | NAME       | price |+----+----+---------------+------------+---------+| 1  | 5  | 女装&#x2F;女士精品   | 百褶裙 | 29.90 || 1  | 1  | 女装&#x2F;女士精品   | T恤 | 39.90 || 2  | 2  | 女装&#x2F;女士精品   | 连衣裙 | 79.90 || 2  | 3  | 女装&#x2F;女士精品   | 卫衣 | 89.90 || 3  | 4  | 女装&#x2F;女士精品   | 牛仔裤 | 89.90 || 3  | 6  | 女装&#x2F;女士精品   | 呢绒外套 | 399.90 || 1  | 9  | 户外运动       | 登山杖 | 59.90 || 1  | 7  | 户外运动       | 自行车 | 399.90 || 2  | 10 | 户外运动       | 骑行装备 | 399.90 || 2  | 12 | 户外运动       | 滑板 | 499.90 || 3  | 11 | 户外运动       | 运动外套 | 799.90 || 3  | 8  | 户外运动       | 山地自行车 | 1399.90 |+----+----+---------------+------------+---------+12 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-小结-1"><a href="#5-小结-1" class="headerlink" title="5) 小结"></a>5) 小结</h3><p>窗口函数的特点是可以分组，而且可以在分组内排序。另外，窗口函数不会因为分组而减少原表中的行 数，这对我们在原表数据的基础上进行统计和排序非常有用。</p><h2 id="3-新特性2：公用表表达式"><a href="#3-新特性2：公用表表达式" class="headerlink" title="3. 新特性2：公用表表达式"></a>3. 新特性2：公用表表达式</h2><p>公用表表达式（或通用表表达式）简称为CTE（Common Table Expressions）。CTE是一个命名的临时结 果集，作用范围是当前语句。CTE可以理解成一个可以复用的子查询，当然跟子查询还是有点区别的， CTE可以引用其他CTE，但子查询不能引用其他子查询。所以，可以考虑代替子查询。</p><p>依据语法结构和执行方式的不同，公用表表达式分为 普通公用表表达式 和 递归公用表表达式 2 种。</p><h3 id="1-普通公用表表达式"><a href="#1-普通公用表表达式" class="headerlink" title="1) 普通公用表表达式"></a>1) 普通公用表表达式</h3><p>普通公用表表达式的语法结构是：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">WITH CTE名称AS （子查询）SELECT|DELETE|UPDATE 语句;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>普通公用表表达式类似于子查询，不过，跟子查询不同的是，它可以被多次引用，而且可以被其他的普 通公用表表达式所引用。</p><p>举例：查询员工所在的部门的详细信息。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT * FROM departments-&gt; WHERE department_id IN (-&gt; SELECT DISTINCT department_id-&gt; FROM employees-&gt; );+---------------+------------------+------------+-------------+| department_id | department_name  | manager_id | location_id |+---------------+------------------+------------+-------------+|     10        | Administration   | 200        | 1700        ||     20        | Marketing        | 201        | 1800        ||     30        | Purchasing       | 114        | 1700        ||     40        | Human Resources  | 203        | 2400        ||     50        | Shipping         | 121        | 1500        ||     60        | IT               | 103        | 1400        ||     70        | Public Relations | 204        | 2700        ||     80        | Sales            | 145        | 2500        ||     90        | Executive        | 100        | 1700        ||     100       | Finance          | 108        | 1700        ||     110       | Accounting       | 205        | 1700        |+---------------+------------------+------------+-------------+11 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个查询也可以用普通公用表表达式的方式完成：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; WITH emp_dept_id-&gt; AS (SELECT DISTINCT department_id FROM employees)-&gt; SELECT *-&gt; FROM departments d JOIN emp_dept_id e-&gt; ON d.department_id &#x3D; e.department_id;+---------------+------------------+------------+-------------+---------------+| department_id | department_name  | manager_id | location_id | department_id |+---------------+------------------+------------+-------------+---------------+|      90       | Executive        | 100        | 1700        | 90            ||      60       | IT               | 103        | 1400        | 60            ||      100      | Finance          | 108        | 1700        | 100           ||      30       | Purchasing       | 114        | 1700        | 30            ||      50       | Shipping         | 121        | 1500        | 50            ||      80       | Sales            | 145        | 2500        | 80            ||      10       | Administration   | 200        | 1700        | 10            ||      20       | Marketing        | 201        | 1800        | 20            ||      40       | Human Resources  | 203        | 2400        | 40            ||      70       | Public Relations | 204        | 2700        | 70            ||      110      | Accounting       | 205        | 1700        | 110           |+---------------+------------------+------------+-------------+---------------+11 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子说明，公用表表达式可以起到子查询的作用。以后如果遇到需要使用子查询的场景，你可以在查询 之前，先定义公用表表达式，然后在查询中用它来代替子查询。而且，跟子查询相比，公用表表达式有 一个优点，就是定义过公用表表达式之后的查询，可以像一个表一样多次引用公用表表达式，而子查询 则不能。</p><h3 id="2-递归公用表表达式"><a href="#2-递归公用表表达式" class="headerlink" title="2)  递归公用表表达式"></a>2)  递归公用表表达式</h3><p>递归公用表表达式也是一种公用表表达式，只不过，除了普通公用表表达式的特点以外，它还有自己的特点，就是可以调用自己。它的语法结构是：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">WITH RECURSIVECTE名称 AS （子查询）SELECT|DELETE|UPDATE 语句;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>递归公用表表达式由 2 部分组成，分别是种子查询和递归查询，中间通过关键字 UNION [ALL]进行连接。 这里的种子查询，意思就是获得递归的初始值。这个查询只会运行一次，以创建初始数据集，之后递归 查询会一直执行，直到没有任何新的查询数据产生，递归返回。</p><p>案例：针对于我们常用的employees表，包含employee_id，last_name和manager_id三个字段。如果a是b 的管理者，那么，我们可以把b叫做a的下属，如果同时b又是c的管理者，那么c就是b的下属，是a的下下 属。</p><p>下面我们尝试用查询语句列出所有具有下下属身份的人员信息。</p><p>如果用我们之前学过的知识来解决，会比较复杂，至少要进行 4 次查询才能搞定：</p><ul><li>第一步，先找出初代管理者，就是不以任何别人为管理者的人，把结果存入临时表； </li><li>第二步，找出所有以初代管理者为管理者的人，得到一个下属集，把结果存入临时表； </li><li>第三步，找出所有以下属为管理者的人，得到一个下下属集，把结果存入临时表。 </li><li>第四步，找出所有以下下属为管理者的人，得到一个结果集。</li></ul><p>如果第四步的结果集为空，则计算结束，第三步的结果集就是我们需要的下下属集了，否则就必须继续 进行第四步，一直到结果集为空为止。比如上面的这个数据表，就需要到第五步，才能得到空结果集。 而且，最后还要进行第六步：把第三步和第四步的结果集合并，这样才能最终获得我们需要的结果集。</p><p>如果用递归公用表表达式，就非常简单了。我介绍下具体的思路。</p><ul><li>用递归公用表表达式中的种子查询，找出初代管理者。字段 n 表示代次，初始值为 1，表示是第一 代管理者。</li><li>用递归公用表表达式中的递归查询，查出以这个递归公用表表达式中的人为管理者的人，并且代次 的值加 1。直到没有人以这个递归公用表表达式中的人为管理者了，递归返回。</li><li>在最后的查询中，选出所有代次大于等于 3 的人，他们肯定是第三代及以上代次的下属了，也就是 下下属了。这样就得到了我们需要的结果集。</li></ul><p>这里看似也是 3 步，实际上是一个查询的 3 个部分，只需要执行一次就可以了。而且也不需要用临时表 保存中间结果，比刚刚的方法简单多了。</p><p>代码实现：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">WITH RECURSIVE cteAS(SELECT employee_id,last_name,manager_id,1 AS n FROM employees WHERE employee_id &#x3D; 100-- 种子查询，找到第一代领导UNION ALLSELECT a.employee_id,a.last_name,a.manager_id,n+1 FROM employees AS a JOIN cteON (a.manager_id &#x3D; cte.employee_id) -- 递归查询，找出以递归公用表表达式的人为领导的人)SELECT employee_id,last_name FROM cte WHERE n &gt;&#x3D; 3;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总之，递归公用表表达式对于查询一个有共同的根节点的树形结构数据，非常有用。它可以不受层级的 限制，轻松查出所有节点的数据。如果用其他的查询方式，就比较复杂了。</p><h3 id="3-小结-1"><a href="#3-小结-1" class="headerlink" title="3) 小结"></a>3) 小结</h3><p>公用表表达式的作用是可以替代子查询，而且可以被多次引用。递归公用表表达式对查询有一个共同根 节点的树形结构数据非常高效，可以轻松搞定其他查询方式难以处理的查询。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> CRUD </tag>
            
            <tag> MySQL数据类型 </tag>
            
            <tag> 约束 </tag>
            
            <tag> 视图 </tag>
            
            <tag> 存储过程与函数 </tag>
            
            <tag> MySQL变量、流程控制、游标 </tag>
            
            <tag> 触发器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库概述</title>
      <link href="/2022/07/17/di-01-zhang-shu-ju-ku-gai-shu/"/>
      <url>/2022/07/17/di-01-zhang-shu-ju-ku-gai-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="第01章-数据库概述"><a href="#第01章-数据库概述" class="headerlink" title="第01章_数据库概述"></a>第01章_数据库概述</h1><h2 id="1-为什么要使用数据库"><a href="#1-为什么要使用数据库" class="headerlink" title="1. 为什么要使用数据库"></a>1. 为什么要使用数据库</h2><hr><ul><li>持久化（persistence）：<strong>把数据保存到可掉电式存储设备中以供之后使用</strong>。</li><li>持久化的主要作用是<strong>将内存中的数据存储在关系型数据库中</strong>，当然也可以存储在磁盘文件、XML数据文件中。<br><img src="/../pic/%E7%AC%AC01%E7%AB%A0_%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/1649251937911.png" alt="1649251937911"></li></ul><hr><h2 id="2-数据库与数据库管理系统"><a href="#2-数据库与数据库管理系统" class="headerlink" title="2. 数据库与数据库管理系统"></a>2. 数据库与数据库管理系统</h2><hr><h3 id="2-1-数据库的相关概念"><a href="#2-1-数据库的相关概念" class="headerlink" title="2.1 数据库的相关概念"></a>2.1 数据库的相关概念</h3><table><thead><tr><th>DB：数据库（Database）</th></tr></thead><tbody><tr><td>即存储数据的“仓库”，其本质是一个文件系统。它保存了一系列有组织的数据。</td></tr><tr><td><strong>DBMS：数据库管理系统（Database Management System）</strong></td></tr><tr><td>是一种操纵和管理数据库的大型软件，用于建立、使用和维护数据库，对数据库进行统一管理和 控制。用户通过数据库管理系统访问数据库中表内的数据。</td></tr><tr><td><strong>SQL：结构化查询语言（Structured Query Language）</strong></td></tr><tr><td>专门用来与数据库通信的语言。</td></tr></tbody></table><h3 id="2-2-数据库与数据库管理系统的关系"><a href="#2-2-数据库与数据库管理系统的关系" class="headerlink" title="2.2 数据库与数据库管理系统的关系"></a>2.2 数据库与数据库管理系统的关系</h3><p>数据库管理系统（DBMS）可以管理多个数据库，一般开发人员会针对每一个应用创建一个数据库。为保存应用中实体的数据，一般会在数据库创建多个表，以保存程序中实体用户的数据。</p><p>数据库管理系统、数据库和表的关系如图所示：</p><p><img src="/../pic/%E7%AC%AC01%E7%AB%A0_%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/1649252774392.png" alt="1649252774392"></p><h3 id="2-3-常见的数据库管理系统排名（DBMS）"><a href="#2-3-常见的数据库管理系统排名（DBMS）" class="headerlink" title="2.3 常见的数据库管理系统排名（DBMS）"></a>2.3 常见的数据库管理系统排名（DBMS）</h3><p>目前互联网上常见的数据库管理软件有 Oracle、MySQL、MS SQL Server、DB2、PostgreSQL、Access、SyBase、Informix这几种。以下是2021年*DB-Engines Ranking对各数据库受欢迎程度进行调查后的统计结果：（查看数据库最新排名：<a href="https://db-engines.com/en/ranking%EF%BC%89">https://db-engines.com/en/ranking）</a></p><p><img src="/../pic/%E7%AC%AC01%E7%AB%A0_%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/1649253190945.png" alt="1649253190945"></p><h3 id="2-4-常见的数据库介绍"><a href="#2-4-常见的数据库介绍" class="headerlink" title="2.4 常见的数据库介绍"></a>2.4 常见的数据库介绍</h3><p><strong>Oracle</strong></p><p>1979年，Oracle 2诞生，它是第一个商用的RDBMS（关系型数据库管理系统）。随着Oracle软件的名气越来越大，公司也改名叫Oracle公司。</p><p>2007年，总计85亿美金收购BEA System。</p><p>2009年，总计74亿美金收购SUN。此前的2008年，SUN以10亿美金收购MySQL。意味着Oracle同时拥有了MySQL的管理权，至此Oracle在数据库领域中成为绝对的领导者。</p><p>2013年，甲骨文超越IBM，成为继Microsoft后全球第二大软件公司。</p><p>如今Oracle的年收入达到了400亿美金，足以证明商用（收费）数据库软件的价值。</p><p><strong>SQL Server</strong></p><p>SQL Server是微软开发的大型商业数据库，诞生于1989年。C#、.net等语言常使用，与WinNT完全集成，也可以很好地与Microsoft BackOffice产品集成。</p><p><strong>DB2</strong></p><p>IBM公司的数据库产品，收费的。常应用在银行系统中。</p><p><strong>PostgreSQL</strong></p><p>PostgreSQL的稳定性极强，最符合SQL标准，开放源码，具备商业级DBMS质量。PG对数据量大的文本以及SQL处理较快。</p><p><strong>SyBase</strong></p><p>已经淡出历史舞台。提供了一个非常专业数据建模的工具PowerDesigner。</p><p><strong>SQLite</strong></p><p>嵌入式的小型数据库，应用在手机端。零配置，SQLite3不用安装，不用配置，不用启动、关闭或者配置数据库实例。当系统崩溃后不用做任何恢复操作，再下次使用数据库的时候自恢复。</p><p><strong>Informix</strong></p><p>IBM公司出品，取自Information和Unix的结合，它是第一个被移植到Linux上的商业数据库产品。仅运行与Unix&#x2F;Linux平台，命令行操作。性能较高，支持集群 ，适应与安全性要求极高的系统，尤其是银行，证券系统的应用。</p><h2 id="3-MySQL介绍"><a href="#3-MySQL介绍" class="headerlink" title="3. MySQL介绍"></a>3. MySQL介绍</h2><p><img src="/../pic/%E7%AC%AC01%E7%AB%A0_%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/1649254603612.png" alt="1649254603612"></p><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><ul><li>MySQL是一个<code>开放源码的关系型数据库管理系统</code>，由瑞典 MySQL AB（创始人Michael Widenius）公司1995年开发，迅速成为开源数据库的No.1。</li><li>2008年被<code>Sun</code>收购（10亿美金），2009年Sun被<code>Oracle</code>收购。<code>MariaDB</code>应运而生。（MySQL的创造者担心MySQL有闭源的风险，因此创建了MySQL的分支项目MariaDB）</li><li>MySQL6.x版本之后分为<code>社区版</code>和<code>商业版</code>。</li><li>MySQL是一种关联数据库管理系统，将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</li><li>MySQL是开源的，所以你不需要支付额外的费用。</li><li>MySQL是可以定制的，采用了<code>GPL（GUN General Public License）</code>协议，你可以需改源码来开发自己的MySQL系统。</li><li>MySQL支持大型的数据库。可以处理拥有上千万条记录的大型数据库。</li><li>MySQL支持大型数据库，支持5000万条记录的数据仓库 ，32位系统表文件最大可支持<code>4GB</code>，64位系统支持最大的表文件为<code>8TB</code>。</li><li>MySQL使用<code>标准的SQL数据语言</code>形式。</li><li>MySQL可以允许运行于多个系统上，并且支持多种语言。这些编程语言包括C、C++、Python、Java、Perl、PHP、和Ruby等。</li></ul><h3 id="3-2-MySQL发展史重大事件"><a href="#3-2-MySQL发展史重大事件" class="headerlink" title="3.2 MySQL发展史重大事件"></a>3.2 MySQL发展史重大事件</h3><p><img src="/../pic/%E7%AC%AC01%E7%AB%A0_%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/1649255680817.png" alt="1649255680817"></p><hr><h2 id="4-RDBMS与非RDBMS"><a href="#4-RDBMS与非RDBMS" class="headerlink" title="4.RDBMS与非RDBMS"></a>4.RDBMS与非RDBMS</h2><hr><p>从排名中我们能看出来，关系型数据库绝对是DBMS的主流，其中使用最多的DBMS分贝是Oracle、MySQL和SQL Server。这些都是关系型数据库（RDBMS）。</p><h3 id="4-1-关系型数据库（RDBMS）"><a href="#4-1-关系型数据库（RDBMS）" class="headerlink" title="4.1 关系型数据库（RDBMS）"></a>4.1 关系型数据库（RDBMS）</h3><h4 id="4-1-1-实质"><a href="#4-1-1-实质" class="headerlink" title="4.1.1 实质"></a>4.1.1 实质</h4><ul><li><p>这种类型的数据库是<code>最古老</code>的数据库类型，关系型数据库模型是把复杂的数据结构归结为简单的<code>二元关系</code>（即二维表格形式）。</p><p><img src="/../pic/%E7%AC%AC01%E7%AB%A0_%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/1649296654071.png" alt="1649296654071"></p></li><li><p>关系型数据库以<code>行（row）</code>和<code>列（column）</code>的形式存储数据，以便于用户理解。这一系列的行和列被称为<code>表（table）</code>，一组表组成了一个<code>库（database）</code>。</p></li><li><p>表与表之间的数据记录有关系（relationship）。现实世界中的各种实体以及实体之间的各种联系均用<code>关系模型</code>来表示。关系型数据库就是建立在<code>关系模型</code>基础上的数据库。</p></li><li><p>SQL就是关系型数据库的查询语言。<br><img src="/../pic/%E7%AC%AC01%E7%AB%A0_%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/1649296954469.png" alt="1649296954469"></p></li></ul><h4 id="4-1-2-优势"><a href="#4-1-2-优势" class="headerlink" title="4.1.2 优势"></a>4.1.2 优势</h4><ul><li><strong>复杂查询</strong>可以用SQL语句方便的在一个表以及多个表之间做非常复杂的数据查询。</li><li><strong>事务支持</strong>使得对于安全性能很高的数据访问要求得以实现。</li></ul><h3 id="4-2-非关系型数据库（非RDBMS）"><a href="#4-2-非关系型数据库（非RDBMS）" class="headerlink" title="4.2 非关系型数据库（非RDBMS）"></a>4.2 非关系型数据库（非RDBMS）</h3><h4 id="4-2-1-介绍"><a href="#4-2-1-介绍" class="headerlink" title="4.2.1 介绍"></a>4.2.1 介绍</h4><p><strong>非关系型数据库</strong>，可看成传统关系型数据库的功能<code>阉割版本</code>，基于键值对存储数据，不需要经过SQL层的解析，<code>性能非常高</code>。同时通过减少不常用的功能，进一步提高性能。</p><p>目前基本上大部分主流的非关系型数据库都是免费的。</p><h4 id="4-2-2-有哪些非关系型数据库"><a href="#4-2-2-有哪些非关系型数据库" class="headerlink" title="4.2.2 有哪些非关系型数据库"></a>4.2.2 有哪些非关系型数据库</h4><p>相比于SQL，NoSQL泛指非关系型数据库，包括了榜单上的键值型数据库、文档型数据库、搜索引擎和列存储等，除此以外还包括图形数据库。也只有用NoSQL一词才能将这些技术囊括进来。</p><p><strong>键值型数据库</strong></p><p>键值型数据库通过Key-Value键值的方式来存储数据，其中Key和Value可以是简单的对象，也可以是复杂的对象，Key作为唯一的标识符，优点是查找速度快，在这方面明显优于关系型数据库，缺点是无法像关系型数据库一样使用条件过滤（比如WHERE），如果你不知道去哪里找数据，就要遍历所有的键，这就会消耗大量的计算。</p><p>键值型数据库典型的使用场景是作为<code>内存缓存</code>。<code>Redis</code>是最流行的键值型数据库。</p><p><img src="/../pic/%E7%AC%AC01%E7%AB%A0_%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/1649297904390.png" alt="1649297904390"></p><p><strong>文档型数据库</strong></p><p>此类型数据库可存放并获取文档，可以是XML、JSON等格式。在数据库中文档作为处理信息的基本单位，一个文档就相当于一条记录。文档数据库所存放的文档，就相当于键值数据库所存放的“值”。MongoDB是最流行的文档型数据库。此外，还有CouchDB等。</p><p><strong>搜索引擎数据库</strong></p><p>虽然关系型数据库采用了索引提升检索效率，但是针对全文索引效率却较低。搜索引擎数据库是应用在搜索引擎领域的数据存储形式，由于搜索引擎会爬取大量的数据，并以特定的格式进行存储，这样在检索的时候才能保证性能最优。核心原理是“倒排索引”。</p><p>典型产品：Solr、Elasticsearch、Splunk等。</p><p><strong>列式数据库</strong></p><p>列式数据库是相对于行式存储的数据库，Oracle、MySQL、SQL Server等数据库都是采用的行式存储（Row-based），而列式数据库是将数据按照列存储到数据库中，这样做的好处是可以大量降低系统的I&#x2F;O，适合于分布式文件系统，不足在于功能相对有限。典型产品：HBase等。</p><p><img src="/../pic/%E7%AC%AC01%E7%AB%A0_%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/1649298542419.png" alt="1649298542419"></p><p><strong>图形数据库</strong></p><p>图形数据库，利用了图这种数据结构存储了实体（对象）之间的关系。图形数据库最典型的例子就是社交网络中人与人的关系，数据模型主要是以节点和边（关系）来实现，特点在于能高效的解决复杂的关系问题。典型产品：Neo4J、InfoGrid等。</p><p><img src="/../pic/%E7%AC%AC01%E7%AB%A0_%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/1649299045508.png" alt="1649299045508"></p><h3 id="4-3-小结"><a href="#4-3-小结" class="headerlink" title="4.3 小结"></a>4.3 小结</h3><p>NoSQL的分类很多，即便如此，在DBMS排名中，还是SQL阵营的比重更大，影响力前五的DBMS中有4个是关系型数据库，而排名前二十的DBMS中也有12个是关系型数据库。所以说，掌握SQL是非常有必要的。</p><hr><h2 id="5-关系型数据库设计规则"><a href="#5-关系型数据库设计规则" class="headerlink" title="5. 关系型数据库设计规则"></a>5. 关系型数据库设计规则</h2><hr><ul><li>关系型数据库的典型数据结构就是<code>数据表</code>，这些数据表的组成都是结构化的（Structured）。</li><li>将数据放到表中，再放到库中。</li><li>一个数据库中可以有多个表，每个表都有一个名字，用来标识自己。表名具有唯一性。</li><li>表具有一些特性，这些特性定义了数据在表中如何存储，类似Java和Python中“类”的设计。</li></ul><h3 id="5-1-表、记录、字段"><a href="#5-1-表、记录、字段" class="headerlink" title="5.1 表、记录、字段"></a>5.1 表、记录、字段</h3><ul><li>E-R（entity-relationship，实体-联系）模型中有三个主要概念是：<code>实体集</code>、<code>属性</code>、<code>联系集</code>。</li><li>一个实体集（class）对应于数据库中的一个表（table），一个实体（instance）则对应于数据库表中的一行（row），也称为一条记录（record）。一个属性（attribute）对应于数据库表中的一列（column），也成为一个字段（field）。</li></ul><p><img src="/../pic/%E7%AC%AC01%E7%AB%A0_%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/1649299778965.png" alt="1649299778965"></p><pre class="line-numbers language-none"><code class="language-none">ORM思想（Object Relational Mapping）体现：数据库中的一个表  &lt;---&gt;  Java或Python中的一个类表中的一条数据    &lt;---&gt;  类中的一个对象（或实体）表中的一个列      &lt;---&gt;  类中的一个字段、属性（field)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-表的关联关系"><a href="#5-2-表的关联关系" class="headerlink" title="5.2 表的关联关系"></a>5.2 表的关联关系</h3><ul><li>表与表之间的数据记录有关系（relationship）。现实世界中的各种实体以及实体之间的各种联系均用关系模型来表示。</li><li>四种：一对一关联、一对多关联、多对多关联、自我引用</li></ul><h4 id="5-2-1-一对一关系（one-to-one）"><a href="#5-2-1-一对一关系（one-to-one）" class="headerlink" title="5.2.1 一对一关系（one-to-one）"></a>5.2.1 一对一关系（one-to-one）</h4><ul><li><p>在实际的开发中应用不多，因为一对一可以创建成一张表。</p></li><li><p>举例：设计</p><pre class="line-numbers language-none"><code class="language-none">学生表<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>：学号、姓名、手机号码、班级、系别、身份证号码、家庭住址、籍贯、紧急联系人……</p><ul><li>拆分为两个表：两个表的记录是一一对应关系</li><li><code>基础信息表</code>（常用信息）：学号、姓名、手机号码、班级、系别</li><li><code>档案信息表</code>（不常用信息）：学号、身份证号码、家庭住址、籍贯、紧急联系人……</li></ul></li><li><p>两种建表原则：</p><ul><li>外键唯一：主表的主键和从表的外键（唯一），形成主外键关系，外键唯一。</li><li>外键是主键：主表的主键和从表的主键，形成主外键关系。</li></ul></li></ul><p><img src="/../pic/%E7%AC%AC01%E7%AB%A0_%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/1649300994707.png" alt="1649300994707"></p><h4 id="5-2-2-一对多关系（one-to-many）"><a href="#5-2-2-一对多关系（one-to-many）" class="headerlink" title="5.2.2 一对多关系（one-to-many）"></a>5.2.2 一对多关系（one-to-many）</h4><ul><li>常见实例场景：<code>客户表和订单表</code>，<code>分类表和商品表</code>，<code>部门表和员工表</code>。</li><li>举例：<ul><li>员工表：编号、姓名、……、所属部门</li><li>部门表：编号、名称、简介</li></ul></li><li>一对多建表原则：在从表（多方）创建一个字段，字段作为外键指向主表（一方）的主键<br><img src="/../pic/%E7%AC%AC01%E7%AB%A0_%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/1649301232967.png" alt="1649301232967"></li></ul><p><img src="/../pic/%E7%AC%AC01%E7%AB%A0_%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/1649301263616.png" alt="1649301263616"></p><p><img src="/../pic/%E7%AC%AC01%E7%AB%A0_%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/1649301279508.png" alt="1649301279508"></p><h4 id="5-2-3-多对多关系（many-to-many）"><a href="#5-2-3-多对多关系（many-to-many）" class="headerlink" title="5.2.3 多对多关系（many-to-many）"></a>5.2.3 多对多关系（many-to-many）</h4><p>要表示多对多关系必须创建第三个表，该表通常称为<code>联接表</code>，它将多对多关系划分为两个一对多关系。将这两个表的主键都插入到第三个表中。</p><p><img src="/../pic/%E7%AC%AC01%E7%AB%A0_%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/1649301487428.png" alt="1649301487428"></p><ul><li><p><strong>举例1：学生-课程</strong></p><ul><li><code>学生信息表</code>：一行代表一个学生的信息（学号、姓名、手机号码、班级、系别 ……）</li><li><code>课程信息表</code>：一行代表一个课程的信息（课程编号、授课老师、简介 ……）</li><li><code>选课信息表</code>：一个学生可以选多门课，一门课可以被多个学生选择</li></ul><pre class="line-numbers language-none"><code class="language-none">学号      课程编号1         10012         10011         1002<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>举例2：产品-订单</strong><br>“订单 ”表和“产品”表有一种多对多的关系，这种关系是通过与“订单明细”表建立两个一对多关系来定义的。一个订单可以有多个产品，每个产品可以出现在多个订单中。</p><ul><li><code>产品表</code>：产品表中的每条记录表示一个产品。</li><li><code>订单表</code>：订单表中的每条记录表示一个订单。</li><li><code>订单明细表</code>：每个产品可以与订单表中的多条记录对应，即出现在多个订单中。一个订单可以与产品表中的多条记录对应，即包含多个产品。</li></ul><p><img src="/../pic/%E7%AC%AC01%E7%AB%A0_%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/1649302124634.png" alt="1649302124634"></p></li></ul><h4 id="5-3-4-自我引用（Self-reference）"><a href="#5-3-4-自我引用（Self-reference）" class="headerlink" title="5.3.4 自我引用（Self reference）"></a>5.3.4 自我引用（Self reference）</h4><p><img src="/../pic/%E7%AC%AC01%E7%AB%A0_%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/1649302203297.png" alt="1649302203297"></p><ul><li>在实际的开发中应用不多，因为一对一可以创建成一张表。</li><li>举例：设计<code>学生表</code>：学号、姓名、手机号码、班级、系别、身份证号码、家庭住址、籍贯、紧急联系人、……</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL环境搭建</title>
      <link href="/2022/07/17/di-02-zhang-mysql-huan-jing-da-jian/"/>
      <url>/2022/07/17/di-02-zhang-mysql-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="第02章-MySQL环境搭建"><a href="#第02章-MySQL环境搭建" class="headerlink" title="第02章_MySQL环境搭建"></a>第02章_MySQL环境搭建</h1><h2 id="1-MySQL的卸载"><a href="#1-MySQL的卸载" class="headerlink" title="1. MySQL的卸载"></a>1. MySQL的卸载</h2><hr><h3 id="步骤-1-：停止MySQL服务"><a href="#步骤-1-：停止MySQL服务" class="headerlink" title="步骤 1 ：停止MySQL服务"></a>步骤 1 ：停止MySQL服务</h3><p>在卸载之前，先停止MySQL8.0的服务。按键盘上的“Ctrl + Alt + Delete”组合键，打开“任务管理器”对话框，可以在“服务”列表找到“MySQL8.0”的服务，如果现在“正在运行”状态，可以右键单击服务，选择“停止”选项停止MySQL8.0的服务，如图所示。</p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649303026758.png" alt="1649303026758"></p><h3 id="步骤-2-：软件的卸载"><a href="#步骤-2-：软件的卸载" class="headerlink" title="步骤 2 ：软件的卸载"></a>步骤 2 ：软件的卸载</h3><p><strong>方式 1 ：通过控制面板方式</strong></p><p>卸载MySQL8.0的程序可以和其他桌面应用程序一样直接在“控制面板”选择“卸载程序”，并在程序列表中找到MySQL8.0服务器程序，直接双击卸载即可，如图所示。这种方式删除，数据目录下的数据不会跟着删除。</p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649303153973.png" alt="1649303153973"></p><p><strong>方式 2 ：通过 360 或电脑管家等软件卸载</strong></p><p><strong>方式 3 ：通过安装包提供的卸载功能卸载</strong></p><p>你也可以通过安装向导程序进行MySQL8.0服务器程序的卸载。</p><p>① 再次双击下载的mysql-installer-community-8.0.26.0.msi文件，打开安装向导。安装向导会自动检测已安装的MySQL服务器程序。</p><p>② 选择要卸载的MySQL服务器程序，单击“Remove”（移除），即可进行卸载。</p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649303254527.png" alt="1649303254527"></p><p>③ 单击“Next”（下一步）按钮，确认卸载。</p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649303271446.png" alt="1649303271446"></p><p>④ 弹出是否同时移除数据目录选择窗口。如果想要同时删除MySQL服务器中的数据，则勾选“Remove the data directory”，如图所示。</p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649303304473.png" alt="1649303304473"></p><p>⑤ 执行卸载。单击“Execute”（执行）按钮进行卸载。</p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649303323942.png" alt="1649303323942"></p><p>⑥ 完成卸载。单击“Finish”（完成）按钮即可。如果想要同时卸载MySQL8.0的安装向导程序，勾选“Yes，Uninstall MySQL Installer”即可，如图所示。</p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649303349934.png" alt="1649303349934"></p><h3 id="步骤-3-：残余文件的清理"><a href="#步骤-3-：残余文件的清理" class="headerlink" title="步骤 3 ：残余文件的清理"></a>步骤 3 ：残余文件的清理</h3><p>如果再次安装不成功，可以卸载后对残余文件进行清理后再安装。</p><ul><li>服务目录：mysql服务的安装目录</li><li>数据目录：默认在C:\ProgramData\MySQL</li></ul><p>如果自己单独指定过数据目录，就找到自己的数据目录进行删除即可。</p><p><strong>注意：请在卸载前做好数据备份</strong><br>在操作完以后，需要重启计算机，然后进行安装即可。<strong>如果仍然安装失败，需要继续操作如下步骤 4</strong></p><h3 id="步骤-4-：清理注册表（选做）"><a href="#步骤-4-：清理注册表（选做）" class="headerlink" title="步骤 4 ：清理注册表（选做）"></a>步骤 4 ：清理注册表（选做）</h3><p>如果前几步做了，再次安装还是失败，那么可以清理注册表。</p><p>如何打开注册表编辑器：在系统的搜索框中输入<code>regedit</code></p><pre class="line-numbers language-reg" data-language="reg"><code class="language-reg">HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\Eventlog\Application\MySQL服务 目录删除HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\MySQL服务 目录删除HKEY_LOCAL_MACHINE\SYSTEM\ControlSet002\Services\Eventlog\Application\MySQL服务 目录删除HKEY_LOCAL_MACHINE\SYSTEM\ControlSet002\Services\MySQL服务 目录删除HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Application\MySQL服务 目录删除HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\MySQL服务删除注册表中的ControlSet001,ControlSet002,不一定是 001 和002,可能是ControlSet005、 006之类<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="步骤-5-：删除环境变量配置"><a href="#步骤-5-：删除环境变量配置" class="headerlink" title="步骤 5 ：删除环境变量配置"></a>步骤 5 ：删除环境变量配置</h3><p>找到path环境变量，将其中关于mysql的环境变量删除， <strong>切记不要全部删除。</strong></p><p>例如：删除 D:\develop_tools\mysql\MySQLServer8.0.26\bin 这个部分</p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649303824570.png" alt="1649303824570"></p><hr><h2 id="2-MySQL的下载、安装、配置"><a href="#2-MySQL的下载、安装、配置" class="headerlink" title="2. MySQL的下载、安装、配置"></a>2. MySQL的下载、安装、配置</h2><hr><h3 id="2-1-MySQL的-4-大版本"><a href="#2-1-MySQL的-4-大版本" class="headerlink" title="2. 1 MySQL的 4 大版本"></a>2. 1 MySQL的 4 大版本</h3><ul><li><strong>MySQL Community Server 社区版本</strong> ，开源免费，自由下载，但不提供官方技术支持，适用于大多数普通用户。</li><li><strong>MySQL Enterprise Edition 企业版本</strong> ，需付费，不能在线下载，可以试用 30 天。提供了更多的功能和更完备的技术支持，更适合于对数据库的功能和可靠性要求较高的企业客户。</li><li><strong>MySQL Cluster 集群版</strong> ，开源免费。用于架设集群服务器，可将几个MySQL Server封装成一个Server。需要在社区版或企业版的基础上使用。</li><li><strong>MySQL Cluster CGE 高级集群版</strong> ，需付费。</li></ul><p>目前最新版本为<code>8.0.27</code>，发布时间 <code>2021 年 10 月</code>。此前，8.0.0 在 2016.9.12日就发布了。</p><p>此外，官方还提供了<code>MySQL Workbench</code>（GUITOOL）一款专为MySQL设计的<code>图形界面管理工具</code>。MySQLWorkbench又分为两个版本，分别是<code>社区版</code>（MySQL Workbench OSS）、<code>商用版</code>（MySQLWorkbenchSE）。</p><h3 id="2-2-软件的下载"><a href="#2-2-软件的下载" class="headerlink" title="2. 2 软件的下载"></a>2. 2 软件的下载</h3><p><strong>1. 下载地址</strong></p><p>官网： <a href="https://www.mysql.com/">https://www.mysql.com</a></p><p><strong>2. 打开官网，点击DOWNLOADS</strong></p><p>然后，点击<code>MySQL Community(GPL) Downloads</code></p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649304333457.png" alt="1649304333457"></p><p><strong>3. 点击 MySQL Community Server</strong></p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649304358116.png" alt="1649304358116"></p><p><strong>4. 在General Availability(GA) Releases中选择适合的版本</strong></p><p>Windows平台下提供两种安装文件：MySQL二进制分发版（.msi安装文件）和免安装版（.zip压缩文件）。一般来讲，应当使用二进制分发版，因为该版本提供了图形化的安装向导过程，比其他的分发版使用起来要简单，不再需要其他工具启动就可以运行MySQL。</p><ul><li>这里在Windows 系统下推荐下载<code>MSI安装程序</code>；点击<code>Go to Download Page</code>进行下载即可</li></ul><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649304434342.png" alt="1649304434342"></p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649304454538.png" alt="1649304454538"></p><ul><li><p>Windows下的MySQL 8. 0 安装有两种安装程序</p><ul><li><code>mysql-installer-web-community-8.0.26.0.msi</code> 下载程序大小： 2. 4 M；安装时需要联网安装组件。</li><li><code>mysql-installer-community-8.0.26.0.msi</code> 下载程序大小： 450. 7 M；安装时离线安装即<br>可。 <strong>推荐</strong>。</li></ul></li><li><p>如果安装MySQL 5. 7 版本的话，选择<code>Archives</code>，接着选择MySQL 5. 7 的相应版本即可。这里下载最近期的MySQL 5. 7. 34 版本。</p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649307495198.png" alt="1649307495198"></p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649307522933.png" alt="1649307522933"></p></li></ul><h3 id="2-3-MySQL-8-0-版本的安装"><a href="#2-3-MySQL-8-0-版本的安装" class="headerlink" title="2. 3 MySQL 8. 0 版本的安装"></a>2. 3 MySQL 8. 0 版本的安装</h3><p>MySQL下载完成后，找到下载文件，双击进行安装，具体操作步骤如下。</p><h4 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤 1"></a>步骤 1</h4><p>双击下载的mysql-installer-community-8.0.26.0.msi文件，打开安装向导。</p><h4 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤 2"></a>步骤 2</h4><p>打开“Choosing a Setup Type”（选择安装类型）窗口，在其中列出了 5 种安装类型，分别是Developer Default（默认安装类型）、Server only（仅作为服务器）、Client only（仅作为客户端）、Full（完全安装）、Custom（自定义安装）。这里选择“Custom（自定义安装）”类型按钮，单击“Next(下一步)”按钮。</p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649307637871.png" alt="1649307637871"></p><h4 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤 3"></a>步骤 3</h4><p>打开“Select Products” （选择产品）窗口，可以定制需要安装的产品清单。例如，选择“MySQL Server 8.0.26-X64”后，单击“→”添加按钮，即可选择安装MySQL服务器，如图所示。采用通用的方法，可以添加其他你需要安装的产品。</p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649307675772.png" alt="1649307675772"></p><p>此时如果直接“Next”（下一步），则产品的安装路径是默认的。如果想要自定义安装目录，则可以选中对应的产品，然后在下面会出现“Advanced Options”（高级选项）的超链接。</p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649307702104.png" alt="1649307702104"></p><p>单击“Advanced Options”（高级选项）则会弹出安装目录的选择窗口，如图所示，此时你可以分别设置MySQL的服务程序安装目录和数据存储目录。如果不设置，默认分别在C盘的Program Files目录和ProgramData目录（这是一个隐藏目录）。如果自定义安装目录，请避免“中文”目录。另外，建议服务目录和数据目录分开存放。</p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649307732585.png" alt="1649307732585"></p><h4 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤 4"></a>步骤 4</h4><p>在上一步选择好要安装的产品之后，单击“Next”（下一步）进入确认窗口，如图所示。单击<br>“Execute”（执行）按钮开始安装。</p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649307762968.png" alt="1649307762968"></p><h4 id="步骤-5"><a href="#步骤-5" class="headerlink" title="步骤 5"></a>步骤 5</h4><p>安装完成后在“Status”（状态）列表下将显示“Complete”（安装完成），如图所示。</p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649307787117.png" alt="1649307787117"></p><h3 id="2-4-配置MySQL-8-0"><a href="#2-4-配置MySQL-8-0" class="headerlink" title="2. 4 配置MySQL 8. 0"></a>2. 4 配置MySQL 8. 0</h3><p>MySQL安装之后，需要对服务器进行配置。具体的配置步骤如下。</p><h4 id="步骤-1-1"><a href="#步骤-1-1" class="headerlink" title="步骤 1"></a>步骤 1</h4><p>在上一个小节的最后一步，单击“Next”（下一步）按钮，就可以进入产品配置窗口。</p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649307826152.png" alt="1649307826152"></p><h4 id="步骤-2-1"><a href="#步骤-2-1" class="headerlink" title="步骤 2"></a>步骤 2</h4><p>单击“Next”（下一步）按钮，进入MySQL服务器类型配置窗口，如图所示。端口号一般选择默认<br>端口号 3306 。</p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649307859122.png" alt="1649307859122"></p><p>其中，“Config Type”选项用于设置服务器的类型。单击该选项右侧的下三角按钮，即可查看 3 个选项，如图所示。</p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649307876000.png" alt="1649307876000"></p><ul><li><code>Development Machine（开发机器）</code>：该选项代表典型个人用桌面工作站。此时机器上需要运行多个应用程序，那么MySQL服务器将占用最少的系统资源。</li><li><code>Server Machine（服务器）</code>：该选项代表服务器，MySQL服务器可以同其他服务器应用程序一起运行，例如Web服务器等。MySQL服务器配置成适当比例的系统资源。</li><li><code>Dedicated Machine（专用服务器）</code>：该选项代表只运行MySQL服务的服务器。MySQL服务器配置成使用所有可用系统资源。</li></ul><h4 id="步骤-3-1"><a href="#步骤-3-1" class="headerlink" title="步骤 3"></a>步骤 3</h4><p>单击“Next”（下一步）按钮，打开设置授权方式窗口。其中，上面的选项是MySQL8.0提供的新的授权方式，采用SHA256基础的密码加密方法；下面的选项是传统授权方法（保留5.x版本兼容性）。</p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649307976040.png" alt="1649307976040"></p><h4 id="步骤-4-1"><a href="#步骤-4-1" class="headerlink" title="步骤 4"></a>步骤 4</h4><p>单击“Next”（下一步）按钮，打开设置服务器root超级管理员的密码窗口，如图所示，需要输入两次同样的登录密码。也可以通过“Add User”添加其他用户，添加其他用户时，需要指定用户名、允许该用户名在哪台&#x2F;哪些主机上登录，还可以指定用户角色等。此处暂不添加用户，用户管理在MySQL高级特性篇中讲解。</p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649308004239.png" alt="1649308004239"></p><h4 id="步骤-5-1"><a href="#步骤-5-1" class="headerlink" title="步骤 5"></a>步骤 5</h4><p>单击“Next”（下一步）按钮，打开设置服务器名称窗口，如图所示。该服务名会出现在Windows服务列表中，也可以在命令行窗口中使用该服务名进行启动和停止服务。本书将服务名设置为“MySQL80”。如果希望开机自启动服务，也可以勾选“Start the MySQL Server at System Startup”选项（推荐）。</p><p>下面是选择以什么方式运行服务？可以选择“Standard System Account”(标准系统用户)或者“Custom User”(自定义用户)中的一个。这里推荐前者。</p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649308064878.png" alt="1649308064878"></p><h4 id="步骤-6"><a href="#步骤-6" class="headerlink" title="步骤 6"></a>步骤 6</h4><p>单击“Next”（下一步）按钮，打开确认设置服务器窗口，单击“Execute”（执行）按钮。</p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649308088656.png" alt="1649308088656"></p><h4 id="步骤-7"><a href="#步骤-7" class="headerlink" title="步骤 7"></a>步骤 7</h4><p>完成配置，如图所示。单击“Finish”（完成）按钮，即可完成服务器的配置。</p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649308108259.png" alt="1649308108259"></p><h4 id="步骤-8"><a href="#步骤-8" class="headerlink" title="步骤 8"></a>步骤 8</h4><p>如果还有其他产品需要配置，可以选择其他产品，然后继续配置。如果没有，直接选择“Next”（下一步），直接完成整个安装和配置过程。</p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649308137634.png" alt="1649308137634"></p><h4 id="步骤-9"><a href="#步骤-9" class="headerlink" title="步骤 9"></a>步骤 9</h4><p>结束安装和配置。</p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649308169934.png" alt="1649308169934"></p><h3 id="2-5-配置MySQL-8-0-环境变量"><a href="#2-5-配置MySQL-8-0-环境变量" class="headerlink" title="2. 5 配置MySQL 8. 0 环境变量"></a>2. 5 配置MySQL 8. 0 环境变量</h3><p>如果不配置MySQL环境变量，就不能在命令行直接输入MySQL登录命令。下面说如何配置MySQL的环境变量：</p><ul><li>步骤 1 ：在桌面上右击【此电脑】图标，在弹出的快捷菜单中选择【属性】菜单命令。</li><li>步骤 2 ：打开【系统】窗口，单击【高级系统设置】链接。</li><li>步骤 3 ：打开【系统属性】对话框，选择【高级】选项卡，然后单击【环境变量】按钮。</li><li>步骤 4 ：打开【环境变量】对话框，在系统变量列表中选择path变量。</li><li>步骤5 ：单击【编辑】按钮，在【编辑环境变量】对话框中，将MySQL应用程序的bin目录（C:\ProgramFiles\MySQL\MySQL Server 8.0\bin）添加到变量值中，用分号将其与其他路径分隔开。</li><li>步骤 6 ：添加完成之后，单击【确定】按钮，这样就完成了配置path变量的操作，然后就可以直接输入MySQL命令来登录数据库了。</li></ul><hr><h2 id="3-MySQL的登录"><a href="#3-MySQL的登录" class="headerlink" title="3. MySQL的登录"></a>3. MySQL的登录</h2><hr><h3 id="3-1-服务的启动与停止"><a href="#3-1-服务的启动与停止" class="headerlink" title="3. 1 服务的启动与停止"></a>3. 1 服务的启动与停止</h3><p>MySQL安装完毕之后，需要启动服务器进程，不然客户端无法连接数据库。</p><p>在前面的配置过程中，已经将MySQL安装为Windows服务，并且勾选当Windows启动、停止时，MySQL也自动启动、停止。</p><h4 id="方式-1-：使用图形界面工具"><a href="#方式-1-：使用图形界面工具" class="headerlink" title="方式 1 ：使用图形界面工具"></a>方式 1 ：使用图形界面工具</h4><ul><li><p>步骤 1 ：打开windows服务</p><ul><li>方式 1 ：计算机（点击鼠标右键）→ 管理（点击）→ 服务和应用程序（点击）→ 服务（点击）</li><li>方式 2 ：控制面板（点击）→ 系统和安全（点击）→ 管理工具（点击）→ 服务（点击）</li><li>方式 3 ：任务栏（点击鼠标右键）→ 启动任务管理器（点击）→ 服务（点击）</li><li>方式 4 ：单击【开始】菜单，在搜索框中输入“services.msc”，按Enter键确认</li></ul></li><li><p>步骤 2 ：找到MySQL80（点击鼠标右键）→ 启动或停止（点击）</p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649308460985.png" alt="1649308460985"></p></li></ul><h4 id="方式-2-：使用命令行工具"><a href="#方式-2-：使用命令行工具" class="headerlink" title="方式 2 ：使用命令行工具"></a>方式 2 ：使用命令行工具</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动　MySQL　服务命令</span>net　start　MySQL服务名<span class="token comment"># 停止　MySQL　服务命令</span>net　stop　MySQL服务名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649308814635.png" alt="1649308814635"></p><h5 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h5><ul><li>start和stop后面的服务名应与之前配置时指定的服务名一致。</li><li>如果当你输入命令后，提示“拒绝服务”，请以<code>系统管理员身份</code>打开命令提示符界面重新尝试。</li></ul><h3 id="3-2-自带客户端的登录与退出"><a href="#3-2-自带客户端的登录与退出" class="headerlink" title="3. 2 自带客户端的登录与退出"></a>3. 2 自带客户端的登录与退出</h3><p>当MySQL服务启动完成后，便可以通过客户端来登录MySQL数据库。注意：确认服务是开启的。</p><h4 id="登录方式-1-：MySQL自带客户端"><a href="#登录方式-1-：MySQL自带客户端" class="headerlink" title="登录方式 1 ：MySQL自带客户端"></a>登录方式 1 ：MySQL自带客户端</h4><p>开始菜单 → 所有程序 → MySQL → MySQL 8.0 Command Line Client</p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649308894051.png" alt="1649308894051"></p><ul><li>说明：仅限于root用户</li></ul><h4 id="登录方式-2-：windows命令行"><a href="#登录方式-2-：windows命令行" class="headerlink" title="登录方式 2 ：windows命令行"></a>登录方式 2 ：windows命令行</h4><ul><li><p>格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql -h 主机名 -P 端口号 -u 用户名 -p密码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>举例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql -h localhost -P <span class="token number">3306</span> -u root -pabc123  <span class="token comment"># 这里我设置的root用户的密码是abc123</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649309163663.png" alt="1649309163663"></p></li><li><p>注意：<br>1．-p与密码之间不能有空格，其他参数名与参数值之间可以有空格也可以没有空格。如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql -hlocalhost -P3306 -uroot -pabc123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>２．密码建议在下一行输入，保证安全</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql -h localhost -P <span class="token number">3306</span> -u root -pEnter password:****<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3．客户端和服务器在同一台机器上，所以输入localhost或者IP地址127.0.0.1。同时，因为是连接本机： -hlocalhost就可以省略，如果端口号没有修改：-P3306也可以省略</p><p>简写成：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql -u root -pEnter password:****<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>连接成功后，有关于MySQL Server服务版本的信息，还有第几次连接的id标识。</p><p>也可以在命令行通过以下方式获取MySQL Server服务版本的信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">c:<span class="token punctuation">\</span><span class="token operator">></span> mysql -V<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">c:<span class="token punctuation">\</span><span class="token operator">></span> mysql --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或<strong>登录</strong>后，通过以下方式查看当前版本信息：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select version();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">exit或quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="4-MySQL演示使用"><a href="#4-MySQL演示使用" class="headerlink" title="4. MySQL演示使用"></a>4. MySQL演示使用</h2><hr><h3 id="4-1-MySQL的使用演示"><a href="#4-1-MySQL的使用演示" class="headerlink" title="4. 1 MySQL的使用演示"></a>4. 1 MySQL的使用演示</h3><h4 id="1-查看所有的数据库"><a href="#1-查看所有的数据库" class="headerlink" title="1 .查看所有的数据库"></a>1 .查看所有的数据库</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show databases;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>“information_schema”是 MySQL 系统自带的数据库，主要保存 MySQL 数据库服务器的系统信息，比如数据库的名称、数据表的名称、字段名称、存取权限、数据文件 所在的文件夹和系统使用的文件夹，等等。</li><li>“performance_schema”是 MySQL 系统自带的数据库，可以用来监控 MySQL 的各类性能指标。</li><li>“sys”数据库是 MySQL 系统自带的数据库，主要作用是以一种更容易被理解的方式展示 MySQL 数据库服务器的各类性能指标，帮助系统管理员和开发人员监控 MySQL 的技术性能。</li><li>“mysql”数据库保存了 MySQL 数据库服务器运行时需要的系统信息，比如数据文件夹、当前使用的字符集、约束检查信息，等等。</li></ul><p>为什么 Workbench 里面我们只能看到“demo”和“sys”这 2 个数据库呢？</p><p>这是因为，Workbench 是图形化的管理工具，主要面向开发人 员，“demo”和“sys”这 2 个数据库已经够用了。如果有特殊需求，比如，需要监控 MySQL 数据库各项性能指标、直接操作 MySQL 数据库系统文件等，可以由 DBA 通过 SQL 语句，查看其它的系统数据库。</p><h4 id="2-、创建自己的数据库"><a href="#2-、创建自己的数据库" class="headerlink" title="2 、创建自己的数据库"></a>2 、创建自己的数据库</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create database 数据库名;#创建atguigudb数据库，该名称不能与已经存在的数据库重名。create database atguigudb;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-、使用自己的数据库"><a href="#3-、使用自己的数据库" class="headerlink" title="3 、使用自己的数据库"></a>3 、使用自己的数据库</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">use 数据库名;#使用atguigudb数据库use atguigudb;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>说明：如果没有使用use语句，后面针对数据库的操作也没有加“数据名”的限定，那么会报“ERROR 1046(3D000): No database selected”（没有选择数据库）</p><p>使用完use语句之后，如果接下来的SQL都是针对一个数据库操作的，那就不用重复use了，如果要针对另一个数据库操作，那么要重新use。</p><h4 id="4-、查看某个库的所有表格"><a href="#4-、查看某个库的所有表格" class="headerlink" title="4 、查看某个库的所有表格"></a>4 、查看某个库的所有表格</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show tables;  #要求前面有use语句show tables from 数据库名;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="5-、创建新的表格"><a href="#5-、创建新的表格" class="headerlink" title="5 、创建新的表格"></a>5 、创建新的表格</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table 表名称(字段名 数据类型,字段名 数据类型);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>说明：如果是最后一个字段，后面就用加逗号，因为逗号的作用是分割每个字段。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#创建学生表create table student(id int,name varchar( 20 )  #说名字最长不超过 20 个字符);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-、查看一个表的数据"><a href="#6-、查看一个表的数据" class="headerlink" title="6 、查看一个表的数据"></a>6 、查看一个表的数据</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from 数据库表名称;#查看学生表的数据select * from student;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-、添加一条记录"><a href="#7-、添加一条记录" class="headerlink" title="7 、添加一条记录"></a>7 、添加一条记录</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">insert into 表名称 values(值列表);#添加两条记录到student表中insert into student values( 1 ,&#39;张三&#39;);insert into student values( 2 ,&#39;李四&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>报错：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; insert into student values( 1 ,&#39;张三&#39;);ERROR 1366 (HY000): Incorrect string value: &#39;\xD5\xC5\xC8\xFD&#39; for column &#39;name&#39; at　row 1mysql&gt; insert into student values( 2 ,&#39;李四&#39;);ERROR 1366 (HY000): Incorrect string value: &#39;\xC0\xEE\xCB\xC4&#39; for column &#39;name&#39; at　row 1mysql&gt; show create table student;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字符集的问题。</p><h4 id="8-、查看表的创建信息"><a href="#8-、查看表的创建信息" class="headerlink" title="8 、查看表的创建信息"></a>8 、查看表的创建信息</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show create table 表名称\G#查看student表的详细创建信息show create table student\G#结果如下*************************** 1. row ***************************Table: studentCreate Table: CREATE TABLE &#96;student&#96; (&#96;id&#96; int( 11 ) DEFAULT NULL,&#96;name&#96; varchar( 20 ) DEFAULT NULL) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;latin11 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的结果显示student的表格的默认字符集是“latin1”不支持中文。</p><h4 id="9-、查看数据库的创建信息"><a href="#9-、查看数据库的创建信息" class="headerlink" title="9 、查看数据库的创建信息"></a>9 、查看数据库的创建信息</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show create database 数据库名\G#查看atguigudb数据库的详细创建信息show create database atguigudb\G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面的结果显示atguigudb数据库也不支持中文，字符集默认是latin1。</p><h4 id="10-、删除表格"><a href="#10-、删除表格" class="headerlink" title="10 、删除表格"></a>10 、删除表格</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">drop table 表名称;#删除学生表drop table student;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="11-、删除数据库"><a href="#11-、删除数据库" class="headerlink" title="11 、删除数据库"></a>11 、删除数据库</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">drop database 数据库名;#删除atguigudb数据库drop database atguigudb;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-MySQL的编码设置"><a href="#4-2-MySQL的编码设置" class="headerlink" title="4. 2 MySQL的编码设置"></a>4. 2 MySQL的编码设置</h3><p><strong>MySQL 8. 0 中</strong></p><p>在MySQL 8.0版本之前，默认字符集为latin1，utf8字符集指向的是utf8mb3。网站开发人员在数据库设计的时候往往会将编码修改为utf8字符集。如果遗忘修改默认的编码，就会出现乱码的问题。从MySQL 8.0开始，数据库的默认编码改为<code>utf8mb4</code>，从而避免了上述的乱码问题。</p><hr><h2 id="5-MySQL图形化管理工具"><a href="#5-MySQL图形化管理工具" class="headerlink" title="5. MySQL图形化管理工具"></a>5. MySQL图形化管理工具</h2><hr><p>MySQL图形化管理工具极大地方便了数据库的操作与管理，常用的图形化管理工具有：MySQL<br>Workbench、phpMyAdmin、Navicat Preminum、MySQLDumper、SQLyog、dbeaver、MySQL ODBCConnector。</p><h3 id="Navicat"><a href="#Navicat" class="headerlink" title="Navicat"></a>Navicat</h3><p>Navicat MySQL是一个强大的MySQL数据库服务器管理和开发工具。它可以与任何3.21或以上版本的MySQL一起工作，支持触发器、存储过程、函数、事件、视图、管理用户等，对新手来说易学易用。其精心设计的图形用户界面可以让用户用一种安全简便的方式来快速方便地创建、组织、访问和共享信息。Navicat支持中文，有免费版本提供。下载地址：**<a href="http://www.navicat.com/">http://www.navicat.com/</a>** 。</p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649310749563.png" alt="1649310749563"></p><h3 id="可能出现连接问题"><a href="#可能出现连接问题" class="headerlink" title="可能出现连接问题"></a>可能出现连接问题</h3><p>有些图形界面工具，特别是旧版本的图形界面工具，在连接MySQL8时出现“Authentication plugin ‘caching_sha2_password’ cannot be loaded”错误。</p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649310934310.png" alt="1649310934310"></p><p>出现这个原因是MySQL8之前的版本中加密规则是mysql_native_password，而在MySQL8之后，加密规则是caching_sha2_password。解决问题方法有两种，第一种是升级图形界面工具版本，第二种是把MySQL8用户登录密码加密规则还原成mysql_native_password。</p><p>第二种解决方案如下，用命令行登录MySQL数据库之后，执行如下命令修改用户密码加密规则并更新用户密码，这里修改用户名为“root@localhost”的用户密码规则为“mysql_native_password”，密码值为“123456”，如图所示。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#使用mysql数据库USE mysql;#修改&#39;root&#39;@&#39;localhost&#39;用户的密码规则和密码ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;abc123&#39;;#刷新权限FLUSH PRIVILEGES;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649311079248.png" alt="1649311079248"></p><hr><h2 id="6-MySQL目录结构与源码"><a href="#6-MySQL目录结构与源码" class="headerlink" title="6. MySQL目录结构与源码"></a>6. MySQL目录结构与源码</h2><hr><h3 id="6-1-主要目录结构"><a href="#6-1-主要目录结构" class="headerlink" title="6. 1 主要目录结构"></a>6. 1 主要目录结构</h3><table><thead><tr><th>MySQL的目录结构</th><th>说明</th></tr></thead><tbody><tr><td>bin目录</td><td>所有MySQL的可执行文件。如：mysql.exe</td></tr><tr><td>MySQLInstanceConfig.exe</td><td>数据库的配置向导，在安装时出现的内容</td></tr><tr><td>data目录</td><td>系统数据库所在的目录</td></tr><tr><td>my.ini文件</td><td>MySQL的主要配置文件</td></tr><tr><td>c:\ProgramData\MySQL\MySQL Server 8.0\data\</td><td>用户创建的数据库所在的目录</td></tr></tbody></table><h3 id="6-2-MySQL-源代码获取"><a href="#6-2-MySQL-源代码获取" class="headerlink" title="6. 2 MySQL 源代码获取"></a>6. 2 MySQL 源代码获取</h3><p>首先，你要进入 MySQL下载界面。 这里你不要选择用默认的“Microsoft Windows”，而是要通过下拉栏，找到“Source Code”，在下面的操作系统版本里面， 选择 Windows（Architecture Independent），然后点击下载。</p><p>接下来，把下载下来的压缩文件解压，我们就得到了 MySQL 的源代码。</p><p>MySQL 是用 C++ 开发而成的，我简单介绍一下源代码的组成。</p><p>mysql-8.0.22 目录下的各个子目录，包含了 MySQL 各部分组件的源代码：</p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649311641907.png" alt="1649311641907"></p><ul><li>sql 子目录是 MySQL 核心代码；</li><li>libmysql 子目录是客户端程序 API；</li><li>mysql-test 子目录是测试工具；</li><li>mysys 子目录是操作系统相关函数和辅助函数；</li></ul><p>源代码可以用记事本打开查看，如果你有 C++ 的开发环境，也可以在开发环境中打开查看。</p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649311674506.png" alt="1649311674506"></p><p>如上图所示，源代码并不神秘，就是普通的 C++ 代码，跟你熟悉的一样，而且有很多注释，可以帮助你理解。阅读源代码就像在跟 MySQL 的开发人员对话一样，十分有趣。</p><hr><h2 id="7-常见问题的解决-课外内容"><a href="#7-常见问题的解决-课外内容" class="headerlink" title="7. 常见问题的解决(课外内容)"></a>7. 常见问题的解决(课外内容)</h2><hr><h3 id="问题-1-：root用户密码忘记，重置的操作"><a href="#问题-1-：root用户密码忘记，重置的操作" class="headerlink" title="问题 1 ：root用户密码忘记，重置的操作"></a>问题 1 ：root用户密码忘记，重置的操作</h3><ol><li>通过任务管理器或者服务管理，关掉mysqld(服务进程)</li><li>通过命令行+特殊参数开启mysqld mysqld – defaults-file&#x3D;”D:\ProgramFiles\mysql\MySQLServer5.7Data\my.ini” –skip-grant-tables</li><li>此时，mysqld服务进程已经打开。并且不需要权限检查</li><li>mysql -uroot 无密码登陆服务器。另启动一个客户端进行</li><li>修改权限表 （ 1 ） use mysql; （ 2 ）update user set authentication_string&#x3D;password(‘新密码’) where user&#x3D;’root’ and Host&#x3D;’localhost’; （ 3 ）flush privileges;</li><li>通过任务管理器，关掉mysqld服务进程。</li><li>再次通过服务管理，打开mysql服务。</li><li>即可用修改后的新密码登陆。</li></ol><h3 id="问题-2-：mysql命令报“不是内部或外部命令”"><a href="#问题-2-：mysql命令报“不是内部或外部命令”" class="headerlink" title="问题 2 ：mysql命令报“不是内部或外部命令”"></a>问题 2 ：mysql命令报“不是内部或外部命令”</h3><p>如果输入mysql命令报“不是内部或外部命令”，把mysql安装目录的bin目录配置到环境变量path中。如下：</p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649311870661.png" alt="1649311870661"></p><h3 id="问题-3-：错误ERROR-：没有选择数据库就操作表格和数据"><a href="#问题-3-：错误ERROR-：没有选择数据库就操作表格和数据" class="headerlink" title="问题 3 ：错误ERROR ：没有选择数据库就操作表格和数据"></a>问题 3 ：错误ERROR ：没有选择数据库就操作表格和数据</h3><table><thead><tr><th>ERROR 1046 (3D000): No database selected</th></tr></thead><tbody><tr><td>解决方案一：就是使用“USE 数据库名;”语句，这样接下来的语句就默认针对这个数据库进行操作</td></tr><tr><td>解决方案二：就是所有的表对象前面都加上“数据库.”</td></tr></tbody></table><h3 id="问题-4-：命令行客户端的字符集问题"><a href="#问题-4-：命令行客户端的字符集问题" class="headerlink" title="问题 4 ：命令行客户端的字符集问题"></a>问题 4 ：命令行客户端的字符集问题</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; INSERT INTO t_stu VALUES( 1 ,&#39;张三&#39;,&#39;男&#39;);ERROR 1366 (HY000): Incorrect string value: &#39;\xD5\xC5\xC8\xFD&#39; for column &#39;sname&#39; at row 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>原因：服务器端认为你的客户端的字符集是utf- 8 ，而实际上你的客户端的字符集是GBK。</p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649311972853.png" alt="1649311972853"></p><p>查看所有字符集： <strong>SHOW VARIABLES LIKE ‘character_set_%’;</strong></p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649311995332.png" alt="1649311995332"></p><p>解决方案，设置当前连接的客户端字符集 <strong>“SET NAMES GBK;”</strong></p><p><img src="/../pic/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/1649312040335.png" alt="1649312040335"></p><h3 id="问题-5-：修改数据库和表的字符编码"><a href="#问题-5-：修改数据库和表的字符编码" class="headerlink" title="问题 5 ：修改数据库和表的字符编码"></a>问题 5 ：修改数据库和表的字符编码</h3><p>修改编码：</p><ol><li>先停止服务</li><li>修改my.ini文件</li><li>重新启动服务</li></ol><p>说明：</p><p>如果是在修改my.ini之前建的库和表，那么库和表的编码还是原来的Latin1，要么删了重建，要么使用alter语句修改编码。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">create</span> <span class="token keyword">database</span> <span class="token number">0728</span> db <span class="token keyword">charset</span> Latin1<span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">use</span> <span class="token number">0728</span>db<span class="token punctuation">;</span><span class="token keyword">Database</span> changedmysql<span class="token operator">></span> <span class="token keyword">create</span> <span class="token keyword">table</span> student <span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token punctuation">,</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span> <span class="token number">20</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">charset</span> Latin1<span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> student\G<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">1.</span> <span class="token keyword">row</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">Table</span>: student<span class="token keyword">Create</span> <span class="token keyword">Table</span>: <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>student<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span> <span class="token number">11</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span> <span class="token number">20</span> <span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>latin1<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">charset</span> utf8<span class="token punctuation">;</span> <span class="token comment">#修改表字符编码为UTF8</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>Records: <span class="token number">0</span> Duplicates: <span class="token number">0</span> <span class="token keyword">Warnings</span>: <span class="token number">0</span>mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> student\G<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">1.</span> <span class="token keyword">row</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">Table</span>: student<span class="token keyword">Create</span> <span class="token keyword">Table</span>: <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>student<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span> <span class="token number">11</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span> <span class="token number">20</span> <span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> latin1 <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token comment">#字段仍然是latin1编码</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">modify</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span> <span class="token number">20</span> <span class="token punctuation">)</span> <span class="token keyword">charset</span> utf8<span class="token punctuation">;</span> <span class="token comment">#修改字段字符编码为UTF8</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.05</span> sec<span class="token punctuation">)</span>Records: <span class="token number">0</span> Duplicates: <span class="token number">0</span> <span class="token keyword">Warnings</span>: <span class="token number">0</span>mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> student\G<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">1.</span> <span class="token keyword">row</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">Table</span>: student<span class="token keyword">Create</span> <span class="token keyword">Table</span>: <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>student<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span> <span class="token number">11</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span> <span class="token number">20</span> <span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">database</span> <span class="token number">0728</span> db<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------+-----------------------------------------------------------------+</span><span class="token operator">|</span><span class="token keyword">Database</span><span class="token operator">|</span> <span class="token keyword">Create</span> <span class="token keyword">Database</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+-------------------------------------------------------------------+</span><span class="token operator">|</span> <span class="token number">0728</span> db<span class="token operator">|</span> <span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token identifier"><span class="token punctuation">`</span>0728db<span class="token punctuation">`</span></span> <span class="token comment">/*!40100 DEFAULT CHARACTER SET latin1 */</span><span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------+-------------------------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">alter</span> <span class="token keyword">database</span> <span class="token number">0728</span> db <span class="token keyword">charset</span> utf8<span class="token punctuation">;</span> <span class="token comment">#修改数据库的字符编码为utf8</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">database</span> <span class="token number">0728</span> db<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------+-----------------------------------------------------------------+</span><span class="token operator">|</span><span class="token keyword">Database</span><span class="token operator">|</span> <span class="token keyword">Create</span> <span class="token keyword">Database</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+-----------------------------------------------------------------+</span><span class="token operator">|</span> <span class="token number">0728</span> db <span class="token operator">|</span> <span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token identifier"><span class="token punctuation">`</span>0728db<span class="token punctuation">`</span></span> <span class="token comment">/*!40100 DEFAULT CHARACTER SET utf8 */</span><span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+-----------------------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基本的SELECT语句</title>
      <link href="/2022/07/17/di-03-zhang-ji-ben-de-select-yu-ju/"/>
      <url>/2022/07/17/di-03-zhang-ji-ben-de-select-yu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="第03章-基本的SELECT语句"><a href="#第03章-基本的SELECT语句" class="headerlink" title="第03章_基本的SELECT语句"></a>第03章_基本的SELECT语句</h1><h2 id="1-SQL概述"><a href="#1-SQL概述" class="headerlink" title="1. SQL概述"></a>1. SQL概述</h2><hr><h3 id="1-1-SQL背景知识"><a href="#1-1-SQL背景知识" class="headerlink" title="1. 1 SQL背景知识"></a>1. 1 SQL背景知识</h3><ul><li>1946 年，世界上第一台电脑诞生，如今，借由这台电脑发展起来的互联网已经自成江湖。在这几十年里，无数的技术、产业在这片江湖里沉浮，有的方兴未艾，有的已经几幕兴衰。但在这片浩荡的波动里，有一门技术从未消失，甚至“老当益壮”，那就是 SQL。<ul><li>45 年前，也就是 1974 年，IBM 研究员发布了一篇揭开数据库技术的论文《SEQUEL：一门结构化的英语查询语言》，直到今天这门结构化的查询语言并没有太大的变化，相比于其他语言，<code>SQL 的半衰期可以说是非常长</code>了。</li></ul></li><li>不论是前端工程师，还是后端算法工程师，都一定会和数据打交道，都需要了解如何又快又准确地提取自己想要的数据。更别提数据分析师了，他们的工作就是和数据打交道，整理不同的报告，以便指导业务决策。</li><li>SQL（Structured Query Language，结构化查询语言）是使用关系模型的数据库应用语言，<code>与数据直接打交道</code>，由<code>IBM</code>上世纪 70 年代开发出来。后由美国国家标准局（ANSI）开始着手制定SQL标准，先后有<code>SQL- 86</code> ，<code>SQL- 89</code> ，<code>SQL- 92</code> ，<code>SQL- 99</code> 等标准。<ul><li>SQL 有两个重要的标准，分别是 SQL92 和 SQL99，它们分别代表了 92 年和 99 年颁布的 SQL 标准，我们今天使用的 SQL 语言依然遵循这些标准。</li></ul></li><li>不同的数据库生产厂商都支持SQL语句，但都有特有内容。</li></ul><p><img src="/../pic/%E7%AC%AC03%E7%AB%A0_%E5%9F%BA%E6%9C%AC%E7%9A%84SELECT%E8%AF%AD%E5%8F%A5/1649480531430.png" alt="1649480531430"></p><h3 id="1-2-SQL语言排行榜"><a href="#1-2-SQL语言排行榜" class="headerlink" title="1. 2 SQL语言排行榜"></a>1. 2 SQL语言排行榜</h3><p>自从 SQL 加入了 TIOBE 编程语言排行榜，就一直保持在 Top 10。</p><p><img src="/../pic/%E7%AC%AC03%E7%AB%A0_%E5%9F%BA%E6%9C%AC%E7%9A%84SELECT%E8%AF%AD%E5%8F%A5/1649480552889.png" alt="1649480552889"></p><h3 id="1-3-SQL-分类"><a href="#1-3-SQL-分类" class="headerlink" title="1. 3 SQL 分类"></a>1. 3 SQL 分类</h3><p>SQL语言在功能上主要分为如下 3 大类：</p><ul><li><strong>DDL（Data Definition Languages、数据定义语言）</strong> ，这些语句定义了不同的数据库、表、视图、索引等数据库对象，还可以用来创建、删除、修改数据库和数据表的结构。<ul><li>主要的语句关键字包括<code>CREATE</code>、<code>DROP</code>、<code>ALTER</code>等。</li></ul></li><li><strong>DML（Data Manipulation Language、数据操作语言）</strong> ，用于添加、删除、更新和查询数据库记录，并检查数据完整性。<ul><li>主要的语句关键字包括<code>INSERT</code>、<code>DELETE</code>、<code>UPDATE</code>、<code>SELECT</code>等。</li><li><strong>SELECT是SQL语言的基础，最为重要。</strong></li></ul></li><li><code>DCL（Data Control Language、数据控制语言）</code> ，用于定义数据库、表、字段、用户的访问权限和安全级别。<ul><li>主要的语句关键字包括<code>GRANT</code>、<code>REVOKE</code>、<code>COMMIT</code>、<code>ROLLBACK</code>、<code>SAVEPOINT</code>等。</li></ul></li></ul><blockquote><p>因为查询语句使用的非常的频繁，所以很多人把查询语句单拎出来一类：DQL（数据查询语言）。还有单独将<code>COMMIT</code>、<code>ROLLBACK</code> 取出来称为TCL （Transaction Control Language，事务控制语言）。</p></blockquote><hr><h2 id="2-SQL语言的规则与规范"><a href="#2-SQL语言的规则与规范" class="headerlink" title="2. SQL语言的规则与规范"></a>2. SQL语言的规则与规范</h2><hr><h3 id="2-1-基本规则"><a href="#2-1-基本规则" class="headerlink" title="2. 1 基本规则"></a>2. 1 基本规则</h3><ul><li>SQL 可以写在一行或者多行。为了提高可读性，各子句分行写，必要时使用缩进</li><li>每条命令以 ; 或 \g 或 \G 结束</li><li>关键字不能被缩写也不能分行</li><li>关于标点符号<ul><li>必须保证所有的()、单引号、双引号是成对结束的</li><li>必须使用英文状态下的半角输入方式</li><li>字符串型和日期时间类型的数据可以使用单引号（’ ‘）表示</li><li>列的别名，尽量使用双引号（” “），而且不建议省略as</li></ul></li></ul><h3 id="2-2-SQL大小写规范-（建议遵守）"><a href="#2-2-SQL大小写规范-（建议遵守）" class="headerlink" title="2. 2 SQL大小写规范 （建议遵守）"></a>2. 2 SQL大小写规范 （建议遵守）</h3><ul><li><strong>MySQL 在 Windows 环境下是大小写不敏感的</strong></li><li>MySQL 在 Linux 环境下是大小写敏感的<ul><li>数据库名、表名、表的别名、变量名是严格区分大小写的</li><li>关键字、函数名、列名(或字段名)、列的别名(字段的别名) 是忽略大小写的。</li></ul></li><li>推荐采用统一的书写规范：<ul><li>数据库名、表名、表别名、字段名、字段别名等都小写</li><li>SQL 关键字、函数名、绑定变量等都大写</li></ul></li></ul><h3 id="2-3-注-释"><a href="#2-3-注-释" class="headerlink" title="2. 3 注 释"></a>2. 3 注 释</h3><p>可以使用如下格式的注释结构</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">单行注释：<span class="token comment">#注释文字(MySQL特有的方式)</span>单行注释：<span class="token comment">-- 注释文字(--后面必须包含一个空格。)</span>多行注释：<span class="token comment">/* 注释文字 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-4-命名规则（暂时了解）"><a href="#2-4-命名规则（暂时了解）" class="headerlink" title="2. 4 命名规则（暂时了解）"></a>2. 4 命名规则（暂时了解）</h3><ul><li>数据库、表名不得超过 30 个字符，变量名限制为 29 个</li><li>必须只能包含 A–Z, a–z, 0–9, _共 63 个字符</li><li>数据库名、表名、字段名等对象名中间不要包含空格</li><li>同一个MySQL软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名</li><li>必须保证你的字段没有和保留字、数据库系统或常用方法冲突。如果坚持使用，请在SQL语句中使用&#96;（着重号）引起来</li><li>保持字段名和类型的一致性，在命名字段并为其指定数据类型的时候一定要保证一致性。假如数据类型在一个表里是整数，那在另一个表里可就别变成字符型了</li></ul><p>举例：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#以下两句是一样的，不区分大小写show databases;SHOW DATABASES;#创建表格#create table student info(...); #表名错误，因为表名有空格create table student_info(...);#其中order使用&#96;&#96;飘号，因为order和系统关键字或系统函数名等预定义标识符重名了CREATE TABLE &#96;order&#96;(id INT,lname VARCHAR( 20 ));select id as &quot;编号&quot;, &#96;name&#96; as &quot;姓名&quot; from t_stu; #起别名时，as都可以省略select id as 编号, &#96;name&#96; as 姓名 from t_stu; #如果字段别名中没有空格，那么可以省略&quot;&quot;select id as 编 号, &#96;name&#96; as 姓 名 from t_stu; #错误，如果字段别名中有空格，那么不能省略&quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-数据导入指令"><a href="#2-5-数据导入指令" class="headerlink" title="2. 5 数据导入指令"></a>2. 5 数据导入指令</h3><p>在命令行客户端登录mysql，使用source指令导入</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; source d:\mysqldb.sqlmysql&gt; desc employees;+----------------+-------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+----------------+-------------+------+-----+---------+-------+| employee_id | int( 6 ) | NO | PRI | 0 | || first_name | varchar( 20 ) | YES | | NULL | || last_name | varchar( 25 ) | NO | | NULL | || email | varchar( 25 ) | NO | UNI | NULL | || phone_number | varchar( 20 ) | YES | | NULL | || hire_date | date | NO | | NULL | || job_id | varchar( 10 ) | NO | MUL | NULL | || salary | double( 8 , 2 ) | YES | | NULL | || commission_pct | double( 2 , 2 ) | YES | | NULL | || manager_id | int( 6 ) | YES | MUL | NULL | || department_id | int( 4 ) | YES | MUL | NULL | |+----------------+-------------+------+-----+---------+-------+11 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="3-基本的SELECT语句"><a href="#3-基本的SELECT语句" class="headerlink" title="3. 基本的SELECT语句"></a>3. 基本的SELECT语句</h2><hr><h3 id="3-0-SELECT…"><a href="#3-0-SELECT…" class="headerlink" title="3. 0 SELECT…"></a>3. 0 SELECT…</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token punctuation">;</span> <span class="token comment">#没有任何子句</span><span class="token keyword">SELECT</span> <span class="token number">9</span> <span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">#没有任何子句</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-1-SELECT-…-FROM"><a href="#3-1-SELECT-…-FROM" class="headerlink" title="3. 1 SELECT … FROM"></a>3. 1 SELECT … FROM</h3><ul><li><p>语法：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 标识选择哪些列<span class="token keyword">FROM</span> 标识从哪个表中选择<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>选择全部列：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> departments<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p><img src="/../pic/%E7%AC%AC03%E7%AB%A0_%E5%9F%BA%E6%9C%AC%E7%9A%84SELECT%E8%AF%AD%E5%8F%A5/1649481543665.png" alt="1649481543665"></p><blockquote><p>一般情况下，除非需要使用表中所有的字段数据，最好不要使用通配符‘*’。使用通配符虽然可以节省输入查询语句的时间，但是获取不需要的列数据通常会降低查询和所使用的应用程序的效率。通配符的优势是，当不知道所需要的列的名称时，可以通过它获取它们。</p><p>在生产环境下，不推荐你直接使用SELECT *进行查询。</p></blockquote><ul><li><p>选择特定的列：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> department_id<span class="token punctuation">,</span> location_id<span class="token keyword">FROM</span> departments<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC03%E7%AB%A0_%E5%9F%BA%E6%9C%AC%E7%9A%84SELECT%E8%AF%AD%E5%8F%A5/1649481593581.png" alt="1649481593581"></p></li></ul><blockquote><p>MySQL中的SQL语句是不区分大小写的，因此SELECT和select的作用是相同的，但是，许多开发人员习惯将关键字大写、数据列和表名小写，读者也应该养成一个良好的编程习惯，这样写出来的代码更容易阅读和维护。</p></blockquote><h3 id="3-2-列的别名"><a href="#3-2-列的别名" class="headerlink" title="3. 2 列的别名"></a>3. 2 列的别名</h3><ul><li>重命名一个列</li><li>便于计算</li><li>紧跟列名，也可以 在列名和别名之间加入关键字AS，别名使用双引号 ，以便在别名中包含空格或特殊的字符并区分大小写。</li><li>AS 可以省略</li><li>建议别名简短，见名知意</li><li>举例</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> last_name <span class="token keyword">AS</span> name<span class="token punctuation">,</span> commission_pct comm<span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC03%E7%AB%A0_%E5%9F%BA%E6%9C%AC%E7%9A%84SELECT%E8%AF%AD%E5%8F%A5/1649481658412.png" alt="1649481658412"></p><p><img src="/../pic/%E7%AC%AC03%E7%AB%A0_%E5%9F%BA%E6%9C%AC%E7%9A%84SELECT%E8%AF%AD%E5%8F%A5/1649481677528.png" alt="1649481677528"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> last_name <span class="token string">"Name"</span><span class="token punctuation">,</span> salary<span class="token operator">*</span> <span class="token number">12</span> <span class="token string">"Annual Salary"</span><span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC03%E7%AB%A0_%E5%9F%BA%E6%9C%AC%E7%9A%84SELECT%E8%AF%AD%E5%8F%A5/1649481740418.png" alt="1649481740418"></p><h3 id="3-3-去除重复行"><a href="#3-3-去除重复行" class="headerlink" title="3. 3 去除重复行"></a>3. 3 去除重复行</h3><p>默认情况下，查询会返回全部行，包括重复行。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> department_id<span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC03%E7%AB%A0_%E5%9F%BA%E6%9C%AC%E7%9A%84SELECT%E8%AF%AD%E5%8F%A5/1649481814105.png" alt="1649481814105"></p><p><strong>在SELECT语句中使用关键字DISTINCT去除重复行</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> department_id<span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC03%E7%AB%A0_%E5%9F%BA%E6%9C%AC%E7%9A%84SELECT%E8%AF%AD%E5%8F%A5/1649481902475.png" alt="1649481902475"></p><p>针对于：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> department_id<span class="token punctuation">,</span>salary<span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里有两点需要注意：</p><ol><li>DISTINCT 需要放到所有列名的前面，如果写成<code>SELECT salary, DISTINCT department_id FROM employees</code>会报错。</li><li>DISTINCT 其实是对后面所有列名的组合进行去重，你能看到最后的结果是 74 条，因为这 74 个部门id不同，都有 salary 这个属性值。如果你想要看都有哪些不同的部门（department_id），只需要写<code>DISTINCT department_id</code>即可，后面不需要再加其他的列名了。</li></ol><h3 id="3-4-空值参与运算"><a href="#3-4-空值参与运算" class="headerlink" title="3.4 空值参与运算"></a>3.4 空值参与运算</h3><ul><li><p>所有运算符或列值遇到null值，运算的结果都为null</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>salary<span class="token punctuation">,</span>commission_pct<span class="token punctuation">,</span><span class="token number">12</span> <span class="token operator">*</span> salary <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">+</span> commission_pct<span class="token punctuation">)</span> <span class="token string">"annual_sal"</span><span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>这里你一定要注意，在 MySQL 里面， 空值不等于空字符串。一个空字符串的长度是 0 ，而一个空值的长度是空。而且，在 MySQL 里面，空值是占用空间的。</p><h3 id="3-5-着重号"><a href="#3-5-着重号" class="headerlink" title="3. 5 着重号"></a>3. 5 着重号</h3><ul><li><p>错误的</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">ORDER</span><span class="token punctuation">;</span>ERROR <span class="token number">1064</span> <span class="token punctuation">(</span> <span class="token number">42000</span> <span class="token punctuation">)</span>: You have an error <span class="token operator">in</span> your <span class="token keyword">SQL</span> syntax<span class="token punctuation">;</span> <span class="token keyword">check</span> the manual thatcorresponds <span class="token keyword">to</span> your MySQL server version <span class="token keyword">for</span> the <span class="token keyword">right</span> syntax <span class="token keyword">to</span> <span class="token keyword">use</span> near <span class="token string">'ORDER'</span> atline <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>正确的</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>ORDER<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----------+------------+</span><span class="token operator">|</span> order_id <span class="token operator">|</span> order_name <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------+------------+</span><span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> shkstart <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> tomcat <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span> dubbo <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------+------------+</span><span class="token number">3</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">`</span>order<span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----------+------------+</span><span class="token operator">|</span> order_id <span class="token operator">|</span> order_name <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------+------------+</span><span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> shkstart <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> tomcat <span class="token operator">|</span><span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span> dubbo <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------+------------+</span><span class="token number">3</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>结论<br>我们需要保证表中的字段、表名等没有和保留字、数据库系统或常用方法冲突。如果真的相同，请在SQL语句中使用一对&#96;&#96;（着重号）引起来。</p></li></ul><h3 id="3-6-查询常数"><a href="#3-6-查询常数" class="headerlink" title="3. 6 查询常数"></a>3. 6 查询常数</h3><p>SELECT 查询还可以对常数进行查询。对的，就是在 SELECT 查询结果中增加一列固定的常数列。这列的取值是我们指定的，而不是从数据表中动态取出的。</p><p>你可能会问为什么我们还要对常数进行查询呢？</p><p>SQL 中的 SELECT 语法的确提供了这个功能，一般来说我们只从一个表中查询数据，通常不需要增加一个固定的常数列，但如果我们想整合不同的数据源，用常数列作为这个表的标记，就需要查询常数。</p><p>比如说，我们想对 employees 数据表中的员工姓名进行查询，同时增加一列字段corporation，这个字段固定值为“尚硅谷”，可以这样写：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token string">'尚硅谷'</span> <span class="token keyword">as</span> corporation<span class="token punctuation">,</span> last_name <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="4-显示表结构"><a href="#4-显示表结构" class="headerlink" title="4. 显示表结构"></a>4. 显示表结构</h2><hr><p>使用DESCRIBE 或 DESC 命令，表示表结构。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DESCRIBE</span> employees<span class="token punctuation">;</span>或<span class="token keyword">DESC</span> employees<span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">desc</span> employees<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----------------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span> <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> employee_id <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span> <span class="token number">6</span> <span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">NO</span> <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">|</span> first_name <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span> <span class="token number">20</span> <span class="token punctuation">)</span> <span class="token operator">|</span> YES <span class="token operator">|</span> <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">|</span> last_name <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span> <span class="token number">25</span> <span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">NO</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">|</span> email <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span> <span class="token number">25</span> <span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">NO</span> <span class="token operator">|</span> UNI <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">|</span> phone_number <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span> <span class="token number">20</span> <span class="token punctuation">)</span> <span class="token operator">|</span> YES <span class="token operator">|</span> <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">|</span> hire_date <span class="token operator">|</span> <span class="token keyword">date</span> <span class="token operator">|</span> <span class="token keyword">NO</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">|</span> job_id <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span> <span class="token number">10</span> <span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">NO</span> <span class="token operator">|</span> MUL <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">|</span> salary <span class="token operator">|</span> <span class="token keyword">double</span><span class="token punctuation">(</span> <span class="token number">8</span> <span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token operator">|</span> YES <span class="token operator">|</span> <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">|</span> commission_pct <span class="token operator">|</span> <span class="token keyword">double</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token operator">|</span> YES <span class="token operator">|</span> <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">|</span> manager_id <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span> <span class="token number">6</span> <span class="token punctuation">)</span> <span class="token operator">|</span> YES <span class="token operator">|</span> MUL <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">|</span> department_id <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span> <span class="token number">4</span> <span class="token punctuation">)</span> <span class="token operator">|</span> YES <span class="token operator">|</span> MUL <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------+-------------+------+-----+---------+-------+</span><span class="token number">11</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，各个字段的含义分别解释如下：</p><ul><li>Field：表示字段名称。</li><li>Type：表示字段类型，这里 barcode、goodsname 是文本型的，price 是整数类型的。</li><li>Null：表示该列是否可以存储NULL值。</li><li>Key：表示该列是否已编制索引。PRI表示该列是表主键的一部分；UNI表示该列是UNIQUE索引的一部分；MUL表示在列中某个给定值允许出现多次。</li><li>Default：表示该列是否有默认值，如果有，那么值是多少。</li><li>Extra：表示可以获取的与给定列有关的附加信息，例如AUTO_INCREMENT等。</li></ul><hr><h2 id="5-过滤数据"><a href="#5-过滤数据" class="headerlink" title="5. 过滤数据"></a>5. 过滤数据</h2><hr><ul><li><p>背景：<br><img src="/../pic/%E7%AC%AC03%E7%AB%A0_%E5%9F%BA%E6%9C%AC%E7%9A%84SELECT%E8%AF%AD%E5%8F%A5/1649482409823.png" alt="1649482409823"></p></li><li><p>语法：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段<span class="token number">1</span><span class="token punctuation">,</span>字段 <span class="token number">2</span><span class="token keyword">FROM</span> 表名<span class="token keyword">WHERE</span> 过滤条件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>使用WHERE 子句，将不满足条件的行过滤掉</li><li><strong>WHERE子句紧随 FROM子句</strong></li></ul></li><li><p>举例</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">xSELECT employee_id<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> job_id<span class="token punctuation">,</span> department_idFROM employeesWHERE department_id <span class="token operator">=</span> <span class="token number">90</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC03%E7%AB%A0_%E5%9F%BA%E6%9C%AC%E7%9A%84SELECT%E8%AF%AD%E5%8F%A5/1649482509162.png" alt="1649482509162"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL运算符</title>
      <link href="/2022/07/17/di-04-zhang-yun-suan-fu/"/>
      <url>/2022/07/17/di-04-zhang-yun-suan-fu/</url>
      
        <content type="html"><![CDATA[<h1 id="第04章-运算符"><a href="#第04章-运算符" class="headerlink" title="第04章_运算符"></a>第04章_运算符</h1><h2 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1. 算术运算符"></a>1. 算术运算符</h2><hr><p>算术运算符主要用于数学运算，其可以连接运算符前后的两个数值或表达式，对数值或表达式进行加（+）、减（-）、乘（*）、除（&#x2F;）和取模（%）运算。</p><p><img src="/../pic/%E7%AC%AC04%E7%AB%A0_%E8%BF%90%E7%AE%97%E7%AC%A6/1649482983589.png" alt="1649482983589"></p><h3 id="1-1加法与减法运算符"><a href="#1-1加法与减法运算符" class="headerlink" title="1.1加法与减法运算符"></a>1.1加法与减法运算符</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token number">100</span> <span class="token punctuation">,</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token number">100</span> <span class="token operator">-</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">50</span> <span class="token punctuation">,</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">50</span> <span class="token operator">-</span> <span class="token number">30</span> <span class="token punctuation">,</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">35.5</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token operator">-</span> <span class="token number">35.</span><span class="token keyword">FROM</span> dual<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-----+---------+---------+----------+--------------+------------+------------+</span><span class="token operator">|</span> <span class="token number">100</span> <span class="token operator">|</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">100</span> <span class="token operator">-</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">50</span> <span class="token operator">|</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">50</span> <span class="token operator">-</span> <span class="token number">30</span> <span class="token operator">|</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">35.5</span> <span class="token operator">|</span> <span class="token number">100</span> <span class="token operator">-</span> <span class="token number">35.5</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----+---------+---------+----------+--------------+------------+------------+</span><span class="token operator">|</span> <span class="token number">100</span> <span class="token operator">|</span> <span class="token number">100</span> <span class="token operator">|</span> <span class="token number">100</span> <span class="token operator">|</span> <span class="token number">150</span> <span class="token operator">|</span> <span class="token number">120</span> <span class="token operator">|</span>  <span class="token number">135.5</span> <span class="token operator">|</span> <span class="token number">64.5</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----+---------+---------+----------+--------------+------------+------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由运算结果可以得出如下结论：</p><blockquote><ul><li>一个整数类型的值对整数进行加法和减法操作，结果还是一个整数；</li><li>一个整数类型的值对浮点数进行加法和减法操作，结果是一个浮点数；</li><li>加法和减法的优先级相同，进行先加后减操作与进行先减后加操作的结果是一样的；</li><li>在Java中，+的左右两边如果有字符串，那么表示字符串的拼接。但是在MySQL中+只表示数值相加。如果遇到非数值类型，先尝试转成数值，如果转失败，就按 0 计算。（补充：MySQL中字符串拼接要使用字符串函数CONCAT()实现）</li></ul></blockquote><h3 id="1-2乘法与除法运算符"><a href="#1-2乘法与除法运算符" class="headerlink" title="1.2乘法与除法运算符"></a>1.2乘法与除法运算符</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token number">100</span> <span class="token punctuation">,</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token operator">/</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">,</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">,</span> <span class="token number">100</span> <span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token operator">DIV</span> <span class="token number">0</span> <span class="token keyword">FROM</span> dual<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-----+---------+-----------+-----------+---------+-----------------+---------+-----------+</span><span class="token operator">|</span> <span class="token number">100</span> <span class="token operator">|</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">|</span> <span class="token number">100</span> <span class="token operator">/</span> <span class="token number">1.0</span> <span class="token operator">|</span> <span class="token number">100</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">100</span> <span class="token operator">/</span><span class="token number">3</span> <span class="token operator">|</span> <span class="token number">100</span> <span class="token operator">DIV</span> <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----+---------+-----------+-----------+---------+-----------------+---------+-----------+</span><span class="token operator">|</span> <span class="token number">100</span> <span class="token operator">|</span> <span class="token number">100</span> <span class="token operator">|</span> <span class="token number">100.0</span> <span class="token operator">|</span>  <span class="token number">100.0000</span> <span class="token operator">|</span> <span class="token number">50.0000</span> <span class="token operator">|</span>  <span class="token number">105.0000</span> <span class="token operator">|</span> <span class="token number">33.3333</span> <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----+---------+-----------+-----------+---------+-----------------+---------+-----------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token comment">#计算出员工的年基本工资</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>salary<span class="token punctuation">,</span>salary <span class="token operator">*</span> <span class="token number">12</span> annual_sal<span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由运算结果可以得出如下结论：</p><blockquote><ul><li>一个数乘以整数 1 和除以整数 1 后仍得原数；</li><li>一个数乘以浮点数 1 和除以浮点数 1 后变成浮点数，数值与原数相等；</li><li>一个数除以整数后，不管是否能除尽，结果都为一个浮点数；</li><li>一个数除以另一个数，除不尽时，结果为一个浮点数，并保留到小数点后 4 位；</li><li>乘法和除法的优先级相同，进行先乘后除操作与先除后乘操作，得出的结果相同。</li><li>在数学运算中， 0 不能用作除数，在MySQL中，一个数除以 0 为NULL。</li></ul></blockquote><h3 id="1-3求模（求余）运算符"><a href="#1-3求模（求余）运算符" class="headerlink" title="1.3求模（求余）运算符"></a>1.3求模（求余）运算符</h3><p>将t22表中的字段 i 对 3 和 5 进行求模（求余）运算。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token number">12</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token punctuation">,</span> <span class="token number">12</span> MOD <span class="token number">5</span> <span class="token keyword">FROM</span> dual<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------+----------+</span><span class="token operator">|</span> <span class="token number">12</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">12</span> MOD <span class="token number">5</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+----------+</span><span class="token operator">|</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+----------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token comment">#筛选出employee_id是偶数的员工</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> employee_id MOD <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到， 100 对 3 求模后的结果为 3 ，对 5 求模后的结果为 0 。</p><hr><h2 id="2-比较运算符"><a href="#2-比较运算符" class="headerlink" title="2. 比较运算符"></a>2. 比较运算符</h2><hr><p>比较运算符用来对表达式左边的操作数和右边的操作数进行比较，比较的结果为真则返回 1 ，比较的结果为假则返回 0 ，其他情况则返回NULL。</p><p>比较运算符经常被用来作为SELECT查询语句的条件来使用，返回符合条件的结果记录。<br><img src="/../pic/%E7%AC%AC04%E7%AB%A0_%E8%BF%90%E7%AE%97%E7%AC%A6/1649483597988.png" alt="1649483597988"></p><h3 id="2-1-等号运算符"><a href="#2-1-等号运算符" class="headerlink" title="2.1 等号运算符"></a>2.1 等号运算符</h3><ul><li>等号运算符（&#x3D;）判断等号两边的值、字符串或表达式是否相等，如果相等则返回 1 ，不相等则返回0 。</li><li>在使用等号运算符时，遵循如下规则：<ul><li>如果等号两边的值、字符串或表达式都为字符串，则MySQL会按照字符串进行比较，其比较的是每个字符串中字符的ANSI编码是否相等。</li><li>如果等号两边的值都是整数，则MySQL会按照整数来比较两个值的大小。</li><li>如果等号两边的值一个是整数，另一个是字符串，则MySQL会将字符串转化为数字进行比较。</li><li>如果等号两边的值、字符串或表达式中有一个为NULL，则比较结果为NULL。</li></ul></li><li>对比：SQL中赋值符号使用 :&#x3D;</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token string">'a'</span> <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span> <span class="token operator">=</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span> <span class="token boolean">NULL</span> <span class="token operator">=</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+---------+-------+-----------+-------------------+-----------+-------------+</span><span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token string">'1'</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token string">'a'</span> <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token operator">|</span> <span class="token punctuation">(</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token string">''</span> <span class="token operator">=</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">=</span> <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+---------+-------+-----------+-------------------+-----------+-------------+</span><span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span>  <span class="token boolean">NULL</span> <span class="token operator">|</span>  <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+---------+-------+-----------+-------------------+-----------+-------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">,</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token string">'abc'</span> <span class="token keyword">FROM</span> dual<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+-----------+-----------+</span><span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token string">'abc'</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token string">'abc'</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+-----------+-----------+</span><span class="token operator">|</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+-----------+-----------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token keyword">warnings</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token comment">#查询salary=10000，注意在Java中比较是==</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>salary <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> salary <span class="token operator">=</span> <span class="token number">10000</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-安全等于运算符"><a href="#2-2-安全等于运算符" class="headerlink" title="2.2 安全等于运算符"></a>2.2 安全等于运算符</h3><p>安全等于运算符（&lt;&#x3D;&gt;）与等于运算符（&#x3D;）的作用是相似的，<code>唯一的区别</code>是‘&lt;&#x3D;&gt;’可以用来对NULL进行判断。在两个操作数均为NULL时，其返回值为 1 ，而不为NULL；当一个操作数为NULL时，其返回值为 0 ，而不为NULL。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token operator">&lt;=></span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">&lt;=></span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token string">'a'</span> <span class="token operator">&lt;=></span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token punctuation">)</span> <span class="token operator">&lt;=></span> <span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span> <span class="token operator">&lt;=></span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token boolean">NULL</span> <span class="token operator">&lt;=></span> <span class="token boolean">NULL</span> <span class="token keyword">FROM</span> dual<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-----------+---------+-------------+---------------------+-------------+---------------+</span><span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">&lt;=></span> <span class="token string">'1'</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">&lt;=></span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token string">'a'</span> <span class="token operator">&lt;=></span> <span class="token string">'a'</span> <span class="token operator">|</span> <span class="token punctuation">(</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token punctuation">)</span> <span class="token operator">&lt;=></span> <span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token string">''</span> <span class="token operator">&lt;=></span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">&lt;=></span> <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----------+---------+-------------+---------------------+-------------+---------------+</span><span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----------+---------+-------------+---------------------+-------------+---------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token comment">#查询commission_pct等于0.</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>commission_pct <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> commission_pct <span class="token operator">=</span> <span class="token number">0.40</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>commission_pct <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> commission_pct <span class="token operator">&lt;=></span> <span class="token number">0.40</span><span class="token punctuation">;</span><span class="token comment">#如果把0.40改成 NULL 呢？</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，使用安全等于运算符时，两边的操作数的值都为NULL时，返回的结果为 1 而不是NULL，其他返回结果与等于运算符相同。</p><h3 id="2-3-不等于运算符"><a href="#2-3-不等于运算符" class="headerlink" title="2.3 不等于运算符"></a>2.3 不等于运算符</h3><p>不等于运算符（&lt;&gt;和!&#x3D;）用于判断两边的数字、字符串或者表达式的值是否不相等，如果不相等则返回 1 ，相等则返回 0 。不等于运算符不能判断NULL值。如果两边的值有任意一个为NULL，或两边都为NULL，则结果为NULL。 SQL语句示例如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token operator">&lt;></span> <span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">,</span> <span class="token string">'a'</span> <span class="token operator">!=</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token punctuation">)</span> <span class="token operator">&lt;></span> <span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'a'</span> <span class="token operator">!=</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span> <span class="token operator">&lt;></span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------+--------+------------+----------------+-------------+--------------+</span><span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">&lt;></span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">!=</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token string">'a'</span> <span class="token operator">!=</span> <span class="token string">'b'</span> <span class="token operator">|</span> <span class="token punctuation">(</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token punctuation">)</span> <span class="token operator">&lt;></span> <span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token string">'a'</span> <span class="token operator">!=</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">&lt;></span> <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+--------+------------+----------------+-------------+--------------+</span><span class="token operator">|</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+--------+------------+----------------+-------------+--------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此外，还有非符号类型的运算符：<br><img src="/../pic/%E7%AC%AC04%E7%AB%A0_%E8%BF%90%E7%AE%97%E7%AC%A6/1649483964872.png" alt="1649483964872"><br><img src="/../pic/%E7%AC%AC04%E7%AB%A0_%E8%BF%90%E7%AE%97%E7%AC%A6/1649483982335.png" alt="1649483982335"></p><h3 id="2-4-空运算符"><a href="#2-4-空运算符" class="headerlink" title="2.4 空运算符"></a>2.4 空运算符</h3><p>空运算符（IS NULL或者ISNULL）判断一个值是否为NULL，如果为NULL则返回 1 ，否则返回0 。 SQL语句示例如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token boolean">NULL</span> <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> ISNULL<span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ISNULL<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------------+--------------+-------------+-----------+</span><span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">IS</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> ISNULL<span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span> <span class="token operator">|</span> ISNULL<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">IS</span> <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------+--------------+-------------+-----------+</span><span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------+--------------+-------------+-----------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token comment">#查询commission_pct等于NULL。比较如下的四种写法</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>commission_pct <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> commission_pct <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>commission_pct <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> commission_pct <span class="token operator">&lt;=></span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>commission_pct <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> ISNULL<span class="token punctuation">(</span>commission_pct<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>commission_pct <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> commission_pct <span class="token operator">=</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span> manager_id<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> manager_id <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-非空运算符"><a href="#2-5-非空运算符" class="headerlink" title="2.5 非空运算符"></a>2.5 非空运算符</h3><p>非空运算符（IS NOT NULL）判断一个值是否不为NULL，如果不为NULL则返回 1 ，否则返回 0 。 SQL语句示例如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token boolean">NULL</span> <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">'a'</span> <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------------------+-----------------+---------------+</span><span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token string">'a'</span> <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------------+-----------------+---------------+</span><span class="token operator">|</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------------+-----------------+---------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span class="token comment">#查询commission_pct不等于NULL</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>commission_pct <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> commission_pct <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>commission_pct <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> <span class="token operator">NOT</span> commission_pct <span class="token operator">&lt;=></span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>commission_pct <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> <span class="token operator">NOT</span> ISNULL<span class="token punctuation">(</span>commission_pct<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-最小值运算符"><a href="#2-6-最小值运算符" class="headerlink" title="2.6 最小值运算符"></a>2.6 最小值运算符</h3><p>语法格式为：LEAST(值 1 ，值 2 ，…，值n)。其中，“值n”表示参数列表中有n个值。在有两个或多个参数的情况下，返回最小值。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT LEAST ( 1 , 0 , 2 ), LEAST(&#39;b&#39;,&#39;a&#39;,&#39;c&#39;), LEAST( 1 ,NULL, 2 );+---------------+--------------------+-----------------+| LEAST ( 1 , 0 , 2 ) | LEAST(&#39;b&#39;,&#39;a&#39;,&#39;c&#39;) | LEAST( 1 ,NULL, 2 ) |+---------------+--------------------+-----------------+| 0 | a |  NULL |+---------------+--------------------+-----------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由结果可以看到，当参数是整数或者浮点数时，LEAST将返回其中最小的值；当参数为字符串时，返回字母表中顺序最靠前的字符；当比较值列表中有NULL时，不能判断大小，返回值为NULL。</p><h3 id="2-7-最大值运算符"><a href="#2-7-最大值运算符" class="headerlink" title="2.7 最大值运算符"></a>2.7 最大值运算符</h3><p>语法格式为：GREATEST(值 1 ，值 2 ，…，值n)。其中，n表示参数列表中有n个值。当有两个或多个参数时，返回值为最大值。假如任意一个自变量为NULL，则GREATEST()的返回值为NULL。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT GREATEST( 1 , 0 , 2 ), GREATEST(&#39;b&#39;,&#39;a&#39;,&#39;c&#39;), GREATEST( 1 ,NULL, 2 );+-----------------+-----------------------+--------------------+| GREATEST( 1 , 0 , 2 ) | GREATEST(&#39;b&#39;,&#39;a&#39;,&#39;c&#39;) | GREATEST( 1 ,NULL, 2 ) |+-----------------+-----------------------+--------------------+| 2 | c | NULL |+-----------------+-----------------------+--------------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由结果可以看到，当参数中是整数或者浮点数时，GREATEST将返回其中最大的值；当参数为字符串时，返回字母表中顺序最靠后的字符；当比较值列表中有NULL时，不能判断大小，返回值为NULL。</p><h3 id="2-8-BETWEEN-AND运算符"><a href="#2-8-BETWEEN-AND运算符" class="headerlink" title="2.8 BETWEEN AND运算符"></a>2.8 BETWEEN AND运算符</h3><p>BETWEEN运算符使用的格式通常为SELECT D FROM TABLE WHERE C BETWEEN A AND B，此时，当C大于或等于A，并且C小于或等于B时，结果为 1 ，否则结果为 0 。</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT 1 BETWEEN 0 AND 1 , 10 BETWEEN 11 AND 12 , &#39;b&#39; BETWEEN &#39;a&#39; AND &#39;c&#39;;+-------------------+----------------------+-------------------------+| 1 BETWEEN 0 AND 1 | 10 BETWEEN 11 AND 12 | &#39;b&#39; BETWEEN &#39;a&#39; AND &#39;c&#39; |+-------------------+----------------------+-------------------------+| 1 | 0 | 1 |+-------------------+----------------------+-------------------------+1 row in set (0.00 sec)SELECT last_name, salaryFROM employeesWHERE salary BETWEEN 2500 AND 3500 ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-9-IN运算符"><a href="#2-9-IN运算符" class="headerlink" title="2.9 IN运算符"></a>2.9 IN运算符</h3><p>IN运算符用于判断给定的值是否是IN列表中的一个值，如果是则返回 1 ，否则返回 0 。如果给定的值为NULL，或者IN列表中存在NULL，则结果为NULL。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token string">'a'</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">IN</span> <span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'a'</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----------------------+------------+-------------------+--------------------+</span><span class="token operator">|</span> <span class="token string">'a'</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">IN</span> <span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token string">'a'</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------------+------------+-------------------+--------------------+</span><span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------------+------------+-------------------+--------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> salary<span class="token punctuation">,</span> manager_id<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> manager_id <span class="token operator">IN</span> <span class="token punctuation">(</span> <span class="token number">100</span> <span class="token punctuation">,</span> <span class="token number">101</span> <span class="token punctuation">,</span> <span class="token number">201</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-10-NOT-IN运算符"><a href="#2-10-NOT-IN运算符" class="headerlink" title="2.10 NOT IN运算符"></a>2.10 NOT IN运算符</h3><p>NOT IN运算符用于判断给定的值是否不是IN列表中的一个值，如果不是IN列表中的一个值，则返回 1 ，否则返回 0 。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token string">'a'</span> <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------------------------+----------------+</span><span class="token operator">|</span> <span class="token string">'a'</span> <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------------+----------------+</span><span class="token operator">|</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------------+----------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-11-LIKE运算符"><a href="#2-11-LIKE运算符" class="headerlink" title="2.11 LIKE运算符"></a>2.11 LIKE运算符</h3><p>LIKE运算符主要用来匹配字符串，通常用于模糊匹配，如果满足条件则返回 1 ，否则返回0 。如果给定的值或者匹配条件为NULL，则返回结果为NULL。</p><p>LIKE运算符通常使用如下通配符：</p><pre class="line-numbers language-none"><code class="language-none">“%”：匹配 0 个或多个字符。“_”：只能匹配一个字符。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>SQL语句示例如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token boolean">NULL</span> <span class="token operator">LIKE</span> <span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token string">'abc'</span> <span class="token operator">LIKE</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-----------------+-----------------+</span><span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">LIKE</span> <span class="token string">'abc'</span> <span class="token operator">|</span> <span class="token string">'abc'</span> <span class="token operator">LIKE</span> <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----------------+-----------------+</span><span class="token operator">|</span>  <span class="token boolean">NULL</span> <span class="token operator">|</span>  <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----------------+-----------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token keyword">SELECT</span> first_name<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> first_name <span class="token operator">LIKE</span> <span class="token string">'S%'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> last_name<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> last_name <span class="token operator">LIKE</span> <span class="token string">'_o%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ESCAPE</strong></p><ul><li><p>回避特殊符号的： 使用转义符 。例如：将[%]转为[$%]、[]转为[$]，然后再加上[ESCAPE‘$’]即可。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> job_id<span class="token keyword">FROM</span> jobs<span class="token keyword">WHERE</span> job_id <span class="token operator">LIKE</span> ‘IT\_<span class="token operator">%</span>‘<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>如果使用\表示转义，要省略ESCAPE。如果不是\，则要加上ESCAPE。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> job_id<span class="token keyword">FROM</span> jobs<span class="token keyword">WHERE</span> job_id <span class="token operator">LIKE</span> ‘IT$_<span class="token operator">%</span>‘ <span class="token keyword">escape</span> ‘$‘<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-12-REGEXP运算符"><a href="#2-12-REGEXP运算符" class="headerlink" title="2.12 REGEXP运算符"></a>2.12 REGEXP运算符</h3><p>REGEXP运算符用来匹配字符串，语法格式为：expr REGEXP 匹配条件。如果expr满足匹配条件，返回1 ；如果不满足，则返回 0 。若expr或匹配条件任意一个为NULL，则结果为NULL。</p><p>REGEXP运算符在进行匹配时，常用的有下面几种通配符：</p><pre class="line-numbers language-none"><code class="language-none">（ 1 ）‘^’匹配以该字符后面的字符开头的字符串。（ 2 ）‘$’匹配以该字符前面的字符结尾的字符串。（ 3 ）‘.’匹配任何一个单字符。（ 4 ）“[...]”匹配在方括号内的任何字符。例如，“[abc]”匹配“a”或“b”或“c”。为了命名字符的范围，使用一个‘-’。“[a-z]”匹配任何字母，而“[0-9]”匹配任何数字。（ 5 ）‘*’匹配零个或多个在它前面的字符。例如，“x*”匹配任何数量的‘x’字符，“[0-9]*”匹配任何数量的数字，而“*”匹配任何数量的任何字符。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SQL语句示例如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token string">'shkstart'</span> <span class="token operator">REGEXP</span> <span class="token string">'^s'</span><span class="token punctuation">,</span> <span class="token string">'shkstart'</span> <span class="token operator">REGEXP</span> <span class="token string">'t$'</span><span class="token punctuation">,</span> <span class="token string">'shkstart'</span> <span class="token operator">REGEXP</span> <span class="token string">'hk'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------------------------+------------------------+-------------------------+</span><span class="token operator">|</span> <span class="token string">'shkstart'</span> <span class="token operator">REGEXP</span> <span class="token string">'^s'</span> <span class="token operator">|</span> <span class="token string">'shkstart'</span> <span class="token operator">REGEXP</span> <span class="token string">'t$'</span> <span class="token operator">|</span> <span class="token string">'shkstart'</span> <span class="token operator">REGEXP</span> <span class="token string">'hk'</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------------------+------------------------+-------------------------+</span><span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------------------+------------------------+-------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token string">'atguigu'</span> <span class="token operator">REGEXP</span> <span class="token string">'gu.gu'</span><span class="token punctuation">,</span> <span class="token string">'atguigu'</span> <span class="token operator">REGEXP</span> <span class="token string">'[ab]'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------------------------+-------------------------+</span><span class="token operator">|</span> <span class="token string">'atguigu'</span> <span class="token operator">REGEXP</span> <span class="token string">'gu.gu'</span> <span class="token operator">|</span> <span class="token string">'atguigu'</span> <span class="token operator">REGEXP</span> <span class="token string">'[ab]'</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------------+-------------------------+</span><span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------------+-------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="3-逻辑运算符"><a href="#3-逻辑运算符" class="headerlink" title="3.逻辑运算符"></a>3.逻辑运算符</h2><hr><p>逻辑运算符主要用来判断表达式的真假，在MySQL中，逻辑运算符的返回结果为 1 、 0 或者NULL。</p><p>MySQL中支持 4 种逻辑运算符如下：<br><img src="/../pic/%E7%AC%AC04%E7%AB%A0_%E8%BF%90%E7%AE%97%E7%AC%A6/1649484718411.png" alt="1649484718411"></p><h3 id="3-1-逻辑非运算符"><a href="#3-1-逻辑非运算符" class="headerlink" title="3.1 逻辑非运算符"></a>3.1 逻辑非运算符</h3><p>逻辑非（NOT或!）运算符表示当给定的值为 0 时返回 1 ；当给定的值为非 0 值时返回 0 ；当给定的值为NULL时，返回NULL。</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT NOT 1 , NOT 0 , NOT( 1 + 1 ), NOT! 1 , NOT NULL;+-------+-------+----------+--------+----------+| NOT 1 | NOT 0 | NOT( 1 + 1 ) | NOT! 1 | NOT NULL |+-------+-------+----------+--------+----------+| 0 | 1 | 0 | 1 | NULL |+-------+-------+----------+--------+----------+1 row in set, 1 warning (0.00 sec)SELECT last_name, job_idFROM employeesWHERE job_id NOT IN (&#39;IT_PROG&#39;, &#39;ST_CLERK&#39;, &#39;SA_REP&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-逻辑与运算符"><a href="#3-2-逻辑与运算符" class="headerlink" title="3.2 逻辑与运算符"></a>3.2 逻辑与运算符</h3><p>逻辑与（AND或&amp;&amp;）运算符是当给定的所有值均为非 0 值，并且都不为NULL时，返回1 ；当给定的一个值或者多个值为 0 时则返回 0 ；否则返回NULL。</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT 1 AND - 1 , 0 AND 1 , 0 AND NULL, 1 AND NULL;+----------+---------+------------+------------+| 1 AND - 1 | 0 AND 1 | 0 AND NULL | 1 AND NULL |+----------+---------+------------+------------+| 1 | 0 | 0 | NULL |+----------+---------+------------+------------+1 row in set (0.00 sec)SELECT employee_id, last_name, job_id, salaryFROM employeesWHERE salary &gt;&#x3D; 10000AND job_id LIKE &#39;%MAN%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-逻辑或运算符"><a href="#3-3-逻辑或运算符" class="headerlink" title="3.3 逻辑或运算符"></a>3.3 逻辑或运算符</h3><p>逻辑或（OR或||）运算符是当给定的值都不为NULL，并且任何一个值为非 0 值时，则返回 1 ，否则返回 0 ；当一个值为NULL，并且另一个值为非 0 值时，返回 1 ，否则返回NULL；当两个值都为NULL时，返回NULL。</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT 1 OR - 1 , 1 OR 0 , 1 OR NULL, 0 || NULL, NULL || NULL;+---------+--------+-----------+-----------+--------------+| 1 OR - 1 | 1 OR 0 | 1 OR NULL | 0 || NULL | NULL || NULL |+---------+--------+-----------+-----------+--------------+| 1 | 1 | 1 |  NULL | NULL |+---------+--------+-----------+-----------+--------------+1 row in set, 2 warnings (0.00 sec)#查询基本薪资不在9000-12000之间的员工编号和基本薪资SELECT employee_id,salary FROM employeesWHERE NOT (salary &gt;&#x3D; 9000 AND salary &lt;&#x3D; 12000 );SELECT employee_id,salary FROM employeesWHERE salary &lt; 9000 OR salary &gt; 12000 ;SELECT employee_id,salary FROM employeesWHERE salary NOT BETWEEN 9000 AND 12000 ;SELECT employee_id, last_name, job_id, salaryFROM employeesWHERE salary &gt;&#x3D; 10000OR job_id LIKE &#39;%MAN%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><p>OR可以和AND一起使用，但是在使用时要注意两者的优先级，由于AND的优先级高于OR，因此先对AND两边的操作数进行操作，再与OR中的操作数结合。</p></blockquote><h3 id="3-4-逻辑异或运算符"><a href="#3-4-逻辑异或运算符" class="headerlink" title="3.4 逻辑异或运算符"></a>3.4 逻辑异或运算符</h3><p>逻辑异或（XOR）运算符是当给定的值中任意一个值为NULL时，则返回NULL；如果两个非NULL的值都是 0 或者都不等于 0 时，则返回 0 ；如果一个值为 0 ，另一个值不为 0 时，则返回 1 。</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT 1 XOR - 1 , 1 XOR 0 , 0 XOR 0 , 1 XOR NULL, 1 XOR 1 XOR 1 , 0 XOR 0 XOR 0 ;+----------+---------+---------+------------+---------------+---------------+| 1 XOR - 1 | 1 XOR 0 | 0 XOR 0 | 1 XOR NULL | 1 XOR 1 XOR 1 | 0 XOR 0 XOR 0 |+----------+---------+---------+------------+---------------+---------------+| 0 | 1 | 0 | NULL | 1 | 0 |+----------+---------+---------+------------+---------------+---------------+1 row in set (0.00 sec)select last_name,department_id,salaryfrom employeeswhere department_id in ( 10 , 20 ) XOR salary &gt; 8000 ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="4-位运算符"><a href="#4-位运算符" class="headerlink" title="4. 位运算符"></a>4. 位运算符</h2><hr><p>位运算符是在二进制数上进行计算的运算符。位运算符会先将操作数变成二进制数，然后进行位运算，最后将计算结果从二进制变回十进制数。</p><p>MySQL支持的位运算符如下：<br><img src="/../pic/%E7%AC%AC04%E7%AB%A0_%E8%BF%90%E7%AE%97%E7%AC%A6/1649485117026.png" alt="1649485117026"></p><h3 id="4-1-按位与运算符"><a href="#4-1-按位与运算符" class="headerlink" title="4.1 按位与运算符"></a>4.1 按位与运算符</h3><p>按位与（&amp;）运算符将给定值对应的二进制数逐位进行逻辑与运算。当给定值对应的二进制位的数值都为 1 时，则该位返回 1 ，否则返回 0 。</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT 1 &amp; 10 , 20 &amp; 30 ;+--------+---------+| 1 &amp; 10 | 20 &amp; 30 |+--------+---------+| 0 | 20 |+--------+---------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1 的二进制数为 0001 ， 10 的二进制数为 1010 ，所以 1 &amp; 10 的结果为 0000 ，对应的十进制数为 0 。 20 的二进制数为 10100 ， 30 的二进制数为 11110 ，所以 20 &amp; 30 的结果为 10100 ，对应的十进制数为 20 。</p><h3 id="4-2-按位或运算符"><a href="#4-2-按位或运算符" class="headerlink" title="4.2 按位或运算符"></a>4.2 按位或运算符</h3><p>按位或（|）运算符将给定的值对应的二进制数逐位进行逻辑或运算。当给定值对应的二进制位的数值有一个或两个为 1 时，则该位返回 1 ，否则返回 0 。</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT 1 | 10 , 20 | 30 ;+--------+---------+| 1 | 10 | 20 | 30 |+--------+---------+| 11 | 30 |+--------+---------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1 的二进制数为 0001 ， 10 的二进制数为 1010 ，所以 1 | 10 的结果为 1011 ，对应的十进制数为 11 。 20 的二进制数为 10100 ， 30 的二进制数为 11110 ，所以 20 | 30 的结果为 11110 ，对应的十进制数为 30 。</p><h3 id="4-3-按位异或运算符"><a href="#4-3-按位异或运算符" class="headerlink" title="4.3 按位异或运算符"></a>4.3 按位异或运算符</h3><p>按位异或（^）运算符将给定的值对应的二进制数逐位进行逻辑异或运算。当给定值对应的二进制位的数值不同时，则该位返回 1 ，否则返回 0 。</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT 1 ^ 10 , 20 ^ 30 ;+--------+---------+| 1 ^ 10 | 20 ^ 30 |+--------+---------+| 11 | 10 |+--------+---------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1 的二进制数为 0001 ， 10 的二进制数为 1010 ，所以 1 ^ 10 的结果为 1011 ，对应的十进制数为 11 。 20 的二进制数为 10100 ， 30 的二进制数为 11110 ，所以 20 ^ 30 的结果为 01010 ，对应的十进制数为 10 。</p><p>再举例：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT 12 &amp; 5 , 12 | 5 , 12 ^ 5 FROM DUAL;+--------+--------+--------+| 12 &amp; 5 | 12 | 5 | 12 ^ 5 |+--------+--------+--------+| 4 | 13 | 9 |+--------+--------+--------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC04%E7%AB%A0_%E8%BF%90%E7%AE%97%E7%AC%A6/1649485313457.png" alt="1649485313457"></p><h3 id="4-4-按位取反运算符"><a href="#4-4-按位取反运算符" class="headerlink" title="4.4 按位取反运算符"></a>4.4 按位取反运算符</h3><p>按位取反（~）运算符将给定的值的二进制数逐位进行取反操作，即将 1 变为 0 ，将 0 变为 1 。</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT 10 &amp; ~1;+---------+| 10 &amp; ~1 |+---------+| 10 |+---------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于按位取反（~）运算符的优先级高于按位与（&amp;）运算符的优先级，所以 10 &amp; ~ 1 ，首先，对数字 1 进行按位取反操作，结果除了最低位为 0 ，其他位都为 1 ，然后与 10 进行按位与操作，结果为 10 。</p><h3 id="4-5-按位右移运算符"><a href="#4-5-按位右移运算符" class="headerlink" title="4.5 按位右移运算符"></a>4.5 按位右移运算符</h3><p>按位右移（&gt;&gt;）运算符将给定的值的二进制数的所有位右移指定的位数。右移指定的位数后，右边低位的数值被移出并丢弃，左边高位空出的位置用 0 补齐。</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT 1 &gt;&gt; 2 , 4 &gt;&gt; 2 ;+--------+--------+| 1 &gt;&gt; 2 | 4 &gt;&gt; 2 |+--------+--------+| 0 | 1 |+--------+--------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1 的二进制数为 0000 0001 ，右移 2 位为 0000 0000 ，对应的十进制数为 0 。 4 的二进制数为 0000 0100 ，右移 2位为 0000 0001 ，对应的十进制数为 1 。</p><h3 id="4-6-按位左移运算符"><a href="#4-6-按位左移运算符" class="headerlink" title="4.6 按位左移运算符"></a>4.6 按位左移运算符</h3><p>按位左移（&lt;&lt;）运算符将给定的值的二进制数的所有位左移指定的位数。左移指定的位数后，左边高位的数值被移出并丢弃，右边低位空出的位置用 0 补齐。</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT 1 &lt;&lt; 2 , 4 &lt;&lt; 2 ;+--------+--------+| 1 &lt;&lt; 2 | 4 &lt;&lt; 2 |+--------+--------+| 4 | 16 |+--------+--------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1 的二进制数为 0000 0001 ，左移两位为 0000 0100 ，对应的十进制数为 4 。 4 的二进制数为 0000 0100 ，左移两位为 0001 0000 ，对应的十进制数为 16 。</p><hr><h2 id="5-运算符的优先级"><a href="#5-运算符的优先级" class="headerlink" title="5. 运算符的优先级"></a>5. 运算符的优先级</h2><hr><p><img src="/../pic/%E7%AC%AC04%E7%AB%A0_%E8%BF%90%E7%AE%97%E7%AC%A6/1649485461220.png" alt="1649485461220"></p><p>数字编号越大，优先级越高，优先级高的运算符先进行计算。可以看到，赋值运算符的优先级最低，使用“()”括起来的表达式的优先级最高。</p><hr><h2 id="6-拓展：使用正则表达式查询"><a href="#6-拓展：使用正则表达式查询" class="headerlink" title="6. 拓展：使用正则表达式查询"></a>6. 拓展：使用正则表达式查询</h2><hr><p>正则表达式通常被用来检索或替换那些符合某个模式的文本内容，根据指定的匹配模式匹配文本中符合要求的特殊字符串。例如，从一个文本文件中提取电话号码，查找一篇文章中重复的单词或者替换用户输入的某些敏感词语等，这些地方都可以使用正则表达式。正则表达式强大而且灵活，可以应用于非常复杂的查询。</p><p>MySQL中使用REGEXP关键字指定正则表达式的字符匹配模式。下表列出了REGEXP操作符中常用字符匹配列表。</p><p><img src="/../pic/%E7%AC%AC04%E7%AB%A0_%E8%BF%90%E7%AE%97%E7%AC%A6/1649485516739.png" alt="1649485516739"></p><h3 id="6-1-查询以特定字符或字符串开头的记录"><a href="#6-1-查询以特定字符或字符串开头的记录" class="headerlink" title="6.1 查询以特定字符或字符串开头的记录"></a>6.1 查询以特定字符或字符串开头的记录</h3><p>字符‘^’匹配以特定字符或者字符串开头的文本。</p><p>在fruits表中，查询f_name字段以字母‘b’开头的记录，SQL语句如下：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#39;^b&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-2-查询以特定字符或字符串结尾的记录"><a href="#6-2-查询以特定字符或字符串结尾的记录" class="headerlink" title="6.2 查询以特定字符或字符串结尾的记录"></a>6.2 查询以特定字符或字符串结尾的记录</h3><p>字符‘$’匹配以特定字符或者字符串结尾的文本。</p><p>在fruits表中，查询f_name字段以字母‘y’结尾的记录，SQL语句如下：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#39;y$&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-3-用符号”-”来替代字符串中的任意一个字符"><a href="#6-3-用符号”-”来替代字符串中的任意一个字符" class="headerlink" title="6.3 用符号”.”来替代字符串中的任意一个字符"></a>6.3 用符号”.”来替代字符串中的任意一个字符</h3><p>字符‘.’匹配任意一个字符。 在fruits表中，查询f_name字段值</p><p>包含字母‘a’与‘g’且两个字母之间只有一个字母的记录，SQL语句如下：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#39;a.g&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-4-使用”-”和”-”来匹配多个字符"><a href="#6-4-使用”-”和”-”来匹配多个字符" class="headerlink" title="6.4 使用”*”和”+”来匹配多个字符"></a>6.4 使用”*”和”+”来匹配多个字符</h3><p>星号‘*’匹配前面的字符任意多次，包括 0 次。加号‘+’匹配前面的字符至少一次。</p><p>在fruits表中，查询f_name字段值以字母‘b’开头且‘b’后面出现字母‘a’的记录，SQL语句如下：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#39;^ba*&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在fruits表中，查询f_name字段值以字母‘b’开头且‘b’后面出现字母‘a’至少一次的记录，SQL语句如下：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#39;^ba+&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-5-匹配指定字符串"><a href="#6-5-匹配指定字符串" class="headerlink" title="6.5 匹配指定字符串"></a>6.5 匹配指定字符串</h3><p>正则表达式可以匹配指定字符串，只要这个字符串在查询文本中即可，如要匹配多个字符串，多个字符串之间使用分隔符‘|’隔开。</p><p>在fruits表中，查询f_name字段值包含字符串“on”的记录，SQL语句如下：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#39;on&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在fruits表中，查询f_name字段值包含字符串“on”或者“ap”的记录，SQL语句如下：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#39;on|ap&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之前介绍过，LIKE运算符也可以匹配指定的字符串，但与REGEXP不同，LIKE匹配的字符串如果在文本中间出现，则找不到它，相应的行也不会返回。REGEXP在文本内进行匹配，如果被匹配的字符串在文本中出现，REGEXP将会找到它，相应的行也会被返回。对比结果如下所示。</p><p>在fruits表中，使用LIKE运算符查询f_name字段值为“on”的记录，SQL语句如下：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT * FROM fruits WHERE f_name like &#39;on&#39;;Empty set(0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-6-匹配指定字符中的任意一个"><a href="#6-6-匹配指定字符中的任意一个" class="headerlink" title="6.6 匹配指定字符中的任意一个"></a>6.6 匹配指定字符中的任意一个</h3><p>方括号“[]”指定一个字符集合，只匹配其中任何一个字符，即为所查找的文本。</p><p>在fruits表中，查找f_name字段中包含字母‘o’或者‘t’的记录，SQL语句如下：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#39;[ot]&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在fruits表中，查询s_id字段中包含 4 、 5 或者 6 的记录，SQL语句如下：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT * FROM fruits WHERE s_id REGEXP &#39;[456]&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-7-匹配指定字符以外的字符"><a href="#6-7-匹配指定字符以外的字符" class="headerlink" title="6.7 匹配指定字符以外的字符"></a>6.7 匹配指定字符以外的字符</h3><p><img src="/../pic/%E7%AC%AC04%E7%AB%A0_%E8%BF%90%E7%AE%97%E7%AC%A6/1649486052580.png" alt="1649486052580">匹配不在指定集合中的任何字符。</p><p>在fruits表中，查询f_id字段中包含字母a<del>e和数字1</del>2以外字符的记录，SQL语句如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; SELECT * FROM fruits WHERE f_id REGEXP &#39;[^a-e1-2]&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-8-使用-n-或者-n-m-来指定字符串连续出现的次数"><a href="#6-8-使用-n-或者-n-m-来指定字符串连续出现的次数" class="headerlink" title="6.8 使用{n,}或者{n,m}来指定字符串连续出现的次数"></a>6.8 使用{n,}或者{n,m}来指定字符串连续出现的次数</h3><p>“字符串{n,}”表示至少匹配n次前面的字符；“字符串{n,m}”表示匹配前面的字符串不少于n次，不多于m次。例如，a{2,}表示字母a连续出现至少 2 次，也可以大于 2 次；a{2,4}表示字母a连续出现最少 2 次，最多不能超过 4 次。</p><p>在fruits表中，查询f_name字段值出现字母‘x’至少 2 次的记录，SQL语句如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> fruits <span class="token keyword">WHERE</span> f_name <span class="token operator">REGEXP</span> <span class="token string">'x&#123;2,&#125;'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在fruits表中，查询f_name字段值出现字符串“ba”最少 1 次、最多 3 次的记录，SQL语句如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> fruits <span class="token keyword">WHERE</span> f_name <span class="token operator">REGEXP</span> <span class="token string">'ba&#123;1,3&#125;'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序与分页</title>
      <link href="/2022/07/17/di-05-zhang-pai-xu-yu-fen-ye/"/>
      <url>/2022/07/17/di-05-zhang-pai-xu-yu-fen-ye/</url>
      
        <content type="html"><![CDATA[<h1 id="第05章-排序与分页"><a href="#第05章-排序与分页" class="headerlink" title="第05章_排序与分页"></a>第05章_排序与分页</h1><h2 id="1-排序数据"><a href="#1-排序数据" class="headerlink" title="1. 排序数据"></a>1. 排序数据</h2><hr><h3 id="1-1-排序规则"><a href="#1-1-排序规则" class="headerlink" title="1. 1 排序规则"></a>1. 1 排序规则</h3><ul><li>使用 ORDER BY 子句排序<ul><li><strong>ASC（ascend）: 升序</strong></li><li><strong>DESC（descend）:降序</strong></li></ul></li><li><strong>ORDER BY 子句在SELECT语句的结尾。</strong></li></ul><h3 id="1-2-单列排序"><a href="#1-2-单列排序" class="headerlink" title="1. 2 单列排序"></a>1. 2 单列排序</h3><pre class="line-numbers language-none"><code class="language-none">SELECT last_name, job_id, department_id, hire_dateFROM employeesORDER BY hire_date ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC05%E7%AB%A0_%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%88%86%E9%A1%B5/1649486373781.png" alt="1649486373781"></p><pre class="line-numbers language-none"><code class="language-none">SELECT last_name, job_id, department_id, hire_dateFROM employeesORDER BY hire_date DESC ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC05%E7%AB%A0_%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%88%86%E9%A1%B5/1649486392806.png" alt="1649486392806"></p><pre class="line-numbers language-none"><code class="language-none">SELECT employee_id, last_name, salary* 12 annsalFROM employeesORDER BY annsal;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC05%E7%AB%A0_%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%88%86%E9%A1%B5/1649486423273.png" alt="1649486423273"></p><h3 id="1-3-多列排序"><a href="#1-3-多列排序" class="headerlink" title="1. 3 多列排序"></a>1. 3 多列排序</h3><pre class="line-numbers language-none"><code class="language-none">SELECT last_name, department_id, salaryFROM employeesORDER BY department_id, salary DESC;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC05%E7%AB%A0_%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%88%86%E9%A1%B5/1649486490754.png" alt="1649486490754"></p><ul><li>可以使用不在SELECT列表中的列排序。</li><li>在对多列进行排序的时候，首先排序的第一列必须有相同的列值，才会对第二列进行排序。如果第一列数据中所有值都是唯一的，将不再对第二列进行排序。</li></ul><hr><h2 id="2-分页"><a href="#2-分页" class="headerlink" title="2. 分页"></a>2. 分页</h2><hr><h3 id="2-1-背景"><a href="#2-1-背景" class="headerlink" title="2. 1 背景"></a>2. 1 背景</h3><p>背景 1 ：查询返回的记录太多了，查看起来很不方便，怎么样能够实现分页查询呢？</p><p>背景 2 ：表里有 4 条数据，我们只想要显示第 2 、 3 条数据怎么办呢？</p><h3 id="2-2-实现规则"><a href="#2-2-实现规则" class="headerlink" title="2. 2 实现规则"></a>2. 2 实现规则</h3><ul><li><p>分页原理<br>所谓分页显示，就是将数据库中的结果集，一段一段显示出来需要的条件。</p></li><li><p>MySQL中使用 LIMIT 实现分页</p></li><li><p>格式：</p><pre class="line-numbers language-none"><code class="language-none">LIMIT [位置偏移量,] 行数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一个“位置偏移量”参数指示MySQL从哪一行开始显示，是一个可选参数，如果不指定“位置偏移量”，将会从表中的第一条记录开始（第一条记录的位置偏移量是 0 ，第二条记录的位置偏移量是1 ，以此类推）；第二个参数“行数”指示返回的记录条数。</p></li><li><p>举例</p><pre class="line-numbers language-none"><code class="language-none">--前 10 条记录：SELECT * FROM 表名 LIMIT 0 , 10 ;或者SELECT * FROM 表名 LIMIT 10 ;--第 11 至 20 条记录：SELECT * FROM 表名 LIMIT 10 , 10 ;--第 21 至 30 条记录：SELECT * FROM 表名 LIMIT 20 , 10 ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>MySQL 8.0中可以使用“LIMIT 3 OFFSET 4”，意思是获取从第 5 条记录开始后面的 3 条记录，和“LIMIT 4,3;”返回的结果相同。</p></blockquote></li><li><p>分页显式公式 ：（<strong>当前页数- 1 ）*每页条数，每页条数</strong></p><pre class="line-numbers language-none"><code class="language-none">SELECT * FROM tableLIMIT(PageNo - 1 )*PageSize,PageSize;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>注意：LIMIT 子句必须放在整个SELECT语句的最后！</strong></p></li><li><p>使用 LIMIT 的好处<br>约束返回结果的数量可以减少数据表的网络传输量，也可以提升查询效率。如果我们知道返回结果只有1 条，就可以使用LIMIT 1，告诉 SELECT 语句只需要返回一条记录即可。这样的好处就是 SELECT 不需要扫描完整的表，只需要检索到一条符合条件的记录即可返回。</p></li></ul><h3 id="2-3-拓展"><a href="#2-3-拓展" class="headerlink" title="2. 3 拓展"></a>2. 3 拓展</h3><p>在不同的 DBMS 中使用的关键字可能不同。在 MySQL、PostgreSQL、MariaDB 和 SQLite 中使用 LIMIT 关键字，而且需要放到 SELECT 语句的最后面。</p><ul><li><p>如果是 SQL Server 和 Access，需要使用 TOP 关键字，比如：</p><pre class="line-numbers language-none"><code class="language-none">SELECT TOP 5 name, hp_max FROM heros ORDER BY hp_max DESC<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>如果是 DB2，使用FETCH FIRST 5 ROWS ONLY这样的关键字：</p><pre class="line-numbers language-none"><code class="language-none">SELECT name, hp_max FROM heros ORDER BY hp_max DESC FETCH FIRST 5 ROWS ONLY<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>如果是 Oracle，你需要基于 ROWNUM 来统计行数：</p><pre class="line-numbers language-none"><code class="language-none">SELECT rownum,last_name,salary FROM employees WHERE rownum &lt; 5 ORDER BY salary DESC;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要说明的是，这条语句是先取出来前 5 条数据行，然后再按照 hp_max 从高到低的顺序进行排序。但这样产生的结果和上述方法的并不一样。我会在后面讲到子查询，你可以使用</p><pre class="line-numbers language-none"><code class="language-none">SELECT rownum, last_name,salaryFROM (SELECT last_name,salaryFROM employeesORDER BY salary DESC)WHERE rownum &lt; 10 ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到与上述方法一致的结果。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多表查询</title>
      <link href="/2022/07/17/di-06-zhang-duo-biao-cha-xun/"/>
      <url>/2022/07/17/di-06-zhang-duo-biao-cha-xun/</url>
      
        <content type="html"><![CDATA[<h1 id="第06章-多表查询"><a href="#第06章-多表查询" class="headerlink" title="第06章_多表查询"></a>第06章_多表查询</h1><p>多表查询，也称为关联查询，指两个或更多个表一起完成查询操作。</p><p>前提条件：这些一起查询的表之间是有关系的（一对一、一对多），它们之间一定是有关联字段，这个关联字段可能建立了外键，也可能没有建立外键。比如：员工表和部门表，这两个表依靠“部门编号”进行关联。</p><hr><h2 id="1-一个案例引发的多表连接"><a href="#1-一个案例引发的多表连接" class="headerlink" title="1. 一个案例引发的多表连接"></a>1. 一个案例引发的多表连接</h2><hr><h3 id="1-1-案例说明"><a href="#1-1-案例说明" class="headerlink" title="1. 1 案例说明"></a>1. 1 案例说明</h3><p><img src="/../pic/%E7%AC%AC06%E7%AB%A0_%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/1649562093193.png" alt="1649562093193"></p><p>从多个表中获取数据：</p><p><img src="/../pic/%E7%AC%AC06%E7%AB%A0_%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/1649562120221.png" alt="1649562120221"></p><pre class="line-numbers language-none"><code class="language-none">#案例：查询员工的姓名及其部门名称SELECT last_name, department_nameFROM employees, departments;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC06%E7%AB%A0_%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/1649562169991.png" alt="1649562169991"></p><p>查询结果：</p><pre class="line-numbers language-none"><code class="language-none">+-----------+----------------------+| last_name | department_name |+-----------+----------------------+| King | Administration || King | Marketing || King | Purchasing || King | Human Resources || King | Shipping || King | IT || King | Public Relations || King | Sales || King | Executive || King | Finance || King | Accounting || King | Treasury |...| Gietz | IT Support || Gietz | NOC || Gietz | IT Helpdesk || Gietz | Government Sales || Gietz | Retail Sales || Gietz | Recruiting || Gietz | Payroll |+-----------+----------------------+2889 rows in set (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析错误情况：</strong></p><pre class="line-numbers language-none"><code class="language-none">SELECT COUNT(employee_id) FROM employees;#输出 107 行SELECT COUNT(department_id)FROM departments;#输出 27 行SELECT 107 * 27 FROM dual;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们把上述多表查询中出现的问题称为：笛卡尔积的错误。</p><h3 id="1-2-笛卡尔积（或交叉连接）的理解"><a href="#1-2-笛卡尔积（或交叉连接）的理解" class="headerlink" title="1. 2 笛卡尔积（或交叉连接）的理解"></a>1. 2 笛卡尔积（或交叉连接）的理解</h3><p>笛卡尔乘积是一个数学运算。假设我有两个集合 X 和 Y，那么 X 和 Y 的笛卡尔积就是 X 和 Y 的所有可能组合，也就是第一个对象来自于 X，第二个对象来自于 Y 的所有可能。组合的个数即为两个集合中元素个数的乘积数。</p><p><img src="/../pic/%E7%AC%AC06%E7%AB%A0_%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/1649562340672.png" alt="1649562340672"></p><p>SQL 92 中，笛卡尔积也称为<code>交叉连接</code>，英文是 <code>CROSS JOIN</code>。在 SQL 99 中也是使用 CROSS JOIN表示交叉连接。它的作用就是可以把任意表进行连接，即使这两张表不相关。在MySQL中如下情况会出现笛卡尔积：</p><pre class="line-numbers language-none"><code class="language-none">#查询员工姓名和所在部门名称SELECT last_name,department_name FROM employees,departments;SELECT last_name,department_name FROM employees CROSS JOIN departments;SELECT last_name,department_name FROM employees INNER JOIN departments;SELECT last_name,department_name FROM employees JOIN departments;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-案例分析与问题解决"><a href="#1-3-案例分析与问题解决" class="headerlink" title="1.3 案例分析与问题解决"></a>1.3 案例分析与问题解决</h3><ul><li><p>笛卡尔积的错误会在下面条件下产生</p><p>：</p><ul><li>省略多个表的连接条件（或关联条件）</li><li>连接条件（或关联条件）无效</li><li>所有表中的所有行互相连接</li></ul></li><li><p>为了避免笛卡尔积， 可以 <strong>在 WHERE 加入有效的连接条件</strong>。</p></li><li><p>加入连接条件后，查询语法：</p></li></ul><pre class="line-numbers language-none"><code class="language-none">SELECT table1.column, table2.columnFROM table1, tableWHERE table1.column 1 &#x3D; table2.column 2 ;  #连接条件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><strong>在 WHERE子句中写入连接条件。</strong></li><li>正确写法：</li></ul><pre class="line-numbers language-none"><code class="language-none">#案例：查询员工的姓名及其部门名称SELECT last_name, department_nameFROM employees, departmentsWHERE employees.department_id &#x3D; departments.department_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>在表中有相同列时，在列名之前加上表名前缀。</strong></li></ul><hr><h2 id="2-多表查询分类讲解"><a href="#2-多表查询分类讲解" class="headerlink" title="2. 多表查询分类讲解"></a>2. 多表查询分类讲解</h2><hr><h3 id="2-1-分类-1-：等值连接-vs-非等值连接"><a href="#2-1-分类-1-：等值连接-vs-非等值连接" class="headerlink" title="2.1 分类 1 ：等值连接 vs 非等值连接"></a>2.1 分类 1 ：等值连接 vs 非等值连接</h3><p>等值连接</p><p><img src="/../pic/%E7%AC%AC06%E7%AB%A0_%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/1649566844687.png" alt="1649566844687"></p><pre class="line-numbers language-none"><code class="language-none">SELECT employees.employee_id, employees.last_name,employees.department_id, departments.department_id,departments.location_idFROM employees, departmentsWHERE employees.department_id &#x3D; departments.department_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC06%E7%AB%A0_%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/1649566902864.png" alt="1649566902864"></p><p><strong>拓展 1 ：多个连接条件与 AND 操作符</strong></p><p><img src="/../pic/%E7%AC%AC06%E7%AB%A0_%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/1649566932411.png" alt="1649566932411"></p><p><strong>拓展 2 ：区分重复的列名</strong></p><ul><li><strong>多个表中有相同列时，必须在列名之前加上表名前缀。</strong></li><li>在不同表中具有相同列名的列可以用表名加以区分。</li></ul><pre class="line-numbers language-none"><code class="language-none">SELECT employees.last_name, departments.department_name,employees.department_idFROM employees, departmentsWHERE employees.department_id &#x3D; departments.department_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>拓展 3 ：表的别名</strong></p><ul><li>使用别名可以简化查询。</li><li>列名前使用表名前缀可以提高查询效率。</li></ul><pre class="line-numbers language-none"><code class="language-none">SELECT e.employee_id, e.last_name, e.department_id,d.department_id, d.location_idFROM employees e , departments dWHERE e.department_id &#x3D; d.department_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>需要注意的是，如果我们使用了表的别名，在查询字段中、过滤条件中就只能使用别名进行代替，不能使用原有的表名，否则就会报错。</p></blockquote><blockquote><p><code>阿里开发规范</code>：</p><p>【<code>强制</code>】对于数据库中表记录的查询和变更，只要涉及多个表，都需要在列名前加表的别名（或表名）进行限定。</p><p><code>说明</code>：对多表进行查询记录、更新记录、删除记录时，如果对操作列没有限定表的别名（或表名），并且操作列在多个表中存在时，就会抛异常。</p><p><code>正例</code>：select t1.name from table_first as t1 , table_second as t2 where t1.id&#x3D;t2.id;</p><p><code>反例</code>：在某业务中，由于多表关联查询语句没有加表的别名（或表名）的限制，正常运行两年后，最近在 某个表中增加一个同名字段，在预发布环境做数据库变更后，线上查询语句出现出1052 异常：Column ‘name’ in field list is ambiguous。</p></blockquote><p><strong>拓展 4 ：连接多个表</strong></p><p><img src="/../pic/%E7%AC%AC06%E7%AB%A0_%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/1649567119984.png" alt="1649567119984"></p><p><strong>总结：连接 n个表,至少需要n- 1 个连接条件。</strong>比如，连接三个表，至少需要两个连接条件。</p><p>练习：查询出公司员工的 last_name,department_name, city</p><p><strong>非等值连接</strong></p><p><img src="/../pic/%E7%AC%AC06%E7%AB%A0_%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/1649567177196.png" alt="1649567177196"></p><pre class="line-numbers language-none"><code class="language-none">SELECT e.last_name, e.salary, j.grade_levelFROM employees e, job_grades jWHERE e.salary BETWEEN j.lowest_sal AND j.highest_sal;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC06%E7%AB%A0_%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/1649567207097.png" alt="1649567207097"></p><h3 id="2-2-分类-2-：自连接-vs-非自连接"><a href="#2-2-分类-2-：自连接-vs-非自连接" class="headerlink" title="2.2 分类 2 ：自连接 vs 非自连接"></a>2.2 分类 2 ：自连接 vs 非自连接</h3><p><img src="/../pic/%E7%AC%AC06%E7%AB%A0_%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/1649567234724.png" alt="1649567234724"></p><ul><li>当table1和table2本质上是同一张表，只是用取别名的方式虚拟成两张表以代表不同的意义。然后两个表再进行内连接，外连接等查询。</li></ul><p><strong>题目：查询employees表，返回“Xxx works for Xxx”</strong></p><pre class="line-numbers language-none"><code class="language-none">SELECT CONCAT(worker.last_name ,&#39; works for &#39;, manager.last_name)FROM employees worker, employees managerWHERE worker.manager_id &#x3D; manager.employee_id ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC06%E7%AB%A0_%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/1649567281192.png" alt="1649567281192"></p><p>练习：查询出last_name为 ‘Chen’ 的员工的 manager 的信息。</p><h3 id="2-3-分类-3-：内连接-vs-外连接"><a href="#2-3-分类-3-：内连接-vs-外连接" class="headerlink" title="2.3 分类 3 ：内连接 vs 外连接"></a>2.3 分类 3 ：内连接 vs 外连接</h3><p>除了查询满足条件的记录以外，外连接还可以查询某一方不满足条件的记录。</p><p><img src="/../pic/%E7%AC%AC06%E7%AB%A0_%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/1649567317244.png" alt="1649567317244"></p><ul><li>内连接: 合并具有同一列的两个以上的表的行, 结果集中不包含一个表与另一个表不匹配的行</li><li>外连接: 两个表在连接过程中除了返回满足连接条件的行以外 还返回左（或右）表中不满足条件的行 ，这种连接称为左（或右） 外连接 。没有匹配的行时, 结果表中相应的列为空(NULL)。</li><li>如果是左外连接，则连接条件中左边的表也称为主表，右边的表称为从表。<br>如果是右外连接，则连接条件中右边的表也称为主表，左边的表称为从表。</li></ul><h3 id="2-4-SQL-92-：使用-创建连接"><a href="#2-4-SQL-92-：使用-创建连接" class="headerlink" title="2.4 SQL 92 ：使用(+)创建连接"></a>2.4 SQL 92 ：使用(+)创建连接</h3><ul><li><p>在 SQL92 中采用（+）代表从表所在的位置。即左或右外连接中，(+) 表示哪个是从表。</p></li><li><p>Oracle 对 SQL92 支持较好，而 MySQL 则不支持 SQL92 的外连接。</p><pre class="line-numbers language-none"><code class="language-none">#左外连接SELECT last_name,department_nameFROM employees ,departmentsWHERE employees.department_id &#x3D; departments.department_id(+);#右外连接SELECT last_name,department_nameFROM employees ,departmentsWHERE employees.department_id(+) &#x3D; departments.department_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>而且在 SQL92 中，只有左外连接和右外连接，没有满（或全）外连接。</p></li></ul><hr><h2 id="3-SQL-99-语法实现多表查询"><a href="#3-SQL-99-语法实现多表查询" class="headerlink" title="3. SQL 99 语法实现多表查询"></a>3. SQL 99 语法实现多表查询</h2><hr><h3 id="3-1-基本语法"><a href="#3-1-基本语法" class="headerlink" title="3. 1 基本语法"></a>3. 1 基本语法</h3><ul><li><p>使用JOIN…ON子句创建连接的语法结构：</p><pre class="line-numbers language-none"><code class="language-none">SELECT table1.column, table2.column,table3.columnFROM tableJOIN table2 ON table1 和 table2 的连接条件JOIN table3 ON table2 和 table3 的连接条件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>它的嵌套逻辑类似我们使用的 FOR 循环：</p><pre class="line-numbers language-none"><code class="language-none">for t1 in table1:for t2 in table2:if condition1:for t3 in table3:if condition2:output t1 + t2 + t<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SQL 99 采用的这种嵌套结构非常清爽、层次性更强、可读性更强，即使再多的表进行连接也都清晰可见。如果你采用 SQL 92 ，可读性就会大打折扣。</p></li><li><p>语法说明：</p><ul><li><strong>可以使用 ON 子句指定额外的连接条件 。</strong></li><li>这个连接条件是与其它条件分开的。</li><li><strong>ON 子句使语句具有更高的易读性 。</strong></li><li>关键字 JOIN、INNER JOIN、CROSS JOIN 的含义是一样的，都表示内连接</li></ul></li></ul><h3 id="3-2-内连接-INNER-JOIN-的实现"><a href="#3-2-内连接-INNER-JOIN-的实现" class="headerlink" title="3. 2 内连接(INNER JOIN)的实现"></a>3. 2 内连接(INNER JOIN)的实现</h3><ul><li><p>语法：</p><pre class="line-numbers language-none"><code class="language-none">SELECT 字段列表FROM A表 INNER JOIN B表ON 关联条件WHERE 等其他子句;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>题目 1 ：</p><pre class="line-numbers language-none"><code class="language-none">SELECT e.employee_id, e.last_name, e.department_id,d.department_id, d.location_idFROM employees e JOIN departments dON (e.department_id &#x3D; d.department_id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC06%E7%AB%A0_%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/1649567757543.png" alt="1649567757543"></p><p>题目 2 ：</p><pre class="line-numbers language-none"><code class="language-none">SELECT employee_id, city, department_nameFROM employees eJOIN departments dON d.department_id &#x3D; e.department_idJOIN locations lON d.location_id &#x3D; l.location_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC06%E7%AB%A0_%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/1649567786267.png" alt="1649567786267"></p><h3 id="3-3-外连接-OUTER-JOIN-的实现"><a href="#3-3-外连接-OUTER-JOIN-的实现" class="headerlink" title="3. 3 外连接(OUTER JOIN)的实现"></a>3. 3 外连接(OUTER JOIN)的实现</h3><h4 id="3-3-1-左外连接-LEFT-OUTER-JOIN"><a href="#3-3-1-左外连接-LEFT-OUTER-JOIN" class="headerlink" title="3. 3. 1 左外连接(LEFT OUTER JOIN)"></a>3. 3. 1 左外连接(LEFT OUTER JOIN)</h4><ul><li><p>语法：</p><pre class="line-numbers language-none"><code class="language-none">#实现查询结果是ASELECT 字段列表FROM A表 LEFT JOIN B表ON 关联条件WHERE 等其他子句;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">SELECT e.last_name, e.department_id, d.department_nameFROM employees eLEFT OUTER JOIN departments dON (e.department_id &#x3D; d.department_id) ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC06%E7%AB%A0_%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/1649567858182.png" alt="1649567858182"></p></li></ul><h4 id="3-3-2-右外连接-RIGHT-OUTER-JOIN"><a href="#3-3-2-右外连接-RIGHT-OUTER-JOIN" class="headerlink" title="3. 3. 2 右外连接(RIGHT OUTER JOIN)"></a>3. 3. 2 右外连接(RIGHT OUTER JOIN)</h4><ul><li><p>语法：</p><pre class="line-numbers language-none"><code class="language-none">#实现查询结果是BSELECT 字段列表FROM A表 RIGHT JOIN B表ON 关联条件WHERE 等其他子句;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">SELECT e.last_name, e.department_id, d.department_nameFROM employees eRIGHT OUTER JOIN departments dON (e.department_id &#x3D; d.department_id) ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC06%E7%AB%A0_%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/1649567951152.png" alt="1649567951152"></p></li></ul><blockquote><p>需要注意的是，LEFT JOIN 和 RIGHT JOIN 只存在于 SQL 99 及以后的标准中，在 SQL 92 中不存在，只能用 (+) 表示。</p></blockquote><h4 id="3-3-3-满外连接-FULL-OUTER-JOIN"><a href="#3-3-3-满外连接-FULL-OUTER-JOIN" class="headerlink" title="3. 3. 3 满外连接(FULL OUTER JOIN)"></a>3. 3. 3 满外连接(FULL OUTER JOIN)</h4><ul><li>满外连接的结果 &#x3D; 左右表匹配的数据 + 左表没有匹配到的数据 + 右表没有匹配到的数据。</li><li>SQL 99 是支持满外连接的。使用FULL JOIN 或 FULL OUTER JOIN来实现。</li><li>需要注意的是，MySQL不支持FULL JOIN，但是可以用 LEFT JOIN UNION RIGHT join代替。</li></ul><hr><h2 id="4-UNION的使用"><a href="#4-UNION的使用" class="headerlink" title="4. UNION的使用"></a>4. UNION的使用</h2><hr><p><strong>合并查询结果</strong>利用UNION关键字，可以给出多条SELECT语句，并将它们的结果组合成单个结果集。合并时，两个表对应的列数和数据类型必须相同，并且相互对应。各个SELECT语句之间使用UNION或UNION ALL关键字分隔。</p><p>语法格式：</p><pre class="line-numbers language-none"><code class="language-none">SELECT column,... FROM tableUNION [ALL]SELECT column,... FROM table<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>UNION操作符</strong></p><p><img src="/../pic/%E7%AC%AC06%E7%AB%A0_%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/1649568054268.png" alt="1649568054268"></p><p>UNION 操作符返回两个查询的结果集的并集，去除重复记录。</p><p><strong>UNION ALL操作符</strong></p><p><img src="/../pic/%E7%AC%AC06%E7%AB%A0_%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/1649568075220.png" alt="1649568075220"></p><p>UNION ALL操作符返回两个查询的结果集的并集。对于两个结果集的重复部分，不去重。</p><blockquote><p>注意：执行UNION ALL语句时所需要的资源比UNION语句少。如果明确知道合并数据后的结果数据不存在重复数据，或者不需要去除重复的数据，则尽量使用UNION ALL语句，以提高数据查询的效率。</p></blockquote><p>举例：查询部门编号&gt; 90 或邮箱包含a的员工信息</p><pre class="line-numbers language-none"><code class="language-none">#方式 1SELECT * FROM employees WHERE email LIKE &#39;%a%&#39; OR department_id&gt; 90 ;#方式 2SELECT * FROM employees  WHERE email LIKE &#39;%a%&#39;UNIONSELECT * FROM employees  WHERE department_id&gt; 90 ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例：查询中国用户中男性的信息以及美国用户中年男性的用户信息</p><pre class="line-numbers language-none"><code class="language-none">SELECT id,cname FROM t_chinamale WHERE csex&#x3D;&#39;男&#39;UNION ALLSELECT id,tname FROM t_usmale WHERE tGender&#x3D;&#39;male&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="5-七种SQL-JOINS的实现"><a href="#5-七种SQL-JOINS的实现" class="headerlink" title="5. 七种SQL JOINS的实现"></a>5. 七种SQL JOINS的实现</h2><hr><p><img src="/../pic/%E7%AC%AC06%E7%AB%A0_%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/1649568229075.png" alt="1649568229075"></p><h3 id="5-1-代码实现"><a href="#5-1-代码实现" class="headerlink" title="5.1 代码实现"></a>5.1 代码实现</h3><pre class="line-numbers language-none"><code class="language-none">#中图：内连接 A∩BSELECT employee_id,last_name,department_nameFROM employees e JOIN departments dON e.&#96;department_id&#96; &#x3D; d.&#96;department_id&#96;;#左上图：左外连接SELECT employee_id,last_name,department_nameFROM employees e LEFT JOIN departments dON e.&#96;department_id&#96; &#x3D; d.&#96;department_id&#96;;#右上图：右外连接SELECT employee_id,last_name,department_nameFROM employees e RIGHT JOIN departments dON e.&#96;department_id&#96; &#x3D; d.&#96;department_id&#96;;SELECT employee_id,last_name,department_nameFROM employees e LEFT JOIN departments dON e.&#96;department_id&#96; &#x3D; d.&#96;department_id&#96;WHERE d.&#96;department_id&#96; IS NULL#右中图：B-A∩BSELECT employee_id,last_name,department_nameFROM employees e RIGHT JOIN departments dON e.&#96;department_id&#96; &#x3D; d.&#96;department_id&#96;WHERE e.&#96;department_id&#96; IS NULL#左下图：满外连接左中图 + 右上图 A∪BSELECT employee_id,last_name,department_nameFROM employees e LEFT JOIN departments dON e.&#96;department_id&#96; &#x3D; d.&#96;department_id&#96;WHERE d.&#96;department_id&#96; IS NULLUNION ALL #没有去重操作，效率高SELECT employee_id,last_name,department_nameFROM employees e RIGHT JOIN departments dON e.&#96;department_id&#96; &#x3D; d.&#96;department_id&#96;;#右下图#左中图 + 右中图 A ∪B- A∩B 或者 (A - A∩B) ∪ （B - A∩B）SELECT employee_id,last_name,department_nameFROM employees e LEFT JOIN departments dON e.&#96;department_id&#96; &#x3D; d.&#96;department_id&#96;WHERE d.&#96;department_id&#96; IS NULLUNION ALLSELECT employee_id,last_name,department_nameFROM employees e RIGHT JOIN departments dON e.&#96;department_id&#96; &#x3D; d.&#96;department_id&#96;WHERE e.&#96;department_id&#96; IS NULL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-语法格式小结"><a href="#5-2-语法格式小结" class="headerlink" title="5.2 语法格式小结"></a>5.2 语法格式小结</h3><ul><li><p>左中图</p><pre class="line-numbers language-none"><code class="language-none">#实现A - A∩Bselect 字段列表from A表 left join B表on 关联条件where 从表关联字段 is null and 等其他子句;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>右中图</p><pre class="line-numbers language-none"><code class="language-none">#实现B - A∩Bselect 字段列表from A表 right join B表on 关联条件where 从表关联字段 is null and 等其他子句;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>左下图</p><pre class="line-numbers language-none"><code class="language-none">#实现查询结果是A∪B#用左外的A，union 右外的Bselect 字段列表from A表 left join B表on 关联条件where 等其他子句unionselect 字段列表from A表 right join B表on 关联条件where 等其他子句;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>右下图</p><pre class="line-numbers language-none"><code class="language-none">#实现A∪B - A∩B 或 (A - A∩B) ∪ （B - A∩B）#使用左外的 (A - A∩B) union 右外的（B - A∩B）select 字段列表from A表 left join B表on 关联条件where 从表关联字段 is null and 等其他子句unionselect 字段列表from A表 right join B表on 关联条件where 从表关联字段 is null and 等其他子句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h2 id="6-SQL-99-语法新特性"><a href="#6-SQL-99-语法新特性" class="headerlink" title="6. SQL 99 语法新特性"></a>6. SQL 99 语法新特性</h2><hr><h3 id="6-1-自然连接"><a href="#6-1-自然连接" class="headerlink" title="6. 1 自然连接"></a>6. 1 自然连接</h3><p>SQL 99 在 SQL 92 的基础上提供了一些特殊语法，比如 <code>NATURAL JOIN</code> 用来表示自然连接。我们可以把自然连接理解为 SQL 92 中的等值连接。它会帮你自动查询两张连接表中<code>所有相同的字段</code>，然后进行<code>等值连接</code>。</p><p>在SQL 92 标准中：</p><pre class="line-numbers language-none"><code class="language-none">SELECT employee_id,last_name,department_nameFROM employees e JOIN departments dON e.&#96;department_id&#96; &#x3D; d.&#96;department_id&#96;AND e.&#96;manager_id&#96; &#x3D; d.&#96;manager_id&#96;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在 SQL 99 中你可以写成：</p><pre class="line-numbers language-none"><code class="language-none">SELECT employee_id,last_name,department_nameFROM employees e NATURAL JOIN departments d;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-2-USING连接"><a href="#6-2-USING连接" class="headerlink" title="6. 2 USING连接"></a>6. 2 USING连接</h3><p>当我们进行连接的时候，SQL 99 还支持使用 USING 指定数据表里的同名字段进行等值连接。但是只能配合JOIN一起使用。比如：</p><pre class="line-numbers language-none"><code class="language-none">SELECT employee_id,last_name,department_nameFROM employees e JOIN departments dUSING (department_id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>你能看出与自然连接 NATURAL JOIN 不同的是，USING 指定了具体的相同的字段名称，你需要在 USING的括号 () 中填入要指定的同名字段。同时使用 JOIN…USING 可以简化 JOIN ON 的等值连接。它与下面的 SQL 查询结果是相同的：</p><pre class="line-numbers language-none"><code class="language-none">SELECT employee_id,last_name,department_nameFROM employees e ,departments dWHERE e.department_id &#x3D; d.department_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="7-章节小结"><a href="#7-章节小结" class="headerlink" title="7. 章节小结"></a>7. 章节小结</h2><hr><p>表连接的约束条件可以有三种方式：WHERE, ON, USING</p><ul><li>WHERE：适用于所有关联查询</li><li>ON：只能和JOIN一起使用，只能写关联条件。虽然关联条件可以并到WHERE中和其他条件一起写，但分开写可读性更好。</li><li>USING：只能和JOIN一起使用，而且要求 两个 关联字段在关联表中名称一致，而且只能表示关联字段值相等</li></ul><pre class="line-numbers language-none"><code class="language-none">#关联条件#把关联条件写在where后面SELECT last_name,department_nameFROM employees,departmentsWHERE employees.department_id &#x3D; departments.department_id;#把关联条件写在on后面，只能和JOIN一起使用SELECT last_name,department_nameFROM employees INNER JOIN departmentsON employees.department_id &#x3D; departments.department_id;SELECT last_name,department_nameFROM employees CROSS JOIN departmentsON employees.department_id &#x3D; departments.department_id;SELECT last_name,department_nameFROM employees JOIN departmentsON employees.department_id &#x3D; departments.department_id;#把关联字段写在using()中，只能和JOIN一起使用#而且两个表中的关联字段必须名称相同，而且只能表示&#x3D;#查询员工姓名与基本工资SELECT last_name,job_titleFROM employees INNER JOIN jobs USING(job_id);#n张表关联，需要n-1个关联条件#查询员工姓名，基本工资，部门名称SELECT last_name,job_title,department_name FROM employees,departments,jobsWHERE employees.department_id &#x3D; departments.department_idAND employees.job_id &#x3D; jobs.job_id;SELECT last_name,job_title,department_nameFROM employees INNER JOIN departments INNER JOIN jobsON employees.department_id &#x3D; departments.department_idAND employees.job_id &#x3D; jobs.job_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><p>我们要<code>控制连接表的数量</code>。多表连接就相当于嵌套 for 循环一样，非常消耗资源，会让 SQL 查询性能下降得很严重，因此不要连接不必要的表。在许多 DBMS 中，也都会有最大连接表的限制。</p><blockquote><p>【强制】超过三个表禁止 join。需要 join 的字段，数据类型保持绝对一致；多表关联查询时， 保证被关联的字段需要有索引。</p><p>说明：即使双表 join 也要注意表索引、SQL 性能。</p><p>来源：阿里巴巴《Java开发手册》</p></blockquote><hr><h2 id="附录：常用的-SQL-标准有哪些"><a href="#附录：常用的-SQL-标准有哪些" class="headerlink" title="附录：常用的 SQL 标准有哪些"></a>附录：常用的 SQL 标准有哪些</h2><hr><p>在正式开始讲连接表的种类时，我们首先需要知道 SQL 存在不同版本的标准规范，因为不同规范下的表连接操作是有区别的。</p><p>SQL 有两个主要的标准，分别是 <code>SQL92</code> 和 <code>SQL99</code>。 92 和 99 代表了标准提出的时间，SQL92 就是 92 年提出的标准规范。当然除了 SQL92 和 SQL99 以外，还存在 SQL-86、SQL-89、SQL:2003、SQL:2008、SQL:2011 和 SQL:2016 等其他的标准。</p><p>这么多标准，到底该学习哪个呢？ <strong>实际上最重要的 SQL 标准就是 SQL 92 和 SQL 99</strong> 。一般来说 SQL92 的形式更简单，但是写的 SQL 语句会比较长，可读性较差。而 SQL99 相比于 SQL92 来说，语法更加复杂，但可读性更强。我们从这两个标准发布的页数也能看出，SQL92 的标准有 500 页，而 SQL99 标准超过了1000 页。实际上从 SQL99 之后，很少有人能掌握所有内容，因为确实太多了。就好比我们使用Windows、Linux 和 Office 的时候，很少有人能掌握全部内容一样。我们只需要掌握一些核心的功能，满足日常工作的需求即可。</p><p><strong>SQL 92 和 SQL 99 是经典的 SQL 标准，也分别叫做 SQL- 2 和 SQL- 3 标准。</strong> 也正是在这两个标准发布之后，SQL 影响力越来越大，甚至超越了数据库领域。现如今 SQL 已经不仅仅是数据库领域的主流语言，还是信息领域中信息处理的主流语言。在图形检索、图像检索以及语音检索中都能看到 SQL 语言的使用。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单行函数</title>
      <link href="/2022/07/17/di-07-zhang-dan-xing-han-shu/"/>
      <url>/2022/07/17/di-07-zhang-dan-xing-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="第07章-单行函数"><a href="#第07章-单行函数" class="headerlink" title="第07章_单行函数"></a>第07章_单行函数</h1><h2 id="1-函数的理解"><a href="#1-函数的理解" class="headerlink" title="1. 函数的理解"></a>1. 函数的理解</h2><hr><h3 id="1-1-什么是函数"><a href="#1-1-什么是函数" class="headerlink" title="1. 1 什么是函数"></a>1. 1 什么是函数</h3><p>函数在计算机语言的使用中贯穿始终，函数的作用是什么呢？它可以把我们经常使用的代码封装起来，需要的时候直接调用即可。这样既<code>提高了代码效率</code>，又<code>提高了可维护性</code>。在 SQL 中我们也可以使用函数对检索出来的数据进行函数操作。使用这些函数，可以极大地<code>提高用户对数据库的管理效率</code>。</p><p><img src="/../pic/%E7%AC%AC07%E7%AB%A0_%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/1649580146867.png" alt="1649580146867"></p><p>从函数定义的角度出发，我们可以将函数分成<code>内置函数</code>和<code>自定义函数</code>。在 SQL 语言中，同样也包括了内置函数和自定义函数。内置函数是系统内置的通用函数，而自定义函数是我们根据自己的需要编写的，本章及下一章讲解的是 SQL 的内置函数。</p><h3 id="1-2-不同DBMS函数的差异"><a href="#1-2-不同DBMS函数的差异" class="headerlink" title="1. 2 不同DBMS函数的差异"></a>1. 2 不同DBMS函数的差异</h3><p>我们在使用 SQL 语言的时候，不是直接和这门语言打交道，而是通过它使用不同的数据库软件，即DBMS。 <strong>DBMS 之间的差异性很大，远大于同一个语言不同版本之间的差异。</strong> 实际上，只有很少的函数是被 DBMS 同时支持的。比如，大多数 DBMS 使用（||）或者（+）来做拼接符，而在 MySQL 中的字符串拼接函数为concat()。大部分 DBMS 会有自己特定的函数，这就意味着 <strong>采用 SQL 函数的代码可移植性是很差的</strong> ，因此在使用函数的时候需要特别注意。</p><h3 id="1-3-MySQL的内置函数及分类"><a href="#1-3-MySQL的内置函数及分类" class="headerlink" title="1. 3 MySQL的内置函数及分类"></a>1. 3 MySQL的内置函数及分类</h3><p>MySQL提供了丰富的内置函数，这些函数使得数据的维护与管理更加方便，能够更好地提供数据的分析与统计功能，在一定程度上提高了开发人员进行数据分析与统计的效率。</p><p>MySQL提供的内置函数从<code>实现的功能角度</code>可以分为数值函数、字符串函数、日期和时间函数、流程控制函数、加密与解密函数、获取MySQL信息函数、聚合函数等。这里，我将这些丰富的内置函数再分为两类：<code>单行函数</code>、<code>聚合函数（或分组函数）</code>。</p><p><strong>两种SQL函数</strong></p><p><img src="/../pic/%E7%AC%AC07%E7%AB%A0_%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/1649580387011.png" alt="1649580387011"></p><p><strong>单行函数</strong></p><ul><li>操作数据对象</li><li>接受参数返回一个结果</li><li><strong>只对一行进行变换</strong></li><li><strong>每行返回一个结果</strong></li><li>可以嵌套</li><li>参数可以是一列或一个值</li></ul><hr><h2 id="2-数值函数"><a href="#2-数值函数" class="headerlink" title="2. 数值函数"></a>2. 数值函数</h2><hr><h3 id="2-1-基本函数"><a href="#2-1-基本函数" class="headerlink" title="2. 1 基本函数"></a>2. 1 基本函数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>ABS(x)</td><td>返回x的绝对值</td></tr><tr><td>SIGN(X)</td><td>返回X的符号。正数返回 1 ，负数返回-1， 0 返回 0</td></tr><tr><td>PI()</td><td>返回圆周率的值</td></tr><tr><td>CEIL(x)，CEILING(x)</td><td>返回大于或等于某个值的最小整数</td></tr><tr><td>FLOOR(x)</td><td>返回小于或等于某个值的最大整数</td></tr><tr><td>LEAST(e1,e2,e3…)</td><td>返回列表中的最小值</td></tr><tr><td>GREATEST(e1,e2,e3…)</td><td>返回列表中的最大值</td></tr><tr><td>MOD(x,y)</td><td>返回X除以Y后的余数</td></tr><tr><td>RAND()</td><td>返回0~1的随机值</td></tr><tr><td>RAND(x)</td><td>返回0~1的随机值，其中x的值用作种子值，相同的X值会产生相同的随机数</td></tr><tr><td>ROUND(x)</td><td>返回一个对x的值进行四舍五入后，最接近于X的整数</td></tr><tr><td>ROUND(x,y)</td><td>返回一个对x的值进行四舍五入后最接近X的值，并保留到小数点后面Y位</td></tr><tr><td>TRUNCATE(x,y)</td><td>返回数字x截断为y位小数的结果</td></tr><tr><td>SQRT(x)</td><td>返回x的平方根。当X的值为负数时，返回NULL</td></tr></tbody></table><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">SELECTABS(-123),ABS(32),SIGN(-23),SIGN(43),PI(),CEIL(32.32),CEILING(-43.23),FLOOR(32.32),FLOOR(-43.23),MOD( 12 , 5 )FROM DUAL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC07%E7%AB%A0_%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/1649580837301.png" alt="1649580837301"></p><pre class="line-numbers language-none"><code class="language-none">SELECT RAND(),RAND(),RAND( 10 ),RAND( 10 ),RAND(- 1 ),RAND(- 1 )FROM DUAL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC07%E7%AB%A0_%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/1649580972765.png" alt="1649580972765"></p><pre class="line-numbers language-none"><code class="language-none">SELECTROUND(12.33),ROUND(12.343,2),ROUND(12.324,-1),TRUNCATE(12.66,1),TRUNCATE(12.66,-1)FROM DUAL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC07%E7%AB%A0_%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/1649581095543.png" alt="1649581095543"></p><h3 id="2-2-角度与弧度互换函数"><a href="#2-2-角度与弧度互换函数" class="headerlink" title="2. 2 角度与弧度互换函数"></a>2. 2 角度与弧度互换函数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>RADIANS(x)</td><td>将角度转化为弧度，其中，参数x为角度值</td></tr><tr><td>DEGREES(x)</td><td>将弧度转化为角度，其中，参数x为弧度值</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">SELECT RADIANS(30),RADIANS(60),RADIANS(90),DEGREES(2*PI()),DEGREES(RADIANS(90))FROM DUAL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-3-三角函数"><a href="#2-3-三角函数" class="headerlink" title="2. 3 三角函数"></a>2. 3 三角函数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>SIN(x)</td><td>返回x的正弦值，其中，参数x为弧度值</td></tr><tr><td>ASIN(x)</td><td>返回x的反正弦值，即获取正弦为x的值。如果x的值不在- 1 到 1 之间，则返回NULL</td></tr><tr><td>COS(x)</td><td>返回x的余弦值，其中，参数x为弧度值</td></tr><tr><td>ACOS(x)</td><td>返回x的反余弦值，即获取余弦为x的值。如果x的值不在- 1 到 1 之间，则返回NULL</td></tr><tr><td>TAN(x)</td><td>返回x的正切值，其中，参数x为弧度值</td></tr><tr><td>ATAN(x)</td><td>返回x的反正切值，即返回正切值为x的值</td></tr><tr><td>ATAN2(m,n)</td><td>返回两个参数的反正切值</td></tr><tr><td>COT(x)</td><td>返回x的余切值，其中，X为弧度值</td></tr></tbody></table><p>举例：</p><p>ATAN 2 (M,N)函数返回两个参数的反正切值。 与ATAN(X)函数相比，ATAN 2 (M,N)需要两个参数，例如有两个点point(x 1 ,y 1 )和point(x 2 ,y 2 )，使用ATAN(X)函数计算反正切值为ATAN((y 2 - y 1 )&#x2F;(x 2 - x 1 ))，使用ATAN 2 (M,N)计算反正切值则为ATAN 2 (y 2 - y 1 ,x 2 - x 1 )。由使用方式可以看出，当x 2 - x 1 等于 0 时，ATAN(X)函数会报错，而ATAN 2 (M,N)函数则仍然可以计算。</p><p>ATAN 2 (M,N)函数的使用示例如下：</p><pre class="line-numbers language-none"><code class="language-none">SELECTSIN(RADIANS(30)),DEGREES(ASIN(1)),TAN(RADIANS(45)),DEGREES(ATAN(1)),DEGREES(ATAN2(1,1))FROM DUAL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC07%E7%AB%A0_%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/1649581614362.png" alt="1649581614362"></p><h3 id="2-4-指数与对数"><a href="#2-4-指数与对数" class="headerlink" title="2.4 指数与对数"></a>2.4 指数与对数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>POW(x,y)，POWER(X,Y)</td><td>返回x的y次方</td></tr><tr><td>EXP(X)</td><td>返回e的X次方，其中e是一个常数，2.718281828459045</td></tr><tr><td>LN(X)，LOG(X)</td><td>返回以e为底的X的对数，当X &lt;&#x3D; 0 时，返回的结果为NULL</td></tr><tr><td>LOG10(X)</td><td>返回以 10 为底的X的对数，当X &lt;&#x3D; 0 时，返回的结果为NULL</td></tr><tr><td>LOG2(X)</td><td>返回以 2 为底的X的对数，当X &lt;&#x3D; 0 时，返回NULL</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT POW( 2 , 5 ),POWER( 2 , 4 ),EXP( 2 ),LN( 10 ),LOG10( 10 ),LOG2(4)-&gt; FROM DUAL;+----------+------------+------------------+-------------------+-----------+---------+| POW( 2 , 5 ) | POWER( 2 , 4 ) | EXP( 2 ) | LN( 10 ) | LOG10( 10 ) | LOG2(4) |+----------+------------+------------------+-------------------+-----------+---------+| 32 | 16 | 7.38905609893065 | 2.302585092994046 | 1 | 2 |+----------+------------+------------------+-------------------+-----------+---------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-进制间的转换"><a href="#2-5-进制间的转换" class="headerlink" title="2. 5 进制间的转换"></a>2. 5 进制间的转换</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>BIN(x)</td><td>返回x的二进制编码</td></tr><tr><td>HEX(x)</td><td>返回x的十六进制编码</td></tr><tr><td>OCT(x)</td><td>返回x的八进制编码</td></tr><tr><td>CONV(x,f1,f2)</td><td>返回f1进制数变成f2进制数</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT BIN( 10 ),HEX( 10 ),OCT( 10 ),CONV( 10 , 2 , 8 )-&gt; FROM DUAL;+---------+---------+---------+--------------+| BIN( 10 ) | HEX( 10 ) | OCT( 10 ) | CONV( 10 , 2 , 8 ) |+---------+---------+---------+--------------+| 1010 | A | 12 | 2 |+---------+---------+---------+--------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="3-字符串函数"><a href="#3-字符串函数" class="headerlink" title="3. 字符串函数"></a>3. 字符串函数</h2><hr><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>ASCII(S)</td><td>返回字符串S中的第一个字符的ASCII码值</td></tr><tr><td>CHAR_LENGTH(s)</td><td>返回字符串s的字符数。作用与CHARACTER_LENGTH(s)相同</td></tr><tr><td>LENGTH(s)</td><td>返回字符串s的字节数，和字符集有关</td></tr><tr><td>CONCAT(s1,s2,……,sn)</td><td>连接s1,s2,……,sn为一个字符串</td></tr><tr><td>CONCAT_WS(x,s1,s2,……,sn)</td><td>同CONCAT(s1,s2,…)函数，但是每个字符串之间要加上x</td></tr><tr><td>INSERT(str,idx,len,replacestr)</td><td>将字符串str从第idx位置开始，len个字符长的子串替换为字符串replacestr</td></tr><tr><td>REPLACE(str, a, b)</td><td>用字符串b替换字符串str中所有出现的字符串a</td></tr><tr><td>UPPER(s) 或 UCASE(s)</td><td>将字符串s的所有字母转成大写字母</td></tr><tr><td>LOWER(s) 或LCASE(s)</td><td>将字符串s的所有字母转成小写字母</td></tr><tr><td>LEFT(str,n)</td><td>返回字符串str最左边的n个字符</td></tr><tr><td>RIGHT(str,n)</td><td>返回字符串str最右边的n个字符</td></tr><tr><td>LPAD(str, len, pad)</td><td>用字符串pad对str最左边进行填充，直到str的长度为len个字符</td></tr><tr><td>RPAD(str ,len, pad)</td><td>用字符串pad对str最右边进行填充，直到str的长度为len个字符</td></tr><tr><td>LTRIM(s)</td><td>去掉字符串s左侧的空格</td></tr><tr><td>RTRIM(s)</td><td>去掉字符串s右侧的空格</td></tr><tr><td>TRIM(s)</td><td>去掉字符串s开始与结尾的空格</td></tr><tr><td>TRIM(s1 FROM s)</td><td>去掉字符串s开始与结尾的s</td></tr><tr><td>TRIM(LEADING s FROM s)</td><td>去掉字符串s开始处的s</td></tr><tr><td>TRIM(TRAILING s FROM s)</td><td>去掉字符串s结尾处的s</td></tr><tr><td>REPEAT(str, n)</td><td>返回str重复n次的结果</td></tr><tr><td>SPACE(n)</td><td>返回n个空格</td></tr><tr><td>STRCMP(s1,s2)</td><td>比较字符串s1,s2的ASCII码值的大小</td></tr><tr><td>SUBSTR(s,index,len)</td><td>返回从字符串s的index位置其len个字符，作用与SUBSTRING(s,n,len)、MID(s,n,len)相同</td></tr><tr><td>LOCATE(substr,str)</td><td>返回字符串substr在字符串str中首次出现的位置，作用于POSITION(substr IN str)、INSTR(str,substr)相同。未找到，返回 0</td></tr><tr><td>ELT(m,s1,s2,…,sn)</td><td>返回指定位置的字符串，如果m&#x3D;1，则返回s1，如果m&#x3D;2，则返回s2，如果m&#x3D;n，则返回sn</td></tr><tr><td>FIELD(s,s1,s2,…,sn)</td><td>返回字符串s在字符串列表中第一次出现的位置</td></tr><tr><td>FIND_IN_SET(s1,s2)</td><td>返回字符串s1在字符串s2中出现的位置。其中，字符串s2是一个以逗号分隔的字符串</td></tr><tr><td>REVERSE(s)</td><td>返回s反转后的字符串</td></tr><tr><td>NULLIF(value1,value2)</td><td>比较两个字符串，如果value1与value2相等，则返回NULL，否则返回value1</td></tr></tbody></table><blockquote><p>注意：MySQL中，字符串的位置是从 1 开始的。</p></blockquote><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT FIELD(&#39;mm&#39;,&#39;hello&#39;,&#39;msm&#39;,&#39;amma&#39;),FIND_IN_SET(&#39;mm&#39;,&#39;hello,mm,amma&#39;)-&gt; FROM DUAL;+----------------------------------+-----------------------------------+| FIELD(&#39;mm&#39;,&#39;hello&#39;,&#39;msm&#39;,&#39;amma&#39;) | FIND_IN_SET(&#39;mm&#39;,&#39;hello,mm,amma&#39;) |+----------------------------------+-----------------------------------+| 0 | 2 |+----------------------------------+-----------------------------------+1 row in set (0.00 sec)mysql&gt; SELECT NULLIF(&#39;mysql&#39;,&#39;mysql&#39;),NULLIF(&#39;mysql&#39;, &#39;&#39;);+-------------------------+---------------------+| NULLIF(&#39;mysql&#39;,&#39;mysql&#39;) | NULLIF(&#39;mysql&#39;, &#39;&#39;) |+-------------------------+---------------------+| NULL | mysql |+-------------------------+---------------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="4-日期和时间函数"><a href="#4-日期和时间函数" class="headerlink" title="4. 日期和时间函数"></a>4. 日期和时间函数</h2><hr><h3 id="4-1-获取日期、时间"><a href="#4-1-获取日期、时间" class="headerlink" title="4. 1 获取日期、时间"></a>4. 1 获取日期、时间</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>CURDATE() ，CURRENT_DATE()</td><td>返回当前日期，只包含年、月、日</td></tr><tr><td>CURTIME() ， CURRENT_TIME()</td><td>返回当前时间，只包含时、分、秒</td></tr><tr><td>NOW() &#x2F; SYSDATE() &#x2F; CURRENT_TIMESTAMP() &#x2F; LOCALTIME() &#x2F; LOCALTIMESTAMP()</td><td>返回当前系统日期和时间</td></tr><tr><td>UTC_DATE()</td><td>返回UTC（世界标准时间）日期</td></tr><tr><td>UTC_TIME()</td><td>返回UTC（世界标准时间）时间</td></tr></tbody></table><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">SELECTCURDATE(),CURTIME(),NOW(),SYSDATE()+0,UTC_DATE(),UTC_DATE()+0,UTC_TIME(),UTC_TIME()+0FROM DUAL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC07%E7%AB%A0_%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/1649583379441.png" alt="1649583379441"></p><h3 id="4-2-日期与时间戳的转换"><a href="#4-2-日期与时间戳的转换" class="headerlink" title="4. 2 日期与时间戳的转换"></a>4. 2 日期与时间戳的转换</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>UNIX_TIMESTAMP()</td><td>以UNIX时间戳的形式返回当前时间。SELECT UNIX_TIMESTAMP() - &gt;1634348884</td></tr><tr><td>UNIX_TIMESTAMP(date)</td><td>将时间date以UNIX时间戳的形式返回。</td></tr><tr><td>FROM_UNIXTIME(timestamp)</td><td>将UNIX时间戳的时间转换为普通格式的时间</td></tr></tbody></table><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT UNIX_TIMESTAMP(CURTIME());+---------------------------+| UNIX_TIMESTAMP(CURTIME()) |+---------------------------+| 1576380969 |+---------------------------+1 row in set (0.00 sec)mysql&gt; SELECT UNIX_TIMESTAMP(now());+-----------------------+| UNIX_TIMESTAMP(now()) |+-----------------------+| 1576380910 |+-----------------------+1 row in set (0.01 sec)mysql&gt; SELECT UNIX_TIMESTAMP(CURDATE());+---------------------------+| UNIX_TIMESTAMP(CURDATE()) |+---------------------------+| 1576339200 |+---------------------------+1 row in set (0.00 sec)mysql&gt; SELECT UNIX_TIMESTAMP(CURTIME());+---------------------------+| UNIX_TIMESTAMP(CURTIME()) |+---------------------------+| 1576380969 |+---------------------------+1 row in set (0.00 sec)mysql&gt; SELECT UNIX_TIMESTAMP(&#39;2011-11-11 11:11:11&#39;)+---------------------------------------+| UNIX_TIMESTAMP(&#39;2011-11-11 11:11:11&#39;) |+---------------------------------------+| 1320981071 |+---------------------------------------+1 row in set (0.00 sec)mysql&gt; SELECT FROM_UNIXTIME( 1576380910 );+---------------------------+| FROM_UNIXTIME( 1576380910 ) |+---------------------------+| 2019 - 12 - 15 11 :35:10 |+---------------------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-获取月份、星期、星期数、天数等函数"><a href="#4-3-获取月份、星期、星期数、天数等函数" class="headerlink" title="4. 3 获取月份、星期、星期数、天数等函数"></a>4. 3 获取月份、星期、星期数、天数等函数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>YEAR(date) &#x2F; MONTH(date) &#x2F; DAY(date)</td><td>返回具体的日期值</td></tr><tr><td>HOUR(time)&#x2F;MINUTE(time)&#x2F;SECOND(time)</td><td>返回具体的时间值</td></tr><tr><td>MONTHNAME(date)</td><td>返回月份：January，…</td></tr><tr><td>DAYNAME(date)</td><td>返回星期几：MONDAY，TUESDAY…..SUNDAY</td></tr><tr><td>WEEKDAY(date)</td><td>返回周几，注意，周1是0，周2是1，…周日是6</td></tr><tr><td>QUARTER(date)</td><td>返回日期对应的季度，范围为 1 ～ 4</td></tr><tr><td>WEEK(date) ， WEEKOFYEAR(date)</td><td>返回一年中的第几周</td></tr><tr><td>DAYOFYEAR(date)</td><td>返回日期是一年中的第几天</td></tr><tr><td>DAYOFMONTH(date)</td><td>返回日期位于所在月份的第几天</td></tr><tr><td>DAYOFWEEK(date)</td><td>返回周几，注意：周日是 1 ，周一是 2 ，…周六是7</td></tr></tbody></table><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">SELECT YEAR(CURDATE()),MONTH(CURDATE()),DAY(CURDATE()),HOUR(CURTIME()),MINUTE(NOW()),SECOND(SYSDATE())FROM DUAL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC07%E7%AB%A0_%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/1649593198654.png" alt="1649593198654"></p><pre class="line-numbers language-none"><code class="language-none">SELECT MONTHNAME(&#39;2021-10-26&#39;),DAYNAME(&#39;2021-10-26&#39;),WEEKDAY(&#39;2021-10-26&#39;),QUARTER(CURDATE()),WEEK(CURDATE()),DAYOFYEAR(NOW()),DAYOFMONTH(NOW()),DAYOFWEEK(NOW())FROM DUAL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC07%E7%AB%A0_%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/1649593240040.png" alt="1649593240040"></p><h3 id="4-4-日期的操作函数"><a href="#4-4-日期的操作函数" class="headerlink" title="4. 4 日期的操作函数"></a>4. 4 日期的操作函数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>EXTRACT(type FROM date)</td><td>返回指定日期中特定的部分，type指定返回的值</td></tr></tbody></table><p>EXTRACT(type FROM date)函数中type的取值与含义：</p><p><img src="/../pic/%E7%AC%AC07%E7%AB%A0_%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/1649593327456.png" alt="1649593327456"></p><pre class="line-numbers language-none"><code class="language-none">SELECT EXTRACT(MINUTE FROM NOW()),EXTRACT( WEEK FROM NOW()),EXTRACT( QUARTER FROM NOW()),EXTRACT( MINUTE_SECOND FROM NOW())FROM DUAL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-时间和秒钟转换的函数"><a href="#4-5-时间和秒钟转换的函数" class="headerlink" title="4. 5 时间和秒钟转换的函数"></a>4. 5 时间和秒钟转换的函数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>TIME_TO_SEC(time)</td><td>将time转化为秒并返回结果值。转化的公式为：<code>小时 * 3600+分钟 * 60+秒</code></td></tr><tr><td>SEC_TO_TIME(seconds)</td><td>将 seconds 描述转化为包含小时、分钟和秒的时间</td></tr></tbody></table><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT TIME_TO_SEC(NOW());+--------------------+| TIME_TO_SEC(NOW()) |+--------------------+| 78774 |+--------------------+1 row in set (0.00 sec)mysql&gt; SELECT SEC_TO_TIME( 78774 );+--------------------+| SEC_TO_TIME( 78774 ) |+--------------------+| 21 :52:54 |+--------------------+1 row in set (0.12 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-计算日期和时间的函数"><a href="#4-6-计算日期和时间的函数" class="headerlink" title="4. 6 计算日期和时间的函数"></a>4. 6 计算日期和时间的函数</h3><p><strong>第 1 组：</strong></p><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>DATE_ADD(datetime, INTERVAL expr type)，ADDDATE(date,INTERVAL expr type)</td><td>返回与给定日期时间相差INTERVAL时间段的日期时间</td></tr><tr><td>DATE_SUB(date,INTERVAL expr type)，SUBDATE(date,INTERVAL expr type)</td><td>返回与date相差INTERVAL时间间隔的日期</td></tr></tbody></table><p>上述函数中type的取值：</p><p><img src="/../pic/%E7%AC%AC07%E7%AB%A0_%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/1649593591378.png" alt="1649593591378"></p><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">SELECT DATE_ADD(NOW(), INTERVAL 1 DAY) AS col1,DATE_ADD(&#39;2021-10-21 23:32:12&#39;,INTERVAL 1 SECOND) AS col2,ADDDATE(&#39;2021-10-21 23:32:12&#39;,INTERVAL 1 SECOND) AS col3,DATE_ADD(&#39;2021-10-21 23:32:12&#39;,INTERVAL &#39;1_1&#39; MINUTE_SECOND) AS col4,DATE_ADD(NOW(), INTERVAL - 1 YEAR) AS col5, #可以是负数DATE_ADD(NOW(), INTERVAL &#39;1_1&#39; YEAR_MONTH) AS col6 #需要单引号FROM DUAL;SELECT DATE_SUB(&#39;2021-01-21&#39;,INTERVAL 31 DAY) AS col1,SUBDATE(&#39;2021-01-21&#39;,INTERVAL 31 DAY) AS col2,DATE_SUB(&#39;2021-01-21 02:01:01&#39;,INTERVAL &#39;1 1&#39; DAY_HOUR) AS colFROM DUAL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第 2 组：</strong></p><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>ADDTIME(time1,time2)</td><td>返回time1加上time2的时间。当time2为一个数字时，代表的是<code>秒</code>，可以为负数</td></tr><tr><td>SUBTIME(time1,time2)</td><td>返回time1减去time2后的时间。当time2为一个数字时，代表的是<code>秒</code>，可以为负数</td></tr><tr><td>DATEDIFF(date1,date2)</td><td>返回date1 - date2的日期间隔天数</td></tr><tr><td>TIMEDIFF(time1, time2)</td><td>返回time1 - time2的时间间隔</td></tr><tr><td>FROM_DAYS(N)</td><td>返回从 0000 年 1 月 1 日起，N天以后的日期</td></tr><tr><td>TO_DAYS(date)</td><td>返回日期date距离 0000 年 1 月 1 日的天数</td></tr><tr><td>LAST_DAY(date)</td><td>返回date所在月份的最后一天的日期</td></tr><tr><td>MAKEDATE(year,n)</td><td>针对给定年份与所在年份中的天数返回一个日期</td></tr><tr><td>MAKETIME(hour,minute,second)</td><td>将给定的小时、分钟和秒组合成时间并返回</td></tr><tr><td>PERIOD_ADD(time,n)</td><td>返回time加上n后的时间</td></tr></tbody></table><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">SELECTADDTIME(NOW(),20),SUBTIME(NOW(),30),SUBTIME(NOW(),&#39;1:1:3&#39;),DATEDIFF(NOW(),&#39;2021-10-01&#39;),TIMEDIFF(NOW(),&#39;2021-10-25 22:10:10&#39;),FROM_DAYS( 366 ),TO_DAYS(&#39;0000-12-25&#39;),LAST_DAY(NOW()),MAKEDATE(YEAR(NOW()), 12 ),MAKETIME( 10 , 21 , 23 ),PERIOD_ADD( 20200101010101 ,10 )FROM DUAL;mysql&gt; SELECT ADDTIME(NOW(), 50 );+---------------------+| ADDTIME(NOW(), 50 ) |+---------------------+| 2019 - 12 - 15 22 :17:47 |+---------------------+1 row in set (0.00 sec)mysql&gt; SELECT ADDTIME(NOW(), &#39;1:1:1&#39;);+-------------------------+| ADDTIME(NOW(), &#39;1:1:1&#39;) |+-------------------------+| 2019 - 12 - 15 23 :18:46 |+-------------------------+1 row in set (0.00 sec)mysql&gt; SELECT SUBTIME(NOW(), &#39;1:1:1&#39;);+-------------------------+| SUBTIME(NOW(), &#39;1:1:1&#39;) |+-------------------------+| 2019 - 12 - 15 21 :23:50 |+-------------------------+1 row in set (0.00 sec)mysql&gt; SELECT SUBTIME(NOW(), &#39;-1:-1:-1&#39;);+----------------------------+| SUBTIME(NOW(), &#39;-1:-1:-1&#39;) |+----------------------------+| 2019 - 12 - 15 22 :25:11 |+----------------------------+1 row in set, 1 warning (0.00 sec)mysql&gt; SELECT FROM_DAYS( 366 );+----------------+| FROM_DAYS( 366 ) |+----------------+| 0001 - 01 - 01 |+----------------+1 row in set (0.00 sec)mysql&gt; SELECT MAKEDATE( 2020 , 1 );+------------------+| MAKEDATE( 2020 , 1 ) |+------------------+| 2020 - 01 - 01 |+------------------+1 row in set (0.00 sec)mysql&gt; SELECT MAKEDATE( 2020 , 32 );+-------------------+| MAKEDATE( 2020 , 32 ) |+-------------------+| 2020 - 02 - 01 |+-------------------+1 row in set (0.00 sec)mysql&gt; SELECT MAKETIME( 1 , 1 , 1 );+-----------------+| MAKETIME( 1 , 1 , 1 ) |+-----------------+| 01 :01:01 |+-----------------+1 row in set (0.00 sec)mysql&gt; SELECT PERIOD_ADD( 20200101010101 , 1 );+------------------------------+| PERIOD_ADD( 20200101010101 , 1 ) |+------------------------------+| 20200101010102 |+------------------------------+1 row in set (0.00 sec)mysql&gt; SELECT TO_DAYS(NOW());+----------------+| TO_DAYS(NOW()) |+----------------+| 737773 |+----------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例：查询 7 天内的新增用户数有多少？</p><pre class="line-numbers language-none"><code class="language-none">SELECT COUNT(*) as num FROM new_user WHERE TO_DAYS(NOW())-TO_DAYS(regist_time)&lt;&#x3D;7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-7-日期的格式化与解析"><a href="#4-7-日期的格式化与解析" class="headerlink" title="4. 7 日期的格式化与解析"></a>4. 7 日期的格式化与解析</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>DATE_FORMAT(date,fmt)</td><td>按照字符串fmt格式化日期date值</td></tr><tr><td>TIME_FORMAT(time,fmt)</td><td>按照字符串fmt格式化时间time值</td></tr><tr><td>GET_FORMAT(date_type,format_type)</td><td>返回日期字符串的显示格式</td></tr><tr><td>STR_TO_DATE(str, fmt)</td><td>按照字符串fmt对str进行解析，解析为一个日期</td></tr></tbody></table><p>上述<code>非GET_FORMAT</code>函数中fmt参数常用的格式符：</p><table><thead><tr><th>格式符</th><th>说明</th><th>格式符</th><th>说明</th></tr></thead><tbody><tr><td>%Y</td><td>4 位数字表示年份</td><td>%y</td><td>表示两位数字表示年份</td></tr><tr><td>%M</td><td>月名表示月份（January,….）</td><td>%m</td><td>两位数字表示月份（01,02,03…）</td></tr><tr><td>%b</td><td>缩写的月名（Jan.，Feb.，….）</td><td>%c</td><td>数字表示月份（1,2,3,…）</td></tr><tr><td>%D</td><td>英文后缀表示月中的天数（1st,2nd,3rd,…）</td><td>%d</td><td>两位数字表示月中的天数(01,02…)</td></tr><tr><td>%e</td><td>数字形式表示月中的天数（1,2,3,4,5…..）</td><td></td><td></td></tr><tr><td>%H</td><td>两位数字表示小数， 24 小时制（01,02..）</td><td>%h和%I</td><td>两位数字表示小时， 12 小时制（01,02..）</td></tr><tr><td>%k</td><td>数字形式的小时， 24 小时制(1,2,3)</td><td>%l</td><td>数字形式表示小时， 12 小时制（1,2,3,4….）</td></tr><tr><td>%i</td><td>两位数字表示分钟（00,01,02）</td><td>%S和%s</td><td>两位数字表示秒(00,01,02…)</td></tr><tr><td>%W</td><td>一周中的星期名称（Sunday…）</td><td>%a</td><td>一周中的星期缩写（Sun.，Mon.,Tues.，..）</td></tr><tr><td>%w</td><td>以数字表示周中的天数(0&#x3D;Sunday,1&#x3D;Monday….)</td><td></td><td></td></tr><tr><td>%j</td><td>以 3 位数字表示年中的天数(001,002…)</td><td>%U</td><td>以数字表示年中的第几周，（1,2,3…）其中Sunday为周中第一天</td></tr><tr><td>%u</td><td>以数字表示年中的第几周，（1,2,3…）其中Monday为周中第一天</td><td></td><td></td></tr><tr><td>%T</td><td>24 小时制</td><td>%r</td><td>12 小时制</td></tr><tr><td>%p</td><td>AM或PM</td><td>%%</td><td>表示%</td></tr></tbody></table><p>GET_FORMAT函数中date_type和format_type参数取值如下：</p><p><img src="/../pic/%E7%AC%AC07%E7%AB%A0_%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/1649594840523.png" alt="1649594840523"></p><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT DATE_FORMAT(NOW(), &#39;%H:%i:%s&#39;);+--------------------------------+| DATE_FORMAT(NOW(), &#39;%H:%i:%s&#39;) |+--------------------------------+| 22 :57:34 |+--------------------------------+1 row in set (0.00 sec)SELECT STR_TO_DATE(&#39;09&#x2F;01&#x2F;2009&#39;,&#39;%m&#x2F;%d&#x2F;%Y&#39;)FROM DUAL;SELECT STR_TO_DATE(&#39;20140422154706&#39;,&#39;%Y%m%d%H%i%s&#39;)FROM DUAL;SELECT STR_TO_DATE(&#39;2014-04-22 15:47:06&#39;,&#39;%Y-%m-%d %H:%i:%s&#39;)FROM DUAL;mysql&gt; SELECT GET_FORMAT(DATE, &#39;USA&#39;);+-------------------------+| GET_FORMAT(DATE, &#39;USA&#39;) |+-------------------------+| %m.%d.%Y |+-------------------------+1 row in set (0.00 sec)SELECT DATE_FORMAT(NOW(),GET_FORMAT(DATE,&#39;USA&#39;)),FROM DUAL;mysql&gt; SELECT STR_TO_DATE(&#39;2020-01-01 00:00:00&#39;,&#39;%Y-%m-%d&#39;);+-----------------------------------------------+| STR_TO_DATE(&#39;2020-01-01 00:00:00&#39;,&#39;%Y-%m-%d&#39;) |+-----------------------------------------------+| 2020 - 01 - 01 |+-----------------------------------------------+1 row in set, 1 warning (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="5-流程控制函数"><a href="#5-流程控制函数" class="headerlink" title="5. 流程控制函数"></a>5. 流程控制函数</h2><hr><p>流程处理函数可以根据不同的条件，执行不同的处理流程，可以在SQL语句中实现不同的条件选择。MySQL中的流程处理函数主要包括IF()、IFNULL()和CASE()函数。</p><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>IF(value,value1,value2)</td><td>如果value的值为TRUE，返回value1，否则返回value</td></tr><tr><td>IFNULL(value1, value2)</td><td>如果value1不为NULL，返回value1，否则返回value</td></tr><tr><td>CASE WHEN 条件1 THEN 结果1 WHEN 条件2 THEN 结果 2 …. [ELSE resultn] END</td><td>相当于Java的if…else if…else…</td></tr><tr><td>CASE expr WHEN 常量值1 THEN 值1 WHEN 常量值1 THEN 值1 …. [ELSE 值n] END</td><td>相当于Java的switch…case…</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">SELECT IF( 1 &gt; 0 ,&#39;正确&#39;,&#39;错误&#39;)-&gt;正确SELECT IFNULL(null,&#39;Hello Word&#39;)-&gt;Hello WordSELECT CASEWHEN 1 &gt; 0THEN &#39;1 &gt; 0&#39;WHEN 2 &gt; 0THEN &#39;2 &gt; 0&#39;ELSE &#39;3 &gt; 0&#39;END-&gt; 1 &gt; 0SELECT CASE 1WHEN 1 THEN &#39;我是1&#39;WHEN 2 THEN &#39;我是2&#39;ELSE &#39;你是谁&#39;SELECT employee_id,salary, CASE WHEN salary&gt;&#x3D; 15000 THEN &#39;高薪&#39;WHEN salary&gt;&#x3D; 10000 THEN &#39;潜力股&#39;WHEN salary&gt;&#x3D; 8000 THEN &#39;屌丝&#39;ELSE &#39;草根&#39; END &quot;描述&quot;FROM employees;SELECT oid,&#96;status&#96;, CASE &#96;status&#96; WHEN 1 THEN &#39;未付款&#39;WHEN 2 THEN &#39;已付款&#39;WHEN 3 THEN &#39;已发货&#39;WHEN 4 THEN &#39;确认收货&#39;ELSE &#39;无效订单&#39; ENDFROM t_order;mysql&gt; SELECT CASE WHEN 1 &gt; 0 THEN &#39;yes&#39; WHEN 1 &lt;&#x3D; 0 THEN &#39;no&#39; ELSE &#39;unknown&#39; END;+---------------------------------------------------------------------+| CASE WHEN 1 &gt; 0 THEN &#39;yes&#39; WHEN 1 &lt;&#x3D; 0 THEN &#39;no&#39; ELSE &#39;unknown&#39; END |+---------------------------------------------------------------------+| yes |+---------------------------------------------------------------------+1 row in set (0.00 sec)mysql&gt; SELECT CASE WHEN 1 &lt; 0 THEN &#39;yes&#39; WHEN 1 &#x3D; 0 THEN &#39;no&#39; ELSE &#39;unknown&#39; END;+--------------------------------------------------------------------+| CASE WHEN 1 &lt; 0 THEN &#39;yes&#39; WHEN 1 &#x3D; 0 THEN &#39;no&#39; ELSE &#39;unknown&#39; END |+--------------------------------------------------------------------+| unknown |+--------------------------------------------------------------------+1 row in set (0.00 sec)mysql&gt; SELECT CASE 1 WHEN 0 THEN 0 WHEN 1 THEN 1 ELSE - 1 END;+------------------------------------------------+| CASE 1 WHEN 0 THEN 0 WHEN 1 THEN 1 ELSE - 1 END |+------------------------------------------------+| 1 |+------------------------------------------------+1 row in set (0.00 sec)mysql&gt; SELECT CASE - 1 WHEN 0 THEN 0 WHEN 1 THEN 1 ELSE - 1 END;+-------------------------------------------------+| CASE - 1 WHEN 0 THEN 0 WHEN 1 THEN 1 ELSE - 1 END |+-------------------------------------------------+| - 1 |+-------------------------------------------------+1 row in set (0.00 sec)SELECT employee_id, 12 * salary * ( 1 + IFNULL(commission_pct, 0 ))FROM employees;SELECT last_name, job_id, salary,CASE job_id WHEN &#39;IT_PROG&#39; THEN 1.10*salaryWHEN &#39;ST_CLERK&#39; THEN 1.15*salaryWHEN &#39;SA_REP&#39; THEN 1.20*salaryELSE salary END &quot;REVISED_SALARY&quot;FROM employees;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC07%E7%AB%A0_%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/1649595259618.png" alt="1649595259618"></p><p><strong>练习：查询部门号为 10 , 20 , 30 的员工信息, 若部门号为 10 , 则打印其工资的 1. 1 倍, 20 号部门, 则打印其工资的 1. 2 倍, 30 号部门打印其工资的 1. 3 倍数。</strong></p><hr><h2 id="6-加密与解密函数"><a href="#6-加密与解密函数" class="headerlink" title="6. 加密与解密函数"></a>6. 加密与解密函数</h2><hr><p>加密与解密函数主要用于对数据库中的数据进行加密和解密处理，以防止数据被他人窃取。这些函数在保证数据库安全时非常有用。</p><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>PASSWORD(str)</td><td>返回字符串str的加密版本， 41 位长的字符串。加密结果<code>不可逆</code>，常用于用户的密码加密</td></tr><tr><td>MD5(str)</td><td>返回字符串str的md5加密后的值，也是一种加密方式。若参数为NULL，则会返回NULL</td></tr><tr><td>SHA(str)</td><td>从原明文密码str计算并返回加密后的密码字符串，当参数为NULL时，返回NULL。<code>SHA加密算法比MD5更加安全</code>。</td></tr><tr><td>ENCODE(value,password_seed)</td><td>返回使用password_seed作为加密密码加密value</td></tr><tr><td>DECODE(value,password_seed)</td><td>返回使用password_seed作为加密密码解密value</td></tr></tbody></table><p>可以看到，ENCODE(value,password_seed)函数与DECODE(value,password_seed)函数互为反函数。</p><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT PASSWORD(&#39;mysql&#39;), PASSWORD(NULL);+-------------------------------------------+----------------+| PASSWORD(&#39;mysql&#39;) | PASSWORD(NULL) |+-------------------------------------------+----------------+| *E74858DB86EBA20BC33D0AECAE8A8108C56B17FA | |+-------------------------------------------+----------------+1 row in set, 1 warning (0.00 sec)SELECT md5(&#39;123&#39;)-&gt; 202 cb962ac59075b964b07152d234bSELECT SHA(&#39;Tom123&#39;)-&gt;c7c506980abc31cc390a2438c90861d0f1216dmysql&gt; SELECT ENCODE(&#39;mysql&#39;, &#39;mysql&#39;);+--------------------------+| ENCODE(&#39;mysql&#39;, &#39;mysql&#39;) |+--------------------------+| íg ¼ ìÉ |+--------------------------+1 row in set, 1 warning (0.01 sec)mysql&gt; SELECT DECODE(ENCODE(&#39;mysql&#39;,&#39;mysql&#39;),&#39;mysql&#39;);+-----------------------------------------+| DECODE(ENCODE(&#39;mysql&#39;,&#39;mysql&#39;),&#39;mysql&#39;) |+-----------------------------------------+| mysql |+-----------------------------------------+1 row in set, 2 warnings (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="7-MySQL信息函数"><a href="#7-MySQL信息函数" class="headerlink" title="7. MySQL信息函数"></a>7. MySQL信息函数</h2><hr><p>MySQL中内置了一些可以查询MySQL信息的函数，这些函数主要用于帮助数据库开发或运维人员更好地对数据库进行维护工作。</p><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>VERSION()</td><td>返回当前MySQL的版本号</td></tr><tr><td>CONNECTION_ID()</td><td>返回当前MySQL服务器的连接数</td></tr><tr><td>DATABASE()，SCHEMA()</td><td>返回MySQL命令行当前所在的数据库</td></tr><tr><td>USER()，CURRENT_USER()、SYSTEM_USER()，SESSION_USER()</td><td>返回当前连接MySQL的用户名，返回结果格式为“主机名@用户名”</td></tr><tr><td>CHARSET(value)</td><td>返回字符串value自变量的字符集</td></tr><tr><td>COLLATION(value)</td><td>返回字符串value的比较规则</td></tr></tbody></table><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT DATABASE();+------------+| DATABASE() |+------------+| test |+------------+1 row in set (0.00 sec)mysql&gt; SELECT DATABASE();+------------+| DATABASE() |+------------+| test |+------------+1 row in set (0.00 sec)mysql&gt; SELECT USER(), CURRENT_USER(), SYSTEM_USER(),SESSION_USER();+----------------+----------------+----------------+----------------+| USER() | CURRENT_USER() | SYSTEM_USER() | SESSION_USER() |+----------------+----------------+----------------+----------------+| root@localhost | root@localhost | root@localhost | root@localhost |+----------------+----------------+----------------+----------------+mysql&gt; SELECT CHARSET(&#39;ABC&#39;);+----------------+| CHARSET(&#39;ABC&#39;) |+----------------+| utf8mb4 |+----------------+1 row in set (0.00 sec)mysql&gt; SELECT COLLATION(&#39;ABC&#39;);+--------------------+| COLLATION(&#39;ABC&#39;) |+--------------------+| utf8mb4_general_ci |+--------------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="8-其他函数"><a href="#8-其他函数" class="headerlink" title="8. 其他函数"></a>8. 其他函数</h2><hr><p>MySQL中有些函数无法对其进行具体的分类，但是这些函数在MySQL的开发和运维过程中也是不容忽视的。</p><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>FORMAT(value,n)</td><td>返回对数字value进行格式化后的结果数据。n表示四舍五入后保留到小数点后n位</td></tr><tr><td>CONV(value,from,to)</td><td>将value的值进行不同进制之间的转换</td></tr><tr><td>INET_ATON(ipvalue)</td><td>将以点分隔的IP地址转化为一个数字</td></tr><tr><td>INET_NTOA(value)</td><td>将数字形式的IP地址转化为以点分隔的IP地址</td></tr><tr><td>BENCHMARK(n,expr)</td><td>将表达式expr重复执行n次。用于测试MySQL处理expr表达式所耗费的时间</td></tr><tr><td>CONVERT(value USING char_code)</td><td>将value所使用的字符编码修改为char_code</td></tr></tbody></table><p>举例：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 如果n的值小于或者等于 0 ，则只保留整数部分</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token function">FORMAT</span><span class="token punctuation">(</span><span class="token number">123.123</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">FORMAT</span><span class="token punctuation">(</span><span class="token number">123.523</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">FORMAT</span><span class="token punctuation">(</span><span class="token number">123.123</span><span class="token punctuation">,</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------------------+--------------------+---------------------+</span><span class="token operator">|</span> <span class="token function">FORMAT</span><span class="token punctuation">(</span><span class="token number">123.123</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">FORMAT</span><span class="token punctuation">(</span><span class="token number">123.523</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">FORMAT</span><span class="token punctuation">(</span><span class="token number">123.123</span><span class="token punctuation">,</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------+--------------------+---------------------+</span><span class="token operator">|</span> <span class="token number">123.12</span> <span class="token operator">|</span> <span class="token number">124</span> <span class="token operator">|</span> <span class="token number">123</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------+--------------------+---------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> CONV<span class="token punctuation">(</span> <span class="token number">16</span> <span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> CONV<span class="token punctuation">(</span> <span class="token number">8888</span> <span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">,</span> <span class="token number">16</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> CONV<span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-----------------+------------------+-------------------+</span><span class="token operator">|</span> CONV<span class="token punctuation">(</span> <span class="token number">16</span> <span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token operator">|</span> CONV<span class="token punctuation">(</span> <span class="token number">8888</span> <span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">,</span> <span class="token number">16</span> <span class="token punctuation">)</span> <span class="token operator">|</span> CONV<span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----------------+------------------+-------------------+</span><span class="token operator">|</span> <span class="token number">10000</span> <span class="token operator">|</span> <span class="token number">22</span> B8 <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----------------+------------------+-------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> INET_ATON<span class="token punctuation">(</span><span class="token string">'192.168.1.100'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----------------------------+</span><span class="token operator">|</span> INET_ATON<span class="token punctuation">(</span><span class="token string">'192.168.1.100'</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------------------+</span><span class="token operator">|</span> <span class="token number">3232235876</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token comment"># 以“192.168.1.100”为例，计算方式为 192 乘以 256 的 3 次方，加上 168 乘以 256 的 2 次方，加上 1 乘以 256 ，再加上100 。</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> INET_NTOA<span class="token punctuation">(</span> <span class="token number">3232235876</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-----------------------+</span><span class="token operator">|</span> INET_NTOA<span class="token punctuation">(</span> <span class="token number">3232235876</span> <span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----------------------+</span><span class="token operator">|</span> <span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.100</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> BENCHMARK<span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">,</span> MD5<span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----------------------------+</span><span class="token operator">|</span> BENCHMARK<span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">,</span> MD5<span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------------------+</span><span class="token operator">|</span> <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> BENCHMARK<span class="token punctuation">(</span> <span class="token number">1000000</span> <span class="token punctuation">,</span> MD5<span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----------------------------------+</span><span class="token operator">|</span> BENCHMARK<span class="token punctuation">(</span> <span class="token number">1000000</span> <span class="token punctuation">,</span> MD5<span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------------------------+</span><span class="token operator">|</span> <span class="token number">0</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.20</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token keyword">CHARSET</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">CHARSET</span><span class="token punctuation">(</span><span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token string">'mysql'</span> <span class="token keyword">USING</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------------------+----------------------------------------+</span><span class="token operator">|</span> <span class="token keyword">CHARSET</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token keyword">CHARSET</span><span class="token punctuation">(</span><span class="token keyword">CONVERT</span><span class="token punctuation">(</span><span class="token string">'mysql'</span> <span class="token keyword">USING</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------------+----------------------------------------+</span><span class="token operator">|</span> utf8mb4 <span class="token operator">|</span> utf8 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------------+----------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单行函数</title>
      <link href="/2022/07/17/di-08-zhang-ju-he-han-shu/"/>
      <url>/2022/07/17/di-08-zhang-ju-he-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="第08章-聚合函数"><a href="#第08章-聚合函数" class="headerlink" title="第08章_聚合函数"></a>第08章_聚合函数</h1><p>我们上一章讲到了 SQL 单行函数。实际上 SQL 函数还有一类，叫做聚合（或聚集、分组）函数，它是对一组数据进行汇总的函数，输入的是一组数据的集合，输出的是单个值。</p><hr><h2 id="1-聚合函数介绍"><a href="#1-聚合函数介绍" class="headerlink" title="1. 聚合函数介绍"></a>1. 聚合函数介绍</h2><hr><ul><li><strong>什么是聚合函数</strong><br>聚合函数作用于一组数据，并对一组数据返回一个值。<br><img src="/../pic/%E7%AC%AC08%E7%AB%A0_%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/1649596281596.png" alt="1649596281596"></li><li><strong>聚合函数类型</strong><ul><li><strong>AVG()</strong></li><li><strong>SUM()</strong></li><li><strong>MAX()</strong></li><li><strong>MIN()</strong></li><li><strong>COUNT()</strong></li></ul></li><li>聚合函数语法<br><img src="/../pic/%E7%AC%AC08%E7%AB%A0_%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/1649596348333.png" alt="1649596348333"></li><li>聚合函数不能嵌套调用。比如不能出现类似“AVG(SUM(字段名称))”形式的调用。</li></ul><h3 id="1-1-AVG和SUM函数"><a href="#1-1-AVG和SUM函数" class="headerlink" title="1. 1 AVG和SUM函数"></a>1. 1 AVG和SUM函数</h3><p>可以对<strong>数值型数据</strong>使用AVG 和 SUM 函数。</p><pre class="line-numbers language-none"><code class="language-none">SELECT AVG(salary), MAX(salary),MIN(salary), SUM(salary)FROM employeesWHERE job_id LIKE &#39;%REP%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC08%E7%AB%A0_%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/1649596406311.png" alt="1649596406311"></p><h3 id="1-2-MIN和MAX函数"><a href="#1-2-MIN和MAX函数" class="headerlink" title="1. 2 MIN和MAX函数"></a>1. 2 MIN和MAX函数</h3><p>可以对<strong>任意数据类型</strong>的数据使用 MIN 和 MAX 函数。</p><pre class="line-numbers language-none"><code class="language-none">SELECT MIN(hire_date), MAX(hire_date)FROM employees;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC08%E7%AB%A0_%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/1649596443889.png" alt="1649596443889"></p><h3 id="1-3-COUNT函数"><a href="#1-3-COUNT函数" class="headerlink" title="1. 3 COUNT函数"></a>1. 3 COUNT函数</h3><ul><li><p>COUNT(*)返回表中记录总数，适用于 <strong>任意数据类型</strong> 。</p><pre class="line-numbers language-none"><code class="language-none">SELECT COUNT(*)FROM employeesWHERE department_id &#x3D; 50 ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC08%E7%AB%A0_%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/1649596501327.png" alt="1649596501327"></p></li><li><p>COUNT(expr) 返回 <strong>expr不为空</strong> 的记录总数。</p><pre class="line-numbers language-none"><code class="language-none">SELECT COUNT(commission_pct)FROM employeesWHERE department_id &#x3D; 50 ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC08%E7%AB%A0_%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/1649596547371.png" alt="1649596547371"></p></li><li><p><strong>问题：用count(*)，count(1)，count(列名)谁好呢?</strong></p><p>其实，对于MyISAM引擎的表是没有区别的。这种引擎内部有一计数器在维护着行数。</p><p>Innodb引擎的表用count(*),count(1)直接读行数，复杂度是O(n)，因为innodb真的要去数一遍。但好于具体的count(列名)。</p></li><li><p><strong>问题：能不能使用count(列名)替换count(*)?</strong></p><p>不要使用 count(列名)来替代 <code>count(*)</code>，<code>count(*)</code>是 SQL92 定义的标准统计行数的语法，跟数据库无关，跟 NULL 和非 NULL 无关。</p><p>说明：count(*)会统计值为 NULL 的行，而 count(列名)不会统计此列为 NULL 值的行。</p></li></ul><hr><h2 id="2-GROUP-BY"><a href="#2-GROUP-BY" class="headerlink" title="2. GROUP BY"></a>2. GROUP BY</h2><hr><h3 id="2-1-基本使用"><a href="#2-1-基本使用" class="headerlink" title="2. 1 基本使用"></a>2. 1 基本使用</h3><p><img src="/../pic/%E7%AC%AC08%E7%AB%A0_%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/1649596673702.png" alt="1649596673702"></p><p><strong>可以使用GROUP BY子句将表中的数据分成若干组</strong></p><pre class="line-numbers language-none"><code class="language-none">SELECT column, group_function(column)FROM table[WHERE condition][GROUP BY group_by_expression][ORDER BY column];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>明确：WHERE一定放在FROM后面</p></blockquote><p><strong>在SELECT列表中所有未包含在组函数中的列都应该包含在 GROUP BY子句中</strong></p><pre class="line-numbers language-none"><code class="language-none">SELECT department_id, AVG(salary)FROM employeesGROUP BY department_id ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC08%E7%AB%A0_%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/1649596741150.png" alt="1649596741150"></p><p>包含在 GROUP BY 子句中的列不必包含在SELECT 列表中</p><pre class="line-numbers language-none"><code class="language-none">SELECT AVG(salary)FROM employeesGROUP BY department_id ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC08%E7%AB%A0_%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/1649596767167.png" alt="1649596767167"></p><h3 id="2-2-使用多个列分组"><a href="#2-2-使用多个列分组" class="headerlink" title="2. 2 使用多个列分组"></a>2. 2 使用多个列分组</h3><p><img src="/../pic/%E7%AC%AC08%E7%AB%A0_%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/1649596786634.png" alt="1649596786634"></p><pre class="line-numbers language-none"><code class="language-none">SELECT department_id dept_id, job_id, SUM(salary)FROM employeesGROUP BY department_id, job_id ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC08%E7%AB%A0_%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/1649596807990.png" alt="1649596807990"></p><h3 id="2-3-GROUP-BY中使用WITH-ROLLUP"><a href="#2-3-GROUP-BY中使用WITH-ROLLUP" class="headerlink" title="2. 3 GROUP BY中使用WITH ROLLUP"></a>2. 3 GROUP BY中使用WITH ROLLUP</h3><p>使用<code>WITH ROLLUP</code>关键字之后，在所有查询出的分组记录之后增加一条记录，该记录计算查询出的所有记录的总和，即统计记录数量。</p><pre class="line-numbers language-none"><code class="language-none">SELECT department_id,AVG(salary)FROM employeesWHERE department_id &gt; 80GROUP BY department_id WITH ROLLUP;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><p>当使用ROLLUP时，不能同时使用ORDER BY子句进行结果排序，即ROLLUP和ORDER BY是互相排斥的。</p></blockquote><hr><h2 id="3-HAVING"><a href="#3-HAVING" class="headerlink" title="3. HAVING"></a>3. HAVING</h2><hr><h3 id="3-1-基本使用"><a href="#3-1-基本使用" class="headerlink" title="3. 1 基本使用"></a>3. 1 基本使用</h3><p><img src="/../pic/%E7%AC%AC08%E7%AB%A0_%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/1649596861486.png" alt="1649596861486"></p><p><strong>过滤分组：HAVING子句</strong></p><ol><li>行已经被分组。</li><li>使用了聚合函数。</li><li>满足HAVING 子句中条件的分组将被显示。</li><li>HAVING 不能单独使用，必须要跟 GROUP BY 一起使用。</li></ol><p><img src="/../pic/%E7%AC%AC08%E7%AB%A0_%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/1649596894201.png" alt="1649596894201"></p><pre class="line-numbers language-none"><code class="language-none">SELECT department_id, MAX(salary)FROM employeesGROUP BY department_idHAVING MAX(salary)&gt; 10000 ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC08%E7%AB%A0_%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/1649596921091.png" alt="1649596921091"></p><ul><li><p><strong>非法使用聚合函数 ： 不能在 WHERE 子句中使用聚合函数。</strong> 如下：</p><pre class="line-numbers language-none"><code class="language-none">SELECT department_id, AVG(salary)FROM employeesWHERE AVG(salary) &gt; 8000GROUP BY department_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC08%E7%AB%A0_%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/1649596976574.png" alt="1649596976574"></p></li></ul><h3 id="3-2-WHERE和HAVING的对比"><a href="#3-2-WHERE和HAVING的对比" class="headerlink" title="3. 2 WHERE和HAVING的对比"></a>3. 2 WHERE和HAVING的对比</h3><p><strong>区别 1 ：WHERE 可以直接使用表中的字段作为筛选条件，但不能使用分组中的计算函数作为筛选条件；HAVING 必须要与 GROUP BY 配合使用，可以把分组计算的函数和分组字段作为筛选条件。</strong></p><p>这决定了，在需要对数据进行分组统计的时候，HAVING 可以完成 WHERE 不能完成的任务。这是因为，在查询语法结构中，WHERE 在 GROUP BY 之前，所以无法对分组结果进行筛选。HAVING 在 GROUP BY 之后，可以使用分组字段和分组中的计算函数，对分组的结果集进行筛选，这个功能是 WHERE 无法完成的。另外，WHERE排除的记录不再包括在分组中。</p><p><strong>区别 2 ：如果需要通过连接从关联表中获取需要的数据，WHERE 是先筛选后连接，而 HAVING 是先连接后筛选。</strong> 这一点，就决定了在关联查询中，WHERE 比 HAVING 更高效。因为 WHERE 可以先筛选，用一个筛选后的较小数据集和关联表进行连接，这样占用的资源比较少，执行效率也比较高。HAVING 则需要先把结果集准备好，也就是用未被筛选的数据集进行关联，然后对这个大的数据集进行筛选，这样占用的资源就比较多，执行效率也较低。</p><p>小结如下：</p><table><thead><tr><th></th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>WHERE</td><td>先筛选数据再关联，执行效率高</td><td>不能使用分组中的计算函数进行筛选</td></tr><tr><td>HAVING</td><td>可以使用分组中的计算函数</td><td>在最后的结果集中进行筛选，执行效率较低</td></tr></tbody></table><p><strong>开发中的选择：</strong></p><p>WHERE 和 HAVING 也不是互相排斥的，我们可以在一个查询里面同时使用 WHERE 和 HAVING。包含分组统计函数的条件用 HAVING，普通条件用 WHERE。这样，我们就既利用了 WHERE 条件的高效快速，又发挥了 HAVING 可以使用包含分组统计函数的查询条件的优点。当数据量特别大的时候，运行效率会有很大的差别。</p><hr><h2 id="4-SELECT的执行过程"><a href="#4-SELECT的执行过程" class="headerlink" title="4. SELECT的执行过程"></a>4. SELECT的执行过程</h2><hr><h3 id="4-1-查询的结构"><a href="#4-1-查询的结构" class="headerlink" title="4. 1 查询的结构"></a>4. 1 查询的结构</h3><pre class="line-numbers language-none"><code class="language-none">#方式 1 ：SELECT ...,....,...FROM ...,...,....WHERE 多表的连接条件AND 不包含组函数的过滤条件GROUP BY ...,...HAVING 包含组函数的过滤条件ORDER BY ... ASC&#x2F;DESCLIMIT ...,...#方式 2 ：SELECT ...,....,...FROM ... JOIN ...ON 多表的连接条件JOIN ...ON ...WHERE 不包含组函数的过滤条件AND&#x2F;OR 不包含组函数的过滤条件GROUP BY ...,...HAVING 包含组函数的过滤条件ORDER BY ... ASC&#x2F;DESCLIMIT ...,...#其中：#（ 1 ）from：从哪些表中筛选#（ 2 ）on：关联多表查询时，去除笛卡尔积#（ 3 ）where：从表中筛选的条件#（ 4 ）group by：分组依据#（ 5 ）having：在统计结果中再次筛选#（ 6 ）order by：排序#（ 7 ）limit：分页<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-SELECT执行顺序"><a href="#4-2-SELECT执行顺序" class="headerlink" title="4. 2 SELECT执行顺序"></a>4. 2 SELECT执行顺序</h3><p>你需要记住 SELECT 查询时的两个顺序：</p><ol><li><p><strong>关键字的顺序是不能颠倒的：</strong></p><pre class="line-numbers language-none"><code class="language-none">SELECT ... FROM ... WHERE ... GROUP BY ... HAVING ... ORDER BY ... LIMIT...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>SELECT 语句的执行顺序</strong> （在 MySQL 和 Oracle 中，SELECT 执行顺序基本相同）：</p><pre class="line-numbers language-none"><code class="language-none">FROM -&gt; WHERE -&gt; GROUP BY -&gt; HAVING -&gt; SELECT 的字段 -&gt; DISTINCT -&gt; ORDER BY -&gt; LIMIT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC08%E7%AB%A0_%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/1649597182021.png" alt="1649597182021"></p><p>比如你写了一个 SQL 语句，那么它的关键字顺序和执行顺序是下面这样的：</p><pre class="line-numbers language-none"><code class="language-none">SELECT DISTINCT player_id, player_name, count(*) as num # 顺序 5FROM player JOIN team ON player.team_id &#x3D; team.team_id # 顺序 1WHERE height &gt; 1.80 # 顺序 2GROUP BY player.team_id # 顺序 3HAVING num &gt; 2 # 顺序 4ORDER BY num DESC # 顺序 6LIMIT 2 # 顺序 7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 SELECT 语句执行这些步骤的时候，每个步骤都会产生一个<code>虚拟表</code>，然后将这个虚拟表传入下一个步骤中作为输入。需要注意的是，这些步骤隐含在 SQL 的执行过程中，对于我们来说是不可见的。</p></li></ol><h3 id="4-3-SQL-的执行原理"><a href="#4-3-SQL-的执行原理" class="headerlink" title="4. 3 SQL 的执行原理"></a>4. 3 SQL 的执行原理</h3><p>SELECT 是先执行 FROM 这一步的。在这个阶段，如果是多张表联查，还会经历下面的几个步骤：</p><ol><li>首先先通过 CROSS JOIN 求笛卡尔积，相当于得到虚拟表 vt（virtual table）1-1；</li><li>通过 ON 进行筛选，在虚拟表 vt1-1 的基础上进行筛选，得到虚拟表 vt1-2；</li><li>添加外部行。如果我们使用的是左连接、右链接或者全连接，就会涉及到外部行，也就是在虚拟<br>表 vt1-2 的基础上增加外部行，得到虚拟表 vt1-3。</li></ol><p>当然如果我们操作的是两张以上的表，还会重复上面的步骤，直到所有表都被处理完为止。这个过程得到是我们的原始数据。</p><p>当我们拿到了查询数据表的原始数据，也就是最终的虚拟表 <code>vt1</code>，就可以在此基础上再进行 <code>WHERE 阶段</code>。在这个阶段中，会根据 vt1 表的结果进行筛选过滤，得到虚拟表 <code>vt2</code>。</p><p>然后进入第三步和第四步，也就是 <code>GROUP 和 HAVING 阶段</code>。在这个阶段中，实际上是在虚拟表 vt2 的基础上进行分组和分组过滤，得到中间的虚拟表 <code>vt3</code> 和 <code>vt4</code>。</p><p>当我们完成了条件筛选部分之后，就可以筛选表中提取的字段，也就是进入到 <code>SELECT 和 DISTINCT</code><br><code>阶段</code>。</p><p>首先在 SELECT 阶段会提取想要的字段，然后在 DISTINCT 阶段过滤掉重复的行，分别得到中间的虚拟表<code>vt5- 1</code> 和 <code>vt5- 2</code> 。</p><p>当我们提取了想要的字段数据之后，就可以按照指定的字段进行排序，也就是 <code>ORDER BY 阶段</code>，得到虚拟表 <code>vt6</code>。</p><p>最后在 vt6 的基础上，取出指定行的记录，也就是 <code>LIMIT 阶段</code>，得到最终的结果，对应的是虚拟表<code>vt7</code>。</p><p>当然我们在写 SELECT 语句的时候，不一定存在所有的关键字，相应的阶段就会省略。</p><p>同时因为 SQL 是一门类似英语的结构化查询语言，所以我们在写 SELECT 语句的时候，还要注意相应的关键字顺序， <strong>所谓底层运行的原理，就是我们刚才讲到的执行顺序。</strong></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>子查询</title>
      <link href="/2022/07/17/di-09-zhang-zi-cha-xun/"/>
      <url>/2022/07/17/di-09-zhang-zi-cha-xun/</url>
      
        <content type="html"><![CDATA[<h1 id="第09章-子查询"><a href="#第09章-子查询" class="headerlink" title="第09章_子查询"></a>第09章_子查询</h1><p> 2022-04-13   2022-04-21   <a href="https://new-wangz.github.io/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/">技术博客</a>   293   <a href="https://new-wangz.github.io/2022/04/13/%E7%AC%AC09%E7%AB%A0-%E5%AD%90%E6%9F%A5%E8%AF%A2/#valine-comments">0</a></p><p>子查询指一个查询语句嵌套在另一个查询语句内部的查询，这个特性从MySQL 4. 1 开始引入。</p><p>SQL 中子查询的使用大大增强了 SELECT 查询的能力，因为很多时候查询需要从结果集中获取数据，或者需要从同一个表中先计算得出一个数据结果，然后与这个数据结果（可能是某个标量，也可能是某个集合）进行比较。</p><hr><h2 id="1-需求分析与问题解决"><a href="#1-需求分析与问题解决" class="headerlink" title="1. 需求分析与问题解决"></a>1. 需求分析与问题解决</h2><hr><h3 id="1-1-实际问题"><a href="#1-1-实际问题" class="headerlink" title="1. 1 实际问题"></a>1. 1 实际问题</h3><p><img src="/../pic/%E7%AC%AC09%E7%AB%A0_%E5%AD%90%E6%9F%A5%E8%AF%A2/1649735856507.png" alt="1649735856507"></p><p>现有解决方式：</p><pre class="line-numbers language-none"><code class="language-none">#方式一：SELECT salaryFROM employeesWHERE last_name &#x3D; &#39;Abel&#39;;SELECT last_name,salaryFROM employeesWHERE salary &gt; 11000 ;#方式二：自连接SELECT e2.last_name,e2.salaryFROM employees e1,employees eWHERE e1.last_name &#x3D; &#39;Abel&#39;AND e1.&#96;salary&#96; &lt; e2.&#96;salary&#96;#方式三：子查询SELECT last_name,salaryFROM employeesWHERE salary &gt; (SELECT salaryFROM employeesWHERE last_name &#x3D; &#39;Abel&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC09%E7%AB%A0_%E5%AD%90%E6%9F%A5%E8%AF%A2/1649735942771.png" alt="1649735942771"></p><h3 id="1-2-子查询的基本使用"><a href="#1-2-子查询的基本使用" class="headerlink" title="1. 2 子查询的基本使用"></a>1. 2 子查询的基本使用</h3><ul><li>子查询的基本语法结构：<br><img src="/../pic/%E7%AC%AC09%E7%AB%A0_%E5%AD%90%E6%9F%A5%E8%AF%A2/1649735994111.png" alt="1649735994111"></li><li>子查询（内查询）在主查询之前一次执行完成。</li><li>子查询的结果被主查询（外查询）使用 。</li><li><strong>注意事项</strong><ul><li>子查询要包含在括号内</li><li>将子查询放在比较条件的右侧</li><li>单行操作符对应单行子查询，多行操作符对应多行子查询</li></ul></li></ul><h3 id="1-3-子查询的分类"><a href="#1-3-子查询的分类" class="headerlink" title="1. 3 子查询的分类"></a>1. 3 子查询的分类</h3><p><strong>分类方式 1 ：</strong></p><p>我们按内查询的结果返回一条还是多条记录，将子查询分为单行子查询、多行子查询。</p><ul><li>单行子查询<br><img src="/../pic/%E7%AC%AC09%E7%AB%A0_%E5%AD%90%E6%9F%A5%E8%AF%A2/1649736047195.png" alt="1649736047195"></li><li>多行子查询<br><img src="/../pic/%E7%AC%AC09%E7%AB%A0_%E5%AD%90%E6%9F%A5%E8%AF%A2/1649736060060.png" alt="1649736060060"></li></ul><p><strong>分类方式 2 ：</strong></p><p>我们按内查询是否被执行多次，将子查询划分为相关(或关联)子查询和不相关(或非关联)子查询。</p><p>子查询从数据表中查询了数据结果，如果这个数据结果只执行一次，然后这个数据结果作为主查询的条件进行执行，那么这样的子查询叫做不相关子查询。</p><p>同样，如果子查询需要执行多次，即采用循环的方式，先从外部查询开始，每次都传入子查询进行查询，然后再将结果反馈给外部，这种嵌套的执行方式就称为相关子查询。</p><hr><h2 id="2-单行子查询"><a href="#2-单行子查询" class="headerlink" title="2. 单行子查询"></a>2. 单行子查询</h2><hr><h3 id="2-1-单行比较操作符"><a href="#2-1-单行比较操作符" class="headerlink" title="2. 1 单行比较操作符"></a>2. 1 单行比较操作符</h3><table><thead><tr><th>操作符</th><th>含义</th></tr></thead><tbody><tr><td>&#x3D;</td><td>equal to</td></tr><tr><td>&gt;</td><td>greater than</td></tr><tr><td>&gt;&#x3D;</td><td>greater than or equal to</td></tr><tr><td>&lt;</td><td>less than</td></tr><tr><td>&lt;&#x3D;</td><td>less than or equal to</td></tr><tr><td>&lt;&gt;</td><td>not equal to</td></tr></tbody></table><h3 id="2-2-代码示例"><a href="#2-2-代码示例" class="headerlink" title="2. 2 代码示例"></a>2. 2 代码示例</h3><p><strong>题目：查询工资大于 149 号员工工资的员工的信息</strong></p><p><img src="/../pic/%E7%AC%AC09%E7%AB%A0_%E5%AD%90%E6%9F%A5%E8%AF%A2/1649736296795.png" alt="1649736296795"></p><p><strong>题目：返回job_id与 141 号员工相同，salary比 143 号员工多的员工姓名，job_id和工资</strong></p><pre class="line-numbers language-none"><code class="language-none">SELECT last_name, job_id, salaryFROM employeesWHERE job_id &#x3D;(SELECT job_idFROM employeesWHERE employee_id &#x3D; 141 )AND salary &gt;(SELECT salaryFROM employeesWHERE employee_id &#x3D; 143 );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC09%E7%AB%A0_%E5%AD%90%E6%9F%A5%E8%AF%A2/1649736368868.png" alt="1649736368868"></p><p><strong>题目：返回公司工资最少的员工的last_name,job_id和salary</strong></p><pre class="line-numbers language-none"><code class="language-none">SELECT last_name, job_id, salaryFROM employeesWHERE salary &#x3D;(SELECT MIN(salary)FROM employees);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC09%E7%AB%A0_%E5%AD%90%E6%9F%A5%E8%AF%A2/1649736429130.png" alt="1649736429130"></p><p><strong>题目：查询与 141 号或 174 号员工的manager_id和department_id相同的其他员工的employee_id，manager_id，department_id</strong></p><p>实现方式 1 ：不成对比较</p><pre class="line-numbers language-none"><code class="language-none">SELECT employee_id, manager_id, department_idFROM employeesWHERE manager_id IN(SELECT manager_idFROM employeesWHERE employee_id IN (174,141))AND department_id IN(SELECT department_idFROM employeesWHERE employee_id IN (174,141))AND employee_id NOT IN(174,141);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现方式 2 ：成对比较</p><pre class="line-numbers language-none"><code class="language-none">SELECT employee_id, manager_id, department_idFROM employeesWHERE (manager_id, department_id) IN(SELECT manager_id, department_idFROM employeesWHERE employee_id IN (141,174))AND employee_id NOT IN (141,174);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-HAVING-中的子查询"><a href="#2-3-HAVING-中的子查询" class="headerlink" title="2. 3 HAVING 中的子查询"></a>2. 3 HAVING 中的子查询</h3><ul><li>首先执行子查询。</li><li>向主查询中的HAVING 子句返回结果。</li></ul><p><strong>题目：查询最低工资大于 50 号部门最低工资的部门id和其最低工资</strong></p><pre class="line-numbers language-none"><code class="language-none">SELECT department_id, MIN(salary)FROM employeesGROUP BY department_idHAVING MIN(salary) &gt;(SELECT MIN(salary)FROM employeesWHERE department_id &#x3D; 50 );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-CASE中的子查询"><a href="#2-4-CASE中的子查询" class="headerlink" title="2. 4 CASE中的子查询"></a>2. 4 CASE中的子查询</h3><p>在CASE表达式中使用单列子查询：</p><p><strong>题目：显式员工的employee_id,last_name和location。其中，若员工department_id与location_id为 1800的department_id相同，则location为’Canada’，其余则为’USA’。</strong></p><pre class="line-numbers language-none"><code class="language-none">SELECT employee_id, last_name,(CASE department_idWHEN(SELECT department_id FROM departments WHERE location_id &#x3D; 1800)THEN &#39;Canada&#39; ELSE &#39;USA&#39; END) locationFROM employees;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-子查询中的空值问题"><a href="#2-5-子查询中的空值问题" class="headerlink" title="2. 5 子查询中的空值问题"></a>2. 5 子查询中的空值问题</h3><pre class="line-numbers language-none"><code class="language-none">SELECT last_name, job_idFROM employeesWHERE job_id &#x3D;(SELECT job_idFROM employeesWHERE last_name &#x3D; &#39;Haas&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC09%E7%AB%A0_%E5%AD%90%E6%9F%A5%E8%AF%A2/1649736722995.png" alt="1649736722995"></p><blockquote><p><strong>子查询不返回任何行</strong></p></blockquote><h3 id="2-5-非法使用子查询"><a href="#2-5-非法使用子查询" class="headerlink" title="2. 5 非法使用子查询"></a>2. 5 非法使用子查询</h3><pre class="line-numbers language-none"><code class="language-none">SELECT employee_id, last_nameFROM employeesWHERE salary &#x3D;(SELECT MIN(salary)FROM employeesGROUP BY department_id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC09%E7%AB%A0_%E5%AD%90%E6%9F%A5%E8%AF%A2/1649736764017.png" alt="1649736764017"></p><blockquote><p><strong>多行子查询使用单行比较符</strong></p></blockquote><hr><h2 id="3-多行子查询"><a href="#3-多行子查询" class="headerlink" title="3. 多行子查询"></a>3. 多行子查询</h2><hr><ul><li>也称为集合比较子查询</li><li>内查询返回多行</li><li>使用多行比较操作符</li></ul><h3 id="3-1-多行比较操作符"><a href="#3-1-多行比较操作符" class="headerlink" title="3. 1 多行比较操作符"></a>3. 1 多行比较操作符</h3><table><thead><tr><th>操作符</th><th>含义</th></tr></thead><tbody><tr><td>IN</td><td>等于列表中的<strong>任意一个</strong></td></tr><tr><td>ANY</td><td>需要和单行比较操作符一起使用，和子查询返回的 <strong>某一个</strong> 值比较</td></tr><tr><td>ALL</td><td>需要和单行比较操作符一起使用，和子查询返回的 <strong>所有</strong> 值比较</td></tr><tr><td>SOME</td><td>实际上是ANY的别名，作用相同，一般常使用ANY</td></tr></tbody></table><blockquote><p>体会 ANY 和 ALL 的区别</p></blockquote><h3 id="3-2-代码示例"><a href="#3-2-代码示例" class="headerlink" title="3. 2 代码示例"></a>3. 2 代码示例</h3><p><strong>题目：返回其它job_id中比job_id为‘IT_PROG’部门任一工资低的员工的员工号、姓名、job_id 以及salary</strong></p><p><img src="/../pic/%E7%AC%AC09%E7%AB%A0_%E5%AD%90%E6%9F%A5%E8%AF%A2/1649736935733.png" alt="1649736935733"></p><p><strong>题目：返回其它job_id中比job_id为‘IT_PROG’部门所有工资都低的员工的员工号、姓名、job_id以及salary</strong></p><p><img src="/../pic/%E7%AC%AC09%E7%AB%A0_%E5%AD%90%E6%9F%A5%E8%AF%A2/1649736957180.png" alt="1649736957180"></p><p><strong>题目：查询平均工资最低的部门id</strong></p><pre class="line-numbers language-none"><code class="language-none">#方式 1 ：SELECT department_idFROM employeesGROUP BY department_idHAVING AVG(salary) &#x3D; (SELECT MIN(avg_sal)FROM (SELECT AVG(salary) avg_salFROM employeesGROUP BY department_id) dept_avg_sal)#方式 2 ：SELECT department_idFROM employeesGROUP BY department_idHAVING AVG(salary) &lt;&#x3D; ALL (SELECT AVG(salary) avg_salFROM employeesGROUP BY department_id)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-空值问题"><a href="#3-3-空值问题" class="headerlink" title="3. 3 空值问题"></a>3. 3 空值问题</h3><pre class="line-numbers language-none"><code class="language-none">SELECT last_nameFROM employeesWHERE employee_id NOT IN (SELECT manager_idFROM employees);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC09%E7%AB%A0_%E5%AD%90%E6%9F%A5%E8%AF%A2/1649737066253.png" alt="1649737066253"></p><hr><h2 id="4-相关子查询"><a href="#4-相关子查询" class="headerlink" title="4. 相关子查询"></a>4. 相关子查询</h2><hr><h3 id="4-1-相关子查询执行流程"><a href="#4-1-相关子查询执行流程" class="headerlink" title="4. 1 相关子查询执行流程"></a>4. 1 相关子查询执行流程</h3><p>如果子查询的执行依赖于外部查询，通常情况下都是因为子查询中的表用到了外部的表，并进行了条件关联，因此每执行一次外部查询，子查询都要重新计算一次，这样的子查询就称之为<code>关联子查询</code>。</p><p>相关子查询按照一行接一行的顺序执行，主查询的每一行都执行一次子查询。</p><p><img src="/../pic/%E7%AC%AC09%E7%AB%A0_%E5%AD%90%E6%9F%A5%E8%AF%A2/1649737164128.png" alt="1649737164128"></p><p>说明： <strong>子查询中使用主查询中的列</strong></p><h3 id="4-2-代码示例"><a href="#4-2-代码示例" class="headerlink" title="4. 2 代码示例"></a>4. 2 代码示例</h3><p><strong>题目：查询员工中工资大于本部门平均工资的员工的last_name,salary和其department_id</strong></p><p><strong>方式一：相关子查询</strong></p><p><img src="/../pic/%E7%AC%AC09%E7%AB%A0_%E5%AD%90%E6%9F%A5%E8%AF%A2/1649737188999.png" alt="1649737188999"></p><p><strong>方式二：在 FROM 中使用子查询</strong></p><pre class="line-numbers language-none"><code class="language-none">SELECT last_name,salary,e1.department_idFROM employees e1,(SELECT department_id,AVG(salary) dept_avg_sal FROM employees GROUPBY department_id) eWHERE e1.&#96;department_id&#96; &#x3D; e2.department_idAND e2.dept_avg_sal &lt; e1.&#96;salary&#96;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>from型的子查询：子查询是作为from的一部分，子查询要用()引起来，并且要给这个子查询取别名， 把它当成一张“临时的虚拟的表”来使用。</p></blockquote><p>在ORDER BY 中使用子查询：</p><p><strong>题目：查询员工的id,salary,按照department_name 排序</strong></p><pre class="line-numbers language-none"><code class="language-none">SELECT employee_id,salaryFROM employees eORDER BY (SELECT department_nameFROM departments dWHERE e.&#96;department_id&#96; &#x3D; d.&#96;department_id&#96;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>题目：若employees表中employee_id与job_history表中employee_id相同的数目不小于 2 ，输出这些相同id的员工的employee_id,last_name和其job_id</strong></p><pre class="line-numbers language-none"><code class="language-none">SELECT e.employee_id, last_name,e.job_idFROM employees eWHERE 2 &lt;&#x3D; (SELECT COUNT(*)FROM job_historyWHERE employee_id &#x3D; e.employee_id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-EXISTS-与-NOT-EXISTS关键字"><a href="#4-3-EXISTS-与-NOT-EXISTS关键字" class="headerlink" title="4. 3 EXISTS 与 NOT EXISTS关键字"></a>4. 3 EXISTS 与 NOT EXISTS关键字</h3><ul><li>关联子查询通常也会和 EXISTS操作符一起来使用，用来检查在子查询中是否存在满足条件的行。</li><li><strong>如果在子查询中不存在满足条件的行：</strong><ul><li>条件返回 FALSE</li><li>继续在子查询中查找</li></ul></li><li><strong>如果在子查询中存在满足条件的行：</strong><ul><li>不在子查询中继续查找</li><li>条件返回 TRUE</li></ul></li><li>NOT EXISTS关键字表示如果不存在某种条件，则返回TRUE，否则返回FALSE。</li></ul><p><strong>题目：查询公司管理者的employee_id，last_name，job_id，department_id信息</strong></p><p>方式一：</p><pre class="line-numbers language-none"><code class="language-none">SELECT employee_id, last_name, job_id, department_idFROM employees eWHERE EXISTS ( SELECT *FROM employees eWHERE e2.manager_id &#x3D;e1.employee_id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方式二：自连接</p><pre class="line-numbers language-none"><code class="language-none">SELECT DISTINCT e1.employee_id, e1.last_name, e1.job_id, e1.department_idFROM employees e1 JOIN employees eWHERE e1.employee_id &#x3D; e2.manager_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>方式三：</p><pre class="line-numbers language-none"><code class="language-none">SELECT employee_id,last_name,job_id,department_idFROM employeesWHERE employee_id IN (SELECT DISTINCT manager_idFROM employees);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>题目：查询departments表中，不存在于employees表中的部门的department_id和department_name</strong></p><pre class="line-numbers language-none"><code class="language-none">SELECT department_id, department_nameFROM departments dWHERE NOT EXISTS (SELECT &#39;X&#39;FROM employeesWHERE department_id &#x3D; d.department_id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC09%E7%AB%A0_%E5%AD%90%E6%9F%A5%E8%AF%A2/1649737493094.png" alt="1649737493094"></p><h3 id="4-4-相关更新"><a href="#4-4-相关更新" class="headerlink" title="4. 4 相关更新"></a>4. 4 相关更新</h3><pre class="line-numbers language-none"><code class="language-none">UPDATE table1 aliasSET column &#x3D; (SELECT expressionFROM table2 aliasWHERE alias1.column &#x3D; alias2.column);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用相关子查询依据一个表中的数据更新另一个表的数据。</p><p><strong>题目：在employees中增加一个department_name字段，数据为员工对应的部门名称</strong></p><pre class="line-numbers language-none"><code class="language-none"># 1）ALTER TABLE employeesADD(department_name VARCHAR2( 14 ));# 2）UPDATE employees eSET department_name &#x3D; (SELECT department_nameFROM departments dWHERE e.department_id &#x3D; d.department_id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-相关删除"><a href="#4-4-相关删除" class="headerlink" title="4. 4 相关删除"></a>4. 4 相关删除</h3><pre class="line-numbers language-none"><code class="language-none">DELETE FROM table1 aliasWHERE column operator (SELECT expressionFROM table2 aliasWHERE alias1.column &#x3D; alias2.column);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用相关子查询依据一个表中的数据删除另一个表的数据。</p><p><strong>题目：删除表employees中，其与emp_history表皆有的数据</strong></p><pre class="line-numbers language-none"><code class="language-none">DELETE FROM employees eWHERE employee_id in(SELECT employee_idFROM emp_historyWHERE employee_id &#x3D; e.employee_id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="5-抛一个思考题"><a href="#5-抛一个思考题" class="headerlink" title="5. 抛一个思考题"></a>5. 抛一个思考题</h2><hr><p><strong>问题：</strong> 谁的工资比Abel的高？</p><p><strong>解答：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#方式 1 ：自连接</span><span class="token keyword">SELECT</span> e2<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span>e2<span class="token punctuation">.</span>salary<span class="token keyword">FROM</span> employees e1<span class="token punctuation">,</span>employees e<span class="token keyword">WHERE</span> e1<span class="token punctuation">.</span>last_name <span class="token operator">=</span> <span class="token string">'Abel'</span><span class="token operator">AND</span> e1<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>salary<span class="token punctuation">`</span></span> <span class="token operator">&lt;</span> e2<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>salary<span class="token punctuation">`</span></span><span class="token comment">#方式 2 ：子查询</span><span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span>salary<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> salary <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> salary<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> last_name <span class="token operator">=</span> <span class="token string">'Abel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>问题：</strong> 以上两种方式有好坏之分吗？</p><p><strong>解答：</strong> 自连接方式好！</p><p>题目中可以使用子查询，也可以使用自连接。一般情况建议你使用自连接，因为在许多 DBMS 的处理过程中，对于自连接的处理速度要比子查询快得多。</p><p>可以这样理解：子查询实际上是通过未知表进行查询后的条件判断，而自连接是通过已知的自身数据表进行条件判断，因此在大部分 DBMS 中都对自连接处理进行了优化。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建和管理表</title>
      <link href="/2022/07/17/di-10-zhang-chuang-jian-he-guan-li-biao/"/>
      <url>/2022/07/17/di-10-zhang-chuang-jian-he-guan-li-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="第10章-创建和管理表"><a href="#第10章-创建和管理表" class="headerlink" title="第10章_创建和管理表"></a>第10章_创建和管理表</h1><h2 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1. 基础知识"></a>1. 基础知识</h2><hr><h3 id="1-1-一条数据存储的过程"><a href="#1-1-一条数据存储的过程" class="headerlink" title="1. 1 一条数据存储的过程"></a>1. 1 一条数据存储的过程</h3><p><code>存储数据是处理数据的第一步</code>。只有正确地把数据存储起来，我们才能进行有效的处理和分析。否则，只能是一团乱麻，无从下手。</p><p>那么，怎样才能把用户各种经营相关的、纷繁复杂的数据，有序、高效地存储起来呢？ 在 MySQL 中，一个完整的数据存储过程总共有 4 步，分别是创建数据库、确认字段、创建数据表、插入数据。</p><p><img src="/../pic/%E7%AC%AC10%E7%AB%A0_%E5%88%9B%E5%BB%BA%E5%92%8C%E7%AE%A1%E7%90%86%E8%A1%A8/1649847838505.png" alt="1649847838505"></p><p>我们要先创建一个数据库，而不是直接创建数据表呢？</p><p>因为从系统架构的层次上看，MySQL 数据库系统从大到小依次是<code>数据库服务器</code>、<code>数据库</code>、<code>数据表</code>、<code>数据表的行与列</code>。</p><p>MySQL 数据库服务器之前已经安装。所以，我们就从创建数据库开始。</p><h3 id="1-2-标识符命名规则"><a href="#1-2-标识符命名规则" class="headerlink" title="1. 2 标识符命名规则"></a>1. 2 标识符命名规则</h3><ul><li>数据库名、表名不得超过 30 个字符，变量名限制为 29 个</li><li>必须只能包含 A–Z, a–z, 0 – 9 , _共 63 个字符</li><li>数据库名、表名、字段名等对象名中间不要包含空格</li><li>同一个MySQL软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名</li><li>必须保证你的字段没有和保留字、数据库系统或常用方法冲突。如果坚持使用，请在SQL语句中使用&#96;（着重号）引起来</li><li>保持字段名和类型的一致性：在命名字段并为其指定数据类型的时候一定要保证一致性，假如数据类型在一个表里是整数，那在另一个表里可就别变成字符型了</li></ul><h3 id="1-3-MySQL中的数据类型"><a href="#1-3-MySQL中的数据类型" class="headerlink" title="1. 3 MySQL中的数据类型"></a>1. 3 MySQL中的数据类型</h3><table><thead><tr><th>类型</th><th>类型举例</th></tr></thead><tbody><tr><td>整数类型</td><td>TINYINT、SMALLINT、MEDIUMINT、 <strong>INT(或INTEGER)</strong> 、BIGINT</td></tr><tr><td>浮点类型</td><td>FLOAT、DOUBLE</td></tr><tr><td>定点数类型</td><td><strong>DECIMAL</strong></td></tr><tr><td>位类型</td><td>BIT</td></tr><tr><td>日期时间类型</td><td>YEAR、TIME、 <strong>DATE</strong> 、DATETIME、TIMESTAMP</td></tr><tr><td>文本字符串类型</td><td>CHAR、 <strong>VARCHAR</strong> 、TINYTEXT、TEXT、MEDIUMTEXT、LONGTEXT</td></tr><tr><td>枚举类型</td><td>ENUM</td></tr><tr><td>集合类型</td><td>SET</td></tr><tr><td>二进制字符串类型</td><td>BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB、LONGBLOB</td></tr><tr><td>JSON类型</td><td>JSON对象、JSON数组</td></tr><tr><td>空间数据类型</td><td>单值：GEOMETRY、POINT、LINESTRING、POLYGON； 集合：MULTIPOINT、MULTILINESTRING、MULTIPOLYGON、GEOMETRYCOLLECTION</td></tr></tbody></table><p>其中，常用的几类类型介绍如下：</p><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>INT</td><td>从-2^31到2^31-1的整型数据。存储大小为 4 个字节</td></tr><tr><td>CHAR(size)</td><td>定长字符数据。若未指定，默认为 1 个字符，最大长度 255</td></tr><tr><td>VARCHAR(size)</td><td>可变长字符数据，根据字符串实际长度保存， 必须指定长度</td></tr><tr><td>FLOAT(M,D)</td><td>单精度，占用 4 个字节，M&#x3D;整数位+小数位，D&#x3D;小数位。 D&lt;&#x3D;M&lt;&#x3D;255,0&lt;&#x3D;D&lt;&#x3D;30，默认M+D&lt;&#x3D;6</td></tr><tr><td>DOUBLE(M,D)</td><td>双精度，占用 8 个字节，D&lt;&#x3D;M&lt;&#x3D;255,0&lt;&#x3D;D&lt;&#x3D;30，默认M+D&lt;&#x3D;15</td></tr><tr><td>DECIMAL(M,D)</td><td>高精度小数，占用M+2个字节，D&lt;&#x3D;M&lt;&#x3D;65，0&lt;&#x3D;D&lt;&#x3D;30，最大取值范围与DOUBLE相同。</td></tr><tr><td>DATE</td><td>日期型数据，格式’YYYY-MM-DD’</td></tr><tr><td>BLOB</td><td>二进制形式的长文本数据，最大可达4G</td></tr><tr><td>TEXT</td><td>长文本数据，最大可达4G</td></tr></tbody></table><hr><h2 id="2-创建和管理数据库"><a href="#2-创建和管理数据库" class="headerlink" title="2. 创建和管理数据库"></a>2. 创建和管理数据库</h2><hr><h3 id="2-1-创建数据库"><a href="#2-1-创建数据库" class="headerlink" title="2. 1 创建数据库"></a>2. 1 创建数据库</h3><ul><li><p>方式 1 ：创建数据库</p><pre class="line-numbers language-none"><code class="language-none">CREATE DATABASE 数据库名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>方式 2 ：创建数据库并指定字符集</p><pre class="line-numbers language-none"><code class="language-none">CREATE DATABASE 数据库名 CHARACTER SET 字符集;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>方式 3 ：判断数据库是否已经存在，不存在则创建数据库（推荐）</p><pre class="line-numbers language-none"><code class="language-none">CREATE DATABASE IF NOT EXISTS 数据库名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>如果MySQL中已经存在相关的数据库，则忽略创建语句，不再创建数据库。</p><blockquote><p>注意：DATABASE 不能改名。一些可视化工具可以改名，它是建新库，把所有表复制到新库，再删旧库完成的。</p></blockquote><h3 id="2-2-使用数据库"><a href="#2-2-使用数据库" class="headerlink" title="2. 2 使用数据库"></a>2. 2 使用数据库</h3><ul><li><p>查看当前所有的数据库</p><pre class="line-numbers language-none"><code class="language-none">SHOW DATABASES; #有一个S，代表多个数据库<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看当前正在使用的数据库</p><pre class="line-numbers language-none"><code class="language-none">SELECT DATABASE();  #使用的一个 mysql 中的全局函数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看指定库下所有的表</p><pre class="line-numbers language-none"><code class="language-none">SHOW TABLES FROM 数据库名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看数据库的创建信息</p><pre class="line-numbers language-none"><code class="language-none">SHOW CREATE DATABASE 数据库名;或者：SHOW CREATE DATABASE 数据库名\G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>使用&#x2F;切换数据库</p><pre class="line-numbers language-none"><code class="language-none">USE 数据库名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><blockquote><p>注意：要操作表格和数据之前必须先说明是对哪个数据库进行操作，否则就要对所有对象加上“数据库名.”。</p></blockquote><h3 id="2-3-修改数据库"><a href="#2-3-修改数据库" class="headerlink" title="2. 3 修改数据库"></a>2. 3 修改数据库</h3><ul><li><p>更改数据库字符集</p><pre class="line-numbers language-none"><code class="language-none">ALTER DATABASE 数据库名 CHARACTER SET 字符集;  #比如：gbk、utf8等<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="2-4-删除数据库"><a href="#2-4-删除数据库" class="headerlink" title="2. 4 删除数据库"></a>2. 4 删除数据库</h3><ul><li><p>方式 1 ：删除指定的数据库</p><pre class="line-numbers language-none"><code class="language-none">DROP DATABASE 数据库名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>方式 2 ：删除指定的数据库（<code>推荐</code>）</p><pre class="line-numbers language-none"><code class="language-none">DROP DATABASE IF EXISTS 数据库名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><hr><h2 id="3-创建表"><a href="#3-创建表" class="headerlink" title="3. 创建表"></a>3. 创建表</h2><hr><h3 id="3-1-创建方式-1"><a href="#3-1-创建方式-1" class="headerlink" title="3. 1 创建方式 1"></a>3. 1 创建方式 1</h3><ul><li><p><strong>必须具备：</strong></p><ul><li>CREATE TABLE权限</li><li>存储空间</li></ul></li><li><p><strong>语法格式：</strong></p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE [IF NOT EXISTS] 表名(字段1, 数据类型 [约束条件] [默认值],字段2, 数据类型 [约束条件] [默认值],字段3, 数据类型 [约束条件] [默认值],......[表约束条件]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>加上了IF NOT EXISTS关键字，则表示：如果当前数据库中不存在要创建的数据表，则创建数据表；如果当前数据库中已经存在要创建的数据表，则忽略建表语句，不再创建数据表。</p></blockquote><ul><li><p><strong>必须指定：</strong></p><ul><li>表名</li><li>列名(或字段名)，数据类型， 长度</li></ul></li><li><p><strong>可选指定：</strong></p><ul><li>约束条件</li><li>默认值</li></ul></li><li><p>创建表举例 1 ：</p><pre class="line-numbers language-none"><code class="language-none">-- 创建表CREATE TABLE emp (-- int类型emp_id INT,-- 最多保存 20 个中英文字符emp_name VARCHAR( 20 ),-- 总位数不超过 15 位salary DOUBLE,-- 日期类型birthday DATE);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">DESC emp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC10%E7%AB%A0_%E5%88%9B%E5%BB%BA%E5%92%8C%E7%AE%A1%E7%90%86%E8%A1%A8/1649848963202.png" alt="1649848963202"></p><p>MySQL在执行建表语句时，将id字段的类型设置为int(11)，这里的 11 实际上是int类型指定的显示宽度，默认的显示宽度为 11 。也可以在创建数据表的时候指定数据的显示宽度。</p></li><li><p>创建表举例 2 ：</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE dept(-- int类型，自增deptno INT( 2 ) AUTO_INCREMENT,dname VARCHAR( 14 ),loc VARCHAR( 13 ),-- 主键PRIMARY KEY (deptno));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">DESCRIBE dept;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC10%E7%AB%A0_%E5%88%9B%E5%BB%BA%E5%92%8C%E7%AE%A1%E7%90%86%E8%A1%A8/1649849045513.png" alt="1649849045513"></p></li></ul><blockquote><p>在MySQL 8.x版本中，不再推荐为INT类型指定显示长度，并在未来的版本中可能去掉这样的语法。</p></blockquote><h3 id="3-2-创建方式-2"><a href="#3-2-创建方式-2" class="headerlink" title="3. 2 创建方式 2"></a>3. 2 创建方式 2</h3><ul><li><p>使用 AS subquery 选项， <strong>将创建表和插入数据结合起来</strong><br><img src="/../pic/%E7%AC%AC10%E7%AB%A0_%E5%88%9B%E5%BB%BA%E5%92%8C%E7%AE%A1%E7%90%86%E8%A1%A8/1649849100222.png" alt="1649849100222"></p></li><li><p>指定的列和子查询中的列要一一对应</p></li><li><p>通过列名和默认值定义列</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE emp1 AS SELECT * FROM employees;CREATE TABLE emp2 AS SELECT * FROM employees WHERE 1 &#x3D; 2 ; -- 创建的emp2是空表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE deptASSELECT employee_id, last_name, salary* 12 ANNSAL, hire_dateFROM employeesWHERE department_id &#x3D; 80 ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">DESCRIBE dept80;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC10%E7%AB%A0_%E5%88%9B%E5%BB%BA%E5%92%8C%E7%AE%A1%E7%90%86%E8%A1%A8/1649849177597.png" alt="1649849177597"></p></li></ul><h3 id="3-3-查看数据表结构"><a href="#3-3-查看数据表结构" class="headerlink" title="3. 3 查看数据表结构"></a>3. 3 查看数据表结构</h3><p>在MySQL中创建好数据表之后，可以查看数据表的结构。MySQL支持使用<code>DESCRIBE/DESC</code>语句查看数据表结构，也支持使用<code>SHOW CREATE TABLE</code>语句查看数据表结构。</p><p>语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">SHOW CREATE TABLE 表名\G<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用SHOW CREATE TABLE语句不仅可以查看表创建时的详细语句，还可以查看存储引擎和字符编码。</p><hr><h2 id="4-修改表"><a href="#4-修改表" class="headerlink" title="4. 修改表"></a>4. 修改表</h2><hr><p>修改表指的是修改数据库中已经存在的数据表的结构。</p><p><strong>使用 ALTER TABLE 语句可以实现：</strong></p><ul><li>向已有的表中添加列</li><li>修改现有表中的列</li><li>删除现有表中的列</li><li>重命名现有表中的列</li></ul><h3 id="4-1-追加一个列"><a href="#4-1-追加一个列" class="headerlink" title="4. 1 追加一个列"></a>4. 1 追加一个列</h3><p>语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">ALTER TABLE 表名 ADD 【COLUMN】 字段名 字段类型 【FIRST|AFTER 字段名】;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">ALTER TABLE deptADD job_id varchar( 15 );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC10%E7%AB%A0_%E5%88%9B%E5%BB%BA%E5%92%8C%E7%AE%A1%E7%90%86%E8%A1%A8/1649849274899.png" alt="1649849274899"></p><h3 id="4-2-修改一个列"><a href="#4-2-修改一个列" class="headerlink" title="4. 2 修改一个列"></a>4. 2 修改一个列</h3><ul><li><p>可以修改列的数据类型，长度、默认值和位置</p></li><li><p>修改字段数据类型、长度、默认值、位置的语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">ALTER TABLE 表名 MODIFY 【COLUMN】 字段名 1 字段类型 【DEFAULT 默认值】【FIRST|AFTER 字段名2】;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">ALTER TABLE deptMODIFY last_name VARCHAR( 30 );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">ALTER TABLE deptMODIFY salary double( 9 , 2 ) default 1000 ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>对默认值的修改只影响今后对表的修改</p></li><li><p>此外，还可以通过此种方式修改列的约束。这里暂先不讲。</p></li></ul><h3 id="4-3-重命名一个列"><a href="#4-3-重命名一个列" class="headerlink" title="4. 3 重命名一个列"></a>4. 3 重命名一个列</h3><p>使用 CHANGE old_column new_column dataType子句重命名列。语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">ALTER TABLE 表名 CHANGE 【column】 列名 新列名 新数据类型;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">ALTER TABLE deptCHANGE department_name dept_name varchar( 15 );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-4-删除一个列"><a href="#4-4-删除一个列" class="headerlink" title="4. 4 删除一个列"></a>4. 4 删除一个列</h3><p>删除表中某个字段的语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">ALTER TABLE 表名 DROP 【COLUMN】字段名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">ALTER TABLE deptDROP COLUMN job_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h2 id="5-重命名表"><a href="#5-重命名表" class="headerlink" title="5. 重命名表"></a>5. 重命名表</h2><hr><ul><li><p>方式一：使用RENAME</p><pre class="line-numbers language-none"><code class="language-none">RENAME TABLE empTO myemp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>方式二：</p><pre class="line-numbers language-none"><code class="language-none">ALTER table deptRENAME [TO] detail_dept;  -- [TO]可以省略<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>必须是对象的拥有者</p></li></ul><hr><h2 id="6-删除表"><a href="#6-删除表" class="headerlink" title="6. 删除表"></a>6. 删除表</h2><hr><ul><li><p>在MySQL中，当一张数据表<code>没有与其他任何数据表形成关联关系</code>时，可以将当前数据表直接删除。</p></li><li><p>数据和结构都被删除</p></li><li><p>所有正在运行的相关事务被提交</p></li><li><p>所有相关索引被删除</p></li><li><p>语法格式：</p><pre class="line-numbers language-none"><code class="language-none">DROP TABLE [IF EXISTS] 数据表1 [, 数据表2, ..., 数据表n];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>IF EXISTS</code>的含义为：如果当前数据库中存在相应的数据表，则删除数据表；如果当前数据库中不存在相应的数据表，则忽略删除语句，不再执行删除数据表的操作。</p></li><li><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">DROP TABLE dept80;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>DROP TABLE 语句不能回滚</p></li></ul><hr><h2 id="7-清空表"><a href="#7-清空表" class="headerlink" title="7. 清空表"></a>7. 清空表</h2><hr><ul><li><p>TRUNCATE TABLE语句：</p><ul><li>删除表中所有的数据</li><li>释放表的存储空间</li></ul></li><li><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">TRUNCATE TABLE detail_dept;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>TRUNCATE语句 <strong>不能回滚</strong> ，而使用 DELETE 语句删除数据，可以回滚</p></li><li><p>对比：</p><pre class="line-numbers language-none"><code class="language-none">SET autocommit &#x3D; FALSE;DELETE FROM emp2;#TRUNCATE TABLE emp2;SELECT * FROM emp2;ROLLBACK;SELECT * FROM emp2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>阿里开发规范：</p><p>【参考】TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少，但 TRUNCATE 无事务且不触发 TRIGGER，有可能造成事故，故不建议在开发代码中使用此语句。</p><p>说明：TRUNCATE TABLE 在功能上与不带 WHERE 子句的 DELETE 语句相同。</p></blockquote><hr><h2 id="8-内容拓展"><a href="#8-内容拓展" class="headerlink" title="8. 内容拓展"></a>8. 内容拓展</h2><hr><h3 id="拓展-1-：阿里巴巴《Java开发手册》之MySQL字段命名"><a href="#拓展-1-：阿里巴巴《Java开发手册》之MySQL字段命名" class="headerlink" title="拓展 1 ：阿里巴巴《Java开发手册》之MySQL字段命名"></a>拓展 1 ：阿里巴巴《Java开发手册》之MySQL字段命名</h3><ul><li><p>【<code>强制</code>】表名、字段名必须使用小写字母或数字，禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。</p><ul><li>正例：aliyun_admin，rdc_config，level3_name</li><li>反例：AliyunAdmin，rdcConfig，level_3_name</li></ul></li><li><p>【<code>强制</code>】禁用保留字，如 desc、range、match、delayed 等，请参考 MySQL 官方保留字。</p></li><li><p>【<code>强制</code>】表必备三字段：id, gmt_create, gmt_modified。</p><ul><li>说明：其中id必为主键，类型为BIGINT UNSIGNED、单表时自增、步长为1。gmt_create,gmt_modified 的类型均为 DATETIME 类型，前者现在时表示主动式创建，后者过去分词表示被动式更新</li></ul></li><li><p>【<code>推荐</code>】表的命名最好是遵循 “业务名称_表的作用”。</p><ul><li>正例：alipay_task 、 force_project、 trade_config</li></ul></li><li><p>【<code>推荐</code>】库名与应用名称尽量一致。</p></li><li><p>【参考】合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检索速度。</p><ul><li><p>正例：无符号值可以避免误存负数，且扩大了表示范围。</p><table><thead><tr><th>对象</th><th>年龄区间</th><th>类型</th><th>字节</th><th>表示范围</th></tr></thead><tbody><tr><td>人</td><td>150岁之内</td><td>tinyint unsigned</td><td>1</td><td>无符号值：0 到 255</td></tr><tr><td>龟</td><td>数百岁</td><td>smallint unnsigned</td><td>2</td><td>无符号值：0 到 65535</td></tr><tr><td>恐龙化石</td><td>数千万年</td><td>int unsigned</td><td>4</td><td>无符号值：0 到 约43亿</td></tr><tr><td>太阳</td><td>约50亿年</td><td>bigint unsigned</td><td>8</td><td>无符号值：0 到 约10的19次方</td></tr></tbody></table></li></ul></li></ul><h3 id="拓展-2-：如何理解清空表、删除表等操作需谨慎？！"><a href="#拓展-2-：如何理解清空表、删除表等操作需谨慎？！" class="headerlink" title="拓展 2 ：如何理解清空表、删除表等操作需谨慎？！"></a>拓展 2 ：如何理解清空表、删除表等操作需谨慎？！</h3><p><code>表删除</code>操作将把表的定义和表中的数据一起删除，并且MySQL在执行删除操作时，不会有任何的确认信息提示，因此执行删除操时应当慎重。在删除表前，最好对表中的数据进行<code>备份</code>，这样当操作失误时可以对数据进行恢复，以免造成无法挽回的后果。</p><p>同样的，在使用 <code>ALTER TABLE</code> 进行表的基本修改操作时，在执行操作过程之前，也应该确保对数据进行完整的<code>备份</code>，因为数据库的改变是<code>无法撤销</code>的，如果添加了一个不需要的字段，可以将其删除；相同的，如果删除了一个需要的列，该列下面的所有数据都将会丢失。</p><h3 id="拓展-3-：MySQL-8-新特性—DDL的原子化"><a href="#拓展-3-：MySQL-8-新特性—DDL的原子化" class="headerlink" title="拓展 3 ：MySQL 8 新特性—DDL的原子化"></a>拓展 3 ：MySQL 8 新特性—DDL的原子化</h3><p>在MySQL 8.0版本中，InnoDB表的DDL支持事务完整性，即<code>DDL操作要么成功要么回滚</code>。DDL操作回滚日志写入到data dictionary数据字典表mysql.innodb_ddl_log（该表是隐藏的表，通过show tables无法看到）中，用于回滚操作。通过设置参数，可将DDL操作日志打印输出到MySQL错误日志中。</p><p>分别在MySQL 5.7版本和MySQL 8.0版本中创建数据库和数据表，结果如下：</p><pre class="line-numbers language-none"><code class="language-none">CREATE DATABASE mytest;USE mytest;CREATE TABLE book1(book_id INT ,book_name VARCHAR( 255 ));SHOW TABLES;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(1) 在MySQL 5.7版本中，测试步骤如下： 删除数据表book1和数据表book2，结果如下：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; DROP TABLE book1,book2;ERROR 1051 ( 42 S02): Unknown table &#39;mytest.book2&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再次查询数据库中的数据表名称，结果如下：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SHOW TABLES;Empty set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从结果可以看出，虽然删除操作时报错了，但是仍然删除了数据表book1。</p><p>(2) 在MySQL 8.0版本中，测试步骤如下： 删除数据表book1和数据表book2，结果如下：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; DROP TABLE book1,book2;ERROR 1051 ( 42 S02): Unknown table &#39;mytest.book2&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再次查询数据库中的数据表名称，结果如下：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show tables;+------------------+| Tables_in_mytest |+------------------+| book1 |+------------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从结果可以看出，数据表book1并没有被删除。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据处理之增删改</title>
      <link href="/2022/07/17/di-11-zhang-shu-ju-chu-li-zhi-zeng-shan-gai/"/>
      <url>/2022/07/17/di-11-zhang-shu-ju-chu-li-zhi-zeng-shan-gai/</url>
      
        <content type="html"><![CDATA[<h1 id="第11章-数据处理之增删改"><a href="#第11章-数据处理之增删改" class="headerlink" title="第11章_数据处理之增删改"></a>第11章_数据处理之增删改</h1><p> 2022-04-15   2022-04-18   <a href="https://new-wangz.github.io/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/">技术博客</a>   303   <a href="https://new-wangz.github.io/2022/04/15/%E7%AC%AC11%E7%AB%A0-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%B9%8B%E5%A2%9E%E5%88%A0%E6%94%B9/#valine-comments">0</a></p><h2 id="1-插入数据"><a href="#1-插入数据" class="headerlink" title="1. 插入数据"></a>1. 插入数据</h2><hr><h3 id="1-1-实际问题"><a href="#1-1-实际问题" class="headerlink" title="1. 1 实际问题"></a>1. 1 实际问题</h3><p><img src="/../pic/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%B9%8B%E5%A2%9E%E5%88%A0%E6%94%B9/1650096710363.png" alt="1650096710363"></p><p>解决方式：使用 INSERT 语句向表中插入数据。</p><h3 id="1-2-方式-1-：VALUES的方式添加"><a href="#1-2-方式-1-：VALUES的方式添加" class="headerlink" title="1. 2 方式 1 ：VALUES的方式添加"></a>1. 2 方式 1 ：VALUES的方式添加</h3><p>使用这种语法一次只能向表中插入 <strong>一条</strong> 数据。</p><p><strong>情况 1 ：为表的所有字段按默认顺序插入数据</strong></p><pre class="line-numbers language-none"><code class="language-none">INSERT INTO 表名VALUES (value1,value2,....);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>值列表中需要为表的每一个字段指定值，并且值的顺序必须和数据表中字段定义时的顺序相同。</p><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">INSERT INTO departmentsVALUES ( 70 , &#39;Pub&#39;, 100 , 1700 );INSERT INTO departmentsVALUES ( 100 , &#39;Finance&#39;, NULL, NULL);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>情况 2 ：为表的指定字段插入数据</strong></p><pre class="line-numbers language-none"><code class="language-none">INSERT INTO 表名(column1 [, column2, ..., columnn])VALUES (value1 [,value2, ..., valuen]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>为表的指定字段插入数据，就是在INSERT语句中只向部分字段中插入值，而其他字段的值为表定义时的默认值。</p><p>在 INSERT 子句中随意列出列名，但是一旦列出，VALUES中要插入的value1,….valuen需要与column1,…columnn列一一对应。如果类型不同，将无法插入，并且MySQL会产生错误。</p><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">INSERT INTO departments(department_id, department_name)VALUES ( 80 , &#39;IT&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>情况 3 ：同时插入多条记录</strong></p><p>INSERT语句可以同时向数据表中插入多条记录，插入时指定多个值列表，每个值列表之间用逗号分隔开，基本语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">INSERT INTO table_nameVALUES(value1 [,value2, ..., valuen]),(value1 [,value2, ..., valuen]),......(value1 [,value2, ..., valuen]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-none"><code class="language-none">INSERT INTO table_name(column1 [, column2, ..., columnn])VALUES(value1 [,value2, ..., valuen]),(value1 [,value2, ..., valuen]),......(value1 [,value2, ..., valuen]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; INSERT INTO emp(emp_id,emp_name)-&gt; VALUES ( 1001 ,&#39;shkstart&#39;),-&gt; ( 1002 ,&#39;atguigu&#39;),-&gt; ( 1003 ,&#39;Tom&#39;);Query OK, 3 rows affected (0.00 sec)Records: 3 Duplicates: 0 Warnings: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用INSERT同时插入多条记录时，MySQL会返回一些在执行单行插入时没有的额外信息，这些信息的含义如下：</p><ul><li>Records：表明插入的记录条数。</li><li>Duplicates：表明插入时被忽略的记录，原因可能是这些记录包含了重复的主键值。</li><li>Warnings：表明有问题的数据值，例如发生数据类型转换。</li></ul><blockquote><p>一个同时插入多行记录的INSERT语句等同于多个单行插入的INSERT语句，但是多行的INSERT语句在处理过程中<code>效率更高</code>。因为MySQL执行单条INSERT语句插入多行数据比使用多条INSERT语句快，所以在插入多条记录时最好选择使用单条INSERT语句的方式插入。</p></blockquote><p><strong>小结：</strong></p><ul><li><code>VALUES</code>也可以写成<code>VALUE</code>，但是VALUES是标准写法。</li><li>字符和日期型数据应包含在单引号中。</li></ul><h3 id="1-3-方式-2-：将查询结果插入到表中"><a href="#1-3-方式-2-：将查询结果插入到表中" class="headerlink" title="1. 3 方式 2 ：将查询结果插入到表中"></a>1. 3 方式 2 ：将查询结果插入到表中</h3><p>INSERT还可以将SELECT语句查询的结果插入到表中，此时不需要把每一条记录的值一个一个输入，只需要使用一条INSERT语句和一条SELECT语句组成的组合语句即可快速地从一个或多个表中向一个表中插入多行。</p><p>基本语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">INSERT INTO 目标表名(tar_column1 [, tar_column2, ..., tar_columnn])SELECT(src_column1 [, src_column2, ..., src_columnn])FROM 源表名[WHERE condition]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在 INSERT 语句中加入子查询。</li><li><strong>不必书写 VALUES 子句。</strong></li><li>子查询中的值列表应与 INSERT 子句中的列名对应。</li></ul><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">INSERT INTO empSELECT *FROM employeesWHERE department_id &#x3D; 90 ;INSERT INTO sales_reps(id, name, salary, commission_pct)SELECT employee_id, last_name, salary, commission_pctFROM employeesWHERE job_id LIKE &#39;%REP%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2-更新数据"><a href="#2-更新数据" class="headerlink" title="2. 更新数据"></a>2. 更新数据</h2><hr><p><img src="/../pic/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%B9%8B%E5%A2%9E%E5%88%A0%E6%94%B9/1650097046903.png" alt="1650097046903"></p><ul><li><p>使用 UPDATE 语句更新数据。语法如下：</p><pre class="line-numbers language-none"><code class="language-none">UPDATE table_nameSET column1&#x3D;value1, column2&#x3D;value2, ... , column&#x3D;valuen[WHERE condition]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>可以一次更新 <strong>多条</strong> 数据。</p></li><li><p>如果需要回滚数据，需要保证在DML前，进行设置： <strong>SET AUTOCOMMIT &#x3D; FALSE;</strong></p></li><li><p>使用 <strong>WHERE</strong> 子句指定需要更新的数据。</p><pre class="line-numbers language-none"><code class="language-none">UPDATE employeesSET department_id &#x3D; 70WHERE employee_id &#x3D; 113 ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>如果省略 WHERE 子句，则表中的所有数据都将被更新。</p><pre class="line-numbers language-none"><code class="language-none">UPDATE copy_empSET department_id &#x3D; 110 ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>更新中的数据完整性错误</p><pre class="line-numbers language-none"><code class="language-none">UPDATE employeesSET department_id &#x3D; 55WHERE department_id &#x3D; 110 ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>说明：不存在 55 号部门</p></blockquote><hr><h2 id="3-删除数据"><a href="#3-删除数据" class="headerlink" title="3. 删除数据"></a>3. 删除数据</h2><hr><p><img src="/../pic/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%B9%8B%E5%A2%9E%E5%88%A0%E6%94%B9/1650097169922.png" alt="1650097169922"></p><ul><li><p>使用 DELETE 语句从表中删除数据</p><p><img src="/../pic/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%B9%8B%E5%A2%9E%E5%88%A0%E6%94%B9/1650097225574.png" alt="1650097225574"></p><pre class="line-numbers language-none"><code class="language-none">DELETE FROM table_name [WHERE &lt;condition&gt;];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>table_name指定要执行删除操作的表；“[WHERE ]”为可选参数，指定删除条件，如果没有WHERE子句，DELETE语句将删除表中的所有记录。</p></li><li><p>使用 WHERE 子句删除指定的记录。</p><pre class="line-numbers language-none"><code class="language-none">DELETE FROM departmentsWHERE department_name &#x3D; &#39;Finance&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>如果省略 WHERE 子句，则表中的全部数据将被删除</p><pre class="line-numbers language-none"><code class="language-none">DELETE FROM copy_emp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>删除中的数据完整性错误</strong></p><pre class="line-numbers language-none"><code class="language-none">DELETE FROM departmentsWHERE department_id &#x3D; 60 ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><blockquote><p>说明：You cannot delete a row that contains a primary key that is used as a foreign key in another table.</p></blockquote><hr><h2 id="4-MySQL-8-新特性：计算列"><a href="#4-MySQL-8-新特性：计算列" class="headerlink" title="4. MySQL 8 新特性：计算列"></a>4. MySQL 8 新特性：计算列</h2><hr><p>什么叫计算列呢？简单来说就是某一列的值是通过别的列计算得来的。例如，a列值为 1 、b列值为 2 ，c列不需要手动插入，定义a+b的结果为c的值，那么c就是计算列，是通过别的列计算得来的。</p><p>在MySQL 8.0中，CREATE TABLE 和 ALTER TABLE 中都支持增加计算列。下面以CREATE TABLE为例进行讲解。</p><p>举例：定义数据表tb1，然后定义字段id、字段a、字段b和字段c，其中字段c为计算列，用于计算a+b的值。 首先创建测试表tb1，语句如下：</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE tb1(id INT,a INT,b INT,c INT GENERATED ALWAYS AS (a + b) VIRTUAL);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插入演示数据，语句如下：</p><pre class="line-numbers language-none"><code class="language-none">INSERT INTO tb1(a,b) VALUES ( 100 , 200 );<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询数据表tb1中的数据，结果如下：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT * FROM tb1;+------+------+------+------+| id | a | b | c |+------+------+------+------+| NULL | 100 | 200 | 300 |+------+------+------+------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更新数据中的数据，语句如下：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; UPDATE tb1 SET a &#x3D; 500 ;Query OK, 0 rows affected (0.00 sec)Rows matched: 1 Changed: 0 Warnings: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="5-综合案例"><a href="#5-综合案例" class="headerlink" title="5. 综合案例"></a>5. 综合案例</h2><hr><pre class="line-numbers language-none"><code class="language-none"># 1、创建数据库test01_library# 2、创建表 books，表结构如下：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>字段名</th><th>字段说明</th><th>数据类型</th></tr></thead><tbody><tr><td>id</td><td>书编号</td><td>INT</td></tr><tr><td>name</td><td>书名</td><td>VARCHAR(50)</td></tr><tr><td>authors</td><td>作者</td><td>VARCHAR(100)</td></tr><tr><td>price</td><td>价格</td><td>FLOAT</td></tr><tr><td>pubdate</td><td>出版日期</td><td>YEAR</td></tr><tr><td>note</td><td>说明</td><td>VARCHAR(100)</td></tr><tr><td>num</td><td>库存</td><td>INT</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none"># 3、向books表中插入记录# 1）不指定字段名称，插入第一条记录# 2）指定所有字段名称，插入第二记录# 3）同时插入多条记录（剩下的所有记录）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>id</th><th>name</th><th>authors</th><th>price</th><th>pubdate</th><th>note</th><th>num</th></tr></thead><tbody><tr><td>1</td><td>Tal of AAA</td><td>Dickes</td><td>23</td><td>1995</td><td>novel</td><td>11</td></tr><tr><td>2</td><td>EmmaT</td><td>Jane lura</td><td>35</td><td>1993</td><td>joke</td><td>22</td></tr><tr><td>3</td><td>Story of Jane</td><td>Jane Tim</td><td>40</td><td>2001</td><td>novel</td><td>0</td></tr><tr><td>4</td><td>Lovey Day</td><td>George Byron</td><td>20</td><td>2005</td><td>novel</td><td>30</td></tr><tr><td>5</td><td>Old land</td><td>Honore Blade</td><td>30</td><td>2010</td><td>law</td><td>0</td></tr><tr><td>6</td><td>The Battle</td><td>Upton Sara</td><td>30</td><td>1999</td><td>medicine</td><td>40</td></tr><tr><td>7</td><td>Rose Hood</td><td>Richard haggard</td><td>28</td><td>2008</td><td>cartoon</td><td>28</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none"># 4、将小说类型(novel)的书的价格都增加 5 。# 5、将名称为EmmaT的书的价格改为 40 ，并将说明改为drama。# 6、删除库存为 0 的记录。# 7、统计书名中包含a字母的书# 8、统计书名中包含a字母的书的数量和库存总量# 9、找出“novel”类型的书，按照价格降序排列# 10、查询图书信息，按照库存量降序排列，如果库存量相同的按照note升序排列# 11、按照note分类统计书的数量# 13、查询所有图书，每页显示 5 本，显示第二页# 14、按照note分类统计书的库存量，显示库存量最多的# 15、查询书名达到 10 个字符的书，不包括里面的空格# 16、查询书名和类型，其中note值为novel显示小说，law显示法律，medicine显示医药,cartoon显示卡通，joke显示笑话# 17、查询书名、库存，其中num值超过 30 本的，显示滞销，大于 0 并低于 10 的，显示畅销，为 0 的显示需要无货# 18、统计每一种note的库存量，并合计总量# 19、统计每一种note的数量，并合计总量# 20、统计库存量前三名的图书# 21、找出最早出版的一本书# 22、找出novel中价格最高的一本书# 23、找出书名中字数最多的一本书，不含空格<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>答案：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#1、创建数据库test01_library</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> test01_library <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token string">'utf8'</span><span class="token punctuation">;</span><span class="token comment">#指定使用哪个数据库</span><span class="token keyword">USE</span> test01_library<span class="token punctuation">;</span><span class="token comment">#2、创建表 books</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> books<span class="token punctuation">(</span>id <span class="token keyword">INT</span><span class="token punctuation">,</span>name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span> <span class="token number">50</span> <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>authors<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span> <span class="token number">100</span> <span class="token punctuation">)</span> <span class="token punctuation">,</span>price <span class="token keyword">FLOAT</span><span class="token punctuation">,</span>pubdate <span class="token keyword">YEAR</span> <span class="token punctuation">,</span>note <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>num <span class="token keyword">INT</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#3、向books表中插入记录</span><span class="token number">1</span>）不指定字段名称，插入第一条记录<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> books<span class="token keyword">VALUES</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">,</span><span class="token string">'Tal of AAA'</span><span class="token punctuation">,</span><span class="token string">'Dickes'</span><span class="token punctuation">,</span> <span class="token number">23</span> <span class="token punctuation">,</span> <span class="token number">1995</span> <span class="token punctuation">,</span><span class="token string">'novel'</span><span class="token punctuation">,</span> <span class="token number">11</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span>）指定所有字段名称，插入第二记录<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> books <span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>authors<span class="token punctuation">`</span></span><span class="token punctuation">,</span>price<span class="token punctuation">,</span>pubdate<span class="token punctuation">,</span>note<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">,</span><span class="token string">'EmmaT'</span><span class="token punctuation">,</span><span class="token string">'Jane lura'</span><span class="token punctuation">,</span> <span class="token number">35</span> <span class="token punctuation">,</span> <span class="token number">1993</span> <span class="token punctuation">,</span><span class="token string">'Joke'</span><span class="token punctuation">,</span> <span class="token number">22</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3</span>）同时插入多条记录（剩下的所有记录）<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> books <span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>authors<span class="token punctuation">`</span></span><span class="token punctuation">,</span>price<span class="token punctuation">,</span>pubdate<span class="token punctuation">,</span>note<span class="token punctuation">,</span>num<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token punctuation">,</span><span class="token string">'Story of Jane'</span><span class="token punctuation">,</span><span class="token string">'Jane Tim'</span><span class="token punctuation">,</span> <span class="token number">40</span> <span class="token punctuation">,</span> <span class="token number">2001</span> <span class="token punctuation">,</span><span class="token string">'novel'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token punctuation">,</span><span class="token string">'Lovey Day'</span><span class="token punctuation">,</span><span class="token string">'George Byron'</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">,</span> <span class="token number">2005</span> <span class="token punctuation">,</span><span class="token string">'novel'</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token punctuation">,</span><span class="token string">'Old land'</span><span class="token punctuation">,</span><span class="token string">'Honore Blade'</span><span class="token punctuation">,</span> <span class="token number">30</span> <span class="token punctuation">,</span> <span class="token number">2010</span> <span class="token punctuation">,</span><span class="token string">'Law'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">6</span> <span class="token punctuation">,</span><span class="token string">'The Battle'</span><span class="token punctuation">,</span><span class="token string">'Upton Sara'</span><span class="token punctuation">,</span> <span class="token number">30</span> <span class="token punctuation">,</span> <span class="token number">1999</span> <span class="token punctuation">,</span><span class="token string">'medicine'</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">7</span> <span class="token punctuation">,</span><span class="token string">'Rose Hood'</span><span class="token punctuation">,</span><span class="token string">'Richard haggard'</span><span class="token punctuation">,</span> <span class="token number">28</span> <span class="token punctuation">,</span> <span class="token number">2008</span> <span class="token punctuation">,</span><span class="token string">'cartoon'</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 4、将小说类型(novel)的书的价格都增加 5 。</span><span class="token keyword">UPDATE</span> books <span class="token keyword">SET</span> price<span class="token operator">=</span>price<span class="token operator">+</span> <span class="token number">5</span> <span class="token keyword">WHERE</span> note <span class="token operator">=</span> <span class="token string">'novel'</span><span class="token punctuation">;</span><span class="token comment"># 5、将名称为EmmaT的书的价格改为 40 ，并将说明改为drama。</span><span class="token keyword">UPDATE</span> books <span class="token keyword">SET</span> price<span class="token operator">=</span> <span class="token number">40</span> <span class="token punctuation">,</span>note<span class="token operator">=</span><span class="token string">'drama'</span> <span class="token keyword">WHERE</span> name<span class="token operator">=</span><span class="token string">'EmmaT'</span><span class="token punctuation">;</span><span class="token comment"># 6、删除库存为 0 的记录。</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> books <span class="token keyword">WHERE</span> num<span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token comment"># 7、统计书名中包含a字母的书</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> books <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'%a%'</span><span class="token punctuation">;</span><span class="token comment"># 8、统计书名中包含a字母的书的数量和库存总量</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token keyword">FROM</span> books <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'%a%'</span><span class="token punctuation">;</span><span class="token comment"># 9、找出“novel”类型的书，按照价格降序排列</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> books <span class="token keyword">WHERE</span> note <span class="token operator">=</span> <span class="token string">'novel'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> price <span class="token keyword">DESC</span><span class="token punctuation">;</span><span class="token comment"># 10、查询图书信息，按照库存量降序排列，如果库存量相同的按照note升序排列</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> books <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> num <span class="token keyword">DESC</span><span class="token punctuation">,</span>note <span class="token keyword">ASC</span><span class="token punctuation">;</span><span class="token comment"># 11、按照note分类统计书的数量</span><span class="token keyword">SELECT</span> note<span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> books <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> note<span class="token punctuation">;</span><span class="token comment"># 12、按照note分类统计书的库存量，显示库存量超过 30 本的</span><span class="token keyword">SELECT</span> note<span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token keyword">FROM</span> books <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> note <span class="token keyword">HAVING</span> <span class="token function">SUM</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">></span> <span class="token number">30</span> <span class="token punctuation">;</span><span class="token comment"># 13、查询所有图书，每页显示 5 本，显示第二页</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> books <span class="token keyword">LIMIT</span> <span class="token number">5</span> <span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">;</span><span class="token comment"># 14、按照note分类统计书的库存量，显示库存量最多的</span><span class="token keyword">SELECT</span> note<span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> sum_num <span class="token keyword">FROM</span> books <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> note <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> sum_num <span class="token keyword">DESC</span> <span class="token keyword">LIMIT</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">;</span><span class="token comment"># 15、查询书名达到 10 个字符的书，不包括里面的空格</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> books <span class="token keyword">WHERE</span> CHAR_LENGTH<span class="token punctuation">(</span><span class="token keyword">REPLACE</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>=</span> <span class="token number">10</span> <span class="token punctuation">;</span><span class="token comment">/*16 、查询书名和类型，其中note值为 novel显示小说，law显示法律，medicine显示医药，cartoon显示卡通，joke显示笑话*/</span><span class="token keyword">SELECT</span> name <span class="token keyword">AS</span> <span class="token string">"书名"</span> <span class="token punctuation">,</span>note<span class="token punctuation">,</span> <span class="token keyword">CASE</span> note<span class="token keyword">WHEN</span> <span class="token string">'novel'</span> <span class="token keyword">THEN</span> <span class="token string">'小说'</span><span class="token keyword">WHEN</span> <span class="token string">'law'</span> <span class="token keyword">THEN</span> <span class="token string">'法律'</span><span class="token keyword">WHEN</span> <span class="token string">'medicine'</span> <span class="token keyword">THEN</span> <span class="token string">'医药'</span><span class="token keyword">WHEN</span> <span class="token string">'cartoon'</span> <span class="token keyword">THEN</span> <span class="token string">'卡通'</span><span class="token keyword">WHEN</span> <span class="token string">'joke'</span> <span class="token keyword">THEN</span> <span class="token string">'笑话'</span><span class="token keyword">END</span> <span class="token keyword">AS</span> <span class="token string">"类型"</span><span class="token keyword">FROM</span> books<span class="token punctuation">;</span><span class="token comment"># 17、查询书名、库存，其中num值超过 30 本的，显示滞销，大于 0 并低于 10 的，显示畅销，为 0 的显示需要无货</span><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span>num<span class="token punctuation">,</span><span class="token keyword">CASE</span><span class="token keyword">WHEN</span> num<span class="token operator">></span> <span class="token number">30</span> <span class="token keyword">THEN</span> <span class="token string">'滞销'</span><span class="token keyword">WHEN</span> num<span class="token operator">></span> <span class="token number">0</span> <span class="token operator">AND</span> num<span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token keyword">THEN</span> <span class="token string">'畅销'</span><span class="token keyword">WHEN</span> num<span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">THEN</span> <span class="token string">'无货'</span><span class="token keyword">ELSE</span> <span class="token string">'正常'</span><span class="token keyword">END</span> <span class="token keyword">AS</span> <span class="token string">"库存状态"</span><span class="token keyword">FROM</span> books<span class="token punctuation">;</span><span class="token comment"># 18、统计每一种note的库存量，并合计总量</span><span class="token keyword">SELECT</span> IFNULL<span class="token punctuation">(</span>note<span class="token punctuation">,</span><span class="token string">'合计总库存量'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> note<span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token keyword">FROM</span> books <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> note <span class="token keyword">WITH ROLLUP</span><span class="token punctuation">;</span><span class="token comment"># 19、统计每一种note的数量，并合计总量</span><span class="token keyword">SELECT</span> IFNULL<span class="token punctuation">(</span>note<span class="token punctuation">,</span><span class="token string">'合计总数'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> note<span class="token punctuation">,</span><span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> books <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> note <span class="token keyword">WITH ROLLUP</span><span class="token punctuation">;</span><span class="token comment"># 20、统计库存量前三名的图书</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> books <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> num <span class="token keyword">DESC</span> <span class="token keyword">LIMIT</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">;</span><span class="token comment"># 21、找出最早出版的一本书</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> books <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> pubdate <span class="token keyword">ASC</span> <span class="token keyword">LIMIT</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">;</span><span class="token comment"># 22、找出novel中价格最高的一本书</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> books <span class="token keyword">WHERE</span> note <span class="token operator">=</span> <span class="token string">'novel'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> price <span class="token keyword">DESC</span> <span class="token keyword">LIMIT</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">;</span><span class="token comment"># 23、找出书名中字数最多的一本书，不含空格</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> books <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> CHAR_LENGTH<span class="token punctuation">(</span><span class="token keyword">REPLACE</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">DESC</span> <span class="token keyword">LIMIT</span> <span class="token number">0</span> <span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>约束</title>
      <link href="/2022/07/17/di-13-zhang-yue-shu/"/>
      <url>/2022/07/17/di-13-zhang-yue-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="第13章-约束"><a href="#第13章-约束" class="headerlink" title="第13章_约束"></a>第13章_约束</h1><h2 id="1-约束-constraint-概述"><a href="#1-约束-constraint-概述" class="headerlink" title="1. 约束(constraint)概述"></a>1. 约束(constraint)概述</h2><hr><h3 id="1-1-为什么需要约束"><a href="#1-1-为什么需要约束" class="headerlink" title="1. 1 为什么需要约束"></a>1. 1 为什么需要约束</h3><p>数据完整性（Data Integrity）是指数据的精确性（Accuracy）和可靠性（Reliability）。它是防止数据库中存在不符合语义规定的数据和防止因错误信息的输入输出造成无效操作或错误信息而提出的。</p><p>为了保证数据的完整性，SQL规范以约束的方式对<strong>表数据进行额外的条件限制</strong>。从以下四个方面考虑：</p><ul><li><code>实体完整性（Entity Integrity）</code>：例如，同一个表中，不能存在两条完全相同无法区分的记录</li><li><code>域完整性（Domain Integrity）</code>：例如：年龄范围0-120，性别范围“男&#x2F;女”</li><li><code>引用完整性（Referential Integrity）</code>：例如：员工所在部门，在部门表中要能找到这个部门</li><li><code>用户自定义完整性（User-defined Integrity）</code>：例如：用户名唯一、密码不能为空等，本部门经理的工资不得高于本部门职工的平均工资的 5 倍。</li></ul><h2 id="1-2-什么是约束"><a href="#1-2-什么是约束" class="headerlink" title="1. 2 什么是约束"></a>1. 2 什么是约束</h2><p>约束是表级的强制规定。</p><p>可以在 <strong>创建表时规定约束（通过 CREATE TABLE 语句）</strong> ，或者在 <strong>表创建之后通过 ALTER TABLE 语句规定约束</strong> 。</p><h3 id="1-3-约束的分类"><a href="#1-3-约束的分类" class="headerlink" title="1. 3 约束的分类"></a>1. 3 约束的分类</h3><ul><li><p>根据约束数据列的限制， 约束可分为：</p><ul><li>单列约束 ：每个约束只约束一列</li><li>多列约束 ：每个约束可约束多列数据</li></ul></li><li><p>根据约束的作用范围 ，约束可分为：</p><ul><li>列级约束 ：只能作用在一个列上，跟在列的定义后面</li><li>表级约束 ：可以作用在多个列上，不与列一起，而是单独定义</li></ul><pre class="line-numbers language-none"><code class="language-none">位置支持的约束类型是否可以起约束名列级约束：列的后面语法都支持，但外键没有效果不可以表级约束：所有列的下面默认和非空不支持，其他支持可以（主键没有效果）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>根据约束起的作用 ，约束可分为：</p><ul><li>NOT NULL 非空约束，规定某个字段不能为空</li><li>UNIQUE 唯一约束 ， 规定某个字段在整个表中是唯一的</li><li>PRIMARY KEY 主键(非空且唯一)约束</li><li>FOREIGN KEY 外键约束</li><li>CHECK 检查约束</li><li>DEFAULT 默认值约束</li></ul></li></ul><blockquote><p>注意： MySQL不支持check约束，但可以使用check约束，而没有任何效果</p></blockquote><ul><li><p>查看某个表已有的约束</p><pre class="line-numbers language-none"><code class="language-none">#information_schema数据库名（系统库）#table_constraints表名称（专门存储各个表的约束）SELECT * FROM information_schema.table_constraintsWHERE table_name &#x3D; &#39;表名称&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h2 id="2-非空约束"><a href="#2-非空约束" class="headerlink" title="2. 非空约束"></a>2. 非空约束</h2><hr><h3 id="2-1-作用"><a href="#2-1-作用" class="headerlink" title="2. 1 作用"></a>2. 1 作用</h3><p>限定某个字段&#x2F;某列的值不允许为空</p><p><img src="/../pic/%E7%AC%AC13%E7%AB%A0_%E7%BA%A6%E6%9D%9F/1650270930136.png" alt="1650270930136"></p><h3 id="2-2-关键字"><a href="#2-2-关键字" class="headerlink" title="2. 2 关键字"></a>2. 2 关键字</h3><p>NOT NULL</p><h3 id="2-3-特点"><a href="#2-3-特点" class="headerlink" title="2. 3 特点"></a>2. 3 特点</h3><ul><li>默认，所有的类型的值都可以是NULL，包括INT、FLOAT等数据类型</li><li>非空约束只能出现在表对象的列上，只能某个列单独限定非空，不能组合非空</li><li>一个表可以有很多列都分别限定了非空</li><li>空字符串’’不等于NULL， 0 也不等于NULL</li></ul><h3 id="2-4-添加非空约束"><a href="#2-4-添加非空约束" class="headerlink" title="2. 4 添加非空约束"></a>2. 4 添加非空约束</h3><p>(1) 建表时</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE 表名称(字段名 数据类型,字段名 数据类型 NOT NULL,字段名 数据类型 NOT NULL);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE emp(id INT( 10 ) NOT NULL,NAME VARCHAR( 20 ) NOT NULL,sex CHAR NULL);CREATE TABLE student(sid int,sname varchar( 20 ) not null,tel char( 11 ) ,cardid char( 18 ) not null);insert into student values( 1 ,&#39;张三&#39;,&#39;13710011002&#39;,&#39;110222198912032545&#39;); #成功insert into student values( 2 ,&#39;李四&#39;,&#39;13710011002&#39;,null);#身份证号为空ERROR 1048 ( 23000 ): Column &#39;cardid&#39; cannot be nullinsert into student values(2,&#39;李四&#39;,null,&#39;110222198912032546&#39;);#成功，tel允许为空insert into student values( 3 ,null,null,&#39;110222198912032547&#39;);#失败ERROR 1048 ( 23000 ): Column &#39;sname&#39; cannot be null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2) 建表后</p><pre class="line-numbers language-none"><code class="language-none">alter table 表名称 modify 字段名 数据类型 not null;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">ALTER TABLE empMODIFY sex VARCHAR( 30 ) NOT NULL;alter table student modify sname varchar( 20 ) not null;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-5-删除非空约束"><a href="#2-5-删除非空约束" class="headerlink" title="2. 5 删除非空约束"></a>2. 5 删除非空约束</h3><pre class="line-numbers language-none"><code class="language-none">alter table 表名称 modify 字段名 数据类型 NULL;#去掉not null，相当于修改某个非注解字段，该字段允许为空或alter table 表名称 modify 字段名 数据类型;#去掉not null，相当于修改某个非注解字段，该字段允许为空<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">ALTER TABLE empMODIFY sex VARCHAR( 30 ) NULL;ALTER TABLE empMODIFY NAME VARCHAR( 15 ) DEFAULT &#39;abc&#39; NULL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="3-唯一性约束"><a href="#3-唯一性约束" class="headerlink" title="3. 唯一性约束"></a>3. 唯一性约束</h2><hr><h3 id="3-1-作用"><a href="#3-1-作用" class="headerlink" title="3. 1 作用"></a>3. 1 作用</h3><p>用来限制某个字段&#x2F;某列的值不能重复。</p><p><img src="/../pic/%E7%AC%AC13%E7%AB%A0_%E7%BA%A6%E6%9D%9F/1650271354207.png" alt="1650271354207"></p><h3 id="3-2-关键字"><a href="#3-2-关键字" class="headerlink" title="3. 2 关键字"></a>3. 2 关键字</h3><p>UNIQUE</p><h3 id="3-3-特点"><a href="#3-3-特点" class="headerlink" title="3. 3 特点"></a>3. 3 特点</h3><ul><li>同一个表可以有多个唯一约束。</li><li>唯一约束可以是某一个列的值唯一，也可以多个列组合的值唯一。</li><li>唯一性约束允许列值为空。</li><li>在创建唯一约束的时候，如果不给唯一约束命名，就默认和列名相同。</li><li><strong>MySQL会给唯一约束的列上默认创建一个唯一索引。</strong></li></ul><h3 id="3-4-添加唯一约束"><a href="#3-4-添加唯一约束" class="headerlink" title="3. 4 添加唯一约束"></a>3. 4 添加唯一约束</h3><p>(1) 建表时</p><pre class="line-numbers language-none"><code class="language-none">create table 表名称(字段名 数据类型,字段名 数据类型 unique,字段名 数据类型 unique key,字段名 数据类型);create table 表名称(字段名 数据类型,字段名 数据类型,字段名 数据类型,[constraint 约束名] unique key(字段名));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">create table student(sid int,sname varchar( 20 ),tel char( 11 ) unique,cardid char( 18 ) unique key);CREATE TABLE t_course(cid INT UNIQUE,cname VARCHAR( 100 ) UNIQUE,description VARCHAR( 200 ));CREATE TABLE USER(id INT NOT NULL,NAME VARCHAR( 25 ),PASSWORD VARCHAR( 16 ),-- 使用表级约束语法CONSTRAINT uk_name_pwd UNIQUE(NAME,PASSWORD));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>表示用户名和密码组合不能重复</p></blockquote><pre class="line-numbers language-none"><code class="language-none">insert into student values( 1 ,&#39;张三&#39;,&#39;13710011002&#39;,&#39;101223199012015623&#39;);insert into student values( 2 ,&#39;李四&#39;,&#39;13710011003&#39;,&#39;101223199012015624&#39;);mysql&gt; select * from student;+-----+-------+-------------+--------------------+| sid | sname | tel | cardid |+-----+-------+-------------+--------------------+| 1 | 张三 | 13710011002 | 101223199012015623 || 2 | 李四 | 13710011003 | 101223199012015624 |+-----+-------+-------------+--------------------+2 rows in set (0.00 sec)insert into student values( 3 ,&#39;王五&#39;,&#39;13710011004&#39;,&#39;101223199012015624&#39;); #身份证号重复ERROR 1062 ( 23000 ): Duplicate entry &#39;101223199012015624&#39; for key &#39;cardid&#39;insert into student values( 3 ,&#39;王五&#39;,&#39;13710011003&#39;,&#39;101223199012015625&#39;);ERROR 1062 ( 23000 ): Duplicate entry &#39;13710011003&#39; for key &#39;tel&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2) 建表后指定唯一键约束</p><pre class="line-numbers language-none"><code class="language-none">#字段列表中如果是一个字段，表示该列的值唯一。如果是两个或更多个字段，那么复合唯一，即多个字段的组合是唯一的#方式 1 ：alter table 表名称 add unique key(字段列表);#方式 2 ：alter table 表名称 modify 字段名 字段类型 unique;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">ALTER TABLE USERADD UNIQUE(NAME,PASSWORD);ALTER TABLE USERADD CONSTRAINT uk_name_pwd UNIQUE(NAME,PASSWORD);ALTER TABLE USERMODIFY NAME VARCHAR( 20 ) UNIQUE;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">create table student(sid int primary key,sname varchar( 20 ),tel char( 11 ) ,cardid char( 18 ));alter table student add unique key(tel);alter table student add unique key(cardid);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-5-关于复合唯一约束"><a href="#3-5-关于复合唯一约束" class="headerlink" title="3. 5 关于复合唯一约束"></a>3. 5 关于复合唯一约束</h3><pre class="line-numbers language-none"><code class="language-none">create table 表名称(字段名 数据类型,字段名 数据类型,字段名 数据类型,unique key(字段列表) #字段列表中写的是多个字段名，多个字段名用逗号分隔，表示那么是复合唯一，即多个字段的组合是唯一的);#学生表create table student(sid int, #学号sname varchar( 20 ), #姓名tel char( 11 ) unique key,  #电话cardid char( 18 ) unique key #身份证号);#课程表create table course(cid int,  #课程编号cname varchar( 20 ) #课程名称);#选课表create table student_course(id int,sid int,cid int,score int,unique key(sid,cid)  #复合唯一);insert into student values( 1 ,&#39;张三&#39;,&#39;13710011002&#39;,&#39;101223199012015623&#39;);#成功insert into student values( 2 ,&#39;李四&#39;,&#39;13710011003&#39;,&#39;101223199012015624&#39;);#成功insert into course values( 1001 ,&#39;Java&#39;),( 1002 ,&#39;MySQL&#39;);#成功mysql&gt; select * from student;+-----+-------+-------------+--------------------+| sid | sname | tel | cardid |+-----+-------+-------------+--------------------+| 1 | 张三 | 13710011002 | 101223199012015623 || 2 | 李四 | 13710011003 | 101223199012015624 |+-----+-------+-------------+--------------------+2 rows in set (0.00 sec)mysql&gt; select * from course;+------+-------+| cid | cname |+------+-------+| 1001 | Java || 1002 | MySQL |+------+-------+2 rows in set (0.00 sec)insert into student_course values( 1 , 1 , 1001 , 89 ),( 2 , 1 , 1002 , 90 ),( 3 , 2 , 1001 , 88 ),( 4 , 2 , 1002 , 56 );#成功mysql&gt; select * from student_course;+----+------+------+-------+| id | sid | cid | score |+----+------+------+-------+| 1 | 1 | 1001 | 89 || 2 | 1 | 1002 | 90 || 3 | 2 | 1001 | 88 || 4 | 2 | 1002 | 56 |+----+------+------+-------+4 rows in set (0.00 sec)insert into student_course values ( 5 , 1 , 1001 , 88 );#失败#ERROR 1062 (23000): Duplicate entry &#39;1-1001&#39; for key &#39;sid&#39; 违反sid-cid的复合唯一<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-6-删除唯一约束"><a href="#3-6-删除唯一约束" class="headerlink" title="3. 6 删除唯一约束"></a>3. 6 删除唯一约束</h3><ul><li>添加唯一性约束的列上也会自动创建唯一索引。</li><li>删除唯一约束只能通过删除唯一索引的方式删除。</li><li>删除时需要指定唯一索引名，唯一索引名就和唯一约束名一样。</li><li>如果创建唯一约束时未指定名称，如果是单列，就默认和列名相同；如果是组合列，那么默认和()中排在第一个的列名相同。也可以自定义唯一性约束名。</li></ul><pre class="line-numbers language-none"><code class="language-none">SELECT * FROM information_schema.table_constraints WHERE table_name &#x3D; &#39;表名&#39;; #查看都有哪些约束ALTER TABLE USERDROP INDEX uk_name_pwd;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：可以通过 <code>show index from 表名称;</code>查看表的索引</p></blockquote><hr><h2 id="4-PRIMARY-KEY-约束"><a href="#4-PRIMARY-KEY-约束" class="headerlink" title="4. PRIMARY KEY 约束"></a>4. PRIMARY KEY 约束</h2><hr><h3 id="4-1-作用"><a href="#4-1-作用" class="headerlink" title="4. 1 作用"></a>4. 1 作用</h3><p>用来唯一标识表中的一行记录。</p><h3 id="4-2-关键字"><a href="#4-2-关键字" class="headerlink" title="4. 2 关键字"></a>4. 2 关键字</h3><p>primary key</p><h3 id="4-3-特点"><a href="#4-3-特点" class="headerlink" title="4. 3 特点"></a>4. 3 特点</h3><ul><li>主键约束相当于 唯一约束+非空约束的组合 ，主键约束列不允许重复，也不允许出现空值。<br><img src="/../pic/%E7%AC%AC13%E7%AB%A0_%E7%BA%A6%E6%9D%9F/1650271961132.png" alt="1650271961132"></li><li>一个表最多只能有一个主键约束，建立主键约束可以在列级别创建，也可以在表级别上创建。</li><li>主键约束对应着表中的一列或者多列（复合主键）</li><li>如果是多列组合的复合主键约束，那么这些列都不允许为空值，并且组合的值不允许重复。</li><li><strong>MySQL的主键名总是PRIMARY</strong> ，就算自己命名了主键约束名也没用。</li><li>当创建主键约束时，系统默认会在所在的列或列组合上建立对应的 <strong>主键索引</strong> （能够根据主键查询的，就根据主键查询，效率更高）。如果删除主键约束了，主键约束对应的索引就自动删除了。</li><li>需要注意的一点是，不要修改主键字段的值。因为主键是数据记录的唯一标识，如果修改了主键的值，就有可能会破坏数据的完整性。</li></ul><h3 id="4-4-添加主键约束"><a href="#4-4-添加主键约束" class="headerlink" title="4. 4 添加主键约束"></a>4. 4 添加主键约束</h3><p>(1) 建表时指定主键约束</p><pre class="line-numbers language-none"><code class="language-none">create table 表名称(字段名 数据类型 primary key, #列级模式字段名 数据类型,字段名 数据类型);create table 表名称(字段名 数据类型,字段名 数据类型,字段名 数据类型,[constraint 约束名] primary key(字段名) #表级模式);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">create table temp(id int primary key,name varchar( 20 ));mysql&gt; desc temp;+-------+-------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+-------+-------------+------+-----+---------+-------+| id | int( 11 ) | NO | PRI | NULL | || name | varchar( 20 ) | YES | | NULL | |+-------+-------------+------+-----+---------+-------+2 rows in set (0.00 sec)insert into temp values( 1 ,&#39;张三&#39;);#成功insert into temp values( 2 ,&#39;李四&#39;);#成功mysql&gt; select * from temp;+----+------+| id | name |+----+------+| 1 | 张三 || 2 | 李四 |+----+------+2 rows in set (0.00 sec)insert into temp values( 1 ,&#39;张三&#39;);#失败ERROR 1062 ( 23000 ): Duplicate（重复） entry（键入，输入） &#39;1&#39; for key &#39;PRIMARY&#39;insert into temp values( 1 ,&#39;王五&#39;);#失败ERROR 1062 ( 23000 ): Duplicate entry &#39;1&#39; for key &#39;PRIMARY&#39;insert into temp values( 3 ,&#39;张三&#39;);#成功mysql&gt; select * from temp;+----+------+| id | name |+----+------+| 1 | 张三 || 2 | 李四 || 3 | 张三 |+----+------+3 rows in set (0.00 sec)insert into temp values( 4 ,null);#成功insert into temp values(null,&#39;李琦&#39;);#失败ERROR 1048 ( 23000 ): Column &#39;id&#39; cannot be nullmysql&gt; select * from temp;+----+------+| id | name |+----+------+| 1 | 张三 || 2 | 李四 || 3 | 张三 || 4 | NULL |+----+------+4 rows in set (0.00 sec)#演示一个表建立两个主键约束create table temp(id int primary key,name varchar( 20 ) primary key);ERROR 1068 ( 42000 ): Multiple（多重的） primary key defined（定义）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再举例：</p><ul><li><p>列级约束</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE emp4(id INT PRIMARY KEY AUTO_INCREMENT ,NAME VARCHAR( 20 ));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>表级约束</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE emp5(id INT NOT NULL AUTO_INCREMENT,NAME VARCHAR( 20 ),pwd VARCHAR( 15 ),CONSTRAINT emp5_id_pk PRIMARY KEY(id));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>(2) 建表后增加主键约束</p><pre class="line-numbers language-none"><code class="language-none">ALTER TABLE 表名称 ADD PRIMARY KEY(字段列表); #字段列表可以是一个字段，也可以是多个字段，如果是多个字段的话，是复合主键ALTER TABLE student ADD PRIMARY KEY (sid);ALTER TABLE emp5 ADD PRIMARY KEY(NAME,pwd);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-5-关于复合主键"><a href="#4-5-关于复合主键" class="headerlink" title="4. 5 关于复合主键"></a>4. 5 关于复合主键</h3><pre class="line-numbers language-none"><code class="language-none">create table 表名称(字段名 数据类型,字段名 数据类型,字段名 数据类型,primary key(字段名1,字段名2)  #表示字段 1 和字段 2 的组合是唯一的，也可以有更多个字段);#学生表create table student(sid int primary key,  #学号sname varchar( 20 ) #学生姓名);#课程表create table course(cid int primary key,  #课程编号cname varchar( 20 ) #课程名称);#选课表create table student_course(sid int,cid int,score int,primary key(sid,cid)  #复合主键);insert into student values( 1 ,&#39;张三&#39;),( 2 ,&#39;李四&#39;);insert into course values( 1001 ,&#39;Java&#39;),( 1002 ,&#39;MySQL&#39;);mysql&gt; select * from student;+-----+-------+| sid | sname |+-----+-------+| 1 | 张三 || 2 | 李四 |+-----+-------+2 rows in set (0.00 sec)mysql&gt; select * from course;+------+-------+| cid | cname |+------+-------+| 1001 | Java || 1002 | MySQL |+------+-------+2 rows in set (0.00 sec)insert into student_course values(1,1001,89),(1,1002,90),(2,1001,88),(2,1002,56);mysql&gt; select * from student_course;+-----+------+-------+| sid | cid | score |+-----+------+-------+| 1 | 1001 | 89 || 1 | 1002 | 90 || 2 | 1001 | 88 || 2 | 1002 | 56 |+-----+------+-------+4 rows in set (0.00 sec)insert into student_course values( 1 , 1001 , 100 );ERROR 1062 ( 23000 ): Duplicate entry &#39;1-1001&#39; for key &#39;PRIMARY&#39;mysql&gt; desc student_course;+-------+---------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+-------+---------+------+-----+---------+-------+| sid | int( 11 ) | NO | PRI | NULL | || cid | int( 11 ) | NO | PRI | NULL | || score | int( 11 ) | YES | | NULL | |+-------+---------+------+-----+---------+-------+3 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>再举例</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE emp6(id INT NOT NULL,NAME VARCHAR( 20 ),pwd VARCHAR( 15 ),CONSTRAINT emp7_pk PRIMARY KEY(NAME,pwd));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="4-6-删除主键约束"><a href="#4-6-删除主键约束" class="headerlink" title="4. 6 删除主键约束"></a>4. 6 删除主键约束</h3><pre class="line-numbers language-none"><code class="language-none">alter table 表名称 drop primary key;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">ALTER TABLE student DROP PRIMARY KEY;ALTER TABLE emp5 DROP PRIMARY KEY;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>说明：删除主键约束，不需要指定主键名，因为一个表只有一个主键，删除主键约束后，非空还存在。</p></blockquote><hr><h2 id="5-自增列：AUTO-INCREMENT"><a href="#5-自增列：AUTO-INCREMENT" class="headerlink" title="5. 自增列：AUTO_INCREMENT"></a>5. 自增列：AUTO_INCREMENT</h2><hr><h3 id="5-1-作用"><a href="#5-1-作用" class="headerlink" title="5. 1 作用"></a>5. 1 作用</h3><p>某个字段的值自增</p><h3 id="5-2-关键字"><a href="#5-2-关键字" class="headerlink" title="5. 2 关键字"></a>5. 2 关键字</h3><p>auto_increment</p><h3 id="5-3-特点和要求"><a href="#5-3-特点和要求" class="headerlink" title="5. 3 特点和要求"></a>5. 3 特点和要求</h3><ol><li>一个表最多只能有一个自增长列</li><li>当需要产生唯一标识符或顺序值时，可设置自增长</li><li>自增长列约束的列必须是键列（主键列，唯一键列）</li><li>自增约束的列的数据类型必须是整数类型</li><li>如果自增列指定了 0 和 null，会在当前最大值的基础上自增；如果自增列手动指定了具体值，直接赋值为具体值。</li></ol><p>错误演示：</p><pre class="line-numbers language-none"><code class="language-none">create table employee(eid int auto_increment,ename varchar( 20 ));# ERROR 1075 (42000): Incorrect table definition; there can be only one auto column and it must be defined as a keycreate table employee(eid int primary key,ename varchar( 20 ) unique key auto_increment);# ERROR 1063 (42000): Incorrect column specifier for column &#39;ename&#39; 因为ename不是整数类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-4-如何指定自增约束"><a href="#5-4-如何指定自增约束" class="headerlink" title="5. 4 如何指定自增约束"></a>5. 4 如何指定自增约束</h3><p><strong>(1) 建表时</strong></p><pre class="line-numbers language-none"><code class="language-none">create table 表名称(    字段名 数据类型 primary key auto_increment,    字段名 数据类型 unique key not null,    字段名 数据类型 unique key,    字段名 数据类型 not null default 默认值,);create table 表名称(    字段名 数据类型 default 默认值 ,    字段名 数据类型 unique key auto_increment,    字段名 数据类型 not null default 默认值,,    primary key(字段名));create table employee(    eid int primary key auto_increment,    ename varchar( 20 ));mysql&gt; desc employee;+-------+-------------+------+-----+---------+----------------+| Field | Type | Null | Key | Default | Extra |+-------+-------------+------+-----+---------+----------------+| eid | int( 11 ) | NO | PRI | NULL | auto_increment || ename | varchar( 20 ) | YES | | NULL | |+-------+-------------+------+-----+---------+----------------+2 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>(2) 建表后</strong></p><pre class="line-numbers language-none"><code class="language-none">alter table 表名称 modify 字段名 数据类型 auto_increment;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">create table employee(    eid int primary key ,    ename varchar( 20 ));alter table employee modify eid int auto_increment;mysql&gt; desc employee;+-------+-------------+------+-----+---------+----------------+| Field | Type | Null | Key | Default | Extra |+-------+-------------+------+-----+---------+----------------+| eid | int( 11 ) | NO | PRI | NULL | auto_increment || ename | varchar( 20 ) | YES | | NULL | |+-------+-------------+------+-----+---------+----------------+2 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-5-如何删除自增约束"><a href="#5-5-如何删除自增约束" class="headerlink" title="5. 5 如何删除自增约束"></a>5. 5 如何删除自增约束</h3><pre class="line-numbers language-none"><code class="language-none">#alter table 表名称 modify 字段名 数据类型 auto_increment;#给这个字段增加自增约束alter table 表名称 modify 字段名 数据类型; #去掉auto_increment相当于删除alter table employee modify eid int;mysql&gt; desc employee;+-------+-------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+-------+-------------+------+-----+---------+-------+| eid | int( 11 ) | NO | PRI | NULL | || ename | varchar( 20 ) | YES | | NULL | |+-------+-------------+------+-----+---------+-------+2 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-6-MySQL-8-0-新特性—自增变量的持久化"><a href="#5-6-MySQL-8-0-新特性—自增变量的持久化" class="headerlink" title="5. 6 MySQL 8. 0 新特性—自增变量的持久化"></a>5. 6 MySQL 8. 0 新特性—自增变量的持久化</h3><p>在MySQL 8.0之前，自增主键AUTO_INCREMENT的值如果大于max(primary key)+1，在MySQL重启后，会重置AUTO_INCREMENT&#x3D;max(primary key)+1，这种现象在某些情况下会导致业务主键冲突或者其他难以发现的问题。 下面通过案例来对比不同的版本中自增变量是否持久化。 在MySQL 5.7版本中，测试步骤如下： 创建的数据表中包含自增主键的id字段，语句如下：</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE test1(id INT PRIMARY KEY AUTO_INCREMENT);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>插入 4 个空值，执行如下：</p><pre class="line-numbers language-none"><code class="language-none">INSERT INTO testVALUES( 0 ),( 0 ),( 0 ),( 0 );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查询数据表test1中的数据，结果如下：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT * FROM test1;+----+| id |+----+| 1 || 2 || 3 || 4 |+----+4 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除id为 4 的记录，语句如下：</p><pre class="line-numbers language-none"><code class="language-none">DELETE FROM test1 WHERE id &#x3D; 4 ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再次插入一个空值，语句如下：</p><pre class="line-numbers language-none"><code class="language-none">INSERT INTO test1 VALUES( 0 );<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询此时数据表test1中的数据，结果如下：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT * FROM test1;+----+| id |+----+| 1 || 2 || 3 || 5 |+----+4 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从结果可以看出，虽然删除了id为 4 的记录，但是再次插入空值时，并没有重用被删除的 4 ，而是分配了5 。 删除id为 5 的记录，结果如下：</p><pre class="line-numbers language-none"><code class="language-none">DELETE FROM test1 where id&#x3D; 5 ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>重启数据库</strong> ，重新插入一个空值。</p><pre class="line-numbers language-none"><code class="language-none">INSERT INTO test1 values( 0 );<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再次查询数据表test1中的数据，结果如下：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT * FROM test1;+----+| id |+----+| 1 || 2 || 3 || 4 |+----+4 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从结果可以看出，新插入的 0 值分配的是 4 ，按照重启前的操作逻辑，此处应该分配 6 。出现上述结果的主要原因是自增主键没有持久化。 在MySQL 5. 7 系统中，对于自增主键的分配规则，是由InnoDB数据字典内部一个<code>计数器</code>来决定的，而该计数器只在<code>内存中维护</code>，并不会持久化到磁盘中。当数据库重启时，该计数器会被初始化。</p><p>在MySQL 8. 0 版本中，上述测试步骤最后一步的结果如下：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT * FROM test1;+----+| id |+----+| 1 || 2 || 3 || 6 |+----+4 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从结果可以看出，自增变量已经持久化了。</p><p>MySQL 8. 0 将自增主键的计数器持久化到<code>重做日志</code>中。每次计数器发生改变，都会将其写入重做日志中。如果数据库重启，InnoDB会根据重做日志中的信息来初始化计数器的内存值。</p><hr><h2 id="6-FOREIGN-KEY-约束"><a href="#6-FOREIGN-KEY-约束" class="headerlink" title="6. FOREIGN KEY 约束"></a>6. FOREIGN KEY 约束</h2><hr><h3 id="6-1-作用"><a href="#6-1-作用" class="headerlink" title="6. 1 作用"></a>6. 1 作用</h3><p>限定某个表的某个字段的引用完整性。</p><p>比如：员工表的员工所在部门的选择，必须在部门表能找到对应的部分。</p><p><img src="/../pic/%E7%AC%AC13%E7%AB%A0_%E7%BA%A6%E6%9D%9F/1650272932586.png" alt="1650272932586"></p><h3 id="6-2-关键字"><a href="#6-2-关键字" class="headerlink" title="6. 2 关键字"></a>6. 2 关键字</h3><p>FOREIGN KEY</p><h3 id="6-3-主表和从表-x2F-父表和子表"><a href="#6-3-主表和从表-x2F-父表和子表" class="headerlink" title="6. 3 主表和从表&#x2F;父表和子表"></a>6. 3 主表和从表&#x2F;父表和子表</h3><p>主表（父表）：被引用的表，被参考的表</p><p>从表（子表）：引用别人的表，参考别人的表</p><p>例如：员工表的员工所在部门这个字段的值要参考部门表：部门表是主表，员工表是从表。</p><p>例如：学生表、课程表、选课表：选课表的学生和课程要分别参考学生表和课程表，学生表和课程表是主表，选课表是从表。</p><h3 id="6-4-特点"><a href="#6-4-特点" class="headerlink" title="6. 4 特点"></a>6. 4 特点</h3><ol><li><p>从表的外键列，必须引用&#x2F;参考主表的主键或唯一约束的列</p><p>为什么？因为被依赖&#x2F;被参考的值必须是唯一的</p></li><li><p>在创建外键约束时，如果不给外键约束命名， 默认名不是列名，而是自动产生一个外键名 （例如student_ibfk_1;），也可以指定外键约束名。</p></li><li><p>创建(CREATE)表时就指定外键约束的话，先创建主表，再创建从表</p></li><li><p>删表时，先删从表（或先删除外键约束），再删除主表</p></li><li><p>当主表的记录被从表参照时，主表的记录将不允许删除，如果要删除数据，需要先删除从表中依赖该记录的数据，然后才可以删除主表的数据</p></li><li><p>在“从表”中指定外键约束，并且一个表可以建立多个外键约束</p></li><li><p>从表的外键列与主表被参照的列名字可以不相同，但是数据类型必须一样，逻辑意义一致。如果类型不一样，创建子表时，就会出现错误“ERROR 1005 (HY000): Can’t create table’database.tablename’(errno: 150)”。</p><p>例如：都是表示部门编号，都是int类型。</p></li><li><p>当创建外键约束时，系统默认会在所在的列上建立对应的普通索引 。但是索引名是外键的约束名。（根据外键查询效率很高）</p></li><li><p>删除外键约束后，必须手动删除对应的索引</p></li></ol><h3 id="6-5-添加外键约束"><a href="#6-5-添加外键约束" class="headerlink" title="6. 5 添加外键约束"></a>6. 5 添加外键约束</h3><p>(1) 建表时</p><pre class="line-numbers language-none"><code class="language-none">create table 主表名称(    字段 1 数据类型 primary key,    字段 2 数据类型);create table 从表名称(    字段 1 数据类型 primary key,    字段 2 数据类型,    [CONSTRAINT &lt;外键约束名称&gt;] FOREIGN KEY（从表的某个字段) references 主表名(被参考字段));#(从表的某个字段)的数据类型必须与主表名(被参考字段)的数据类型一致，逻辑意义也一样#(从表的某个字段)的字段名可以与主表名(被参考字段)的字段名一样，也可以不一样-- FOREIGN KEY: 在表级指定子表中的列-- REFERENCES: 标示在父表中的列create table dept( #主表    did int primary key, #部门编号    dname varchar( 50 ) #部门名称);create table emp(#从表    eid int primary key,  #员工编号    ename varchar( 5 ), #员工姓名    deptid int, #员工所在的部门    foreign key (deptid) references dept(did) #在从表中指定外键约束    #emp表的deptid和和dept表的did的数据类型一致，意义都是表示部门的编号);说明：（ 1 ）主表dept必须先创建成功，然后才能创建emp表，指定外键成功。（ 2 ）删除表时，先删除从表emp，再删除主表dept<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2) 建表后</p><p>一般情况下，表与表的关联都是提前设计好了的，因此，会在创建表的时候就把外键约束定义好。不过，如果需要修改表的设计（比如添加新的字段，增加新的关联关系），但没有预先定义外键约束，那么，就要用修改表的方式来补充定义。</p><p>格式：</p><pre class="line-numbers language-none"><code class="language-none">ALTER TABLE 从表名 ADD [CONSTRAINT 约束名] FOREIGN KEY (从表的字段) REFERENCES 主表名(被引用字段) [on update xx][on delete xx];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">ALTER TABLE empADD [CONSTRAINT emp_dept_id_fk] FOREIGN KEY(dept_id) REFERENCES dept(dept_id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">create table dept(    did int primary key, #部门编号    dname varchar( 50 ) #部门名称);create table emp(    eid int primary key,  #员工编号    ename varchar( 5 ), #员工姓名    deptid int #员工所在的部门);#这两个表创建时，没有指定外键的话，那么创建顺序是随意alter table emp add foreign key (deptid) references dept(did);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-6-演示问题"><a href="#6-6-演示问题" class="headerlink" title="6. 6 演示问题"></a>6. 6 演示问题</h3><ol><li><p>失败：不是键列</p><pre class="line-numbers language-none"><code class="language-none">create table dept(    did int , #部门编号    dname varchar( 50 ) #部门名称);create table emp(    eid int primary key,  #员工编号    ename varchar( 5 ), #员工姓名    deptid int, #员工所在的部门    foreign key (deptid) references dept(did));#ERROR 1215 (HY000): Cannot add foreign key constraint 原因是dept的did不是键列<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>失败：数据类型不一致</p><pre class="line-numbers language-none"><code class="language-none">create table dept(    did int primary key, #部门编号    dname varchar( 50 ) #部门名称);create table emp(    eid int primary key,  #员工编号    ename varchar( 5 ), #员工姓名    deptid char, #员工所在的部门    foreign key (deptid) references dept(did));#ERROR 1215 (HY000): Cannot add foreign key constraint 原因是从表的deptid字段和主表的did字段的数据类型不一致，并且要它俩的逻辑意义一致<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>成功，两个表字段名一样</p><pre class="line-numbers language-none"><code class="language-none">create table dept(    did int primary key, #部门编号    dname varchar( 50 ) #部门名称);create table emp(    eid int primary key,  #员工编号    ename varchar( 5 ), #员工姓名    did int, #员工所在的部门    foreign key (did) references dept(did)    #emp表的deptid和和dept表的did的数据类型一致，意义都是表示部门的编号    #是否重名没问题，因为两个did在不同的表中);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加、删除、修改问题</p><pre class="line-numbers language-none"><code class="language-none">create table dept(    did int primary key, #部门编号    dname varchar( 50 ) #部门名称);create table emp(    eid int primary key,  #员工编号    ename varchar( 5 ), #员工姓名    deptid int, #员工所在的部门    foreign key (deptid) references dept(did)    #emp表的deptid和和dept表的did的数据类型一致，意义都是表示部门的编号);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">insert into dept values( 1001 ,&#39;教学部&#39;);insert into dept values( 1003 , &#39;财务部&#39;);insert into emp values( 1 ,&#39;张三&#39;, 1001 ); #添加从表记录成功，在添加这条记录时，要求部门表有 1001 部门insert into emp values( 2 ,&#39;李四&#39;, 1005 );#添加从表记录失败ERROR 1452 ( 23000 ): Cannot add（添加） or update（修改） a child row: a foreign keyconstraint fails (&#96;atguigudb&#96;.&#96;emp&#96;, CONSTRAINT &#96;emp_ibfk_1&#96; FOREIGN KEY (&#96;deptid&#96;)REFERENCES &#96;dept&#96; (&#96;did&#96;)) 从表emp添加记录失败，因为主表dept没有 1005 部门<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select * from dept;+------+--------+| did | dname |+------+--------+| 1001 | 教学部 || 1003 | 财务部 |+------+--------+2 rows in set (0.00 sec)mysql&gt; select * from emp;+-----+-------+--------+| eid | ename | deptid |+-----+-------+--------+| 1 | 张三 | 1001 |+-----+-------+--------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">update emp set deptid &#x3D; 1002 where eid &#x3D; 1 ;#修改从表失败ERROR 1452 ( 23000 ): Cannot add（添加） or update（修改） a child row（子表的记录）: a foreign key constraint fails（外键约束失败） (&#96;atguigudb&#96;.&#96;emp&#96;, CONSTRAINT &#96;emp_ibfk_1&#96; FOREIGN KEY (&#96;deptid&#96;) REFERENCES &#96;dept&#96; (&#96;did&#96;))  #部门表did字段现在没有 1002 的值，所以员工表中不能修改员工所在部门deptid为 1002update dept set did &#x3D; 1002 where did &#x3D; 1001 ;#修改主表失败ERROR 1451 ( 23000 ): Cannot delete（删除） or update（修改） a parent row（父表的记录）: a foreign key constraint fails (&#96;atguigudb&#96;.&#96;emp&#96;, CONSTRAINT &#96;emp_ibfk_1&#96; FOREIGN KEY (&#96;deptid&#96;) REFERENCES &#96;dept&#96; (&#96;did&#96;)) #部门表did的 1001 字段已经被emp引用了，所以部门表的 1001 字段就不能修改了。update dept set did &#x3D; 1002 where did &#x3D; 1003 ;#修改主表成功 因为部门表的 1003 部门没有被emp表引用，所以可以修改<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">delete from dept where did&#x3D; 1001 ; #删除主表失败ERROR 1451 ( 23000 ): Cannot delete（删除） or update（修改） a parent row（父表记录）: a foreign key constraint fails (&#96;atguigudb&#96;.&#96;emp&#96;, CONSTRAINT &#96;emp_ibfk_1&#96; FOREIGN KEY (&#96;deptid&#96;) REFERENCES &#96;dept&#96; (&#96;did&#96;))  #因为部门表did的 1001 字段已经被emp引用了，所以部门表的 1001 字段对应的记录就不能被删除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p>总结：约束关系是针对双方的</p><ul><li>添加了外键约束后，主表的修改和删除数据受约束</li><li>添加了外键约束后，从表的添加和修改数据受约束</li><li>在从表上建立外键，要求主表必须存在</li><li>删除主表时，要求从表从表先删除，或将从表中外键引用该主表的关系先删除</li></ul><h3 id="6-7-约束等级"><a href="#6-7-约束等级" class="headerlink" title="6. 7 约束等级"></a>6. 7 约束等级</h3><ul><li><code>Cascade方式</code>：在父表上update&#x2F;delete记录时，同步update&#x2F;delete掉子表的匹配记录</li><li><code>Set null方式</code>：在父表上update&#x2F;delete记录时，将子表上匹配记录的列设为null，但是要注意子表的外键列不能为not null</li><li><code>No action方式</code>：如果子表中有匹配的记录，则不允许对父表对应候选键进行update&#x2F;delete操作</li><li><code>Restrict方式</code>：同no action， 都是立即检查外键约束</li><li><code>Set default方式</code>（在可视化工具SQLyog中可能显示空白）：父表有变更时，子表将外键列设置成一个默认的值，但Innodb不能识别</li></ul><p>如果没有指定等级，就相当于Restrict方式。</p><p>对于外键约束，最好是采用: <code>ON UPDATE CASCADE ON DELETE RESTRICT</code> 的方式。</p><p>（ 1 ）演示 1 ：on update cascade on delete set null</p><pre class="line-numbers language-none"><code class="language-none">create table dept(    did int primary key, #部门编号    dname varchar( 50 ) #部门名称);create table emp(    eid int primary key,  #员工编号    ename varchar( 5 ), #员工姓名    deptid int, #员工所在的部门    foreign key (deptid) references dept(did)  on update cascade on delete set null    #把修改操作设置为级联修改等级，把删除操作设置为set null等级);insert into dept values( 1001 ,&#39;教学部&#39;);insert into dept values( 1002 , &#39;财务部&#39;);insert into dept values( 1003 , &#39;咨询部&#39;);insert into emp values( 1 ,&#39;张三&#39;, 1001 ); #在添加这条记录时，要求部门表有1001部门insert into emp values( 2 ,&#39;李四&#39;, 1001 );insert into emp values( 3 ,&#39;王五&#39;, 1002 );mysql&gt; select * from dept;mysql&gt; select * from emp;#修改主表成功，从表也跟着修改，修改了主表被引用的字段1002为1004，从表的引用字段就跟着修改为1004了mysql&gt; update dept set did &#x3D; 1004 where did &#x3D; 1002 ;Query OK, 1 row affected (0.00 sec)Rows matched: 1 Changed: 1 Warnings: 0mysql&gt; select * from dept;+------+--------+| did | dname |+------+--------+| 1001 | 教学部 || 1003 | 咨询部 || 1004 | 财务部 | #原来是 1002 ，修改为 1004+------+--------+3 rows in set (0.00 sec)mysql&gt; select * from emp;+-----+-------+--------+| eid | ename | deptid |+-----+-------+--------+| 1 | 张三 | 1001 || 2 | 李四 | 1001 || 3 | 王五 | 1004 | #原来是 1002 ，跟着修改为 1004+-----+-------+--------+3 rows in set (0.00 sec)#删除主表的记录成功，从表对应的字段的值被修改为nullmysql&gt; delete from dept where did &#x3D; 1001 ;Query OK, 1 row affected (0.01 sec)mysql&gt; select * from dept;+------+--------+| did | dname | #记录 1001 部门被删除了+------+--------+| 1003 | 咨询部 || 1004 | 财务部 |+------+--------+2 rows in set (0.00 sec)mysql&gt; select * from emp;+-----+-------+--------+| eid | ename | deptid |+-----+-------+--------+| 1 | 张三 | NULL | #原来引用 1001 部门的员工，deptid字段变为null| 2 | 李四 | NULL || 3 | 王五 | 1004 |+-----+-------+--------+3 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（ 2 ）演示 2 ：on update set null on delete cascade</p><pre class="line-numbers language-none"><code class="language-none">create table dept(    did int primary key, #部门编号    dname varchar( 50 ) #部门名称);create table emp(    eid int primary key,  #员工编号    ename varchar( 5 ), #员工姓名    deptid int, #员工所在的部门    foreign key (deptid) references dept(did)  on update set null on delete cascade    #把修改操作设置为set null等级，把删除操作设置为级联删除等级);insert into dept values( 1001 ,&#39;教学部&#39;);insert into dept values( 1002 , &#39;财务部&#39;);insert into dept values( 1003 , &#39;咨询部&#39;);insert into emp values( 1 ,&#39;张三&#39;, 1001 ); #在添加这条记录时，要求部门表有 1001 部门insert into emp values( 2 ,&#39;李四&#39;, 1001 );insert into emp values( 3 ,&#39;王五&#39;, 1002 );mysql&gt; select * from dept;+------+--------+| did | dname |+------+--------+| 1001 | 教学部 || 1002 | 财务部 || 1003 | 咨询部 |+------+--------+3 rows in set (0.00 sec)mysql&gt; select * from emp;+-----+-------+--------+| eid | ename | deptid |+-----+-------+--------+| 1 | 张三 | 1001 || 2 | 李四 | 1001 || 3 | 王五 | 1002 |+-----+-------+--------+3 rows in set (0.00 sec)mysql&gt; select * from dept;+------+--------+| did | dname |#修改主表，从表对应的字段设置为nullmysql&gt; update dept set did &#x3D; 1004 where did &#x3D; 1002 ;Query OK, 1 row affected (0.00 sec)Rows matched: 1 Changed: 1 Warnings: 0mysql&gt; select * from dept;+------+--------+| did | dname |+------+--------+| 1001 | 教学部 || 1003 | 咨询部 || 1004 | 财务部 | #原来did是 1002+------+--------+3 rows in set (0.00 sec)mysql&gt; select * from emp;+-----+-------+--------+| eid | ename | deptid |+-----+-------+--------+| 1 | 张三 | 1001 || 2 | 李四 | 1001 || 3 | 王五 | NULL | #原来deptid是 1002 ，因为部门表 1002 被修改了， 1002 没有对应的了，就设置为null+-----+-------+--------+3 rows in set (0.00 sec)#删除主表的记录成功，主表的 1001 行被删除了，从表相应的记录也被删除了mysql&gt; delete from dept where did&#x3D; 1001 ;Query OK, 1 row affected (0.00 sec)mysql&gt; select * from dept;+------+--------+| did | dname | #部门表中 1001 部门被删除+------+--------+| 1003 | 咨询部 || 1004 | 财务部 |+------+--------+2 rows in set (0.00 sec)mysql&gt; select * from emp;+-----+-------+--------+| eid | ename | deptid |#原来 1001 部门的员工也被删除了+-----+-------+--------+| 3 | 王五 | NULL |+-----+-------+--------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（ 3 ）演示：on update cascade on delete cascade</p><pre class="line-numbers language-none"><code class="language-none">create table dept(    did int primary key, #部门编号    dname varchar( 50 ) #部门名称);create table emp(    eid int primary key,  #员工编号    ename varchar( 5 ), #员工姓名    deptid int, #员工所在的部门    foreign key (deptid) references dept(did)  on update cascade on delete cascade    #把修改操作设置为级联修改等级，把删除操作也设置为级联删除等级);insert into dept values( 1001 ,&#39;教学部&#39;);insert into dept values( 1002 , &#39;财务部&#39;);insert into dept values( 1003 , &#39;咨询部&#39;);insert into emp values( 1 ,&#39;张三&#39;, 1001 ); #在添加这条记录时，要求部门表有1001部门insert into emp values( 2 ,&#39;李四&#39;, 1001 );insert into emp values( 3 ,&#39;王五&#39;, 1002 );mysql&gt; select * from dept;+------+--------+| did | dname |+------+--------+| 1001 | 教学部 || 1002 | 财务部 || 1003 | 咨询部 |+------+--------+3 rows in set (0.00 sec)mysql&gt; select * from emp;+-----+-------+--------+| eid | ename | deptid |+-----+-------+--------+| 1 | 张三 | 1001 || 2 | 李四 | 1001 || 3 | 王五 | 1002 |+-----+-------+--------+3 rows in set (0.00 sec)#修改主表，从表对应的字段自动修改mysql&gt; update dept set did &#x3D; 1004 where did &#x3D; 1002 ;Query OK, 1 row affected (0.00 sec)Rows matched: 1 Changed: 1 Warnings: 0mysql&gt; select * from dept;+------+--------+| did | dname |+------+--------+| 1001 | 教学部 || 1003 | 咨询部 || 1004 | 财务部 | #部门 1002 修改为 1004+------+--------+3 rows in set (0.00 sec)mysql&gt; select * from emp;+-----+-------+--------+| eid | ename | deptid |+-----+-------+--------+| 1 | 张三 | 1001 || 2 | 李四 | 1001 || 3 | 王五 | 1004 | #级联修改+-----+-------+--------+3 rows in set (0.00 sec)#删除主表的记录成功，主表的 1001 行被删除了，从表相应的记录也被删除了mysql&gt; delete from dept where did&#x3D; 1001 ;Query OK, 1 row affected (0.00 sec)mysql&gt; select * from dept;+------+--------+| did | dname | #1001部门被删除了+------+--------+| 1003 | 咨询部 || 1004 | 财务部 |+------+--------+2 rows in set (0.00 sec)mysql&gt; select * from emp;+-----+-------+--------+| eid | ename | deptid |  #1001部门的员工也被删除了+-----+-------+--------+| 3 | 王五 | 1004 |+-----+-------+--------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-8-删除外键约束"><a href="#6-8-删除外键约束" class="headerlink" title="6. 8 删除外键约束"></a>6. 8 删除外键约束</h3><p>流程如下：</p><pre class="line-numbers language-none"><code class="language-none">( 1 )第一步先查看约束名和删除外键约束SELECT * FROM information_schema.table_constraints WHERE table_name &#x3D; &#39;表名称&#39;;#查看某个表的约束名ALTER TABLE 从表名 DROP FOREIGN KEY 外键约束名;（ 2 ）第二步查看索引名和删除索引。（注意，只能手动删除）SHOW INDEX FROM 表名称; #查看某个表的索引名ALTER TABLE 从表名 DROP INDEX 索引名;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT * FROM information_schema.table_constraints WHERE table_name &#x3D; &#39;emp&#39;;mysql&gt; alter table emp drop foreign key emp_ibfk_1;Query OK, 0 rows affected (0.02 sec)Records: 0 Duplicates: 0 Warnings: 0mysql&gt; show index from emp;mysql&gt; alter table emp drop index deptid;Query OK, 0 rows affected (0.01 sec)Records: 0 Duplicates: 0 Warnings: 0mysql&gt;  show index from emp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-9-开发场景"><a href="#6-9-开发场景" class="headerlink" title="6. 9 开发场景"></a>6. 9 开发场景</h3><p><strong>问题 1 ：如果两个表之间有关系（一对一、一对多），比如：员工表和部门表（一对多），它们之间是否一定要建外键约束？</strong></p><p>答：不是的</p><p><strong>问题 2 ：建和不建外键约束有什么区别？</strong></p><p>答：建外键约束，你的操作（创建表、删除表、添加、修改、删除）会受到限制，从语法层面受到限制。例如：在员工表中不可能添加一个员工信息，它的部门的值在部门表中找不到。</p><p>不建外键约束，你的操作（创建表、删除表、添加、修改、删除）不受限制，要保证数据的<code>引用完整性</code>，只能<code>依靠程序员的自觉</code>，或者是<code>在Java程序中进行限定</code>。例如：在员工表中，可以添加一个员工的信息，它的部门指定为一个完全不存在的部门。</p><p><strong>问题 3 ：那么建和不建外键约束和查询有没有关系？</strong></p><p>答：没有</p><blockquote><p>在 MySQL 里，外键约束是有成本的，需要消耗系统资源。对于大并发的 SQL 操作，有可能会不适合。比如大型网站的中央数据库，可能会<code>因为外键约束的系统开销而变得非常慢</code>。所以， MySQL 允许你不使用系统自带的外键约束，在<code>应用层面</code>完成检查数据一致性的逻辑。也就是说，即使你不用外键约束，也要想办法通过应用层面的附加逻辑，来实现外键约束的功能，确保数据的一致性。</p></blockquote><h3 id="6-10-阿里开发规范"><a href="#6-10-阿里开发规范" class="headerlink" title="6. 10 阿里开发规范"></a>6. 10 阿里开发规范</h3><p>【<code>强制</code>】不得使用外键与级联，一切外键概念必须在应用层解决。</p><p>说明：（概念解释）学生表中的 student_id 是主键，那么成绩表中的 student_id 则为外键。如果更新学生表中的 student_id，同时触发成绩表中的 student_id 更新，即为级联更新。外键与级联更新适用于<code>单机低并发</code>，不适合<code>分布式</code>、<code>高并发集群</code>；级联更新是强阻塞，存在数据库<code>更新风暴</code>的风险；外键影响数据库的<code>插入速度</code>。</p><hr><h2 id="7-CHECK-约束"><a href="#7-CHECK-约束" class="headerlink" title="7. CHECK 约束"></a>7. CHECK 约束</h2><hr><h3 id="7-1-作用"><a href="#7-1-作用" class="headerlink" title="7. 1 作用"></a>7. 1 作用</h3><p>检查某个字段的值是否符号xx要求，一般指的是值的范围</p><h3 id="7-2-、关键字"><a href="#7-2-、关键字" class="headerlink" title="7. 2 、关键字"></a>7. 2 、关键字</h3><p>CHECK</p><h3 id="7-3-、说明：MySQL-5-7-不支持"><a href="#7-3-、说明：MySQL-5-7-不支持" class="headerlink" title="7. 3 、说明：MySQL 5. 7 不支持"></a>7. 3 、说明：MySQL 5. 7 不支持</h3><p>MySQL5.7 可以使用check约束，但check约束对数据验证没有任何作用。添加数据时，没有任何错误或警告</p><p>但是 <strong>MySQL 8.0中可以使用check约束了</strong> 。</p><pre class="line-numbers language-none"><code class="language-none">create table employee(    eid int primary key,    ename varchar( 5 ),    gender char check (&#39;男&#39; or &#39;女&#39;));insert into employee values( 1 ,&#39;张三&#39;,&#39;妖&#39;);mysql&gt; select * from employee;+-----+-------+--------+| eid | ename | gender |+-----+-------+--------+| 1 | 张三 | 妖 |+-----+-------+--------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>再举例</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE temp(    id INT AUTO_INCREMENT,    NAME VARCHAR( 20 ),    age INT CHECK(age &gt; 20 ),    PRIMARY KEY(id));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>再举例</p><pre class="line-numbers language-none"><code class="language-none">age tinyint check(age &gt; 20 ) 或 sex char( 2 ) check(sex in(‘男’,’女’))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>再举例</p><pre class="line-numbers language-none"><code class="language-none">CHECK(height&gt;&#x3D; 0 AND height&lt; 3 )<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><hr><h2 id="8-DEFAULT约束"><a href="#8-DEFAULT约束" class="headerlink" title="8. DEFAULT约束"></a>8. DEFAULT约束</h2><hr><h3 id="8-1-作用"><a href="#8-1-作用" class="headerlink" title="8. 1 作用"></a>8. 1 作用</h3><p>给某个字段&#x2F;某列指定默认值，一旦设置默认值，在插入数据时，如果此字段没有显式赋值，则赋值为默认值。</p><h3 id="8-2-关键字"><a href="#8-2-关键字" class="headerlink" title="8. 2 关键字"></a>8. 2 关键字</h3><p>DEFAULT</p><h3 id="8-3-如何给字段加默认值"><a href="#8-3-如何给字段加默认值" class="headerlink" title="8. 3 如何给字段加默认值"></a>8. 3 如何给字段加默认值</h3><p>(1) 建表时</p><pre class="line-numbers language-none"><code class="language-none">create table 表名称(    字段名 数据类型 primary key,    字段名 数据类型 unique key not null,    字段名 数据类型 unique key,    字段名 数据类型 not null default 默认值,);create table 表名称(    字段名 数据类型 default 默认值 ,    字段名 数据类型 not null default 默认值,    字段名 数据类型 not null default 默认值,    primary key(字段名),    unique key(字段名));说明：默认值约束一般不在唯一键和主键列上加create table employee(    eid int primary key,    ename varchar( 20 ) not null,    gender char default &#39;男&#39;,    tel char( 11 ) not null default &#39;&#39; #默认是空字符串);mysql&gt; desc employee;+--------+-------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+--------+-------------+------+-----+---------+-------+| eid | int( 11 ) | NO | PRI | NULL | || ename | varchar( 20 ) | NO | | NULL | || gender | char( 1 ) | YES | | 男 | || tel | char( 11 ) | NO | | | |+--------+-------------+------+-----+---------+-------+4 rows in set (0.00 sec)insert into employee values( 1 ,&#39;汪飞&#39;,&#39;男&#39;,&#39;13700102535&#39;); #成功mysql&gt; select * from employee;+-----+-------+--------+-------------+| eid | ename | gender | tel |+-----+-------+--------+-------------+| 1 | 汪飞 | 男 | 13700102535 |+-----+-------+--------+-------------+1 row in set (0.00 sec)insert into employee(eid,ename) values( 2 ,&#39;天琪&#39;); #成功mysql&gt; select * from employee;+-----+-------+--------+-------------+| eid | ename | gender | tel |+-----+-------+--------+-------------+| 1 | 汪飞 | 男 | 13700102535 || 2 | 天琪 | 男 | |+-----+-------+--------+-------------+2 rows in set (0.00 sec)insert into employee(eid,ename) values( 3 ,&#39;二虎&#39;);#ERROR 1062 (23000): Duplicate entry &#39;&#39; for key &#39;tel&#39;#如果tel有唯一性约束的话会报错，如果tel没有唯一性约束，可以添加成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再举例：</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE myemp(    id INT AUTO_INCREMENT PRIMARY KEY,    NAME VARCHAR( 15 ),    salary DOUBLE( 10 , 2 ) DEFAULT 2000);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2) 建表后</p><pre class="line-numbers language-none"><code class="language-none">alter table 表名称 modify 字段名 数据类型 default 默认值;#如果这个字段原来有非空约束，你还保留非空约束，那么在加默认值约束时，还得保留非空约束，否则非空约束就被删除了#同理，在给某个字段加非空约束也一样，如果这个字段原来有默认值约束，你想保留，也要在modify语句中保留默认值约束，否则就删除了alter table 表名称 modify 字段名 数据类型 default 默认值 not null;create table employee(eid int primary key,ename varchar( 20 ),gender char,tel char( 11 ) not null);mysql&gt; desc employee;+--------+-------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+--------+-------------+------+-----+---------+-------+| eid | int( 11 ) | NO | PRI | NULL | || ename | varchar( 20 ) | YES | | NULL | || gender | char( 1 ) | YES | | NULL | || tel | char( 11 ) | NO | | NULL | |+--------+-------------+------+-----+---------+-------+4 rows in set (0.00 sec)alter table employee modify gender char default &#39;男&#39;;  #给gender字段增加默认值约束alter table employee modify tel char( 11 ) default &#39;&#39;; #给tel字段增加默认值约束mysql&gt; desc employee;+--------+-------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+--------+-------------+------+-----+---------+-------+| eid | int( 11 ) | NO | PRI | NULL | || ename | varchar( 20 ) | YES | | NULL | || gender | char( 1 ) | YES | | 男 | || tel | char( 11 ) | YES | | | |+--------+-------------+------+-----+---------+-------+4 rows in set (0.00 sec)alter table employee modify tel char( 11 ) default &#39;&#39; not null;#给tel字段增加默认值约束，并保留非空约束mysql&gt; desc employee;+--------+-------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+--------+-------------+------+-----+---------+-------+| eid | int( 11 ) | NO | PRI | NULL | || ename | varchar( 20 ) | YES | | NULL | || gender | char( 1 ) | YES | | 男 | || tel | char( 11 ) | NO | | | |+--------+-------------+------+-----+---------+-------+4 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4-如何删除默认值约束"><a href="#8-4-如何删除默认值约束" class="headerlink" title="8. 4 如何删除默认值约束"></a>8. 4 如何删除默认值约束</h3><pre class="line-numbers language-none"><code class="language-none">alter table 表名称 modify 字段名 数据类型 ;#删除默认值约束，也不保留非空约束alter table 表名称 modify 字段名 数据类型 not null; #删除默认值约束，保留非空约束alter table employee modify gender char; #删除gender字段默认值约束，如果有非空约束，也一并删除alter table employee modify tel char( 11 )  not null;#删除tel字段默认值约束，保留非空约束mysql&gt; desc employee;+--------+-------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+--------+-------------+------+-----+---------+-------+| eid | int( 11 ) | NO | PRI | NULL | || ename | varchar( 20 ) | YES | | NULL | || gender | char( 1 ) | YES | | NULL | || tel | char( 11 ) | NO | | NULL | |+--------+-------------+------+-----+---------+-------+4 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="9-面试"><a href="#9-面试" class="headerlink" title="9. 面试"></a>9. 面试</h2><hr><p><strong>面试 1 、为什么建表时，加 not null default ‘’ 或 default 0</strong></p><p>答：不想让表中出现null值。</p><p><strong>面试 2 、为什么不想要 null 的值</strong></p><p>答:（ 1 ）不好比较。null是一种特殊值，比较时只能用专门的is null 和 is not null来比较。碰到运算符，通常返回null。</p><p>（ 2 ）效率不高。影响提高索引效果。因此，我们往往在建表时 not null default ‘’ 或 default 0</p><p><strong>面试 3 、带AUTO_INCREMENT约束的字段值是从 1 开始的吗？</strong></p><p>答：在MySQL中，默认AUTO_INCREMENT的初始值是 1 ，每新增一条记录，字段值自动加 1 。设置自增属性（AUTO_INCREMENT）的时候，还可以指定第一条插入记录的自增字段的值，这样新插入的记录的自增字段值从初始值开始递增，如在表中插入第一条记录，同时指定id值为 5 ，则以后插入的记录的id值就会从 6 开始往上增加。添加主键约束时，往往需要设置字段自动增加属性。</p><p><strong>面试 4 、并不是每个表都可以任意选择存储引擎？</strong></p><p>答：外键约束（FOREIGN KEY）不能跨引擎使用。<br>MySQL支持多种存储引擎，每一个表都可以指定一个不同的存储引擎，需要注意的是：外键约束是用来保证数据的参照完整性的，如果表之间需要关联外键，却指定了不同的存储引擎，那么这些表之间是不能创建外键约束的。所以说，存储引擎的选择也不完全是随意的。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据类型</title>
      <link href="/2022/07/17/di-12-zhang-mysql-shu-ju-lei-xing-jing-jiang/"/>
      <url>/2022/07/17/di-12-zhang-mysql-shu-ju-lei-xing-jing-jiang/</url>
      
        <content type="html"><![CDATA[<h1 id="第12章-MySQL数据类型精讲"><a href="#第12章-MySQL数据类型精讲" class="headerlink" title="第12章_MySQL数据类型精讲"></a>第12章_MySQL数据类型精讲</h1><h2 id="1-MySQL中的数据类型"><a href="#1-MySQL中的数据类型" class="headerlink" title="1. MySQL中的数据类型"></a>1. MySQL中的数据类型</h2><hr><table><thead><tr><th>类型</th><th>类型举例</th></tr></thead><tbody><tr><td>整数类型</td><td>TINYINT、SMALLINT、MEDIUMINT、INT(或INTEGER)、BIGINT</td></tr><tr><td>浮点类型</td><td>FLOAT、DOUBLE</td></tr><tr><td>定点数类型</td><td>DECIMAL</td></tr><tr><td>位类型</td><td>BIT</td></tr><tr><td>日期时间类型</td><td>YEAR、TIME、DATE、DATETIME、TIMESTAMP</td></tr><tr><td>文本字符串类型</td><td>CHAR、VARCHAR、TINYTEXT、TEXT、MEDIUMTEXT、LONGTEXT</td></tr><tr><td>枚举类型</td><td>ENUM</td></tr><tr><td>集合类型</td><td>SET</td></tr><tr><td>二进制字符串类型</td><td>BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB、LONGBLOB</td></tr><tr><td>JSON类型</td><td>JSON对象、JSON数组</td></tr><tr><td>空间数据类型</td><td>单值类型：GEOMETRY、POINT、LINESTRING、POLYGON； 集合类型：MULTIPOINT、MULTILINESTRING、MULTIPOLYGON、GEOMETRYCOLLECTION</td></tr></tbody></table><p>常见数据类型的属性，如下：</p><table><thead><tr><th>MySQL关键字</th><th>含义</th></tr></thead><tbody><tr><td>NULL</td><td>数据列可包含NULL值</td></tr><tr><td>NOT NULL</td><td>数据列不允许包含NULL值</td></tr><tr><td>DEFAULT</td><td>默认值</td></tr><tr><td>PRIMARY KEY</td><td>主键</td></tr><tr><td>AUTO_INCREMENT</td><td>自动递增，适用于整数类型</td></tr><tr><td>UNSIGNED</td><td>无符号</td></tr><tr><td>CHARACTER SET name</td><td>指定一个字符集</td></tr></tbody></table><hr><h2 id="2-整数类型"><a href="#2-整数类型" class="headerlink" title="2. 整数类型"></a>2. 整数类型</h2><hr><h3 id="2-1-类型介绍"><a href="#2-1-类型介绍" class="headerlink" title="2. 1 类型介绍"></a>2. 1 类型介绍</h3><p>整数类型一共有 5 种，包括 TINYINT、SMALLINT、MEDIUMINT、INT（INTEGER）和 BIGINT。</p><p>它们的区别如下表所示：</p><table><thead><tr><th>整数类型</th><th>字节</th><th>有符号数取值范围</th><th>无符号数取值范围</th></tr></thead><tbody><tr><td>TINYINT</td><td>1</td><td>- 128 ~ 127</td><td>0 ~ 255</td></tr><tr><td>SMALLINT</td><td>2</td><td>- 32768 ~ 32767</td><td>0 ~ 65535</td></tr><tr><td>MEDIUMINT</td><td>3</td><td>- 8388608 ~ 8388607</td><td>0 ~ 16777215</td></tr><tr><td>INT、INTEGER</td><td>4</td><td>- 2147483648 ~ 2147483647</td><td>0 ~ 4294967295</td></tr><tr><td>BIGINT</td><td>8</td><td>-9223372036854775808~9223372036854775807</td><td>0~18446744073709551615</td></tr></tbody></table><h3 id="2-2-可选属性"><a href="#2-2-可选属性" class="headerlink" title="2. 2 可选属性"></a>2. 2 可选属性</h3><p><strong>整数类型的可选属性有三个：</strong></p><h4 id="2-2-1-M"><a href="#2-2-1-M" class="headerlink" title="2. 2. 1 M"></a>2. 2. 1 M</h4><p><code>M</code>: 表示显示宽度，M的取值范围是( 0 , 255 )。例如，int( 5 )：当数据宽度小于 5 位的时候在数字前面需要用字符填满宽度。该项功能需要配合“<code>ZEROFILL</code>”使用，表示用“ 0 ”填满宽度，否则指定显示宽度无效。</p><p>如果设置了显示宽度，那么插入的数据宽度超过显示宽度限制，会不会截断或插入失败？</p><p>答案：不会对插入的数据有任何影响，还是按照类型的实际宽度进行保存，即<code>显示宽度与类型可以存储的值范围无关</code>。 <strong>从MySQL 8. 0. 17 开始，整数数据类型不推荐使用显示宽度属性。</strong></p><p>整型数据类型可以在定义表结构时指定所需要的显示宽度，如果不指定，则系统为每一种类型指定默认的宽度值。</p><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE test_int1 ( x TINYINT, y SMALLINT, z MEDIUMINT, m INT, n BIGINT );<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看表结构 （MySQL 5. 7 中显式如下，MySQL 8 中不再显式范围）</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; desc test_int1;+-------+--------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+-------+--------------+------+-----+---------+-------+| x | tinyint( 4 ) | YES | | NULL | || y | smallint( 6 ) | YES | | NULL | || z | mediumint( 9 ) | YES | | NULL | || m | int( 11 ) | YES | | NULL | || n | bigint( 20 ) | YES | | NULL | |+-------+--------------+------+-----+---------+-------+5 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>TINYINT有符号数和无符号数的取值范围分别为- 128 ~ 127 和 0 ~ 255 ，由于负号占了一个数字位，因此TINYINT默认的显示宽度为 4 。同理，其他整数类型的默认显示宽度与其有符号数的最小值的宽度相同。</p><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE test_int2(f1 INT,f2 INT( 5 ),f3 INT( 5 ) ZEROFILL)DESC test_int2;INSERT INTO test_int2(f1,f2,f3)VALUES( 1 , 123 , 123 );INSERT INTO test_int2(f1,f2)VALUES( 123456 , 123456 );INSERT INTO test_int2(f1,f2,f3)VALUES( 123456 , 123456 , 123456 );mysql&gt; SELECT * FROM test_int2;+--------+--------+--------+| f1 | f2 | f3 |+--------+--------+--------+| 1 | 123 | 00123 || 123456 | 123456 | NULL || 123456 | 123456 | 123456 |+--------+--------+--------+3 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-2-UNSIGNED"><a href="#2-2-2-UNSIGNED" class="headerlink" title="2. 2. 2 UNSIGNED"></a>2. 2. 2 UNSIGNED</h4><p><code>UNSIGNED</code>: 无符号类型（非负），所有的整数类型都有一个可选的属性UNSIGNED（无符号属性），无符号整数类型的最小取值为 0 。所以，如果需要在MySQL数据库中保存非负整数值时，可以将整数类型设置为无符号类型。</p><p>int类型默认显示宽度为int(11)，无符号int类型默认显示宽度为int(10)。</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE test_int3(f1 INT UNSIGNED);mysql&gt; desc test_int3;+-------+------------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+-------+------------------+------+-----+---------+-------+| f1 | int( 10 ) unsigned | YES | | NULL | |+-------+------------------+------+-----+---------+-------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-3-ZEROFILL"><a href="#2-2-3-ZEROFILL" class="headerlink" title="2. 2. 3 ZEROFILL"></a>2. 2. 3 ZEROFILL</h4><p><code>ZEROFILL</code>: 0填充,（如果某列是ZEROFILL，那么MySQL会自动为当前列添加UNSIGNED属性），如果指定了ZEROFILL只是表示不够M位时，用 0 在左边填充，如果超过M位，只要不超过数据存储范围即可。</p><p>原来，在 int(M) 中，M 的值跟 int(M) 所占多少存储空间并无任何关系。 int(3)、int(4)、int(8) 在磁盘上都是占用 4 bytes 的存储空间。也就是说，<strong>int(M)，必须和UNSIGNED ZEROFILL一起使用才有意义。</strong>如果整数值超过M位，就按照实际位数存储。只是无须再用字符 0 进行填充。</p><h3 id="2-3-适用场景"><a href="#2-3-适用场景" class="headerlink" title="2. 3 适用场景"></a>2. 3 适用场景</h3><p><code>TINYINT</code>：一般用于枚举数据，比如系统设定取值范围很小且固定的场景。</p><p><code>SMALLINT</code>：可以用于较小范围的统计数据，比如统计工厂的固定资产库存数量等。</p><p><code>MEDIUMINT</code>：用于较大整数的计算，比如车站每日的客流量等。</p><p><code>INT、INTEGER</code>：取值范围足够大，一般情况下不用考虑超限问题，用得最多。比如商品编号。</p><p><code>BIGINT</code>：只有当你处理特别巨大的整数时才会用到。比如双十一的交易量、大型门户网站点击量、证券公司衍生产品持仓等。</p><h3 id="2-4-如何选择？"><a href="#2-4-如何选择？" class="headerlink" title="2. 4 如何选择？"></a>2. 4 如何选择？</h3><p>在评估用哪种整数类型的时候，你需要考虑<code>存储空间</code>和<code>可靠性</code>的平衡问题：一方 面，用占用字节数少的整数类型可以节省存储空间；另一方面，要是为了节省存储空间， 使用的整数类型取值范围太小，一旦遇到超出取值范围的情况，就可能引起<code>系统错误</code>，影响可靠性。</p><p>举个例子，商品编号采用的数据类型是 INT。原因就在于，客户门店中流通的商品种类较多，而且，每天都有旧商品下架，新商品上架，这样不断迭代，日积月累。</p><p>如果使用 SMALLINT 类型，虽然占用字节数比 INT 类型的整数少，但是却不能保证数据不会超出范围65535 。相反，使用 INT，就能确保有足够大的取值范围，不用担心数据超出范围影响可靠性的问题。</p><p>你要注意的是，在实际工作中， <strong>系统故障产生的成本远远超过增加几个字段存储空间所产生的成本</strong> 。因此，我建议你首先确保数据不会超过取值范围，在这个前提之下，再去考虑如何节省存储空间。</p><hr><h2 id="3-浮点类型"><a href="#3-浮点类型" class="headerlink" title="3. 浮点类型"></a>3. 浮点类型</h2><hr><h3 id="3-1-类型介绍"><a href="#3-1-类型介绍" class="headerlink" title="3. 1 类型介绍"></a>3. 1 类型介绍</h3><p>浮点数和定点数类型的特点是可以<code>处理小数</code>，你可以把整数看成小数的一个特例。因此，浮点数和定点数的使用场景，比整数大多了。 MySQL支持的浮点数类型，分别是 FLOAT、DOUBLE、REAL。</p><ul><li><p>FLOAT 表示单精度浮点数；</p></li><li><p>DOUBLE 表示双精度浮点数；<br><img src="/../pic/%E7%AC%AC12%E7%AB%A0_MySQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%B2%BE%E8%AE%B2/1650166255153.png" alt="1650166255153"></p></li><li><p>REAL默认就是 DOUBLE。如果你把 SQL 模式设定为启用“<code>REAL_AS_FLOAT</code>”，那 么，MySQL 就认为REAL 是 FLOAT。如果要启用“REAL_AS_FLOAT”，可以通过以下 SQL 语句实现：</p><pre class="line-numbers language-none"><code class="language-none">SET sql_mode &#x3D; “REAL_AS_FLOAT”;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><strong>问题 1</strong> ： FLOAT 和 DOUBLE 这两种数据类型的区别是啥呢？</p><p>FLOAT 占用字节数少，取值范围小；DOUBLE 占用字节数多，取值范围也大。</p><p><strong>问题 2</strong> ： 为什么浮点数类型的无符号数取值范围，只相当于有符号数取值范围的一半，也就是只相当于有符号数取值范围大于等于零的部分呢？</p><p>MySQL 存储浮点数的格式为：<code>符号(S)</code>、<code>尾数(M)</code>和 <code>阶码(E)</code>。因此，无论有没有符号，MySQL 的浮点数都会存储表示符号的部分。因此， 所谓的无符号数取值范围，其实就是有符号数取值范围大于等于零的部分。</p><h3 id="3-2-数据精度说明"><a href="#3-2-数据精度说明" class="headerlink" title="3. 2 数据精度说明"></a>3. 2 数据精度说明</h3><p>对于浮点类型，在MySQL中单精度值使用 <code>4</code> 个字节，双精度值使用 <code>8</code> 个字节。</p><ul><li><p>MySQL允许使用<code>非标准语法</code>（其他数据库未必支持，因此如果涉及到数据迁移，则最好不要这么用）：<code>FLOAT(M,D)</code>或<code>DOUBLE(M,D)</code>。这里，M称为<code>精度</code>，D称为<code>标度</code>。(M,D)中 M&#x3D;整数位+小数位，D&#x3D;小数位。 D&lt;&#x3D;M&lt;&#x3D; 255 ， 0 &lt;&#x3D;D&lt;&#x3D; 30 。<br>例如，定义为FLOAT( 5 , 2 )的一个列可以显示为- 999. 99 - 999. 99 。如果超过这个范围会报错。</p></li><li><p>FLOAT和DOUBLE类型在不指定(M,D)时，默认会按照实际的精度（由实际的硬件和操作系统决定）来显示。</p></li><li><p>说明：浮点类型，也可以加<code>UNSIGNED</code>，但是不会改变数据范围，例如：FLOAT( 3 , 2 ) UNSIGNED仍然只能表示 0 - 9. 99 的范围。</p></li><li><p>不管是否显式设置了精度(M,D)，这里MySQL的处理方案如下：</p><ul><li>如果存储时，整数部分超出了范围，MySQL就会报错，不允许存这样的值</li><li>如果存储时，小数点部分若超出范围，就分以下情况：<ul><li>若四舍五入后，整数部分没有超出范围，则只警告，但能成功操作并四舍五入删除多余的小数位后保存。例如在FLOAT( 5 , 2 )列内插入 999. 009 ，近似结果是 999. 01 。</li><li>若四舍五入后，整数部分超出范围，则MySQL报错，并拒绝处理。如FLOAT( 5 , 2 )列内插入999.995 和- 999. 995 都会报错。</li></ul></li></ul></li><li><p><strong>从MySQL 8. 0. 17 开始，FLOAT(M,D) 和DOUBLE(M,D)用法在官方文档中已经明确不推荐使用</strong> ，将来可能被移除。另外，关于浮点型FLOAT和DOUBLE的UNSIGNED也不推荐使用了，将来也可能被移除。</p></li><li><p>举例</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE test_double1(f1 FLOAT,f2 FLOAT( 5 , 2 ),f3 DOUBLE,f4 DOUBLE( 5 , 2 ));DESC test_double1;INSERT INTO test_doubleVALUES(123.456,123.456,123.4567,123.45);#Out of range value for column &#39;f2&#39; at row 1INSERT INTO test_doubleVALUES(123.456,1234.456,123.4567,123.45);SELECT * FROM test_double1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-3-精度误差说明"><a href="#3-3-精度误差说明" class="headerlink" title="3. 3 精度误差说明"></a>3. 3 精度误差说明</h3><p>浮点数类型有个缺陷，就是不精准。下面我来重点解释一下为什么 MySQL 的浮点数不够精准。比如，我们设计一个表，有f 1 这个字段，插入值分别为 0. 47 , 0. 44 , 0. 19 ，我们期待的运行结果是： 0. 47 + 0. 44 + 0. 19 &#x3D;1.1 。而使用sum之后查询：</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE test_double2(f1 DOUBLE);INSERT INTO test_doubleVALUES(0.47),(0.44),(0.19);mysql&gt; SELECT SUM(f1)-&gt; FROM test_double2;+--------------------+| SUM(f1) |+--------------------+| 1.0999999999999999 |+--------------------+1 row in set (0.00 sec)mysql&gt; SELECT SUM(f1) &#x3D; 1.1,1.1 &#x3D; 1.-&gt; FROM test_double2;+---------------+-----------+| SUM(f1) &#x3D; 1.1 | 1.1 &#x3D; 1.1 |+---------------+-----------+| 0 | 1 |+---------------+-----------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询结果是 1. 0999999999999999 。看到了吗？虽然误差很小，但确实有误差。 你也可以尝试把数据类型改成 FLOAT，然后运行求和查询，得到的是， 1. 0999999940395355 。显然，误差更大了。</p><p>那么，为什么会存在这样的误差呢？问题还是出在 MySQL 对浮点类型数据的存储方式上。</p><p>MySQL 用 4 个字节存储 FLOAT 类型数据，用 8 个字节来存储 DOUBLE 类型数据。无论哪个，都是采用二进制的方式来进行存储的。比如 9. 625 ，用二进制来表达，就是 1001. 101 ，或者表达成 1. 001101 × 2 ^ 3 。如果尾数不是 0 或 5 （比如 9. 624 ），你就无法用一个二进制数来精确表达。进而，就只好在取值允许的范围内进行四舍五入。</p><p>在编程中，如果用到浮点数，要特别注意误差问题，<strong>因为浮点数是不准确的，所以我们要避免使用“&#x3D;”来判断两个数是否相等。</strong>同时，在一些对精确度要求较高的项目中，千万不要使用浮点数，不然会导致结果错误，甚至是造成不可挽回的损失。那么，MySQL 有没有精准的数据类型呢？当然有，这就是定点数类型：<code>DECIMAL</code>。</p><hr><h2 id="4-定点数类型"><a href="#4-定点数类型" class="headerlink" title="4. 定点数类型"></a>4. 定点数类型</h2><hr><h3 id="4-1-类型介绍"><a href="#4-1-类型介绍" class="headerlink" title="4. 1 类型介绍"></a>4. 1 类型介绍</h3><ul><li><p>MySQL中的定点数类型只有 DECIMAL 一种类型。</p><table><thead><tr><th>数据类型</th><th>字节数</th><th>含义</th></tr></thead><tbody><tr><td>DECIMAL(M,D),DEC,NUMERIC</td><td>M+2字节</td><td>有效范围由M和D决定</td></tr></tbody></table><p>使用 DECIMAL(M,D) 的方式表示高精度小数。其中，M被称为精度，D被称为标度。0&lt;&#x3D;M&lt;&#x3D;65，0&lt;&#x3D;D&lt;&#x3D;30，D&lt;M。例如，定义DECIMAL（5,2）的类型，表示该列取值范围是-999.99~999.99。</p></li><li><p><strong>DECIMAL(M,D)的最大取值范围与DOUBLE类型一样</strong> ，但是有效的数据范围是由M和D决定的。<br>DECIMAL 的存储空间并不是固定的，由精度值M决定，总共占用的存储空间为M+2个字节。也就是说，在一些对精度要求不高的场景下，比起占用同样字节长度的定点数，浮点数表达的数值范围可以更大一些。</p></li><li><p>定点数在MySQL内部是以<code>字符串</code>的形式进行存储，这就决定了它一定是精准的。</p></li><li><p>当DECIMAL类型不指定精度和标度时，其默认为DECIMAL(10,0)。当数据的精度超出了定点数类型的精度范围时，则MySQL同样会进行四舍五入处理。</p></li><li><p><strong>浮点数 vs 定点数</strong></p><ul><li>浮点数相对于定点数的优点是在长度一定的情况下，浮点类型取值范围大，但是不精准，适用于需要取值范围大，又可以容忍微小误差的科学计算场景（比如计算化学、分子建模、流体动力学等）</li><li>定点数类型取值范围相对小，但是精准，没有误差，适合于对精度要求极高的场景 （比如涉及金额计算的场景）</li></ul></li><li><p>举例</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE test_decimal1(f1 DECIMAL,f2 DECIMAL( 5 , 2 ));DESC test_decimal1;INSERT INTO test_decimal1(f1,f2)VALUES(123.123,123.456);#Out of range value for column &#39;f2&#39; at row 1INSERT INTO test_decimal1(f2)VALUES(1234.34);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT * FROM test_decimal1;+------+--------+| f1 | f2 |+------+--------+| 123 | 123.46 |+------+--------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>举例<br>我们运行下面的语句，把test_double2表中字段“f1”的数据类型修改为 DECIMAL(5,2)：</p><pre class="line-numbers language-none"><code class="language-none">ALTER TABLE test_doubleMODIFY f1 DECIMAL( 5 , 2 );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后，我们再一次运行求和语句：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT SUM(f1)-&gt; FROM test_double2;+---------+| SUM(f1) |+---------+|  1.10 |+---------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT SUM(f1) &#x3D; 1.-&gt; FROM test_double2;+---------------+| SUM(f1) &#x3D; 1.1 |+---------------+| 1 |+---------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="4-2-开发中经验"><a href="#4-2-开发中经验" class="headerlink" title="4. 2 开发中经验"></a>4. 2 开发中经验</h3><blockquote><p>“由于 DECIMAL 数据类型的精准性，在我们的项目中，除了极少数（比如商品编号）用到整数类型外，其他的数值都用的是 DECIMAL，原因就是这个项目所处的零售行业，要求精准，一分钱也不能差。 ” ——来自某项目经理</p></blockquote><hr><h2 id="5-位类型：BIT"><a href="#5-位类型：BIT" class="headerlink" title="5. 位类型：BIT"></a>5. 位类型：BIT</h2><hr><p>BIT类型中存储的是二进制值，类似 010110 。</p><table><thead><tr><th>二进制字符串类型</th><th>长度</th><th>长度范围</th><th>占用空间</th></tr></thead><tbody><tr><td>BIT(M)</td><td>M</td><td>1 &lt;&#x3D; M &lt;&#x3D; 64</td><td>约为(M + 7 )&#x2F; 8 个字节</td></tr></tbody></table><p>BIT类型，如果没有指定(M)，默认是 1 位。这个 1 位，表示只能存 1 位的二进制值。这里(M)是表示二进制的位数，位数最小值为 1 ，最大值为 64 。</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE test_bit1(f1 BIT,f2 BIT( 5 ),f3 BIT( 64 ));INSERT INTO test_bit1(f1)VALUES( 1 );#Data too long for column &#39;f1&#39; at row 1INSERT INTO test_bit1(f1)VALUES( 2 );INSERT INTO test_bit1(f2)VALUES( 23 );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：在向BIT类型的字段中插入数据时，一定要确保插入的数据在BIT类型支持的范围内。</p><p>使用SELECT命令查询位字段时，可以用<code>BIN()</code>或<code>HEX()</code>函数进行读取。</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT * FROM test_bit1;+------------+------------+------------+| f1 | f2 | f3 |+------------+------------+------------+| 0x01 | NULL | NULL || NULL | 0x17 | NULL |+------------+------------+------------+2 rows in set (0.00 sec)mysql&gt; SELECT BIN(f2),HEX(f2)-&gt; FROM test_bit1;+---------+---------+| BIN(f2) | HEX(f2) |+---------+---------+| NULL | NULL || 10111 | 17 |+---------+---------+2 rows in set (0.00 sec)mysql&gt; SELECT f2 + 0-&gt; FROM test_bit1;+--------+| f2 + 0 |+--------+| NULL || 23 |+--------+2 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，使用b+ 0 查询数据时，可以直接查询出存储的十进制数据的值。</p><hr><h2 id="6-日期与时间类型"><a href="#6-日期与时间类型" class="headerlink" title="6. 日期与时间类型"></a>6. 日期与时间类型</h2><hr><p>日期与时间是重要的信息，在我们的系统中，几乎所有的数据表都用得到。原因是客户需要知道数据的时间标签，从而进行数据查询、统计和处理。</p><p>MySQL有多种表示日期和时间的数据类型，不同的版本可能有所差异，MySQL 8. 0 版本支持的日期和时间类型主要有：YEAR类型、TIME类型、DATE类型、DATETIME类型和TIMESTAMP类型。</p><ul><li>YEAR类型通常用来表示年</li><li>DATE类型通常用来表示年、月、日</li><li>TIME类型通常用来表示时、分、秒</li><li>DATETIME类型通常用来表示年、月、日、时、分、秒</li><li>TIMESTAMP类型通常用来表示带时区的年、月、日、时、分、秒</li></ul><table><thead><tr><th>类型</th><th>名称</th><th>字节</th><th>日期格式</th><th>最小值</th><th>最大值</th></tr></thead><tbody><tr><td>YEAR</td><td>年</td><td>1</td><td>YYYY或YY</td><td>1901</td><td>2155</td></tr><tr><td>TIME</td><td>时间</td><td>3</td><td>HH:MM:SS</td><td>- 838 : 59 : 59</td><td>838 : 59 : 59</td></tr><tr><td>DATE</td><td>日期</td><td>3</td><td>YYYY-MM-DD</td><td>1000 - 01 - 01</td><td>9999 - 12 - 03</td></tr><tr><td>DATETIME</td><td>日期 时间</td><td>8</td><td>YYYY-MM-DD HH:MM:SS</td><td>1000 - 01 - 01 00 : 00 : 00</td><td>9999 - 12 - 31 23 : 59 : 59</td></tr><tr><td>TIMESTAMP</td><td>日期 时间</td><td>4</td><td>YYYY-MM-DD HH:MM:SS</td><td>1970 - 01 - 01 00 : 00 : 00 UTC</td><td>2038 - 01 - 19 03 : 14 : 07 UTC</td></tr></tbody></table><p>可以看到，不同数据类型表示的时间内容不同、取值范围不同，而且占用的字节数也不一样，你要根据实际需要灵活选取。</p><p>为什么时间类型 TIME 的取值范围不是 - 23 : 59 : 59 ～ 23 : 59 : 59 呢？原因是 MySQL 设计的 TIME 类型，不光表示一天之内的时间，而且可以用来表示一个时间间隔，这个时间间隔可以超过 24 小时。</p><h3 id="6-1-YEAR类型"><a href="#6-1-YEAR类型" class="headerlink" title="6. 1 YEAR类型"></a>6. 1 YEAR类型</h3><p>YEAR类型用来表示年份，在所有的日期时间类型中所占用的存储空间最小，只需要 1 个字节的存储空间。</p><p>在MySQL中，YEAR有以下几种存储格式：</p><ul><li>以 4 位字符串或数字格式表示YEAR类型，其格式为YYYY，最小值为 1901 ，最大值为2155。</li><li>以 2 位字符串格式表示YEAR类型，最小值为 00 ，最大值为 99 。<ul><li>当取值为 01 到 69 时，表示 2001 到 2069 ；</li><li>当取值为 70 到 99 时，表示 1970 到 1999 ；</li><li>当取值整数的 0 或 00 添加的话，那么是 0000 年；</li><li>当取值是日期&#x2F;字符串的’ 0 ‘添加的话，是 2000 年。</li></ul></li></ul><p><strong>从MySQL 5. 5. 27 开始， 2 位格式的YEAR已经不推荐使用</strong> 。YEAR默认格式就是“YYYY”，没必要写成YEAR( 4 )，从MySQL 8. 0. 19 开始，不推荐使用指定显示宽度的YEAR( 4 )数据类型。</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE test_year(f1 YEAR,f2 YEAR( 4 ));mysql&gt; DESC test_year;+-------+---------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+-------+---------+------+-----+---------+-------+| f1 | year( 4 ) | YES | | NULL | || f2 | year( 4 ) | YES | | NULL | |+-------+---------+------+-----+---------+-------+2 rows in set (0.00 sec)INSERT INTO test_yearVALUES(&#39;2020&#39;,&#39;2021&#39;);mysql&gt; SELECT * FROM test_year;+------+------+| f1 | f2 |+------+------+| 2020 | 2021 |+------+------+1 rows in set (0.00 sec)INSERT INTO test_yearVALUES(&#39;45&#39;,&#39;71&#39;);INSERT INTO test_yearVALUES( 0 ,&#39;0&#39;);mysql&gt; SELECT * FROM test_year;+------+------+| f1 | f2 |+------+------+| 2020 | 2021 || 2045 | 1971 || 0000 | 2000 |+------+------+3 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-DATE类型"><a href="#6-2-DATE类型" class="headerlink" title="6. 2 DATE类型"></a>6. 2 DATE类型</h3><p>DATE类型表示日期，没有时间部分，格式为<code>YYYY-MM-DD</code>，其中，YYYY表示年份，MM表示月份，DD表示日期。需要 <code>3 个字节</code>的存储空间。在向DATE类型的字段插入数据时，同样需要满足一定的格式条件。</p><ul><li>以<code>YYYY-MM-DD</code>格式或者<code>YYYYMMDD</code>格式表示的字符串日期，其最小取值为 1000 - 01 - 01 ，最大取值为9999 - 12 - 03 。YYYYMMDD格式会被转化为YYYY-MM-DD格式。</li><li>以<code>YY-MM-DD</code>格式或者<code>YYMMDD</code>格式表示的字符串日期，此格式中，年份为两位数值或字符串满足YEAR类型的格式条件为：当年份取值为 00 到 69 时，会被转化为 2000 到 2069 ；当年份取值为70 到 99时，会被转化为 1970 到 1999 。</li><li>使用<code>CURRENT_DATE()</code>或者<code>NOW()</code>函数，会插入当前系统的日期。</li></ul><p>举例：</p><p>创建数据表，表中只包含一个DATE类型的字段f1 。</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE test_date1(f1 DATE);Query OK, 0 rows affected (0.13 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>插入数据：</p><pre class="line-numbers language-none"><code class="language-none">INSERT INTO test_dateVALUES (&#39;2020-10-01&#39;), (&#39;20201001&#39;),( 20201001 );INSERT INTO test_dateVALUES (&#39;00-01-01&#39;), (&#39;000101&#39;), (&#39;69-10-01&#39;), (&#39;691001&#39;), (&#39;70-01-01&#39;), (&#39;700101&#39;),(&#39;99-01-01&#39;), (&#39;990101&#39;);INSERT INTO test_dateVALUES ( 000301 ), ( 690301 ), ( 700301 ), ( 990301 );INSERT INTO test_dateVALUES (CURRENT_DATE()), (NOW());SELECT *FROM test_date1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-TIME类型"><a href="#6-3-TIME类型" class="headerlink" title="6. 3 TIME类型"></a>6. 3 TIME类型</h3><p>TIME类型用来表示时间，不包含日期部分。在MySQL中，需要 <code>3 个字节</code>的存储空间来存储TIME类型的数据，可以使用“HH:MM:SS”格式来表示TIME类型，其中，HH表示小时，MM表示分钟，SS表示秒。</p><p>在MySQL中，向TIME类型的字段插入数据时，也可以使用几种不同的格式。</p><ol><li>可以使用带有冒号的字符串，比如’<code>D HH:MM:SS</code>‘、’<code>HH:MM:SS</code>‘、’<code>HH:MM</code>‘、’<code>D HH:MM</code>‘、’<code>D HH</code>‘或’<code>SS</code>‘格式，都能被正确地插入TIME类型的字段中。其中D表示天，其最小值为0，最大值为34。如果使用带有D格式的字符串插入TIME类型的字段时，D会被转化为小时，计算格式为D* 24 +HH。当使用带有冒号并且不带D的字符串表示时间时，表示当天的时间，比如12 : 10表示12:10:00，而不是00 :12 : 10 。</li><li>可以使用不带有冒号的字符串或者数字，格式为’<code>HHMMSS</code>‘或者<code>HHMMSS</code>。如果插入一个不合法的字符串或者数字，MySQL在存储数据时，会将其自动转化为 00 : 00 : 00 进行存储。比如1210，MySQL会将最右边的两位解析成秒，表示00 : 12 : 10 ，而不是 12 : 10 : 00 。</li><li>使用<code>CURRENT_TIME()</code>或者<code>NOW()</code>，会插入当前系统的时间。</li></ol><p><strong>举例：</strong></p><p>创建数据表，表中包含一个TIME类型的字段f1 。</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE test_time1(f1 TIME);Query OK, 0 rows affected (0.02 sec)INSERT INTO test_timeVALUES(&#39;2 12:30:29&#39;), (&#39;12:35:29&#39;), (&#39;12:40&#39;), (&#39;2 12:40&#39;),(&#39;1 05&#39;), (&#39;45&#39;);INSERT INTO test_timeVALUES (&#39;123520&#39;), ( 124011 ),( 1210 );INSERT INTO test_timeVALUES (NOW()), (CURRENT_TIME());SELECT * FROM test_time1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-4-DATETIME类型"><a href="#6-4-DATETIME类型" class="headerlink" title="6. 4 DATETIME类型"></a>6. 4 DATETIME类型</h3><p>DATETIME类型在所有的日期时间类型中占用的存储空间最大，总共需要 <code>8</code> 个字节的存储空间。在格式上为DATE类型和TIME类型的组合，可以表示为<code>YYYY-MM-DD HH:MM:SS</code>，其中YYYY表示年份，MM表示月份，DD表示日期，HH表示小时，MM表示分钟，SS表示秒。</p><p>在向DATETIME类型的字段插入数据时，同样需要满足一定的格式条件。</p><ul><li>以<code>YYYY-MM-DD HH:MM:SS</code>格式或者<code>YYYYMMDDHHMMSS</code>格式的字符串插入DATETIME类型的字段时，最小值为 1000 - 01 - 01 00 : 00 : 00 ，最大值为 9999 - 12 - 03 23 : 59 : 59 。<ul><li>以YYYYMMDDHHMMSS格式的数字插入DATETIME类型的字段时，会被转化为YYYY-MM-DD HH:MM:SS格式。</li></ul></li><li>以<code>YY-MM-DD HH:MM:SS</code>格式或者<code>YYMMDDHHMMSS</code>格式的字符串插入DATETIME类型的字段时，两位数的年份规则符合YEAR类型的规则， 00 到 69 表示 2000 到 2069 ； 70 到 99 表示 1970 到 1999 。</li><li>使用函数<code>CURRENT_TIMESTAMP()</code>和<code>NOW()</code>，可以向DATETIME类型的字段插入系统的当前日期和时间。</li></ul><p><strong>举例：</strong></p><p>创建数据表，表中包含一个DATETIME类型的字段dt。</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE test_datetime1(dt DATETIME);Query OK, 0 rows affected (0.02 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>插入数据：</p><pre class="line-numbers language-none"><code class="language-none">INSERT INTO test_datetimeVALUES (&#39;2021-01-01 06:50:30&#39;), (&#39;20210101065030&#39;);INSERT INTO test_datetimeVALUES (&#39;99-01-01 00:00:00&#39;), (&#39;990101000000&#39;), (&#39;20-01-01 00:00:00&#39;),(&#39;200101000000&#39;);INSERT INTO test_datetimeVALUES (20200101000000), (200101000000), ( 19990101000000 ), ( 990101000000);INSERT INTO test_datetimeVALUES (CURRENT_TIMESTAMP()), (NOW());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-5-TIMESTAMP类型"><a href="#6-5-TIMESTAMP类型" class="headerlink" title="6. 5 TIMESTAMP类型"></a>6. 5 TIMESTAMP类型</h3><p>TIMESTAMP类型也可以表示日期时间，其显示格式与DATETIME类型相同，都是<code>YYYY-MM-DD HH:MM:SS</code>，需要 4 个字节的存储空间。但是TIMESTAMP存储的时间范围比DATETIME要小很多，只能存储“ 1970 - 01 - 01 00 : 00 : 01 UTC”到“ 2038 - 01 - 19 03 : 14 : 07 UTC”之间的时间。其中，UTC表示世界统一时间，也叫作世界标准时间。</p><ul><li><strong>存储数据的时候需要对当前时间所在的时区进行转换，查询数据的时候再将时间转换回当前的时区。因此，使用TIMESTAMP存储的同一个时间值，在不同的时区查询时会显示不同的时间。</strong></li></ul><p>向TIMESTAMP类型的字段插入数据时，当插入的数据格式满足YY-MM-DD HH:MM:SS和YYMMDDHHMMSS时，两位数值的年份同样符合YEAR类型的规则条件，只不过表示的时间范围要小很多。</p><p>如果向TIMESTAMP类型的字段插入的时间超出了TIMESTAMP类型的范围，则MySQL会抛出错误信息。</p><p><strong>举例：</strong></p><p>创建数据表，表中包含一个TIMESTAMP类型的字段ts。</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE test_timestamp1(ts TIMESTAMP);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>插入数据：</p><pre class="line-numbers language-none"><code class="language-none">INSERT INTO test_timestampVALUES (&#39;1999-01-01 03:04:50&#39;), (&#39;19990101030405&#39;), (&#39;99-01-01 03:04:05&#39;),(&#39;990101030405&#39;);INSERT INTO test_timestampVALUES (&#39;2020@01@01@00@00@00&#39;), (&#39;20@01@01@00@00@00&#39;);INSERT INTO test_timestampVALUES (CURRENT_TIMESTAMP()), (NOW());#Incorrect datetime valueINSERT INTO test_timestampVALUES (&#39;2038-01-20 03:14:07&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>TIMESTAMP和DATETIME的区别：</strong></p><ul><li><p>TIMESTAMP存储空间比较小，表示的日期时间范围也比较小</p></li><li><p>底层存储方式不同，TIMESTAMP底层存储的是毫秒值，距离 1970 - 1 - 1 0 : 0 : 0 0 毫秒的毫秒值。</p></li><li><p>两个日期比较大小或日期计算时，TIMESTAMP更方便、更快。</p></li><li><p>TIMESTAMP和时区有关。TIMESTAMP会根据用户的时区不同，显示不同的结果。而DATETIME则只能反映出插入时当地的时区，其他时区的人查看数据必然会有误差的。</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE temp_time(d1 DATETIME,d2 TIMESTAMP);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">INSERT INTO temp_time VALUES(&#39;2021-9-2 14:45:52&#39;,&#39;2021-9-2 14:45:52&#39;);INSERT INTO temp_time VALUES(NOW(),NOW());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT * FROM temp_time;+---------------------+---------------------+| d1 | d2 |+---------------------+---------------------+| 2021 - 09 - 02 14 :45:52 | 2021 - 09 - 02 14 :45:52 || 2021 - 11 - 03 17 :38:17 | 2021 - 11 - 03 17 :38:17 |+---------------------+---------------------+2 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">#修改当前的时区SET time_zone &#x3D; &#39;+9:00&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT * FROM temp_time;+---------------------+---------------------+| d1 | d2 |+---------------------+---------------------+| 2021 - 09 - 02 14 :45:52 | 2021 - 09 - 02 15 :45:52 || 2021 - 11 - 03 17 :38:17 | 2021 - 11 - 03 18 :38:17 |+---------------------+---------------------+2 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="6-6-开发中经验"><a href="#6-6-开发中经验" class="headerlink" title="6. 6 开发中经验"></a>6. 6 开发中经验</h3><p>用得最多的日期时间类型，就是 <code>DATETIME</code>。虽然 MySQL 也支持 YEAR（年）、 TIME（时间）、DATE（日期），以及 TIMESTAMP 类型，但是在实际项目中，尽量用 DATETIME 类型。因为这个数据类型包括了完整的日期和时间信息，取值范围也最大，使用起来比较方便。毕竟，如果日期时间信息分散在好几个字段，很不容易记，而且查询的时候，SQL 语句也会更加复杂。</p><p>此外，一般存注册时间、商品发布时间等，不建议使用DATETIME存储，而是使用<code>时间戳</code>，因为<br>DATETIME虽然直观，但不便于计算。</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT UNIX_TIMESTAMP();+------------------+| UNIX_TIMESTAMP() |+------------------+| 1635932762 |+------------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="7-文本字符串类型"><a href="#7-文本字符串类型" class="headerlink" title="7. 文本字符串类型"></a>7. 文本字符串类型</h2><hr><p>在实际的项目中，我们还经常遇到一种数据，就是字符串数据。</p><p>MySQL中，文本字符串总体上分为<code>CHAR</code>、<code>VARCHAR</code>、<code>TINYTEXT</code>、<code>TEXT</code>、<code>MEDIUMTEXT</code>、<br><code>LONGTEXT</code>、<code>ENUM</code>、<code>SET</code>等类型。</p><p><img src="/../pic/%E7%AC%AC12%E7%AB%A0_MySQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%B2%BE%E8%AE%B2/1650171877133.png" alt="1650171877133"></p><h3 id="7-1-CHAR与VARCHAR类型"><a href="#7-1-CHAR与VARCHAR类型" class="headerlink" title="7. 1 CHAR与VARCHAR类型"></a>7. 1 CHAR与VARCHAR类型</h3><p>CHAR和VARCHAR类型都可以存储比较短的字符串。</p><table><thead><tr><th>字符串(文本)类型</th><th>特点</th><th>长度</th><th>长度范围</th><th>占用的存储空间</th></tr></thead><tbody><tr><td>CHAR(M)</td><td>固定长度</td><td>M</td><td>0 &lt;&#x3D; M &lt;&#x3D; 255</td><td>M个字节</td></tr><tr><td>VARCHAR(M)</td><td>可变长度</td><td>M</td><td>0 &lt;&#x3D; M &lt;&#x3D; 65535</td><td>(实际长度 + 1 ) 个字节</td></tr></tbody></table><p><strong>CHAR类型：</strong></p><ul><li>CHAR(M) 类型一般需要预先定义字符串长度。如果不指定(M)，则表示长度默认是 1 个字符。</li><li>如果保存时，数据的实际长度比CHAR类型声明的长度小，则会在<code>右侧填充</code>空格以达到指定的长度。当MySQL检索CHAR类型的数据时，CHAR类型的字段会去除尾部的空格。</li><li>定义CHAR类型字段时，声明的字段长度即为CHAR类型字段所占的存储空间的字节数。</li></ul><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE test_char1(c1 CHAR,c2 CHAR( 5 ));DESC test_char1;INSERT INTO test_charVALUES(&#39;a&#39;,&#39;Tom&#39;);SELECT c1,CONCAT(c2,&#39;***&#39;) FROM test_char1;INSERT INTO test_char1(c2)VALUES(&#39;a &#39;);SELECT CHAR_LENGTH(c2)FROM test_char1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>VARCHAR类型：</strong></p><ul><li>VARCHAR(M) 定义时，必须指定长度M，否则报错。</li><li>MySQL4.0版本以下，varchar(20)：指的是 20 字节，如果存放UTF8汉字时，只能存 6 个（每个汉字 3 字节） ；MySQL5.0版本以上，varchar(20)：指的是 20 字符。</li><li>检索VARCHAR类型的字段数据时，会保留数据尾部的空格。VARCHAR类型的字段所占用的存储空间为字符串实际长度加 1 个字节。</li></ul><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE test_varchar1(NAME VARCHAR #错误);#Column length too big for column &#39;NAME&#39; (max &#x3D; 21845);CREATE TABLE test_varchar2(NAME VARCHAR( 65535 )  #错误);CREATE TABLE test_varchar3(NAME VARCHAR( 5 ));INSERT INTO test_varcharVALUES(&#39;尚硅谷&#39;),(&#39;尚硅谷教育&#39;);#Data too long for column &#39;NAME&#39; at row 1INSERT INTO test_varcharVALUES(&#39;尚硅谷IT教育&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>哪些情况使用 CHAR 或 VARCHAR 更好</strong></p><table><thead><tr><th>类型</th><th>特点</th><th>空间上</th><th>时间上</th><th>适用场景</th></tr></thead><tbody><tr><td>CHAR(M)</td><td>固定长度</td><td>浪费存储空间</td><td>效率高</td><td>存储不大，速度要求高</td></tr><tr><td>VARCHAR(M)</td><td>可变长度</td><td>节省存储空间</td><td>效率低</td><td>非CHAR的情况</td></tr></tbody></table><p>情况 1 ：存储很短的信息。比如门牌号码 101 ，201……这样很短的信息应该用char，因为varchar还要占个byte用于存储信息长度，本来打算节约存储的，结果得不偿失。</p><p>情况 2 ：固定长度的。比如使用uuid作为主键，那用char应该更合适。因为他固定长度，varchar动态根据长度的特性就消失了，而且还要占个长度信息。</p><p>情况 3 ：十分频繁改变的column。因为varchar每次存储都要有额外的计算，得到长度等工作，如果一个非常频繁改变的，那就要有很多的精力用于计算，而这些对于char来说是不需要的。</p><p>情况 4 ：具体存储引擎中的情况：</p><ul><li><code>MyISAM</code> 数据存储引擎和数据列：MyISAM数据表，最好使用固定长度(CHAR)的数据列代替可变长度(VARCHAR)的数据列。这样使得整个表静态化，从而使<code>数据检索更快</code>，用空间换时间。</li><li><code>MEMORY</code> 存储引擎和数据列：MEMORY数据表目前都使用固定长度的数据行存储，因此无论使用CHAR或VARCHAR列都没有关系，两者都是作为CHAR类型处理的。</li><li><code>InnoDB</code>存储引擎，建议使用VARCHAR类型。因为对于InnoDB数据表，内部的行存储格式并没有区分固定长度和可变长度列（所有数据行都使用指向数据列值的头指针），而且 <strong>主要影响性能的因素是数据行使用的存储总量</strong> ，由于char平均占用的空间多于varchar，所以除了简短并且固定长度的，其他考虑varchar。这样节省空间，对磁盘I&#x2F;O和数据存储总量比较好。</li></ul><h3 id="7-2-TEXT类型"><a href="#7-2-TEXT类型" class="headerlink" title="7. 2 TEXT类型"></a>7. 2 TEXT类型</h3><p>在MySQL中，TEXT用来保存文本类型的字符串，总共包含 4 种类型，分别为TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT 类型。</p><p>在向TEXT类型的字段保存和查询数据时，系统自动按照实际长度存储，不需要预先定义长度。这一点和VARCHAR类型相同。</p><p>每种TEXT类型保存的数据长度和所占用的存储空间不同，如下：</p><table><thead><tr><th>文本字符串类型</th><th>特点</th><th>长度</th><th>长度范围</th><th>占用的存储空间</th></tr></thead><tbody><tr><td>TINYTEXT</td><td>小文本、可变长度</td><td>L</td><td>0 &lt;&#x3D; L &lt;&#x3D; 255</td><td>L + 2 个字节</td></tr><tr><td>TEXT</td><td>文本、可变长度</td><td>L</td><td>0 &lt;&#x3D; L &lt;&#x3D; 65535</td><td>L + 2 个字节</td></tr><tr><td>MEDIUMTEXT</td><td>中等文本、可变长度</td><td>L</td><td>0 &lt;&#x3D; L &lt;&#x3D; 16777215</td><td>L + 3 个字节</td></tr><tr><td>LONGTEXT</td><td>大文本、可变长度</td><td>L</td><td>0 &lt;&#x3D; L&lt;&#x3D; 4294967295（相当于4GB）</td><td>L + 4 个字节</td></tr></tbody></table><p><strong>由于实际存储的长度不确定，MySQL 不允许 TEXT 类型的字段做主键</strong> 。遇到这种情况，你只能采用CHAR(M)，或者 VARCHAR(M)。</p><p><strong>举例：</strong></p><p>创建数据表：</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE test_text(tx TEXT);INSERT INTO test_textVALUES(&#39;atguigu &#39;);SELECT CHAR_LENGTH(tx)FROM test_text; #10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明在保存和查询数据时，并没有删除TEXT类型的数据尾部的空格。</p><p><strong>开发中经验：</strong></p><p>TEXT文本类型，可以存比较大的文本段，搜索速度稍慢，因此如果不是特别大的内容，建议使用CHAR，VARCHAR来代替。还有TEXT类型不用加默认值，加了也没用。而且text和blob类型的数据删除后容易导致“空洞”，使得文件碎片比较多，所以频繁使用的表不建议包含TEXT类型字段，建议单独分出去，单独用一个表。</p><hr><h2 id="8-ENUM类型"><a href="#8-ENUM类型" class="headerlink" title="8. ENUM类型"></a>8. ENUM类型</h2><hr><p>ENUM类型也叫作枚举类型，ENUM类型的取值范围需要在定义字段时进行指定。设置字段值时，ENUM类型只允许从成员中选取单个值，不能一次选取多个值。</p><p>其所需要的存储空间由定义ENUM类型时指定的成员个数决定。</p><table><thead><tr><th>文本字符串类型</th><th>长度</th><th>长度范围</th><th>占用的存储空间</th></tr></thead><tbody><tr><td>ENUM</td><td>L</td><td>1 &lt;&#x3D; L &lt;&#x3D; 65535</td><td>1 或 2 个字节</td></tr></tbody></table><ul><li>当ENUM类型包含 1 ～ 255 个成员时，需要 1 个字节的存储空间；</li><li>当ENUM类型包含 256 ～ 65535 个成员时，需要 2 个字节的存储空间。</li><li>ENUM类型的成员个数的上限为 65535 个。</li></ul><p>举例：</p><p>创建表如下：</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE test_enum(season ENUM(&#39;春&#39;,&#39;夏&#39;,&#39;秋&#39;,&#39;冬&#39;,&#39;unknow&#39;));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>添加数据：</p><pre class="line-numbers language-none"><code class="language-none">INSERT INTO test_enumVALUES(&#39;春&#39;),(&#39;秋&#39;);# 忽略大小写INSERT INTO test_enumVALUES(&#39;UNKNOW&#39;);# 允许按照角标的方式获取指定索引位置的枚举值INSERT INTO test_enumVALUES(&#39;1&#39;),( 3 );# Data truncated for column &#39;season&#39; at row 1INSERT INTO test_enumVALUES(&#39;ab&#39;);# 当ENUM类型的字段没有声明为NOT NULL时，插入NULL也是有效的INSERT INTO test_enumVALUES(NULL);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="9-SET类型"><a href="#9-SET类型" class="headerlink" title="9. SET类型"></a>9. SET类型</h2><hr><p>SET表示一个字符串对象，可以包含 0 个或多个成员，但成员个数的上限为 64 。设置字段值时，可以取取值范围内的 0 个或多个值。</p><p>当SET类型包含的成员个数不同时，其所占用的存储空间也是不同的，具体如下：</p><table><thead><tr><th>成员个数范围（L表示实际成员个数）</th><th>占用的存储空间</th></tr></thead><tbody><tr><td>1 &lt;&#x3D; L &lt;&#x3D; 8</td><td>1 个字节</td></tr><tr><td>9 &lt;&#x3D; L &lt;&#x3D; 16</td><td>2 个字节</td></tr><tr><td>17 &lt;&#x3D; L &lt;&#x3D; 24</td><td>3 个字节</td></tr><tr><td>25 &lt;&#x3D; L &lt;&#x3D; 32</td><td>4 个字节</td></tr><tr><td>33 &lt;&#x3D; L &lt;&#x3D; 64</td><td>8 个字节</td></tr></tbody></table><p>SET类型在存储数据时成员个数越多，其占用的存储空间越大。注意：SET类型在选取成员时，可以一次选择多个成员，这一点与ENUM类型不同。</p><p>举例：</p><p>创建表：</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE test_set(s SET (&#39;A&#39;, &#39;B&#39;, &#39;C&#39;));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>向表中插入数据：</p><pre class="line-numbers language-none"><code class="language-none">INSERT INTO test_set (s) VALUES (&#39;A&#39;), (&#39;A,B&#39;);#插入重复的SET类型成员时，MySQL会自动删除重复的成员INSERT INTO test_set (s) VALUES (&#39;A,B,C,A&#39;);#向SET类型的字段插入SET成员中不存在的值时，MySQL会抛出错误。INSERT INTO test_set (s) VALUES (&#39;A,B,C,D&#39;);SELECT *FROM test_set;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE temp_mul(gender ENUM(&#39;男&#39;,&#39;女&#39;),hobby SET(&#39;吃饭&#39;,&#39;睡觉&#39;,&#39;打豆豆&#39;,&#39;写代码&#39;));INSERT INTO temp_mul VALUES(&#39;男&#39;,&#39;睡觉,打豆豆&#39;); #成功# Data truncated for column &#39;gender&#39; at row 1INSERT INTO temp_mul VALUES(&#39;男,女&#39;,&#39;睡觉,写代码&#39;); #失败# Data truncated for column &#39;gender&#39; at row 1INSERT INTO temp_mul VALUES(&#39;妖&#39;,&#39;睡觉,写代码&#39;);#失败INSERT INTO temp_mul VALUES(&#39;男&#39;,&#39;睡觉,写代码,吃饭&#39;); #成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="10-二进制字符串类型"><a href="#10-二进制字符串类型" class="headerlink" title="10. 二进制字符串类型"></a>10. 二进制字符串类型</h2><hr><p>MySQL中的二进制字符串类型主要存储一些二进制数据，比如可以存储图片、音频和视频等二进制数据。</p><p>MySQL中支持的二进制字符串类型主要包括BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB 和LONGBLOB类型。</p><p><strong>BINARY与VARBINARY类型</strong></p><p>BINARY和VARBINARY类似于CHAR和VARCHAR，只是它们存储的是二进制字符串。</p><p>BINARY (M)为固定长度的二进制字符串，M表示最多能存储的字节数，取值范围是 0 ~ 255 个字符。如果未指定(M)，表示只能存储 <code>1 个字节</code>。例如BINARY ( 8 )，表示最多能存储 8 个字节，如果字段值不足(M)个字节，将在右边填充’\ 0 ‘以补齐指定长度。</p><p>VARBINARY (M)为可变长度的二进制字符串，M表示最多能存储的字节数，总字节数不能超过行的字节长度限制 65535 ，另外还要考虑额外字节开销，VARBINARY类型的数据除了存储数据本身外，还需要 1 或 2 个字节来存储数据的字节数。VARBINARY类型<code>必须指定(M)</code>，否则报错。</p><table><thead><tr><th>二进制字符串类型</th><th>特点</th><th>值的长度</th><th>占用空间</th></tr></thead><tbody><tr><td>BINARY(M)</td><td>固定长度</td><td>M（ 0 &lt;&#x3D; M &lt;&#x3D; 255 ）</td><td>M个字节</td></tr><tr><td>VARBINARY(M)</td><td>可变长度</td><td>M（ 0 &lt;&#x3D; M &lt;&#x3D; 65535 ）</td><td>M+ 1 个字节</td></tr></tbody></table><p>举例：</p><p>创建表：</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE test_binary1(f1 BINARY,f2 BINARY( 3 ),# f3 VARBINARY,f4 VARBINARY( 10 ));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加数据：</p><pre class="line-numbers language-none"><code class="language-none">INSERT INTO test_binary1(f1,f2)VALUES(&#39;a&#39;,&#39;a&#39;);INSERT INTO test_binary1(f1,f2)VALUES(&#39;尚&#39;,&#39;尚&#39;);#失败INSERT INTO test_binary1(f2,f4)VALUES(&#39;ab&#39;,&#39;ab&#39;);mysql&gt; SELECT LENGTH(f2),LENGTH(f4)-&gt; FROM test_binary1;+------------+------------+| LENGTH(f2) | LENGTH(f4) |+------------+------------+| 3 | NULL || 3 | 2 |+------------+------------+2 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>BLOB类型</strong></p><p>BLOB是一个<code>二进制大对象</code>，可以容纳可变数量的数据。</p><p>MySQL中的BLOB类型包括TINYBLOB、BLOB、MEDIUMBLOB和LONGBLOB 4种类型，它们可容纳值的最大长度不同。可以存储一个二进制的大对象，比如<code>图片</code>、<code>音频</code>和<code>视频</code>等。</p><p>需要注意的是，在实际工作中，往往不会在MySQL数据库中使用BLOB类型存储大对象数据，通常会将图片、音频和视频文件存储到<code>服务器的磁盘上</code>，并将图片、音频和视频的访问路径存储到MySQL中。</p><table><thead><tr><th>二进制字符串类型</th><th>值的长度</th><th>长度范围</th><th>占用空间</th></tr></thead><tbody><tr><td>TINYBLOB</td><td>L</td><td>0 &lt;&#x3D; L &lt;&#x3D; 255</td><td>L + 1 个字节</td></tr><tr><td>BLOB</td><td>L</td><td>0 &lt;&#x3D; L &lt;&#x3D; 65535（相当于64KB）</td><td>L + 2 个字节</td></tr><tr><td>MEDIUMBLOB</td><td>L</td><td>0 &lt;&#x3D; L &lt;&#x3D; 16777215 （相当于16MB）</td><td>L + 3 个字节</td></tr><tr><td>LONGBLOB</td><td>L</td><td>0 &lt;&#x3D; L &lt;&#x3D; 4294967295（相当于4GB）</td><td>L + 4 个字节</td></tr></tbody></table><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE test_blob1(id INT,img MEDIUMBLOB);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>TEXT和BLOB的使用注意事项：</strong></p><p>在使用text和blob字段类型时要注意以下几点，以便更好的发挥数据库的性能。</p><p>① BLOB和TEXT值也会引起自己的一些问题，特别是执行了大量的删除或更新操作的时候。删除这种值会在数据表中留下很大的”<code>空洞</code>“，以后填入这些”空洞”的记录可能长度不同。为了提高性能，建议定期使用 OPTIMIZE TABLE 功能对这类表进行<code>碎片整理</code>。</p><p>② 如果需要对大文本字段进行模糊查询，MySQL 提供了<code>前缀索引</code>。但是仍然要在不必要的时候避免检索大型的BLOB或TEXT值。例如，SELECT * 查询就不是很好的想法，除非你能够确定作为约束条件的WHERE子句只会找到所需要的数据行。否则，你可能毫无目的地在网络上传输大量的值。</p><p>③ 把BLOB或TEXT列<code>分离到单独的表</code>中。在某些环境中，如果把这些数据列移动到第二张数据表中，可以让你把原数据表中的数据列转换为固定长度的数据行格式，那么它就是有意义的。这会<code>减少主表中的碎片</code>，使你得到固定长度数据行的性能优势。它还使你在主数据表上运行 SELECT * 查询的时候不会通过网络传输大量的BLOB或TEXT值。</p><hr><h2 id="11-JSON-类型"><a href="#11-JSON-类型" class="headerlink" title="11. JSON 类型"></a>11. JSON 类型</h2><hr><p>JSON（JavaScript Object Notation）是一种轻量级的<code>数据交换格式</code>。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。它易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。 <strong>JSON 可以将 JavaScript 对象中表示的一组数据转换为字符串，然后就可以在网络或者程序之间轻松地传递这个字符串，并在需要的时候将它还原为各编程语言所支持的数据格式。</strong></p><p>在MySQL 5.7中，就已经支持JSON数据类型。在MySQL 8.x版本中，JSON类型提供了可以进行自动验证的JSON文档和优化的存储结构，使得在MySQL中存储和读取JSON类型的数据更加方便和高效。 创建数据表，表中包含一个JSON类型的字段 js 。</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE test_json(js json);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>向表中插入JSON数据。</p><pre class="line-numbers language-none"><code class="language-none">INSERT INTO test_json (js)VALUES (&#39;&#123;&quot;name&quot;:&quot;songhk&quot;, &quot;age&quot;:18, &quot;address&quot;:&#123;&quot;province&quot;:&quot;beijing&quot;,&quot;city&quot;:&quot;beijing&quot;&#125;&#125;&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查询t19表中的数据。</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT *-&gt; FROM test_json;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/../pic/%E7%AC%AC12%E7%AB%A0_MySQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%B2%BE%E8%AE%B2/1650173453029.png" alt="1650173453029"></p><p>当需要检索JSON类型的字段中数据的某个具体值时，可以使用“-&gt;”和“-&gt;&gt;”符号。</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT js -&gt; &#39;$.name&#39; AS NAME,js -&gt; &#39;$.age&#39; AS age ,js -&gt; &#39;$.address.province&#39; AS province, js -&gt; &#39;$.address.city&#39; AS city-&gt; FROM test_json;+----------+------+-----------+-----------+| NAME | age | province | city |+----------+------+-----------+-----------+| &quot;songhk&quot; | 18 | &quot;beijing&quot; | &quot;beijing&quot; |+----------+------+-----------+-----------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过“-&gt;”和“-&gt;&gt;”符号，从JSON字段中正确查询出了指定的JSON数据的值。</p><hr><h2 id="12-空间类型"><a href="#12-空间类型" class="headerlink" title="12. 空间类型"></a>12. 空间类型</h2><hr><p>MySQL 空间类型扩展支持地理特征的生成、存储和分析。这里的地理特征表示世界上具有位置的任何东西，可以是一个实体，例如一座山；可以是空间，例如一座办公楼；也可以是一个可定义的位置，例如一个十字路口等等。MySQL中使用<code>Geometry（几何）</code>来表示所有地理特征。Geometry指一个点或点的集合，代表世界上任何具有位置的事物。</p><p>MySQL的空间数据类型（Spatial Data Type）对应于OpenGIS类，包括单值类型：GEOMETRY、POINT、LINESTRING、POLYGON以及集合类型：MULTIPOINT、MULTILINESTRING、MULTIPOLYGON、GEOMETRYCOLLECTION 。</p><ul><li>Geometry是所有空间集合类型的基类，其他类型如POINT、LINESTRING、POLYGON都是Geometry的子类。<ul><li>Point，顾名思义就是点，有一个坐标值。例如POINT(121.213342 31.234532)，POINT(30 10)，坐标值支持DECIMAL类型，经度（longitude）在前，维度（latitude）在后，用空格分隔。</li><li>LineString，线，由一系列点连接而成。如果线从头至尾没有交叉，那就是简单的（simple）；如果起点和终点重叠，那就是封闭的（closed）。例如LINESTRING(30 10,10 30,40 40)，点与点之间用逗号分隔，一个点中的经纬度用空格分隔，与POINT格式一致。</li><li>Polygon，多边形。可以是一个实心平面形，即没有内部边界，也可以有空洞，类似纽扣。最简单的就是只有一个外边界的情况，例如POLYGON((0 0,10 0,10 10, 0 10))。</li></ul></li></ul><p>下面展示几种常见的几何图形元素：</p><p><img src="/../pic/%E7%AC%AC12%E7%AB%A0_MySQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%B2%BE%E8%AE%B2/1650173649831.png" alt="1650173649831"></p><ul><li>MultiPoint、MultiLineString、MultiPolygon、GeometryCollection 这 4 种类型都是集合类，是多个Point、LineString或Polygon组合而成。</li></ul><p>下面展示的是多个同类或异类几何图形元素的组合：</p><p><img src="/../pic/%E7%AC%AC12%E7%AB%A0_MySQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%B2%BE%E8%AE%B2/1650173684352.png" alt="1650173684352"></p><hr><h2 id="13-小结及选择建议"><a href="#13-小结及选择建议" class="headerlink" title="13. 小结及选择建议"></a>13. 小结及选择建议</h2><hr><p>在定义数据类型时，如果确定是<code>整数</code>，就用<code>INT</code>； 如果是<code>小数</code>，一定用定点数类型<code>DECIMAL(M,D)</code>； 如果是日期与时间，就用 <code>DATETIME</code>。</p><p>这样做的好处是，首先确保你的系统不会因为数据类型定义出错。不过，凡事都是有两面的，可靠性好，并不意味着高效。比如，TEXT 虽然使用方便，但是效率不如 CHAR(M) 和 VARCHAR(M)。</p><p>关于字符串的选择，建议参考如下阿里巴巴的《Java开发手册》规范：</p><p><strong>阿里巴巴《Java开发手册》之MySQL数据库：</strong></p><ul><li><p>任何字段如果为非负数，必须是 UNSIGNED</p></li><li><p>【<code>强制</code>】小数类型为 DECIMAL，禁止使用 FLOAT 和 DOUBLE。</p><ul><li>说明：在存储的时候，FLOAT 和 DOUBLE 都存在精度损失的问题，很可能在比较值的时候，得到不正确的结果。如果存储的数据范围超过 DECIMAL 的范围，建议将数据拆成整数和小数并分开存储。</li></ul></li><li><p>【<code>强制</code>】如果存储的字符串长度几乎相等，使用 CHAR 定长字符串类型。</p></li><li><p>【<code>强制</code>】VARCHAR 是可变长字符串，不预先分配存储空间，长度不要超过 5000 。如果存储长度大于此值，定义字段类型为 TEXT，独立出来一张表，用主键来对应，避免影响其它字段索引效率。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视图</title>
      <link href="/2022/07/17/di-14-zhang-shi-tu/"/>
      <url>/2022/07/17/di-14-zhang-shi-tu/</url>
      
        <content type="html"><![CDATA[<h1 id="第14章-视图"><a href="#第14章-视图" class="headerlink" title="第14章_视图"></a>第14章_视图</h1><h2 id="1-常见的数据库对象"><a href="#1-常见的数据库对象" class="headerlink" title="1. 常见的数据库对象"></a>1. 常见的数据库对象</h2><hr><table><thead><tr><th>对象</th><th>描述</th></tr></thead><tbody><tr><td>表(TABLE)</td><td>表是存储数据的逻辑单元，以行和列的形式存在，列就是字段，行就是记录</td></tr><tr><td>数据字典</td><td>就是系统表，存放数据库相关信息的表。系统表的数据通常由数据库系统维护，程序员通常不应该修改，只可查看</td></tr><tr><td>约束(CONSTRAINT)</td><td>执行数据校验的规则，用于保证数据完整性的规则</td></tr><tr><td>视图(VIEW)</td><td>一个或者多个数据表里的数据的逻辑显示，视图并不存储数据</td></tr><tr><td>索引(INDEX)</td><td>用于提高查询性能，相当于书的目录</td></tr><tr><td>存储过程(PROCEDURE)</td><td>用于完成一次完整的业务处理，没有返回值，但可通过传出参数将多个值传给调用环境</td></tr><tr><td>存储函数(FUNCTION)</td><td>用于完成一次特定的计算，具有一个返回值</td></tr><tr><td>触发器(TRIGGER)</td><td>相当于一个事件监听器，当数据库发生特定事件后，触发器被触发，完成相应的处理</td></tr></tbody></table><hr><h2 id="2-视图概述"><a href="#2-视图概述" class="headerlink" title="2. 视图概述"></a>2. 视图概述</h2><hr><p><img src="https://new-wangz.github.io/2022/04/20/%E7%AC%AC14%E7%AB%A0-%E8%A7%86%E5%9B%BE/1650462824019.png" alt="1650462824019"></p><h3 id="2-1-为什么使用视图？"><a href="#2-1-为什么使用视图？" class="headerlink" title="2. 1 为什么使用视图？"></a>2. 1 为什么使用视图？</h3><p>视图一方面可以帮我们使用表的一部分而不是所有的表，另一方面也可以针对不同的用户制定不同的查询视图。比如，针对一个公司的销售人员，我们只想给他看部分数据，而某些特殊的数据，比如采购的价格，则不会提供给他。再比如，人员薪酬是个敏感的字段，那么只给某个级别以上的人员开放，其他人的查询视图中则不提供这个字段。</p><p>刚才讲的只是视图的一个使用场景，实际上视图还有很多作用。最后，我们总结视图的优点。</p><h3 id="2-2-视图的理解"><a href="#2-2-视图的理解" class="headerlink" title="2. 2 视图的理解"></a>2. 2 视图的理解</h3><ul><li><p>视图是一种<code>虚拟表</code>，本身是<code>不具有数据</code>的，占用很少的内存空间，它是 SQL 中的一个重要概念。</p></li><li><p><strong>视图建立在已有表的基础上</strong> , 视图赖以建立的这些表称为 <strong>基表</strong> 。<br><img src="https://new-wangz.github.io/2022/04/20/%E7%AC%AC14%E7%AB%A0-%E8%A7%86%E5%9B%BE/1650462971974.png" alt="1650462971974"></p></li><li><p>视图的创建和删除只影响视图本身，不影响对应的基表。但是当对视图中的数据进行增加、删除和修改操作时，数据表中的数据会相应地发生变化，反之亦然。</p></li><li><p>向视图提供数据内容的语句为 SELECT 语句, 可以将视图理解为</p><p>存储起来的 SELECT 语句</p><ul><li>在数据库中，视图不会保存数据，数据真正保存在数据表中。当对视图中的数据进行增加、删除和修改操作时，数据表中的数据会相应地发生变化；反之亦然。</li></ul></li><li><p>视图，是向用户提供基表数据的另一种表现形式。通常情况下，小型项目的数据库可以不使用视图，但是在大型项目中，以及数据表比较复杂的情况下，视图的价值就凸显出来了，它可以帮助我们把经常查询的结果集放到虚拟表中，提升使用效率。理解和使用起来都非常方便。</p></li></ul><hr><h2 id="3-创建视图"><a href="#3-创建视图" class="headerlink" title="3. 创建视图"></a>3. 创建视图</h2><hr><ul><li><p><strong>在 CREATE VIEW 语句中嵌入子查询</strong></p><pre class="line-numbers language-none"><code class="language-none">CREATE [OR REPLACE][ALGORITHM &#x3D; &#123;UNDEFINED | MERGE | TEMPTABLE&#125;]VIEW 视图名称 [(字段列表)]AS 查询语句[WITH [CASCADED|LOCAL] CHECK OPTION]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>精简版</p><pre class="line-numbers language-none"><code class="language-none">CREATE VIEW 视图名称AS 查询语句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="3-1-创建单表视图"><a href="#3-1-创建单表视图" class="headerlink" title="3. 1 创建单表视图"></a>3. 1 创建单表视图</h3><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">CREATE VIEW empvuASSELECT employee_id, last_name, salaryFROM employeesWHERE department_id &#x3D; 80 ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询视图：</p><pre class="line-numbers language-none"><code class="language-none">SELECT *FROM salvu80;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://new-wangz.github.io/2022/04/20/%E7%AC%AC14%E7%AB%A0-%E8%A7%86%E5%9B%BE/1650463064557.png" alt="1650463064557"></p><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">CREATE VIEW emp_year_salary (ename,year_salary)ASSELECT ename,salary* 12 *( 1 +IFNULL(commission_pct, 0 ))FROM t_employee;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">CREATE VIEW salvuASSELECT employee_id ID_NUMBER, last_name NAME,salary* 12 ANN_SALARYFROM employeesWHERE department_id &#x3D; 50 ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明 1 ：实际上就是我们在 SQL 查询语句的基础上封装了视图 VIEW，这样就会基于 SQL 语句的结果集形成一张虚拟表。</p><p>说明 2 ：在创建视图时，没有在视图名后面指定字段列表，则视图中字段列表默认和SELECT语句中的字段列表一致。如果SELECT语句中给字段取了别名，那么视图中的字段名和别名相同。</p><h3 id="3-2-创建多表联合视图"><a href="#3-2-创建多表联合视图" class="headerlink" title="3. 2 创建多表联合视图"></a>3. 2 创建多表联合视图</h3><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">CREATE VIEW empviewASSELECT employee_id emp_id,last_name NAME,department_nameFROM employees e,departments dWHERE e.department_id &#x3D; d.department_id;CREATE VIEW emp_deptASSELECT ename,dnameFROM t_employee LEFT JOIN t_departmentON t_employee.did &#x3D; t_department.did;CREATE VIEW dept_sum_vu(name, minsal, maxsal, avgsal)ASSELECT d.department_name, MIN(e.salary), MAX(e.salary),AVG(e.salary)FROM employees e, departments dWHERE e.department_id &#x3D; d.department_idGROUP BY d.department_name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>利用视图对数据进行格式化</strong><br>我们经常需要输出某个格式的内容，比如我们想输出员工姓名和对应的部门名，对应格式为emp_name(department_name)，就可以使用视图来完成数据格式化的操作：</p><pre class="line-numbers language-none"><code class="language-none">CREATE VIEW emp_departASSELECT CONCAT(last_name,&#39;(&#39;,department_name,&#39;)&#39;) AS emp_deptFROM employees e JOIN departments dWHERE e.department_id &#x3D; d.department_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-3-基于视图创建视图"><a href="#3-3-基于视图创建视图" class="headerlink" title="3. 3 基于视图创建视图"></a>3. 3 基于视图创建视图</h3><p>当我们创建好一张视图之后，还可以在它的基础上继续创建视图。</p><p>举例：联合“emp_dept”视图和“emp_year_salary”视图查询员工姓名、部门名称、年薪信息创建“emp_dept_ysalary”视图。</p><pre class="line-numbers language-none"><code class="language-none">CREATE VIEW emp_dept_ysalaryASSELECT emp_dept.ename,dname,year_salaryFROM emp_dept INNER JOIN emp_year_salaryON emp_dept.ename &#x3D; emp_year_salary.ename;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="4-查看视图"><a href="#4-查看视图" class="headerlink" title="4. 查看视图"></a>4. 查看视图</h2><hr><p>语法 1 ：查看数据库的表对象、视图对象</p><pre class="line-numbers language-none"><code class="language-none">SHOW TABLES;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>语法 2 ：查看视图的结构</p><pre class="line-numbers language-none"><code class="language-none">DESC &#x2F; DESCRIBE 视图名称;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>语法 3 ：查看视图的属性信息</p><pre class="line-numbers language-none"><code class="language-none"># 查看视图信息（显示数据表的存储引擎、版本、数据行数和数据大小等）SHOW TABLE STATUS LIKE &#39;视图名称&#39;\G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行结果显示，注释Comment为VIEW，说明该表为视图，其他的信息为NULL，说明这是一个虚表。</p><p>语法 4 ：查看视图的详细定义信息</p><pre class="line-numbers language-none"><code class="language-none">SHOW CREATE VIEW 视图名称;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="5-更新视图的数据"><a href="#5-更新视图的数据" class="headerlink" title="5. 更新视图的数据"></a>5. 更新视图的数据</h2><hr><h3 id="5-1-一般情况"><a href="#5-1-一般情况" class="headerlink" title="5. 1 一般情况"></a>5. 1 一般情况</h3><p>MySQL支持使用INSERT、UPDATE和DELETE语句对视图中的数据进行插入、更新和删除操作。当视图中的数据发生变化时，数据表中的数据也会发生变化，反之亦然。</p><p>举例：UPDATE操作</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT ename,tel FROM emp_tel WHERE ename &#x3D; &#39;孙洪亮&#39;;+---------+-------------+| ename | tel |+---------+-------------+| 孙洪亮 | 13789098765 |+---------+-------------+1 row in set (0.01 sec)mysql&gt; UPDATE emp_tel SET tel &#x3D; &#39;13789091234&#39; WHERE ename &#x3D; &#39;孙洪亮&#39;;Query OK, 1 row affected (0.01 sec)Rows matched: 1 Changed: 1 Warnings: 0mysql&gt; SELECT ename,tel FROM emp_tel WHERE ename &#x3D; &#39;孙洪亮&#39;;+---------+-------------+| ename | tel |+---------+-------------+| 孙洪亮 | 13789091234 |+---------+-------------+1 row in set (0.00 sec)mysql&gt; SELECT ename,tel FROM t_employee WHERE ename &#x3D; &#39;孙洪亮&#39;;+---------+-------------+| ename | tel |+---------+-------------+| 孙洪亮 | 13789091234 |+---------+-------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例：DELETE操作</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT ename,tel FROM emp_tel WHERE ename &#x3D; &#39;孙洪亮&#39;;+---------+-------------+| ename | tel |+---------+-------------+| 孙洪亮 | 13789091234 |+---------+-------------+1 row in set (0.00 sec)mysql&gt; DELETE FROM emp_tel  WHERE ename &#x3D; &#39;孙洪亮&#39;;Query OK, 1 row affected (0.01 sec)mysql&gt; SELECT ename,tel FROM emp_tel WHERE ename &#x3D; &#39;孙洪亮&#39;;Empty set (0.00 sec)mysql&gt; SELECT ename,tel FROM t_employee WHERE ename &#x3D; &#39;孙洪亮&#39;;Empty set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-不可更新的视图"><a href="#5-2-不可更新的视图" class="headerlink" title="5. 2 不可更新的视图"></a>5. 2 不可更新的视图</h3><p>要使视图可更新，视图中的行和底层基本表中的行之间必须存在<code>一对一</code>的关系。另外当视图定义出现如下情况时，视图不支持更新操作：</p><ul><li>在定义视图的时候指定了“ALGORITHM &#x3D; TEMPTABLE”，视图将不支持INSERT和DELETE操作；</li><li>视图中不包含基表中所有被定义为非空又未指定默认值的列，视图将不支持INSERT操作；</li><li>在定义视图的SELECT语句中使用了<code>JOIN联合查询</code>，视图将不支持INSERT和DELETE操作；</li><li>在定义视图的SELECT语句后的字段列表中使用了<code>数学表达式</code>或<code>子查询</code>，视图将不支持INSERT，也不支持UPDATE使用了数学表达式、子查询的字段值；</li><li>在定义视图的SELECT语句后的字段列表中使用<code>DISTINCT</code>、<code>聚合函数</code>、<code>GROUP BY</code>、<code>HAVING</code>、<code>UNION</code>等，视图将不支持INSERT、UPDATE、DELETE；</li><li>在定义视图的SELECT语句中包含了子查询，而子查询中引用了FROM后面的表，视图将不支持INSERT、UPDATE、DELETE；</li><li>视图定义基于一个<code>不可更新视图</code>；</li><li>常量视图。</li></ul><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; CREATE OR REPLACE VIEW emp_dept-&gt; (ename,salary,birthday,tel,email,hiredate,dname)-&gt; AS SELECT ename,salary,birthday,tel,email,hiredate,dname-&gt; FROM t_employee INNER JOIN t_department-&gt; ON t_employee.did &#x3D; t_department.did ;Query OK, 0 rows affected (0.01 sec)mysql&gt; INSERT INTO emp_dept(ename,salary,birthday,tel,email,hiredate,dname)-&gt; VALUES(&#39;张三&#39;, 15000 ,&#39;1995-01-08&#39;,&#39;18201587896&#39;,-&gt; &#39;zs@atguigu.com&#39;,&#39;2022-02-14&#39;,&#39;新部门&#39;);#ERROR 1393 (HY000): Can not modify more than one base table through a join view &#39;atguigu_chapter9.emp_dept&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的SQL执行结果可以看出，在定义视图的SELECT语句中使用了JOIN联合查询，视图将不支持更新操作。</p><blockquote><p>虽然可以更新视图数据，但总的来说，视图作为<code>虚拟表</code>，主要用于<code>方便查询</code>，不建议更新视图的数据。 <strong>对视图数据的更改，都是通过对实际数据表里数据的操作来完成的。</strong></p></blockquote><hr><h2 id="6-修改、删除视图"><a href="#6-修改、删除视图" class="headerlink" title="6. 修改、删除视图"></a>6. 修改、删除视图</h2><hr><h3 id="6-1-修改视图"><a href="#6-1-修改视图" class="headerlink" title="6. 1 修改视图"></a>6. 1 修改视图</h3><p>方式 1 ：使用CREATE OR REPLACE VIEW 子句 <strong>修改视图</strong></p><pre class="line-numbers language-none"><code class="language-none">CREATE OR REPLACE VIEW empvu(id_number, name, sal, department_id)ASSELECT employee_id, first_name || &#39; &#39; || last_name, salary, department_idFROM employeesWHERE department_id &#x3D; 80 ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>说明：CREATE VIEW 子句中各列的别名应和子查询中各列相对应。</p></blockquote><p>方式 2 ：ALTER VIEW</p><p>修改视图的语法是：</p><pre class="line-numbers language-none"><code class="language-none">ALTER VIEW 视图名称AS查询语句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6-2-删除视图"><a href="#6-2-删除视图" class="headerlink" title="6. 2 删除视图"></a>6. 2 删除视图</h3><ul><li><p>删除视图只是删除视图的定义，并不会删除基表的数据。</p></li><li><p>删除视图的语法是：</p><pre class="line-numbers language-none"><code class="language-none">DROP VIEW IF EXISTS 视图名称;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">DROP VIEW IF EXISTS 视图名称1,视图名称2,视图名称3,...;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">DROP VIEW empvu80;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>说明：基于视图a、b创建了新的视图c，如果将视图a或者视图b删除，会导致视图c的查询失败。这样的视图c需要手动删除或修改，否则影响使用。</p></li></ul><hr><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h2><hr><h3 id="7-1-视图优点"><a href="#7-1-视图优点" class="headerlink" title="7. 1 视图优点"></a>7. 1 视图优点</h3><p><strong>1. 操作简单</strong></p><p>将经常使用的查询操作定义为视图，可以使开发人员不需要关心视图对应的数据表的结构、表与表之间的关联关系，也不需要关心数据表之间的业务逻辑和查询条件，而只需要简单地操作视图即可，极大简化了开发人员对数据库的操作。</p><p><strong>2. 减少数据冗余</strong></p><p>视图跟实际数据表不一样，它存储的是查询语句。所以，在使用的时候，我们要通过定义视图的查询语句来获取结果集。而视图本身不存储数据，不占用数据存储的资源，减少了数据冗余。</p><p><strong>3. 数据安全</strong></p><p>MySQL将用户对数据的<code>访问限制</code>在某些数据的结果集上，而这些数据的结果集可以使用视图来实现。用户不必直接查询或操作数据表。这也可以理解为视图具有<code>隔离性</code>。视图相当于在用户和实际的数据表之间加了一层虚拟表。<br><img src="https://new-wangz.github.io/2022/04/20/%E7%AC%AC14%E7%AB%A0-%E8%A7%86%E5%9B%BE/1650463730838.png" alt="1650463730838"></p><p>同时，MySQL可以根据权限将用户对数据的访问限制在某些视图上， <strong>用户不需要查询数据表，可以直接通过视图获取数据表中的信息</strong> 。这在一定程度上保障了数据表中数据的安全性。</p><p><strong>4. 适应灵活多变的需求</strong> 当业务系统的需求发生变化后，如果需要改动数据表的结构，则工作量相对较大，可以使用视图来减少改动的工作量。这种方式在实际工作中使用得比较多。</p><p><strong>5. 能够分解复杂的查询逻辑</strong> 数据库中如果存在复杂的查询逻辑，则可以将问题进行分解，创建多个视图获取数据，再将创建的多个视图结合起来，完成复杂的查询逻辑。</p><h3 id="7-2-视图不足"><a href="#7-2-视图不足" class="headerlink" title="7. 2 视图不足"></a>7. 2 视图不足</h3><p>如果我们在实际数据表的基础上创建了视图，那么， <strong>如果实际数据表的结构变更了，我们就需要及时对相关的视图进行相应的维护</strong> 。特别是嵌套的视图（就是在视图的基础上创建视图），维护会变得比较复杂，<code>可读性不好</code>，容易变成系统的潜在隐患。因为创建视图的 SQL 查询可能会对字段重命名，也可能包含复杂的逻辑，这些都会增加维护的成本。</p><p>实际项目中，如果视图过多，会导致数据库维护成本的问题。</p><p>所以，在创建视图的时候，你要结合实际项目需求，综合考虑视图的优点和不足，这样才能正确使用视图，使系统整体达到最优。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>存储过程与函数</title>
      <link href="/2022/07/17/di-15-zhang-cun-chu-guo-cheng-yu-han-shu/"/>
      <url>/2022/07/17/di-15-zhang-cun-chu-guo-cheng-yu-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="第15章-存储过程与函数"><a href="#第15章-存储过程与函数" class="headerlink" title="第15章_存储过程与函数"></a>第15章_存储过程与函数</h1><p>MySQL从 5. 0 版本开始支持存储过程和函数。存储过程和函数能够将复杂的SQL逻辑封装在一起，应用程序无须关注存储过程和函数内部复杂的SQL逻辑，而只需要简单地调用存储过程和函数即可。</p><hr><h2 id="1-存储过程概述"><a href="#1-存储过程概述" class="headerlink" title="1. 存储过程概述"></a>1. 存储过程概述</h2><hr><h3 id="1-1-理解"><a href="#1-1-理解" class="headerlink" title="1. 1 理解"></a>1. 1 理解</h3><p><strong>含义</strong> ：存储过程的英文是 <code>Stored Procedure</code>。它的思想很简单，就是一组经过<code>预先编译</code>的 SQL 语句的封装。</p><p>执行过程：存储过程预先存储在 MySQL 服务器上，需要执行的时候，客户端只需要向服务器端发出调用存储过程的命令，服务器端就可以把预先存储好的这一系列 SQL 语句全部执行。</p><p><strong>好处</strong> ：</p><ol><li>简化操作，提高了sql语句的重用性，减少了开发程序员的压力</li><li>减少操作过程中的失误，提高效率</li><li>减少网络传输量（客户端不需要把所有的 SQL 语句通过网络发给服务器）</li><li>减少了 SQL 语句暴露在网上的风险，也提高了数据查询的安全性</li></ol><p><strong>和视图、函数的对比</strong> ：</p><p>它和视图有着同样的优点，清晰、安全，还可以减少网络传输量。不过它和视图不同，视图是<code>虚拟表</code>，通常不对底层数据表直接操作，而存储过程是程序化的 SQL，可以<code>直接操作底层数据表</code>，相比于面向集合的操作方式，能够实现一些更复杂的数据处理。</p><p>一旦存储过程被创建出来，使用它就像使用函数一样简单，我们直接通过调用存储过程名即可。相较于函数，存储过程是<code>没有返回值</code>的。</p><h3 id="1-2-分类"><a href="#1-2-分类" class="headerlink" title="1. 2 分类"></a>1. 2 分类</h3><p>存储过程的参数类型可以是IN、OUT和INOUT。根据这点分类如下：</p><ol><li>没有参数（无参数无返回）</li><li>仅仅带 IN 类型（有参数无返回）</li><li>仅仅带 OUT 类型（无参数有返回）</li><li>既带 IN 又带 OUT（有参数有返回）</li><li>带 INOUT（有参数有返回）</li></ol><p>注意：IN、OUT、INOUT 都可以在一个存储过程中带多个。</p><hr><h2 id="2-创建存储过程"><a href="#2-创建存储过程" class="headerlink" title="2. 创建存储过程"></a>2. 创建存储过程</h2><hr><h3 id="2-1-语法分析"><a href="#2-1-语法分析" class="headerlink" title="2. 1 语法分析"></a>2. 1 语法分析</h3><p>语法：</p><pre class="line-numbers language-none"><code class="language-none">CREATE PROCEDURE 存储过程名(IN|OUT|INOUT 参数名 参数类型,...)[characteristics ...]BEGIN存储过程体END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类似于Java中的方法：</p><pre class="line-numbers language-none"><code class="language-none">修饰符 返回类型 方法名(参数类型 参数名,...)&#123;方法体;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>说明：</p><ol><li><p>参数前面的符号的意思</p><ul><li><code>IN</code>：当前参数为输入参数，也就是表示入参；<br>存储过程只是读取这个参数的值。如果没有定义参数种类，<code>默认就是 IN</code>，表示输入参数。</li><li><code>OUT</code>：当前参数为输出参数，也就是表示出参；<br>执行完成之后，调用这个存储过程的客户端或者应用程序就可以读取这个参数返回的值了。</li><li><code>INOUT</code>：当前参数既可以为输入参数，也可以为输出参数。</li></ul></li><li><p>形参类型可以是 MySQL数据库中的任意类型。</p></li><li><p><code>characteristics</code> 表示创建存储过程时指定的对存储过程的约束条件，其取值信息如下：</p><pre class="line-numbers language-none"><code class="language-none">LANGUAGE SQL| [NOT] DETERMINISTIC| &#123; CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA &#125;| SQL SECURITY &#123; DEFINER | INVOKER &#125;| COMMENT &#39;string&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>LANGUAGE SQL</code>：说明存储过程执行体是由SQL语句组成的，当前系统支持的语言为SQL。</p></li><li><p><code>[NOT] DETERMINISTIC</code>：指明存储过程执行的结果是否确定。DETERMINISTIC表示结果是确定的。每次执行存储过程时，相同的输入会得到相同的输出。NOT DETERMINISTIC表示结果是不确定的，相同的输入可能得到不同的输出。如果没有指定任意一个值，默认为NOT DETERMINISTIC。</p></li><li><pre><code>&#123; CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA &#125;<pre class="line-numbers language-none"><code class="language-none">  ：指明子程序使用SQL语句的限制。  - CONTAINS SQL表示当前存储过程的子程序包含SQL语句，但是并不包含读写数据的SQL语句；  - NO SQL表示当前存储过程的子程序中不包含任何SQL语句；  - READS SQL DATA表示当前存储过程的子程序中包含读数据的SQL语句；  - MODIFIES SQL DATA表示当前存储过程的子程序中包含写数据的SQL语句。  - 默认情况下，系统会指定为CONTAINS SQL。- &#96;&#96;&#96;  SQL SECURITY &#123; DEFINER | INVOKER &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>：执行当前存储过程的权限，即指明哪些用户能够执行当前存储过程。- `DEFINER`表示只有当前存储过程的创建者或者定义者才能执行当前存储过程；- `INVOKER`表示拥有当前存储过程的访问权限的用户能够执行当前存储过程。- 如果没有设置相关的值，则MySQL默认指定值为DEFINER。</code></pre></li><li><p><code>COMMENT &#39;string&#39;</code>：注释信息，可以用来描述存储过程。</p></li></ul></li><li><p>存储过程体中可以有多条 SQL 语句，如果仅仅一条SQL 语句，则可以省略 BEGIN 和 END<br>编写存储过程并不是一件简单的事情，可能存储过程中需要复杂的 SQL 语句。</p><pre class="line-numbers language-none"><code class="language-none">1. BEGIN...END：BEGIN...END 中间包含了多个语句，每个语句都以（;）号为结束符。2. DECLARE：DECLARE 用来声明变量，使用的位置在于 BEGIN...END 语句中间，而且需要在其他语句使用之前进行变量的声明。3. SET：赋值语句，用于对变量进行赋值。4. SELECT... INTO：把从数据表中查询的结果存放到变量中，也就是为变量赋值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>需要设置新的结束标记</p><pre class="line-numbers language-none"><code class="language-none">DELIMITER 新的结束标记<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为MySQL默认的语句结束符号为分号‘;’。为了避免与存储过程中SQL语句结束符相冲突，需要使用DELIMITER改变存储过程的结束符。</p><p>比如：“DELIMITER &#x2F;&#x2F;”语句的作用是将MySQL的结束符设置为&#x2F;&#x2F;，并以“END &#x2F;&#x2F;”结束存储过程。存储过程定义完毕之后再使用“DELIMITER ;”恢复默认结束符。DELIMITER也可以指定其他符号作为结束符。</p><p>当使用DELIMITER命令时，应该避免使用反斜杠（‘\’）字符，因为反斜线是MySQL的转义字符。</p><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">DELIMITER $CREATE PROCEDURE 存储过程名(IN|OUT|INOUT 参数名 参数类型,...)[characteristics ...]BEGINsql语句1;sql语句2;END $<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="2-2-代码举例"><a href="#2-2-代码举例" class="headerlink" title="2. 2 代码举例"></a>2. 2 代码举例</h3><p>举例 1 ：创建存储过程select_all_data()，查看 emps 表的所有数据</p><pre class="line-numbers language-none"><code class="language-none">DELIMITER $CREATE PROCEDURE select_all_data()BEGINSELECT * FROM emps;END $DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例 2 ：创建存储过程avg_employee_salary()，返回所有员工的平均工资</p><pre class="line-numbers language-none"><code class="language-none">DELIMITER &#x2F;&#x2F;CREATE PROCEDURE avg_employee_salary ()BEGINSELECT AVG(salary) AS avg_salary FROM emps;END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例 3 ：创建存储过程show_max_salary()，用来查看“emps”表的最高薪资值。</p><pre class="line-numbers language-none"><code class="language-none">CREATE PROCEDURE show_max_salary()LANGUAGE SQLNOT DETERMINISTICCONTAINS SQLSQL SECURITY DEFINERCOMMENT &#39;查看最高薪资&#39;BEGINSELECT MAX(salary) FROM emps;END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例 4 ：创建存储过程show_min_salary()，查看“emps”表的最低薪资值。并将最低薪资通过OUT参数“ms”输出</p><pre class="line-numbers language-none"><code class="language-none">DELIMITER &#x2F;&#x2F;CREATE PROCEDURE show_min_salary(OUT ms DOUBLE)BEGINSELECT MIN(salary) INTO ms FROM emps;END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例 5 ：创建存储过程show_someone_salary()，查看“emps”表的某个员工的薪资，并用IN参数empname输入员工姓名。</p><pre class="line-numbers language-none"><code class="language-none">DELIMITER &#x2F;&#x2F;CREATE PROCEDURE show_someone_salary(IN empname VARCHAR( 20 ))BEGINSELECT salary FROM emps WHERE ename &#x3D; empname;END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例 6 ：创建存储过程show_someone_salary2()，查看“emps”表的某个员工的薪资，并用IN参数empname输入员工姓名，用OUT参数empsalary输出员工薪资。</p><pre class="line-numbers language-none"><code class="language-none">DELIMITER &#x2F;&#x2F;CREATE PROCEDURE show_someone_salary2(IN empname VARCHAR( 20 ),OUT empsalary DOUBLE)BEGINSELECT salary INTO empsalary FROM emps WHERE ename &#x3D; empname;END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例 7 ：创建存储过程show_mgr_name()，查询某个员工领导的姓名，并用INOUT参数“empname”输入员工姓名，输出领导的姓名。</p><pre class="line-numbers language-none"><code class="language-none">DELIMITER &#x2F;&#x2F;CREATE PROCEDURE show_mgr_name(INOUT empname VARCHAR( 20 ))BEGINSELECT ename INTO empname FROM empsWHERE eid &#x3D; (SELECT MID FROM emps WHERE ename&#x3D;empname);END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="3-调用存储过程"><a href="#3-调用存储过程" class="headerlink" title="3. 调用存储过程"></a>3. 调用存储过程</h2><hr><h3 id="3-1-调用格式"><a href="#3-1-调用格式" class="headerlink" title="3. 1 调用格式"></a>3. 1 调用格式</h3><p>存储过程有多种调用方法。存储过程必须使用CALL语句调用，并且存储过程和数据库相关，如果要执行其他数据库中的存储过程，需要指定数据库名称，例如CALL dbname.procname。</p><pre class="line-numbers language-none"><code class="language-none">CALL 存储过程名(实参列表)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>格式：</strong></p><ol><li><p>调用in模式的参数：</p><pre class="line-numbers language-none"><code class="language-none">CALL sp1(&#39;值&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>调用out模式的参数：</p><pre class="line-numbers language-none"><code class="language-none">SET @name;CALL sp1(@name);SELECT @name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>调用inout模式的参数：</p><pre class="line-numbers language-none"><code class="language-none">SET @name&#x3D;值;CALL sp1(@name);SELECT @name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="3-2-代码举例"><a href="#3-2-代码举例" class="headerlink" title="3. 2 代码举例"></a>3. 2 代码举例</h3><p><strong>举例 1 ：</strong></p><pre class="line-numbers language-none"><code class="language-none">DELIMITER &#x2F;&#x2F;CREATE PROCEDURE CountProc(IN sid INT,OUT num INT)BEGINSELECT COUNT(*) INTO num FROM fruitsWHERE s_id &#x3D; sid;END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用存储过程：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; CALL CountProc ( 101 , @num);Query OK, 1 row affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看返回结果：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT @num;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该存储过程返回了指定 s_id&#x3D;101 的水果商提供的水果种类，返回值存储在num变量中，使用SELECT查看，返回结果为 3 。</p><p><strong>举例 2 ：</strong> 创建存储过程，实现累加运算，计算 1+2+…+n 等于多少。具体的代码如下：</p><pre class="line-numbers language-none"><code class="language-none">DELIMITER &#x2F;&#x2F;CREATE PROCEDURE &#96;add_num&#96;(IN n INT)BEGINDECLARE i INT;DECLARE sum INT;SET i &#x3D; 1 ;SET sum &#x3D; 0 ;WHILE i &lt;&#x3D; n DOSET sum &#x3D; sum + i;SET i &#x3D; i + 1 ;        END WHILE;        SELECT sum;END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你用的是 Navicat 工具，那么在编写存储过程的时候，Navicat 会自动设置 DELIMITER 为其他符号，我们不需要再进行 DELIMITER 的操作。</p><p>直接使用 <code>CALL add_num(50);</code>即可。这里我传入的参数为50，也就是统计1+2+…+50的积累之和。</p><h3 id="3-3-如何调试"><a href="#3-3-如何调试" class="headerlink" title="3. 3 如何调试"></a>3. 3 如何调试</h3><p>在 MySQL 中，存储过程不像普通的编程语言（比如 VC++、Java 等）那样有专门的集成开发环境。因此，你可以通过 SELECT 语句，把程序执行的中间结果查询出来，来调试一个 SQL 语句的正确性。调试成功之后，把 SELECT 语句后移到下一个 SQL 语句之后，再调试下一个 SQL 语句。这样<code>逐步推进</code>，就可以完成对存储过程中所有操作的调试了。当然，你也可以把存储过程中的 SQL 语句复制出来，逐段单独调试。</p><hr><h2 id="4-存储函数的使用"><a href="#4-存储函数的使用" class="headerlink" title="4. 存储函数的使用"></a>4. 存储函数的使用</h2><hr><p>前面学习了很多函数，使用这些函数可以对数据进行的各种处理操作，极大地提高用户对数据库的管理效率。MySQL支持自定义函数，定义好之后，调用方式与调用MySQL预定义的系统函数一样。</p><h3 id="4-1-语法分析"><a href="#4-1-语法分析" class="headerlink" title="4. 1 语法分析"></a>4. 1 语法分析</h3><p>学过的函数：LENGTH、SUBSTR、CONCAT等</p><p>语法格式：</p><pre class="line-numbers language-none"><code class="language-none">CREATE FUNCTION 函数名(参数名 参数类型,...)RETURNS 返回值类型[characteristics ...]BEGIN函数体 #函数体中肯定有 RETURN 语句END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ol><li>参数列表：指定参数为IN、OUT或INOUT只对PROCEDURE是合法的，FUNCTION中总是默认为IN参数。</li><li>RETURNS type 语句表示函数返回数据的类型；<br>RETURNS子句只能对FUNCTION做指定，对函数而言这是<code>强制</code>的。它用来指定函数的返回类型，而且函数体必须包含一个<code>RETURN value</code>语句。</li><li>characteristic 创建函数时指定的对函数的约束。取值与创建存储过程时相同，这里不再赘述。</li><li>函数体也可以用BEGIN…END来表示SQL代码的开始和结束。如果函数体只有一条语句，也可以省略BEGIN…END。</li></ol><h3 id="4-2-调用存储函数"><a href="#4-2-调用存储函数" class="headerlink" title="4. 2 调用存储函数"></a>4. 2 调用存储函数</h3><p>在MySQL中，存储函数的使用方法与MySQL内部函数的使用方法是一样的。换言之，用户自己定义的存储函数与MySQL内部函数是一个性质的。区别在于，存储函数是<code>用户自己定义</code>的，而内部函数是MySQL的<code>开发者定义</code>的。</p><pre class="line-numbers language-none"><code class="language-none">SELECT 函数名(实参列表)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-3-代码举例"><a href="#4-3-代码举例" class="headerlink" title="4. 3 代码举例"></a>4. 3 代码举例</h3><p><strong>举例 1 ：</strong></p><p>创建存储函数，名称为email_by_name()，参数定义为空，该函数查询Abel的email，并返回，数据类型为字符串型。</p><pre class="line-numbers language-none"><code class="language-none">DELIMITER &#x2F;&#x2F;CREATE FUNCTION email_by_name()RETURNS VARCHAR( 25 )DETERMINISTICCONTAINS SQLBEGINRETURN (SELECT email FROM employees WHERE last_name &#x3D; &#39;Abel&#39;);END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用：</p><pre class="line-numbers language-none"><code class="language-none">SELECT email_by_name();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>举例 2 ：</strong></p><p>创建存储函数，名称为email_by_id()，参数传入emp_id，该函数查询emp_id的email，并返回，数据类型为字符串型。</p><pre class="line-numbers language-none"><code class="language-none">DELIMITER &#x2F;&#x2F;CREATE FUNCTION email_by_id(emp_id INT)RETURNS VARCHAR( 25 )DETERMINISTICCONTAINS SQLBEGINRETURN (SELECT email FROM employees WHERE employee_id &#x3D; emp_id);END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用：</p><pre class="line-numbers language-none"><code class="language-none">SET @emp_id &#x3D; 102 ;SELECT email_by_id( 102 );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>举例 3 ：</strong></p><p>创建存储函数count_by_id()，参数传入dept_id，该函数查询dept_id部门的员工人数，并返回，数据类型为整型。</p><pre class="line-numbers language-none"><code class="language-none">DELIMITER &#x2F;&#x2F;CREATE FUNCTION count_by_id(dept_id INT)RETURNS INTLANGUAGE SQLNOT DETERMINISTICREADS SQL DATASQL SECURITY DEFINERCOMMENT &#39;查询部门平均工资&#39;BEGINRETURN (SELECT COUNT(*) FROM employees WHERE department_id &#x3D; dept_id);END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用：</p><pre class="line-numbers language-none"><code class="language-none">SET @dept_id &#x3D; 50 ;SELECT count_by_id(@dept_id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><p>若在创建存储函数中报错“<code>you might want to use the less safe log_bin_trust_function_creators variable</code>”，有两种处理方法：</p><ul><li><p>方式 1 ：加上必要的函数特性“[NOT] DETERMINISTIC”和“{CONTAINS SQL | NO SQL | READS SQL DATA |MODIFIES SQL DATA}”</p></li><li><p>方式 2 ：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SET GLOBAL log_bin_trust_function_creators &#x3D; 1 ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="4-4-对比存储函数和存储过程"><a href="#4-4-对比存储函数和存储过程" class="headerlink" title="4. 4 对比存储函数和存储过程"></a>4. 4 对比存储函数和存储过程</h3><table><thead><tr><th></th><th>关键字</th><th>调用语法</th><th>返回值</th><th>应用场景</th></tr></thead><tbody><tr><td>存储过程</td><td>PROCEDURE</td><td>CALL 存储过程()</td><td>理解为有 0 个或多个</td><td>一般用于更新</td></tr><tr><td>存储函数</td><td>FUNCTION</td><td>SELECT 函数()</td><td>只能是一个</td><td>一般用于查询结果为一个值并返回时</td></tr></tbody></table><p>此外， <strong>存储函数可以放在查询语句中使用，存储过程不行</strong> 。反之，存储过程的功能更加强大，包括能够执行对表的操作（比如创建表，删除表等）和事务操作，这些功能是存储函数不具备的。</p><hr><h2 id="5-存储过程和函数的查看、修改、删除"><a href="#5-存储过程和函数的查看、修改、删除" class="headerlink" title="5. 存储过程和函数的查看、修改、删除"></a>5. 存储过程和函数的查看、修改、删除</h2><hr><h3 id="5-1-查看"><a href="#5-1-查看" class="headerlink" title="5. 1 查看"></a>5. 1 查看</h3><p>创建完之后，怎么知道我们创建的存储过程、存储函数是否成功了呢？</p><p>MySQL存储了存储过程和函数的状态信息，用户可以使用SHOW STATUS语句或SHOW CREATE语句来查看，也可直接从系统的information_schema数据库中查询。这里介绍 3 种方法。</p><p><strong>1. 使用SHOW CREATE语句查看存储过程和函数的创建信息</strong></p><p>基本语法结构如下：</p><pre class="line-numbers language-none"><code class="language-none">SHOW CREATE &#123;PROCEDURE | FUNCTION&#125; 存储过程名或函数名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">SHOW CREATE FUNCTION test_db.CountProc \G<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2. 使用SHOW STATUS语句查看存储过程和函数的状态信息</strong></p><p>基本语法结构如下：</p><pre class="line-numbers language-none"><code class="language-none">SHOW &#123;PROCEDURE | FUNCTION&#125; STATUS [LIKE &#39;pattern&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个语句返回子程序的特征，如数据库、名字、类型、创建者及创建和修改日期。</p><p>[LIKE ‘pattern’]：匹配存储过程或函数的名称，可以省略。当省略不写时，会列出MySQL数据库中存在的所有存储过程或函数的信息。 举例：SHOW STATUS语句示例，代码如下：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SHOW PROCEDURE STATUS LIKE &#39;SELECT%&#39; \G*************************** 1. row ***************************Db: test_dbName: SelectAllDataType: PROCEDUREDefiner: root@localhostModified: 2021 - 10 - 16 15 :55:Created: 2021 - 10 - 16 15 :55:Security_type: DEFINERComment:character_set_client: utf8mbcollation_connection: utf8mb4_general_ciDatabase Collation: utf8mb4_general_ci1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3. 从information_schema.Routines表中查看存储过程和函数的信息</strong></p><p>MySQL中存储过程和函数的信息存储在information_schema数据库下的Routines表中。可以通过查询该表的记录来查询存储过程和函数的信息。其基本语法形式如下：</p><pre class="line-numbers language-none"><code class="language-none">SELECT * FROM information_schema.RoutinesWHERE ROUTINE_NAME&#x3D;&#39;存储过程或函数的名&#39;[AND ROUTINE_TYPE&#x3D;&#123;&#39;PROCEDURE|FUNCTION&#39;&#125;];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>说明：如果在MySQL数据库中存在存储过程和函数名称相同的情况，最好指定ROUTINE_TYPE查询条件来指明查询的是存储过程还是函数。</p><p>举例：从Routines表中查询名称为CountProc的存储函数的信息，代码如下：</p><pre class="line-numbers language-none"><code class="language-none">SELECT * FROM information_schema.RoutinesWHERE ROUTINE_NAME&#x3D;&#39;count_by_id&#39; AND ROUTINE_TYPE &#x3D; &#39;FUNCTION&#39; \G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-2-修改"><a href="#5-2-修改" class="headerlink" title="5. 2 修改"></a>5. 2 修改</h3><p>修改存储过程或函数，不影响存储过程或函数功能，只是修改相关特性。使用ALTER语句实现。</p><pre class="line-numbers language-none"><code class="language-none">ALTER &#123;PROCEDURE | FUNCTION&#125; 存储过程或函数的名 [characteristic ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，characteristic指定存储过程或函数的特性，其取值信息与创建存储过程、函数时的取值信息略有不同。</p><pre class="line-numbers language-none"><code class="language-none">&#123; CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA &#125;| SQL SECURITY &#123; DEFINER | INVOKER &#125;| COMMENT &#39;string&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p><code>CONTAINS SQL</code>，表示子程序包含SQL语句，但不包含读或写数据的语句。</p></li><li><p><code>NO SQL</code>，表示子程序中不包含SQL语句。</p></li><li><p><code>READS SQL DATA</code>，表示子程序中包含读数据的语句。</p></li><li><p><code>MODIFIES SQL DATA</code>，表示子程序中包含写数据的语句。</p></li><li><p>&#96;&#96;&#96;<br>SQL SECURITY { DEFINER | INVOKER }</p><pre class="line-numbers language-none"><code class="language-none">  ，指明谁有权限来执行。  - &#96;DEFINER&#96;，表示只有定义者自己才能够执行。  - &#96;INVOKER&#96;，表示调用者可以执行。- &#96;COMMENT &#39;string&#39;&#96;，表示注释信息。&gt; 修改存储过程使用ALTER PROCEDURE语句，修改存储函数使用ALTER FUNCTION语句。但是，这两个语句的结构是一样的，语句中的所有参数也是一样的。**举例 1 ：**修改存储过程CountProc的定义。将读写权限改为MODIFIES SQL DATA，并指明调用者可以执行，代码如下：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ALTER PROCEDURE CountProc<br>MODIFIES SQL DATA<br>SQL SECURITY INVOKER ;</p><pre class="line-numbers language-none"><code class="language-none">查询修改后的信息：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>SELECT specific_name,sql_data_access,security_type<br>FROM information_schema.<code>ROUTINES</code><br>WHERE routine_name &#x3D; ‘CountProc’ AND routine_type &#x3D; ‘PROCEDURE’;</p><pre class="line-numbers language-none"><code class="language-none">结果显示，存储过程修改成功。从查询的结果可以看出，访问数据的权限（SQL_DATA_ ACCESS）已经变成MODIFIES SQL DATA，安全类型（SECURITY_TYPE）已经变成INVOKER。**举例 2 ：**修改存储函数CountProc的定义。将读写权限改为READS SQL DATA，并加上注释信息“FIND NAME”，代码如下：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ALTER FUNCTION CountProc<br>READS SQL DATA<br>COMMENT ‘FIND NAME’ ;</p><pre class="line-numbers language-none"><code class="language-none">存储函数修改成功。从查询的结果可以看出，访问数据的权限（SQL_DATA_ACCESS）已经变成READS SQL DATA，函数注释（ROUTINE_COMMENT）已经变成FIND NAME。### 5. 3 删除删除存储过程和函数，可以使用DROP语句，其语法结构如下：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DROP {PROCEDURE | FUNCTION} [IF EXISTS] 存储过程或函数的名</p><pre class="line-numbers language-none"><code class="language-none">IF EXISTS：如果程序或函数不存储，它可以防止发生错误，产生一个用SHOW WARNINGS查看的警告。举例：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>DROP PROCEDURE CountProc;<br>DROP FUNCTION CountProc;</p></li></ul><p>&#96;&#96;&#96;</p><hr><h2 id="6-关于存储过程使用的争议"><a href="#6-关于存储过程使用的争议" class="headerlink" title="6. 关于存储过程使用的争议"></a>6. 关于存储过程使用的争议</h2><hr><p>尽管存储过程有诸多优点，但是对于存储过程的使用， <strong>一直都存在着很多争议</strong> ，比如有些公司对于大型项目要求使用存储过程，而有些公司在手册中明确禁止使用存储过程，为什么这些公司对存储过程的使用需求差别这么大呢？</p><h3 id="6-1-优点"><a href="#6-1-优点" class="headerlink" title="6. 1 优点"></a>6. 1 优点</h3><ol><li><strong>存储过程可以一次编译多次使用。</strong>存储过程只在创建时进行编译，之后的使用都不需要重新编译，这就提升了 SQL 的执行效率。</li><li><strong>可以减少开发工作量。</strong> 将代码<code>封装</code>成模块，实际上是编程的核心思想之一，这样可以把复杂的问题拆解成不同的模块，然后模块之间可以<code>重复使用</code>，在减少开发工作量的同时，还能保证代码的结构清晰。</li><li><strong>存储过程的安全性强。</strong> 我们在设定存储过程的时候可以<code>设置对用户的使用权限</code>，这样就和视图一样具有较强的安全性。</li><li><strong>可以减少网络传输量。</strong> 因为代码封装到存储过程中，每次使用只需要调用存储过程即可，这样就减少了网络传输量。</li><li><strong>良好的封装性。</strong> 在进行相对复杂的数据库操作时，原本需要使用一条一条的 SQL 语句，可能要连接多次数据库才能完成的操作，现在变成了一次存储过程，只需要<code>连接一次即可</code>。</li></ol><h3 id="6-2-缺点"><a href="#6-2-缺点" class="headerlink" title="6. 2 缺点"></a>6. 2 缺点</h3><p>基于上面这些优点，不少大公司都要求大型项目使用存储过程，比如微软、IBM 等公司。但是国内的阿里并不推荐开发人员使用存储过程，这是为什么呢？</p><blockquote><p><strong>阿里开发规范</strong></p><p>【强制】禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。</p></blockquote><p>存储过程虽然有诸如上面的好处，但缺点也是很明显的。</p><ol><li><strong>可移植性差。</strong> 存储过程不能跨数据库移植，比如在 MySQL、Oracle 和 SQL Server 里编写的存储过程，在换成其他数据库时都需要重新编写。</li><li><strong>调试困难。</strong> 只有少数 DBMS 支持存储过程的调试。对于复杂的存储过程来说，开发和维护都不容易。虽然也有一些第三方工具可以对存储过程进行调试，但要收费。</li><li><strong>存储过程的版本管理很困难。</strong> 比如数据表索引发生变化了，可能会导致存储过程失效。我们在开发软件的时候往往需要进行版本管理，但是存储过程本身没有版本控制，版本迭代更新的时候很麻烦。</li><li><strong>它不适合高并发的场景。</strong> 高并发的场景需要减少数据库的压力，有时数据库会采用分库分表的方式，而且对可扩展性要求很高，在这种情况下，存储过程会变得难以维护，<code>增加数据库的压力</code>，显然就不适用了。</li></ol><p>小结：</p><p>存储过程既方便，又有局限性。尽管不同的公司对存储过程的态度不一，但是对于我们开发人员来说，不论怎样，掌握存储过程都是必备的技能之一。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量、流程控制与游标</title>
      <link href="/2022/07/17/di-16-zhang-bian-liang-liu-cheng-kong-zhi-yu-you-biao/"/>
      <url>/2022/07/17/di-16-zhang-bian-liang-liu-cheng-kong-zhi-yu-you-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="第16章-变量、流程控制与游标"><a href="#第16章-变量、流程控制与游标" class="headerlink" title="第16章_变量、流程控制与游标"></a>第16章_变量、流程控制与游标</h1><h2 id="1-变量"><a href="#1-变量" class="headerlink" title="1. 变量"></a>1. 变量</h2><hr><p>在MySQL数据库的存储过程和函数中，可以使用变量来存储查询或计算的中间结果数据，或者输出最终的结果数据。</p><p>在 MySQL 数据库中，变量分为<code>系统变量</code>以及<code>用户自定义变量</code>。</p><h3 id="1-1-系统变量"><a href="#1-1-系统变量" class="headerlink" title="1. 1 系统变量"></a>1. 1 系统变量</h3><h4 id="1-1-1-系统变量分类"><a href="#1-1-1-系统变量分类" class="headerlink" title="1. 1. 1 系统变量分类"></a>1. 1. 1 系统变量分类</h4><p>变量由系统定义，不是用户定义，属于<code>服务器</code>层面。启动MySQL服务，生成MySQL服务实例期间，MySQL将为MySQL服务器内存中的系统变量赋值，这些系统变量定义了当前MySQL服务实例的属性、特征。这些系统变量的值要么是<code>编译MySQL时参数</code>的默认值，要么是<code>配置文件</code>（例如my.ini等）中的参数值。大家可以通过网址 <a href="https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html">https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html</a> 查看MySQL文档的系统变量。</p><p>系统变量分为全局系统变量（需要添加<code>global</code> 关键字）以及会话系统变量（需要添加 <code>session</code> 关键字），有时也把全局系统变量简称为全局变量，有时也把会话系统变量称为local变量。 <strong>如果不写，默认会话级别。</strong> 静态变量（在 MySQL 服务实例运行期间它们的值不能使用 set 动态修改）属于特殊的全局系统变量。</p><p>每一个MySQL客户机成功连接MySQL服务器后，都会产生与之对应的会话。会话期间，MySQL服务实例会在MySQL服务器内存中生成与该会话对应的会话系统变量，这些会话系统变量的初始值是全局系统变量值的复制。如下图：</p><p><img src="/../pic/%E7%AC%AC16%E7%AB%A0_%E5%8F%98%E9%87%8F%E3%80%81%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%B8%B8%E6%A0%87/1650603237705.png" alt="1650603237705"></p><ul><li>全局系统变量针对于所有会话（连接）有效，但<code>不能跨重启</code></li><li>会话系统变量仅针对于当前会话（连接）有效。会话期间，当前会话对某个会话系统变量值的修改，不会影响其他会话同一个会话系统变量的值。</li><li>会话 1 对某个全局系统变量值的修改会导致会话 2 中同一个全局系统变量值的修改。</li></ul><p>在MySQL中有些系统变量只能是全局的，例如 max_connections 用于限制服务器的最大连接数；有些系统变量作用域既可以是全局又可以是会话，例如 character_set_client 用于设置客户端的字符集；有些系统变量的作用域只能是当前会话，例如 pseudo_thread_id 用于标记当前会话的 MySQL 连接 ID。</p><h4 id="1-1-2-查看系统变量"><a href="#1-1-2-查看系统变量" class="headerlink" title="1. 1. 2 查看系统变量"></a>1. 1. 2 查看系统变量</h4><ul><li><p><strong>查看所有或部分系统变量</strong></p><pre class="line-numbers language-none"><code class="language-none">#查看所有全局变量SHOW GLOBAL VARIABLES;#查看所有会话变量SHOW SESSION VARIABLES;或SHOW VARIABLES;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">#查看满足条件的部分系统变量。SHOW GLOBAL VARIABLES LIKE &#39;%标识符%&#39;;#查看满足条件的部分会话变量SHOW SESSION VARIABLES LIKE &#39;%标识符%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">SHOW GLOBAL VARIABLES LIKE &#39;admin_%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>查看指定系统变量</strong><br>作为 MySQL 编码规范，MySQL 中的系统变量以<code>两个“@”</code>开头，其中“@@global”仅用于标记全局系统变量，“@@session”仅用于标记会话系统变量。“@@”首先标记会话系统变量，如果会话系统变量不存在，则标记全局系统变量。</p><pre class="line-numbers language-none"><code class="language-none">#查看指定的系统变量的值SELECT @@global.变量名;#查看指定的会话变量的值SELECT @@session.变量名;#或者SELECT @@变量名;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>修改系统变量的值</strong></p><p>有些时候，数据库管理员需要修改系统变量的默认值，以便修改当前会话或者MySQL服务实例的属性、特征。具体方法：<br>方式 1 ：修改MySQL<code>配置文件</code>，继而修改MySQL系统变量的值（该方法需要重启MySQL服务）</p><p>方式 2 ：在MySQL服务运行期间，使用“set”命令重新设置系统变量的值</p><pre class="line-numbers language-none"><code class="language-none">SET @@session.变量名&#x3D;变量值;#方式 2 ：SET SESSION 变量名&#x3D;变量值;#为某个系统变量赋值#方式 1 ：SET @@global.变量名&#x3D;变量值;#方式 2 ：SET GLOBAL 变量名&#x3D;变量值;#为某个会话变量赋值#方式 1 ：SET @@session.变量名&#x3D;变量值;#方式 2 ：SET SESSION 变量名&#x3D;变量值;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">SELECT @@global.autocommit;SET GLOBAL autocommit&#x3D; 0 ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">SELECT @@session.tx_isolation;SET @@session.tx_isolation&#x3D;&#39;read-uncommitted&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">SET GLOBAL max_connections &#x3D; 1000 ;SELECT @@global.max_connections;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="1-2-用户变量"><a href="#1-2-用户变量" class="headerlink" title="1. 2 用户变量"></a>1. 2 用户变量</h3><h4 id="1-2-1-用户变量分类"><a href="#1-2-1-用户变量分类" class="headerlink" title="1. 2. 1 用户变量分类"></a>1. 2. 1 用户变量分类</h4><p>用户变量是用户自己定义的，作为 MySQL 编码规范，MySQL 中的用户变量以<code>一个“@”</code>开头。根据作用范围不同，又分为<code>会话用户变量</code>和<code>局部变量</code>。</p><ul><li>会话用户变量：作用域和会话变量一样，只对<code>当前连接</code>会话有效。</li><li>局部变量：只在 BEGIN 和 END 语句块中有效。局部变量只能在<code>存储过程和函数</code>中使用。</li></ul><h4 id="1-2-2-会话用户变量"><a href="#1-2-2-会话用户变量" class="headerlink" title="1. 2. 2 会话用户变量"></a>1. 2. 2 会话用户变量</h4><ul><li><p>变量的定义</p><pre class="line-numbers language-none"><code class="language-none">#方式 1 ：“&#x3D;”或“:&#x3D;”SET @用户变量 &#x3D; 值;SET @用户变量 :&#x3D; 值;#方式 2 ：“:&#x3D;” 或 INTO关键字SELECT @用户变量 :&#x3D; 表达式 [FROM 等子句];SELECT 表达式 INTO @用户变量 [FROM 等子句];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查看用户变量的值 （查看、比较、运算等）</p><pre class="line-numbers language-none"><code class="language-none">SELECT @用户变量<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>举例</p><pre class="line-numbers language-none"><code class="language-none">SET @a &#x3D; 1 ;SELECT @a;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">SELECT @num :&#x3D; COUNT(*) FROM employees;SELECT @num;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">SELECT AVG(salary) INTO @avgsalary FROM employees;SELECT @avgsalary;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">SELECT @big;  #查看某个未声明的变量时，将得到NULL值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="1-2-3-局部变量"><a href="#1-2-3-局部变量" class="headerlink" title="1. 2. 3 局部变量"></a>1. 2. 3 局部变量</h4><p>定义：可以使用<code>DECLARE</code>语句定义一个局部变量</p><p>作用域：仅仅在定义它的 BEGIN … END 中有效</p><p>位置：只能放在 BEGIN … END 中，而且只能放在第一句</p><pre class="line-numbers language-none"><code class="language-none">BEGIN#声明局部变量DECLARE 变量名 1 变量数据类型 [DEFAULT 变量默认值];DECLARE 变量名2,变量名3,... 变量数据类型 [DEFAULT 变量默认值];#为局部变量赋值SET 变量名1 &#x3D; 值;SELECT 值 INTO 变量名2 [FROM 子句];#查看局部变量的值SELECT 变量1,变量2,变量3;END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p><strong>定义变量</strong></p><pre class="line-numbers language-none"><code class="language-none">DECLARE 变量名 类型 [default 值];  # 如果没有DEFAULT子句，初始值为NULL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-none"><code class="language-none">DECLARE myparam INT DEFAULT 100 ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>变量赋值</strong><br>方式 1 ：一般用于赋简单的值</p><pre class="line-numbers language-none"><code class="language-none">SET 变量名&#x3D;值;SET 变量名:&#x3D;值;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>方式 2 ：一般用于赋表中的字段值</p><pre class="line-numbers language-none"><code class="language-none">SELECT 字段名或表达式 INTO 变量名 FROM 表;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>使用变量</strong> （查看、比较、运算等）</p><pre class="line-numbers language-none"><code class="language-none">SELECT 局部变量名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>举例 1 ：声明局部变量，并分别赋值为employees表中employee_id为 102 的last_name和salary</p><pre class="line-numbers language-none"><code class="language-none">DELIMITER &#x2F;&#x2F;CREATE PROCEDURE set_value()BEGINDECLARE emp_name VARCHAR( 25 );DECLARE sal DOUBLE( 10 , 2 );SELECT last_name,salary INTO emp_name,salFROM employeesWHERE employee_id &#x3D; 102 ;SELECT emp_name,sal;END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例 2 ：声明两个变量，求和并打印 （分别使用会话用户变量、局部变量的方式实现）</p><pre class="line-numbers language-none"><code class="language-none">#方式 1 ：使用用户变量SET @m&#x3D; 1 ;SET @n&#x3D; 1 ;SET @sum&#x3D;@m+@n;SELECT @sum;#方式 2 ：使用局部变量DELIMITER &#x2F;&#x2F;CREATE PROCEDURE add_value()BEGIN    #局部变量    DECLARE m INT DEFAULT 1 ;    DECLARE n INT DEFAULT 3 ;    DECLARE SUM INT;    SET SUM &#x3D; m+n;    SELECT SUM;END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例 3 ：创建存储过程“different_salary”查询某员工和他领导的薪资差距，并用IN参数emp_id接收员工id，用OUT参数dif_salary输出薪资差距结果。</p><pre class="line-numbers language-none"><code class="language-none">#声明DELIMITER &#x2F;&#x2F;CREATE PROCEDURE different_salary(IN emp_id INT,OUT dif_salary DOUBLE)BEGIN    #声明局部变量    DECLARE emp_sal,mgr_sal DOUBLE DEFAULT 0.0;    DECLARE mgr_id INT;    SELECT salary INTO emp_sal FROM employees WHERE employee_id &#x3D; emp_id;    SELECT manager_id INTO mgr_id FROM employees WHERE employee_id &#x3D; emp_id;    SELECT salary INTO mgr_sal FROM employees WHERE employee_id &#x3D; mgr_id;    SET dif_salary &#x3D; mgr_sal - emp_sal;END &#x2F;&#x2F;DELIMITER ;#调用SET @emp_id &#x3D; 102 ;CALL different_salary(@emp_id,@diff_sal);#查看SELECT @diff_sal;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-4-对比会话用户变量与局部变量"><a href="#1-2-4-对比会话用户变量与局部变量" class="headerlink" title="1. 2. 4 对比会话用户变量与局部变量"></a>1. 2. 4 对比会话用户变量与局部变量</h4><table><thead><tr><th></th><th>作用域</th><th>定义位置</th><th>语法</th></tr></thead><tbody><tr><td>会话用户变量</td><td>当前会话</td><td>会话的任何地方</td><td>加@符号，不用指定类型</td></tr><tr><td>局部变量</td><td>定义它的BEGIN END中</td><td>BEGIN END的第一句话</td><td>一般不用加@,需要指定类型</td></tr></tbody></table><hr><h2 id="2-定义条件与处理程序"><a href="#2-定义条件与处理程序" class="headerlink" title="2. 定义条件与处理程序"></a>2. 定义条件与处理程序</h2><hr><p><code>定义条件</code>是事先定义程序执行过程中可能遇到的问题，<code>处理程序</code>定义了在遇到问题时应当采取的处理方式，并且保证存储过程或函数在遇到警告或错误时能继续执行。这样可以增强存储程序处理问题的能力，避免程序异常停止运行。</p><p>说明：定义条件和处理程序在存储过程、存储函数中都是支持的。</p><h3 id="2-1-案例分析"><a href="#2-1-案例分析" class="headerlink" title="2. 1 案例分析"></a>2. 1 案例分析</h3><p><strong>案例分析</strong>：创建一个名称为“UpdateDataNoCondition”的存储过程。代码如下：</p><pre class="line-numbers language-none"><code class="language-none">DELIMITER &#x2F;&#x2F;CREATE PROCEDURE UpdateDataNoCondition()    BEGIN        SET @x &#x3D; 1 ;        UPDATE employees SET email &#x3D; NULL WHERE last_name &#x3D; &#39;Abel&#39;;        SET @x &#x3D; 2 ;        UPDATE employees SET email &#x3D; &#39;aabbel&#39; WHERE last_name &#x3D; &#39;Abel&#39;;        SET @x &#x3D; 3 ;    END &#x2F;&#x2F;DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用存储过程：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; CALL UpdateDataNoCondition();ERROR 1048 ( 23000 ): Column &#39;email&#39; cannot be nullmysql&gt; SELECT @x;+------+| @x |+------+| 1 |+------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，此时@x变量的值为 1 。结合创建存储过程的SQL语句代码可以得出：在存储过程中未定义条件和处理程序，且当存储过程中执行的SQL语句报错时，MySQL数据库会抛出错误，并退出当前SQL逻辑，不再向下继续执行。</p><h3 id="2-2-定义条件"><a href="#2-2-定义条件" class="headerlink" title="2. 2 定义条件"></a>2. 2 定义条件</h3><p>定义条件就是给MySQL中的错误码命名，这有助于存储的程序代码更清晰。它将一个<code>错误名字</code>和<code>指定的错误条件</code>关联起来。这个名字可以随后被用在定义处理程序的<code>DECLARE HANDLER</code>语句中。</p><p>定义条件使用DECLARE语句，语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">DECLARE 错误名称 CONDITION FOR 错误码（或错误条件）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>错误码的说明：</p><ul><li>&#96;&#96;&#96;<br>MySQL_error_code<pre class="line-numbers language-none"><code class="language-none">和<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>sqlstate_value<pre class="line-numbers language-none"><code class="language-none">  都可以表示MySQL的错误。  - MySQL_error_code是数值类型错误代码。  - sqlstate_value是长度为 5 的字符串类型错误代码。- 例如，在ERROR 1418 (HY000)中,1418 是MySQL_error_code，’HY000’是sqlstate_value。- 例如，在ERROR 1142 (42000)中,1142 是MySQL_error_code，’42000’是sqlstate_value。**举例 1** ： 定义“Field_Not_Be_NULL”错误名与MySQL中违反非空约束的错误类型是“ERROR 1048 (23000)”对应。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>#使用MySQL_error_code<br>DECLARE Field_Not_Be_NULL CONDITION FOR 1048 ;</li></ul><p>#使用sqlstate_value<br>DECLARE Field_Not_Be_NULL CONDITION FOR SQLSTATE ‘23000’;</p><pre class="line-numbers language-none"><code class="language-none">**举例 2** ： 定义”ERROR 1148(42000)”错误，名称为command_not_allowed。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>#使用MySQL_error_code<br>DECLARE command_not_allowed CONDITION FOR 1148 ;</p><p>#使用sqlstate_value<br>DECLARE command_not_allowed CONDITION FOR SQLSTATE ‘42000’;</p><pre class="line-numbers language-none"><code class="language-none">### 2. 3 定义处理程序可以为SQL执行过程中发生的某种类型的错误定义特殊的处理程序。定义处理程序时，使用DECLARE语句的语法如下：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>DECLARE 处理方式 HANDLER FOR 错误类型 处理语句</p><pre class="line-numbers language-none"><code class="language-none">- 处理方式     ：处理方式有 3 个取值：CONTINUE、EXIT、UNDO。  - &#96;CONTINUE&#96;：表示遇到错误不处理，继续执行。  - &#96;EXIT&#96;：表示遇到错误马上退出。  - &#96;UNDO&#96;：表示遇到错误后撤回之前的操作。MySQL中暂时不支持这样的操作。- 错误类型     （即条件）可以有如下取值：  - &#96;SQLSTATE &#39;字符串错误码&#39;&#96;：表示长度为 5 的sqlstate_value类型的错误代码；  - &#96;MySQL_error_code&#96;：匹配数值类型错误代码；  - &#96;错误名称&#96;：表示DECLARE … CONDITION定义的错误条件名称。  - &#96;SQLWARNING&#96;：匹配所有以 01 开头的SQLSTATE错误代码；  - &#96;NOT FOUND&#96;：匹配所有以 02 开头的SQLSTATE错误代码；  - &#96;SQLEXCEPTION&#96;：匹配所有没有被SQLWARNING或NOT FOUND捕获的SQLSTATE错误代码；- **处理语句** ：如果出现上述条件之一，则采用对应的处理方式，并执行指定的处理语句。语句可以是像“&#96;SET 变量 &#x3D; 值&#96;”这样的简单语句，也可以是使用&#96;BEGIN ... END&#96;编写的复合语句。定义处理程序的几种方式，代码如下：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>#方法 1 ：捕获sqlstate_value<br>DECLARE CONTINUE HANDLER FOR SQLSTATE ‘42S02’ SET @info&#x3D;’NO_SUCH_TABLE’;</p><p>#方法 2 ：捕获mysql_error_value<br>DECLARE CONTINUE HANDLER FOR 1146 SET @info &#x3D; ‘NO_SUCH_TABLE’;</p><p>#方法 3 ：先定义条件，再调用<br>DECLARE no_such_table CONDITION FOR 1146 ;<br>DECLARE CONTINUE HANDLER FOR NO_SUCH_TABLE SET @info &#x3D; ‘NO_SUCH_TABLE’;</p><p>#方法 4 ：使用SQLWARNING<br>DECLARE EXIT HANDLER FOR SQLWARNING SET @info &#x3D; ‘ERROR’;</p><p>#方法 5 ：使用NOT FOUND<br>DECLARE EXIT HANDLER FOR NOT FOUND SET @info &#x3D; ‘NO_SUCH_TABLE’;</p><p>#方法 6 ：使用SQLEXCEPTION<br>DECLARE EXIT HANDLER FOR SQLEXCEPTION SET @info &#x3D; ‘ERROR’;</p><pre class="line-numbers language-none"><code class="language-none">### 2. 4 案例解决在存储过程中，定义处理程序，捕获sqlstate_value值，当遇到MySQL_error_code值为 1048 时，执行CONTINUE操作，并且将@proc_value的值设置为-1。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>DELIMITER &#x2F;&#x2F;</p><p>CREATE PROCEDURE UpdateDataNoCondition()<br>    BEGIN<br>        #定义处理程序<br>        DECLARE CONTINUE HANDLER FOR 1048 SET @proc_value &#x3D; - 1 ;</p><pre><code>    SET @x = 1 ;    UPDATE employees SET email = NULL WHERE last_name = &#39;Abel&#39;;    SET @x = 2 ;    UPDATE employees SET email = &#39;aabbel&#39; WHERE last_name = &#39;Abel&#39;;    SET @x = 3 ;END //</code></pre><p>DELIMITER ;</p><pre class="line-numbers language-none"><code class="language-none">调用过程：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>mysql&gt; CALL UpdateDataWithCondition();<br>Query OK, 0 rows affected (0.01 sec)</p><pre class="line-numbers language-none"><code class="language-none">**举例：**创建一个名称为“InsertDataWithCondition”的存储过程，代码如下。在存储过程中，定义处理程序，捕获sqlstate_value值，当遇到sqlstate_value值为 23000 时，执行EXIT操作，并且将@proc_value的值设置为-1。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>#准备工作<br>CREATE TABLE departments<br>AS<br>SELECT * FROM atguigudb.<code>departments</code>;</p><p>ALTER TABLE departments<br>ADD CONSTRAINT uk_dept_name UNIQUE(department_id);<br>DELIMITER &#x2F;&#x2F;</p><p>CREATE PROCEDURE InsertDataWithCondition()<br>    BEGIN<br>        DECLARE duplicate_entry CONDITION FOR SQLSTATE ‘23000’ ;<br>        DECLARE EXIT HANDLER FOR duplicate_entry SET @proc_value &#x3D; - 1 ;</p><pre><code>    SET @x = 1 ;    INSERT INTO departments(department_name) VALUES(&#39;测试&#39;);    SET @x = 2 ;    INSERT INTO departments(department_name) VALUES(&#39;测试&#39;);    SET @x = 3 ;END //</code></pre><p>DELIMITER ;</p><pre class="line-numbers language-none"><code class="language-none">调用存储过程：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>mysql&gt; CALL InsertDataWithCondition();<br>Query OK, 0 rows affected (0.01 sec)</p><p>mysql&gt; SELECT @x,@proc_value;<br>+——+————-+<br>| @x | @proc_value |<br>+——+————-+<br>| 2 | - 1 |<br>+——+————-+<br>1 row in set (0.00 sec)</p><pre class="line-numbers language-none"><code class="language-none">------## 3. 流程控制------解决复杂问题不可能通过一个 SQL 语句完成，我们需要执行多个 SQL 操作。流程控制语句的作用就是控制存储过程中 SQL 语句的执行顺序，是我们完成复杂操作必不可少的一部分。只要是执行的程序，流程就分为三大类：- &#96;顺序结构&#96;：程序从上往下依次执行- &#96;分支结构&#96;：程序按条件进行选择执行，从两条或多条路径中选择一条执行- &#96;循环结构&#96;：程序满足一定条件下，重复执行一组语句针对于MySQL 的流程控制语句主要有 3 类。注意：只能用于存储程序。- &#96;条件判断语句&#96;：IF 语句和 CASE 语句- &#96;循环语句&#96;：LOOP、WHILE 和 REPEAT 语句- &#96;跳转语句&#96;：ITERATE 和 LEAVE 语句### 3. 1 分支结构之 IF- IF 语句的语法结构是：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  IF 表达式 1 THEN 操作 1<br>  [ELSEIF 表达式 2 THEN 操作2]……<br>  [ELSE 操作N]<br>  END IF<br>  <pre class="line-numbers language-none"><code class="language-none">  根据表达式的结果为TRUE或FALSE执行相应的语句。这里“[]”中的内容是可选的。- 特点：① 不同的表达式对应不同的操作 ② 使用在begin end中- **举例 1 ：**<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>  IF val IS NULL<br>      THEN SELECT ‘val is null’;<br>  ELSE SELECT ‘val is not null’;</p><p>  END IF;<br>  <pre class="line-numbers language-none"><code class="language-none">- 举例 2 ： 声明存储过程“update_salary_by_eid1”，定义IN参数emp_id，输入员工编号。判断该员工薪资如果低于 8000 元并且入职时间超过 5 年，就涨薪 500 元；否则就不变。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>  DELIMITER &#x2F;&#x2F;</p><p>  CREATE PROCEDURE update_salary_by_eid1(IN emp_id INT)<br>  BEGIN<br>      DECLARE emp_salary DOUBLE;<br>      DECLARE hire_year DOUBLE;</p><pre><code>  SELECT salary INTO emp_salary FROM employees WHERE employee_id = emp_id;  SELECT DATEDIFF(CURDATE(),hire_date)/365 INTO hire_year  FROM employees WHERE employee_id = emp_id;  IF emp_salary &lt; 8000 AND hire_year &gt; 5  THEN UPDATE employees SET salary = salary + 500 WHERE employee_id = emp_id;  END IF;</code></pre><p>  END &#x2F;&#x2F;</p><p>  DELIMITER ;<br>  <pre class="line-numbers language-none"><code class="language-none">- 举例 3 ： 声明存储过程“update_salary_by_eid2”，定义IN参数emp_id，输入员工编号。判断该员工薪资如果低于 9000 元并且入职时间超过 5 年，就涨薪 500 元；否则就涨薪 100 元。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>  DELIMITER &#x2F;&#x2F;</p><p>  CREATE PROCEDURE update_salary_by_eid2(IN emp_id INT)<br>  BEGIN<br>      DECLARE emp_salary DOUBLE;<br>      DECLARE hire_year DOUBLE;</p><pre><code>  SELECT salary INTO emp_salary FROM employees WHERE employee_id = emp_id;  SELECT DATEDIFF(CURDATE(),hire_date)/365 INTO hire_year  FROM employees WHERE employee_id = emp_id;  IF emp_salary &lt; 8000 AND hire_year &gt; 5      THEN UPDATE employees SET salary = salary + 500 WHERE employee_id = emp_id;  ELSE      UPDATE employees SET salary = salary + 100 WHERE employee_id = emp_id;  END IF;</code></pre><p>  END &#x2F;&#x2F;</p><p>  DELIMITER ;<br>  <pre class="line-numbers language-none"><code class="language-none">- 举例 4 ： 声明存储过程“update_salary_by_eid3”，定义IN参数emp_id，输入员工编号。判断该员工薪资如果低于 9000 元，就更新薪资为 9000 元；薪资如果大于等于 9000 元且低于 10000 的，但是奖金比例为NULL的，就更新奖金比例为0.01；其他的涨薪 100 元。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>  DELIMITER &#x2F;&#x2F;</p><p>  CREATE PROCEDURE update_salary_by_eid3(IN emp_id INT)<br>  BEGIN<br>      DECLARE emp_salary DOUBLE;<br>      DECLARE bonus DECIMAL( 3 , 2 );</p><pre><code>  SELECT salary INTO emp_salary FROM employees WHERE employee_id = emp_id;  SELECT commission_pct INTO bonus FROM employees WHERE employee_id = emp_id;  IF emp_salary &lt; 9000      THEN UPDATE employees SET salary = 9000 WHERE employee_id = emp_id;  ELSEIF emp_salary &lt; 10000 AND bonus IS NULL      THEN UPDATE employees SET commission_pct = 0.01 WHERE employee_id = emp_id;  ELSE      UPDATE employees SET salary = salary + 100 WHERE employee_id = emp_id;  END IF;</code></pre><p>  END &#x2F;&#x2F;</p><p>  DELIMITER ;<br>  <pre class="line-numbers language-none"><code class="language-none">### 3. 2 分支结构之 CASECASE 语句的语法结构 1 ：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br>#情况一：类似于switch<br>CASE 表达式<br>WHEN 值 1 THEN 结果 1 或语句1(如果是语句，需要加分号)<br>WHEN 值 2 THEN 结果 2 或语句2(如果是语句，需要加分号)<br>…<br>ELSE 结果n或语句n(如果是语句，需要加分号)<br>END [case]（如果是放在begin end中需要加上case，如果放在select后面不需要）</p><pre class="line-numbers language-none"><code class="language-none">CASE 语句的语法结构 2 ：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>#情况二：类似于多重if<br>CASE<br>WHEN 条件 1 THEN 结果 1 或语句1(如果是语句，需要加分号)<br>WHEN 条件 2 THEN 结果 2 或语句2(如果是语句，需要加分号)<br>…<br>ELSE 结果n或语句n(如果是语句，需要加分号)<br>END [case]（如果是放在begin end中需要加上case，如果放在select后面不需要）</p><pre class="line-numbers language-none"><code class="language-none">- **举例 1 ：**  使用CASE流程控制语句的第 1 种格式，判断val值等于 1 、等于 2 ，或者两者都不等。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  CASE val<br>      WHEN 1 THEN SELECT ‘val is 1’;<br>      WHEN 2 THEN SELECT ‘val is 2’;<br>      ELSE SELECT ‘val is not 1 or 2’;<br>  END CASE;<br>  <pre class="line-numbers language-none"><code class="language-none">- **举例 2 ：**  使用CASE流程控制语句的第2种格式，判断val是否为空、小于0 、大于0或者等于 0 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>  CASE<br>      WHEN val IS NULL THEN SELECT ‘val is null’;<br>      WHEN val &lt; 0 THEN SELECT ‘val is less than 0’;<br>      WHEN val &gt; 0 THEN SELECT ‘val is greater than 0’;<br>      ELSE SELECT ‘val is 0’;<br>  END CASE;<br>  <pre class="line-numbers language-none"><code class="language-none">- 举例 3 ：  声明存储过程“update_salary_by_eid4”，定义IN参数emp_id，输入员工编号。判断该员工薪资如果低于 9000 元，就更新薪资为 9000 元；薪资大于等于 9000 元且低于 10000 的，但是奖金比例为NULL的，就更新奖金比例为0.01；其他的涨薪 100 元。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>  DELIMITER &#x2F;&#x2F;</p><p>  CREATE PROCEDURE update_salary_by_eid4(IN emp_id INT)<br>  BEGIN<br>      DECLARE emp_sal DOUBLE;<br>      DECLARE bonus DECIMAL( 3 , 2 );</p><pre><code>  SELECT salary INTO emp_sal FROM employees WHERE employee_id = emp_id;  SELECT commission_pct INTO bonus FROM employees WHERE employee_id = emp_id;  CASE  WHEN emp_sal&lt; 9000      THEN UPDATE employees SET salary= 9000 WHERE employee_id = emp_id;  WHEN emp_sal&lt; 10000 AND bonus IS NULL      THEN UPDATE employees SET commission_pct=0.01 WHERE employee_id = emp_id;  ELSE      UPDATE employees SET salary=salary+ 100 WHERE employee_id = emp_id;  END CASE;</code></pre><p>  END &#x2F;&#x2F;</p><p>  DELIMITER ;<br>  <pre class="line-numbers language-none"><code class="language-none">- 举例 4 ：  声明存储过程update_salary_by_eid5，定义IN参数emp_id，输入员工编号。判断该员工的入职年限，如果是 0 年，薪资涨 50 ；如果是 1 年，薪资涨 100 ；如果是 2 年，薪资涨 200 ；如果是 3 年，薪资涨 300 ；如果是 4 年，薪资涨 400 ；其他的涨薪 500 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>  DELIMITER &#x2F;&#x2F;</p><p>  CREATE PROCEDURE update_salary_by_eid5(IN emp_id INT)<br>  BEGIN<br>      DECLARE emp_sal DOUBLE;<br>      DECLARE hire_year DOUBLE;</p><pre><code>  SELECT salary INTO emp_sal FROM employees WHERE employee_id = emp_id;  SELECT ROUND(DATEDIFF(CURDATE(),hire_date)/365) INTO hire_year FROM employees  WHERE employee_id = emp_id;  CASE hire_year      WHEN 0 THEN UPDATE employees SET salary=salary+ 50 WHERE employee_id = emp_id;      WHEN 1 THEN UPDATE employees SET salary=salary+ 100 WHERE employee_id = emp_id;      WHEN 2 THEN UPDATE employees SET salary=salary+ 200 WHERE employee_id = emp_id;      WHEN 3 THEN UPDATE employees SET salary=salary+ 300 WHERE employee_id = emp_id;      WHEN 4 THEN UPDATE employees SET salary=salary+ 400 WHERE employee_id = emp_id;      ELSE UPDATE employees SET salary=salary+ 500 WHERE employee_id = emp_id;  END CASE;</code></pre><p>  END &#x2F;&#x2F;</p><p>  DELIMITER ;<br>  <pre class="line-numbers language-none"><code class="language-none">### 3. 3 循环结构之LOOPLOOP循环语句用来重复执行某些语句。LOOP内的语句一直重复执行直到循环被退出（使用LEAVE子句），跳出循环过程。LOOP语句的基本格式如下：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>[loop_label:] LOOP<br>    循环执行的语句<br>END LOOP [loop_label]</p><pre class="line-numbers language-none"><code class="language-none">其中loop_label表示LOOP语句的标注名称，该参数可以省略。**举例 1 ：**使用LOOP语句进行循环操作，id值小于 10 时将重复执行循环过程。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DECLARE id INT DEFAULT 0 ;<br>add_loop:LOOP<br>    SET id &#x3D; id + 1 ;<br>    IF id &gt;&#x3D; 10 THEN LEAVE add_loop;<br>    END IF;</p><p>END LOOP add_loop;</p><pre class="line-numbers language-none"><code class="language-none">**举例 2 ：**当市场环境变好时，公司为了奖励大家，决定给大家涨工资。声明存储过程“update_salary_loop()”，声明OUT参数num，输出循环次数。存储过程中实现循环给大家涨薪，薪资涨为原来的1.1倍。直到全公司的平均薪资达到 12000 结束。并统计循环次数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>DELIMITER &#x2F;&#x2F;</p><p>CREATE PROCEDURE update_salary_loop(OUT num INT)<br>BEGIN<br>    DECLARE avg_salary DOUBLE;<br>    DECLARE loop_count INT DEFAULT 0 ;</p><pre><code>SELECT AVG(salary) INTO avg_salary FROM employees;label_loop:LOOP    IF avg_salary &gt;= 12000 THEN LEAVE label_loop;    END IF;    UPDATE employees SET salary = salary * 1.1;    SET loop_count = loop_count + 1 ;    SELECT AVG(salary) INTO avg_salary FROM employees;END LOOP label_loop;SET num = loop_count;</code></pre><p>END &#x2F;&#x2F;</p><p>DELIMITER ;</p><pre class="line-numbers language-none"><code class="language-none">### 3. 4 循环结构之WHILEWHILE语句创建一个带条件判断的循环过程。WHILE在执行语句执行时，先对指定的表达式进行判断，如果为真，就执行循环内的语句，否则退出循环。WHILE语句的基本格式如下：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>[while_label:] WHILE 循环条件 DO<br>    循环体<br>END WHILE [while_label];</p><pre class="line-numbers language-none"><code class="language-none">while_label为WHILE语句的标注名称；如果循环条件结果为真，WHILE语句内的语句或语句群被执行，直至循环条件为假，退出循环。**举例 1 ：**WHILE语句示例，i值小于 10 时，将重复执行循环过程，代码如下：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DELIMITER &#x2F;&#x2F;</p><p>CREATE PROCEDURE test_while()<br>BEGIN<br>    DECLARE i INT DEFAULT 0 ;</p><pre><code>WHILE i &lt; 10 DO    SET i = i + 1 ;END WHILE;SELECT i;</code></pre><p>END &#x2F;&#x2F;</p><p>DELIMITER ;<br>#调用<br>CALL test_while();</p><pre class="line-numbers language-none"><code class="language-none">**举例 2 ：**市场环境不好时，公司为了渡过难关，决定暂时降低大家的薪资。声明存储过程“update_salary_while()”，声明OUT参数num，输出循环次数。存储过程中实现循环给大家降薪，薪资降为原来的90%。直到全公司的平均薪资达到 5000 结束。并统计循环次数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>DELIMITER &#x2F;&#x2F;</p><p>CREATE PROCEDURE update_salary_while(OUT num INT)<br>BEGIN<br>    DECLARE avg_sal DOUBLE ;<br>    DECLARE while_count INT DEFAULT 0 ;</p><pre><code>SELECT AVG(salary) INTO avg_sal FROM employees;WHILE avg_sal &gt; 5000 DO    UPDATE employees SET salary = salary * 0.9;    SET while_count = while_count + 1 ;    SELECT AVG(salary) INTO avg_sal FROM employees;END WHILE;SET num = while_count;</code></pre><p>END &#x2F;&#x2F;</p><p>DELIMITER ;</p><pre class="line-numbers language-none"><code class="language-none">### 3. 5 循环结构之REPEATREPEAT语句创建一个带条件判断的循环过程。与WHILE循环不同的是，REPEAT 循环首先会执行一次循环，然后在 UNTIL 中进行表达式的判断，如果满足条件就退出，即 END REPEAT；如果条件不满足，则会就继续执行循环，直到满足退出条件为止。REPEAT语句的基本格式如下：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[repeat_label:] REPEAT<br>　　　　循环体的语句<br>UNTIL 结束循环的条件表达式<br>END REPEAT [repeat_label]</p><pre class="line-numbers language-none"><code class="language-none">repeat_label为REPEAT语句的标注名称，该参数可以省略；REPEAT语句内的语句或语句群被重复，直至expr_condition为真。**举例 1 ：**<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>DELIMITER &#x2F;&#x2F;</p><p>CREATE PROCEDURE test_repeat()<br>BEGIN<br>    DECLARE i INT DEFAULT 0 ;</p><pre><code>REPEAT    SET i = i + 1 ;UNTIL i &gt;= 10END REPEAT;SELECT i;</code></pre><p>END &#x2F;&#x2F;</p><p>DELIMITER ;</p><pre class="line-numbers language-none"><code class="language-none">**举例 2 ：**当市场环境变好时，公司为了奖励大家，决定给大家涨工资。声明存储过程“update_salary_repeat()”，声明OUT参数num，输出循环次数。存储过程中实现循环给大家涨薪，薪资涨为原来的1.15倍。直到全公司的平均薪资达到 13000 结束。并统计循环次数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>DELIMITER &#x2F;&#x2F;</p><p>CREATE PROCEDURE update_salary_repeat(OUT num INT)<br>BEGIN<br>    DECLARE avg_sal DOUBLE ;<br>    DECLARE repeat_count INT DEFAULT 0 ;</p><pre><code>SELECT AVG(salary) INTO avg_sal FROM employees;REPEAT    UPDATE employees SET salary = salary * 1.15;    SET repeat_count = repeat_count + 1 ;    SELECT AVG(salary) INTO avg_sal FROM employees;UNTIL avg_sal &gt;= 13000END REPEAT;SET num = repeat_count;</code></pre><p>END &#x2F;&#x2F;</p><p>DELIMITER ;</p><pre class="line-numbers language-none"><code class="language-none">**对比三种循环结构：**1. 这三种循环都可以省略名称，但如果循环中添加了循环控制语句（LEAVE或ITERATE）则必须添加名称。2. LOOP：一般用于实现简单的”死”循环 WHILE：先判断后执行 REPEAT：先执行后判断，无条件至少执行一次### 3. 6 跳转语句之LEAVE语句LEAVE语句：可以用在循环语句内，或者以 BEGIN 和 END 包裹起来的程序体内，表示跳出循环或者跳出程序体的操作。如果你有面向过程的编程语言的使用经验，你可以把 LEAVE 理解为 break。基本格式如下：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>LEAVE 标记名</p><pre class="line-numbers language-none"><code class="language-none">其中，label参数表示循环的标志。LEAVE和BEGIN … END或循环一起被使用。**举例 1 ：**创建存储过程 “leave_begin()”，声明INT类型的IN参数num。给BEGIN…END加标记名，并在BEGIN…END中使用IF语句判断num参数的值。- 如果num&lt;&#x3D;0，则使用LEAVE语句退出BEGIN…END；- 如果num&#x3D;1，则查询“employees”表的平均薪资；- 如果num&#x3D;2，则查询“employees”表的最低薪资；- 如果num&gt;2，则查询“employees”表的最高薪资。IF语句结束后查询“employees”表的总人数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DELIMITER &#x2F;&#x2F;</p><p>CREATE PROCEDURE leave_begin(IN num INT)<br>    begin_label: BEGIN<br>        IF num&lt;&#x3D; 0<br>            THEN LEAVE begin_label;<br>        ELSEIF num&#x3D; 1<br>            THEN SELECT AVG(salary) FROM employees;<br>        ELSEIF num&#x3D; 2<br>            THEN SELECT MIN(salary) FROM employees;<br>        ELSE<br>            SELECT MAX(salary) FROM employees;<br>        END IF;</p><pre><code>    SELECT COUNT(*) FROM employees;END //</code></pre><p>DELIMITER ;</p><pre class="line-numbers language-none"><code class="language-none">**举例 2 ：**当市场环境不好时，公司为了渡过难关，决定暂时降低大家的薪资。声明存储过程“leave_while()”，声明OUT参数num，输出循环次数，存储过程中使用WHILE循环给大家降低薪资为原来薪资的90%，直到全公司的平均薪资小于等于 10000 ，并统计循环次数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>DELIMITER &#x2F;&#x2F;</p><p>CREATE PROCEDURE leave_while(OUT num INT)<br>BEGIN<br>    #<br>    DECLARE avg_sal DOUBLE;#记录平均工资<br>    DECLARE while_count INT DEFAULT 0 ; #记录循环次数</p><pre><code>SELECT AVG(salary) INTO avg_sal FROM employees; #① 初始化条件while_label:WHILE TRUE DO #② 循环条件    #③ 循环体    IF avg_sal &lt;= 10000 THEN    LEAVE while_label;    END IF;    UPDATE employees SET salary = salary * 0.9;    SET while_count = while_count + 1 ;    #④ 迭代条件    SELECT AVG(salary) INTO avg_sal FROM employees;END WHILE;#赋值SET num = while_count;</code></pre><p>END &#x2F;&#x2F;</p><p>DELIMITER ;</p><pre class="line-numbers language-none"><code class="language-none">### 3. 7 跳转语句之ITERATE语句ITERATE语句：只能用在循环语句（LOOP、REPEAT和WHILE语句）内，表示重新开始循环，将执行顺序转到语句段开头处。如果你有面向过程的编程语言的使用经验，你可以把 ITERATE 理解为 continue，意思为“再次循环”。语句基本格式如下：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ITERATE label</p><pre class="line-numbers language-none"><code class="language-none">label参数表示循环的标志。ITERATE语句必须跟在循环标志前面。**举例：** 定义局部变量num，初始值为 0 。循环结构中执行num + 1操作。- 如果num &lt; 10，则继续执行循环；- 如果num &gt; 15，则退出循环结构；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DELIMITER &#x2F;&#x2F;</p><p>CREATE PROCEDURE test_iterate()<br>BEGIN<br>    DECLARE num INT DEFAULT 0 ;</p><pre><code>my_loop:LOOP    SET num = num + 1 ;    IF num &lt; 10        THEN ITERATE my_loop;    ELSEIF num &gt; 15        THEN LEAVE my_loop;    END IF;    SELECT &#39;尚硅谷：让天下没有难学的技术&#39;;END LOOP my_loop;</code></pre><p>END &#x2F;&#x2F;</p><p>DELIMITER ;</p><pre class="line-numbers language-none"><code class="language-none">------## 4. 游标------### 4. 1 什么是游标（或光标）虽然我们也可以通过筛选条件 WHERE 和 HAVING，或者是限定返回记录的关键字 LIMIT 返回一条记录，但是，却无法在结果集中像指针一样，向前定位一条记录、向后定位一条记录，或者是&#96;随意定位到某一条记录&#96;，并对记录的数据进行处理。这个时候，就可以用到游标。游标，提供了一种灵活的操作方式，让我们能够对结果集中的每一条记录进行定位，并对指向的记录中的数据进行操作的数据结构。 **游标让 SQL 这种面向集合的语言有了面向过程开发的能力。**在 SQL 中，游标是一种临时的数据库对象，可以指向存储在数据库表中的数据行指针。这里游标&#96;充当了指针的作用&#96;，我们可以通过操作游标来对数据行进行操作。MySQL中游标可以在存储过程和函数中使用。比如，我们查询了 employees 数据表中工资高于 15000 的员工都有哪些：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SELECT employee_id,last_name,salary FROM employees<br>WHERE salary &gt; 15000 ;</p><pre class="line-numbers language-none"><code class="language-none">![1650606584642](..&#x2F;pic&#x2F;第16章_变量、流程控制与游标&#x2F;1650606584642.png)这里我们就可以通过游标来操作数据行，如图所示此时游标所在的行是“108”的记录，我们也可以在结果集上滚动游标，指向结果集中的任意一行。### 4. 2 使用游标步骤游标必须在声明处理程序之前被声明，并且变量和条件还必须在声明游标或处理程序之前被声明。如果我们想要使用游标，一般需要经历四个步骤。不同的 DBMS 中，使用游标的语法可能略有不同。**第一步，声明游标**在MySQL中，使用DECLARE关键字来声明游标，其语法的基本形式如下：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DECLARE cursor_name CURSOR FOR select_statement;</p><pre class="line-numbers language-none"><code class="language-none">这个语法适用于 MySQL，SQL Server，DB2 和 MariaDB。如果是用 Oracle 或者 PostgreSQL，需要写成：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>DECLARE cursor_name CURSOR IS select_statement;</p><pre class="line-numbers language-none"><code class="language-none">要使用 SELECT 语句来获取数据结果集，而此时还没有开始遍历数据，这里 select_statement 代表的是SELECT 语句，返回一个用于创建游标的结果集。比如：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>DECLARE cur_emp CURSOR FOR<br>SELECT employee_id,salary FROM employees;<br>DECLARE cursor_fruit CURSOR FOR<br>SELECT f_name, f_price FROM fruits ;</p><pre class="line-numbers language-none"><code class="language-none">**第二步，打开游标**打开游标的语法如下：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>OPEN cursor_name</p><pre class="line-numbers language-none"><code class="language-none">当我们定义好游标之后，如果想要使用游标，必须先打开游标。打开游标的时候 SELECT 语句的查询结果集就会送到游标工作区，为后面游标的&#96;逐条读取&#96;结果集中的记录做准备。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>OPEN cur_emp ;</p><pre class="line-numbers language-none"><code class="language-none">**第三步，使用游标（从游标中取得数据）**语法如下：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>FETCH cursor_name INTO var_name [, var_name] …</p><pre class="line-numbers language-none"><code class="language-none">这句的作用是使用 cursor_name 这个游标来读取当前行，并且将数据保存到 var_name 这个变量中，游标指针指到下一行。如果游标读取的数据行有多个列名，则在 INTO 关键字后面赋值给多个变量名即可。注意：var_name必须在声明游标之前就定义好。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>FETCH cur_emp INTO emp_id, emp_sal ;</p><pre class="line-numbers language-none"><code class="language-none">注意： **游标的查询结果集中的字段数，必须跟 INTO 后面的变量数一致** ，否则，在存储过程执行的时候，MySQL 会提示错误。**第四步，关闭游标**<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>CLOSE cursor_name</p><pre class="line-numbers language-none"><code class="language-none">有 OPEN 就会有 CLOSE，也就是打开和关闭游标。当我们使用完游标后需要关闭掉该游标。因为游标会&#96;占用系统资源&#96;，如果不及时关闭， **游标会一直保持到存储过程结束** ，影响系统运行的效率。而关闭游标的操作，会释放游标占用的系统资源。关闭游标之后，我们就不能再检索查询结果中的数据行，如果需要检索只能再次打开游标。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>CLOSE cur_emp;</p><pre class="line-numbers language-none"><code class="language-none">### 4. 3 举例创建存储过程“get_count_by_limit_total_salary()”，声明IN参数 limit_total_salary，DOUBLE类型；声明OUT参数total_count，INT类型。函数的功能可以实现累加薪资最高的几个员工的薪资值，直到薪资总和达到limit_total_salary参数的值，返回累加的人数给total_count。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>DELIMITER &#x2F;&#x2F;</p><p>CREATE PROCEDURE get_count_by_limit_total_salary(IN limit_total_salary DOUBLE,OUT total_count INT)<br>BEGIN<br>    DECLARE sum_salary DOUBLE DEFAULT 0 ;  #记录累加的总工资<br>    DECLARE cursor_salary DOUBLE DEFAULT 0 ; #记录某一个工资值<br>    DECLARE emp_count INT DEFAULT 0 ; #记录循环个数<br>    #定义游标<br>    DECLARE emp_cursor CURSOR FOR SELECT salary FROM employees ORDER BY salary DESC;<br>    #打开游标<br>    OPEN emp_cursor;</p><pre><code>REPEAT    #使用游标（从游标中获取数据）    FETCH emp_cursor INTO cursor_salary;    SET sum_salary = sum_salary + cursor_salary;    SET emp_count = emp_count + 1 ;    UNTIL sum_salary &gt;= limit_total_salaryEND REPEAT;SET total_count = emp_count;#关闭游标CLOSE emp_cursor;</code></pre><p>END &#x2F;&#x2F;</p><p>DELIMITER ;</p><pre class="line-numbers language-none"><code class="language-none">### 4. 5 小结游标是 MySQL 的一个重要的功能，为&#96;逐条读取&#96;结果集中的数据，提供了完美的解决方案。跟在应用层面实现相同的功能相比，游标可以在存储程序中使用，效率高，程序也更加简洁。但同时也会带来一些性能问题，比如在使用游标的过程中，会对数据行进行&#96;加锁&#96;，这样在业务并发量大的时候，不仅会影响业务之间的效率，还会&#96;消耗系统资源&#96;，造成内存不足，这是因为游标是在内存中进行的处理。建议：养成用完之后就关闭的习惯，这样才能提高系统的整体效率。------## 补充：MySQL 8. 0 的新特性—全局变量的持久化------在MySQL数据库中，全局变量可以通过SET GLOBAL语句来设置。例如，设置服务器语句超时的限制，可以通过设置系统变量max_execution_time来实现：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SET GLOBAL MAX_EXECUTION_TIME&#x3D; 2000 ;</p><pre class="line-numbers language-none"><code class="language-none">使用SET GLOBAL语句设置的变量值只会&#96;临时生效&#96;。&#96;数据库重启后&#96;，服务器又会从MySQL配置文件中读取变量的默认值。 MySQL 8.0版本新增了&#96;SET PERSIST&#96;命令。例如，设置服务器的最大连接数为 1000 ：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>SET PERSIST global max_connections &#x3D; 1000 ;</p><pre class="line-numbers language-none"><code class="language-none">MySQL会将该命令的配置保存到数据目录下的&#96;mysqld-auto.cnf&#96;文件中，下次启动时会读取该文件，用其中的配置来覆盖默认的配置文件。举例：查看全局变量max_connections的值，结果如下：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mysql&gt; show variables like ‘%max_connections%’;<br>+————————+——-+<br>| Variable_name | Value |<br>+————————+——-+<br>| max_connections | 151 |<br>| mysqlx_max_connections | 100 |<br>+————————+——-+<br>2 rows in set, 1 warning (0.00 sec)</p><pre class="line-numbers language-none"><code class="language-none">设置全局变量max_connections的值：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>mysql&gt; set persist max_connections&#x3D; 1000 ;<br>Query OK, 0 rows affected (0.00 sec)</p><pre class="line-numbers language-none"><code class="language-none">&#96;重启MySQL服务器&#96;，再次查询max_connections的值：&#96;&#96;&#96;sqlmysql&gt; show variables like &#39;%max_connections%&#39;;+------------------------+-------+| Variable_name | Value |+------------------------+-------+| max_connections | 1000 || mysqlx_max_connections | 100 |+------------------------+-------+2 rows in set, 1 warning (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>触发器</title>
      <link href="/2022/07/17/di-17-zhang-hong-fa-qi/"/>
      <url>/2022/07/17/di-17-zhang-hong-fa-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="第17章-触发器"><a href="#第17章-触发器" class="headerlink" title="第17章_触发器"></a>第17章_触发器</h1><p>在实际开发中，我们经常会遇到这样的情况：有 2 个或者多个相互关联的表，如<code>商品信息</code>和<code>库存信息</code>分别存放在 2 个不同的数据表中，我们在添加一条新商品记录的时候，为了保证数据的完整性，必须同时在库存表中添加一条库存记录。</p><p>这样一来，我们就必须把这两个关联的操作步骤写到程序里面，而且要用<code>事务</code>包裹起来，确保这两个操作成为一个<code>原子操作</code>，要么全部执行，要么全部不执行。要是遇到特殊情况，可能还需要对数据进行手动维护，这样就很<code>容易忘记其中的一步</code>，导致数据缺失。</p><p>这个时候，咱们可以使用触发器。 <strong>你可以创建一个触发器，让商品信息数据的插入操作自动触发库存数据的插入操作。</strong> 这样一来，就不用担心因为忘记添加库存数据而导致的数据缺失了。</p><hr><h2 id="1-触发器概述"><a href="#1-触发器概述" class="headerlink" title="1. 触发器概述"></a>1. 触发器概述</h2><hr><p>MySQL从<code>5.0.2</code>版本开始支持触发器。MySQL的触发器和存储过程一样，都是嵌入到MySQL服务器的一段程序。</p><p>触发器是由<code>事件来触发</code>某个操作，这些事件包括<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>事件。所谓事件就是指用户的动作或者触发某项行为。如果定义了触发程序，当数据库执行这些语句时候，就相当于事件发生了，就会<code>自动</code>激发触发器执行相应的操作。</p><p>当对数据表中的数据执行插入、更新和删除操作，需要自动执行一些数据库逻辑时，可以使用触发器来实现。</p><hr><h2 id="2-触发器的创建"><a href="#2-触发器的创建" class="headerlink" title="2. 触发器的创建"></a>2. 触发器的创建</h2><hr><h3 id="2-1-创建触发器语法"><a href="#2-1-创建触发器语法" class="headerlink" title="2. 1 创建触发器语法"></a>2. 1 创建触发器语法</h3><p>创建触发器的语法结构是：</p><pre class="line-numbers language-none"><code class="language-none">CREATE TRIGGER 触发器名称&#123;BEFORE|AFTER&#125; &#123;INSERT|UPDATE|DELETE&#125; ON 表名FOR EACH ROW触发器执行的语句块;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li><p><code>表名</code>：表示触发器监控的对象。</p></li><li><p><code>BEFORE|AFTER</code>：表示触发的时间。BEFORE 表示在事件之前触发；AFTER 表示在事件之后触发。</p></li><li><p>&#96;&#96;&#96;<br>INSERT|UPDATE|DELETE</p><pre class="line-numbers language-none"><code class="language-none">  ：表示触发的事件。  - INSERT 表示插入记录时触发；  - UPDATE 表示更新记录时触发；  - DELETE 表示删除记录时触发。- &#96;触发器执行的语句块&#96;：可以是单条SQL语句，也可以是由BEGIN…END结构组成的复合语句块。### 2. 2 代码举例**举例 1 ：**1. 创建数据表：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> CREATE TABLE test_trigger (<br> id INT PRIMARY KEY AUTO_INCREMENT,<br> t_note VARCHAR( 30 )<br> );</p><p> CREATE TABLE test_trigger_log (<br> id INT PRIMARY KEY AUTO_INCREMENT,<br> t_log VARCHAR( 30 )<br> );</p> <pre class="line-numbers language-none"><code class="language-none">2. 创建触发器：创建名称为before_insert的触发器，向test_trigger数据表插入数据之前，向test_trigger_log数据表中插入before_insert的日志信息。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> DELIMITER &#x2F;&#x2F;</p><p> CREATE TRIGGER before_insert<br> BEFORE INSERT ON test_trigger<br> FOR EACH ROW<br> BEGIN<br> INSERT INTO test_trigger_log (t_log)<br> VALUES(‘before_insert’);<br> END &#x2F;&#x2F;</p><p> DELIMITER ;</p> <pre class="line-numbers language-none"><code class="language-none">3. 向test_trigger数据表中插入数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> INSERT INTO test_trigger (t_note) VALUES (‘测试 BEFORE INSERT 触发器’);</p> <pre class="line-numbers language-none"><code class="language-none">4. 查看test_trigger_log数据表中的数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> mysql&gt; SELECT * FROM test_trigger_log;<br> +—-+—————+<br> | id | t_log |<br> +—-+—————+<br> | 1 | before_insert |<br> +—-+—————+<br> 1 row in set (0.00 sec)</p> <pre class="line-numbers language-none"><code class="language-none">**举例 2 ：**1. 创建名称为after_insert的触发器，向test_trigger数据表插入数据之后，向test_trigger_log数据表中插入after_insert的日志信息。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> DELIMITER &#x2F;&#x2F;</p><p> CREATE TRIGGER after_insert<br> AFTER INSERT ON test_trigger<br> FOR EACH ROW<br> BEGIN<br> INSERT INTO test_trigger_log (t_log)<br> VALUES(‘after_insert’);<br> END &#x2F;&#x2F;</p><p> DELIMITER ;</p> <pre class="line-numbers language-none"><code class="language-none">2. 向test_trigger数据表中插入数据。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> INSERT INTO test_trigger (t_note) VALUES (‘测试 AFTER INSERT 触发器’);</p> <pre class="line-numbers language-none"><code class="language-none">3. 查看test_trigger_log数据表中的数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> mysql&gt; SELECT * FROM test_trigger_log;<br> +—-+—————+<br> | id | t_log |<br> +—-+—————+<br> | 1 | before_insert |<br> | 2 | before_insert |<br> | 3 | after_insert |<br> +—-+—————+<br> 3 rows in set (0.00 sec)</p> <pre class="line-numbers language-none"><code class="language-none">**举例 3 ：** 定义触发器“salary_check_trigger”，基于员工表“employees”的INSERT事件，在INSERT之前检查将要添加的新员工薪资是否大于他领导的薪资，如果大于领导薪资，则报sqlstate_value为’HY000’的错误，从而使得添加失败。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>DELIMITER &#x2F;&#x2F;</p><p>CREATE TRIGGER salary_check_trigger<br>BEFORE INSERT ON employees FOR EACH ROW<br>BEGIN<br>    DECLARE mgrsalary DOUBLE;<br>    SELECT salary INTO mgrsalary FROM employees WHERE employee_id &#x3D; NEW.manager_id;</p><pre><code>IF NEW.salary &gt; mgrsalary THEN    SIGNAL SQLSTATE &#39;HY000&#39; SET MESSAGE_TEXT = &#39;薪资高于领导薪资错误&#39;;END IF;</code></pre><p>END &#x2F;&#x2F;</p><p>DELIMITER ;</p><pre class="line-numbers language-none"><code class="language-none">上面触发器声明过程中的NEW关键字代表INSERT添加语句的新记录。------## 3. 查看、删除触发器------### 3. 1 查看触发器查看触发器是查看数据库中已经存在的触发器的定义、状态和语法信息等。方式 1 ：查看当前数据库的所有触发器的定义<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SHOW TRIGGERS\G</p><pre class="line-numbers language-none"><code class="language-none">方式 2 ：查看当前数据库中某个触发器的定义<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>SHOW CREATE TRIGGER 触发器名</p><pre class="line-numbers language-none"><code class="language-none">方式 3 ：从系统库information_schema的TRIGGERS表中查询“salary_check_trigger”触发器的信息。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>SELECT * FROM information_schema.TRIGGERS;</p><pre class="line-numbers language-none"><code class="language-none">### 3. 2 删除触发器触发器也是数据库对象，删除触发器也用DROP语句，语法格式如下：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>DROP TRIGGER IF EXISTS 触发器名称;</p><pre class="line-numbers language-none"><code class="language-none">------## 4. 触发器的优缺点------### 4. 1 优点**1. 触发器可以确保数据的完整性 。**假设我们用&#96;进货单头表&#96;（demo.importhead）来保存进货单的总体信息，包括进货单编号、供货商编号、仓库编号、总计进货数量、总计进货金额和验收日期。![1650770696541](..&#x2F;pic&#x2F;第17章_触发器&#x2F;1650770696541.png)用&#96;进货单明细表&#96;（demo.importdetails）来保存进货商品的明细，包括进货单编号、商品编号、进货数量、进货价格和进货金额。![1650770713937](..&#x2F;pic&#x2F;第17章_触发器&#x2F;1650770713937.png)每当我们录入、删除和修改一条进货单明细数据的时候，进货单明细表里的数据就会发生变动。这个时候，在进货单头表中的总计数量和总计金额就必须重新计算，否则，进货单头表中的总计数量和总计金额就不等于进货单明细表中数量合计和金额合计了，这就是数据不一致。为了解决这个问题，我们就可以使用触发器， **规定每当进货单明细表有数据插入、修改和删除的操作时，自动触发 2 步操作：**1 ）重新计算进货单明细表中的数量合计和金额合计；2 ）用第一步中计算出来的值更新进货单头表中的合计数量与合计金额。这样一来，进货单头表中的合计数量与合计金额的值，就始终与进货单明细表中计算出来的合计数量与合计金额的值相同，数据就是一致的，不会互相矛盾。**2. 触发器可以帮助我们记录操作日志。**利用触发器，可以具体记录什么时间发生了什么。比如，记录修改会员储值金额的触发器，就是一个很好的例子。这对我们还原操作执行时的具体场景，更好地定位问题原因很有帮助。**3. 触发器还可以用在操作数据前，对数据进行合法性检查。**比如，超市进货的时候，需要库管录入进货价格。但是，人为操作很容易犯错误，比如说在录入数量的时候，把条形码扫进去了；录入金额的时候，看串了行，录入的价格远超售价，导致账面上的巨亏……这些都可以通过触发器，在实际插入或者更新操作之前，对相应的数据进行检查，及时提示错误，防止错误数据进入系统。### 4. 2 缺点**1. 触发器最大的一个问题就是可读性差。**因为触发器存储在数据库中，并且由事件驱动，这就意味着触发器有可能&#96;不受应用层的控制&#96;。这对系统维护是非常有挑战的。比如，创建触发器用于修改会员储值操作。如果触发器中的操作出了问题，会导致会员储值金额更新失败。我用下面的代码演示一下：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mysql&gt; update demo.membermaster set memberdeposit&#x3D; 20 where memberid &#x3D; 2 ;<br>ERROR 1054 ( 42 S22): Unknown column ‘aa’ in ‘field list’</p><p>&#96;&#96;&#96;</p><p>结果显示，系统提示错误，字段“aa”不存在。</p><p>这是因为，触发器中的数据插入操作多了一个字段，系统提示错误。可是，如果你不了解这个触发器，很可能会认为是更新语句本身的问题，或者是会员信息表的结构出了问题。说不定你还会给会员信息表添加一个叫“aa”的字段，试图解决这个问题，结果只能是白费力。</p><p><strong>2. 相关数据的变更，可能会导致触发器出错。</strong></p><p>特别是数据表结构的变更，都可能会导致触发器出错，进而影响数据操作的正常运行。这些都会由于触发器本身的隐蔽性，影响到应用中错误原因排查的效率。</p><h3 id="4-3-注意点"><a href="#4-3-注意点" class="headerlink" title="4. 3 注意点"></a>4. 3 注意点</h3><p>注意，如果在子表中定义了外键约束，并且外键指定了ON UPDATE&#x2F;DELETE CASCADE&#x2F;SET NULL子句，此时修改父表被引用的键值或删除父表被引用的记录行时，也会引起子表的修改和删除操作，此时基于子表的UPDATE和DELETE语句定义的触发器并不会被激活。</p><p>例如：基于子表员工表（t_employee）的DELETE语句定义了触发器t1，而子表的部门编号（did）字段定义了外键约束引用了父表部门表（t_department）的主键列部门编号（did），并且该外键加了“ON DELETE SET NULL”子句，那么如果此时删除父表部门表（t_department）在子表员工表（t_employee）有匹配记录的部门记录时，会引起子表员工表（t_employee）匹配记录的部门编号（did）修改为NULL，但是此时不会激活触发器t1。只有直接对子表员工表（t_employee）执行DELETE语句时才会激活触发器t1。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL的数据目录</title>
      <link href="/2022/07/17/gao-ji-pian-di-02-zhang-mysql-de-shu-ju-mu-lu/"/>
      <url>/2022/07/17/gao-ji-pian-di-02-zhang-mysql-de-shu-ju-mu-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="高级篇-第02章-MySQL的数据目录"><a href="#高级篇-第02章-MySQL的数据目录" class="headerlink" title="高级篇-第02章-MySQL的数据目录"></a>高级篇-第02章-MySQL的数据目录</h1><h2 id="1-MySQL8的主要目录结构"><a href="#1-MySQL8的主要目录结构" class="headerlink" title="1. MySQL8的主要目录结构"></a><strong>1. MySQL8的主要目录结构</strong></h2><hr><pre class="line-numbers language-none"><code class="language-none">find &#x2F; -name mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-1-数据库文件的存放路径"><a href="#1-1-数据库文件的存放路径" class="headerlink" title="1.1 数据库文件的存放路径"></a><strong>1.1</strong> <strong>数据库文件的存放路径</strong></h3><pre class="line-numbers language-none"><code class="language-none">show variables like &#39;datadir&#39;; # &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2-相关命令目录"><a href="#1-2-相关命令目录" class="headerlink" title="1.2 相关命令目录"></a><strong>1.2</strong> <strong>相关命令目录</strong></h3><p><strong>相关命令目录：&#x2F;usr&#x2F;bin 和&#x2F;usr&#x2F;sbin。</strong></p><h3 id="1-3-配置文件目录"><a href="#1-3-配置文件目录" class="headerlink" title="1.3 配置文件目录"></a><strong>1.3</strong> <strong>配置文件目录</strong></h3><p><strong>配置文件目录：&#x2F;usr&#x2F;share&#x2F;mysql-8.0（命令及配置文件），&#x2F;etc&#x2F;mysql（如my.cnf）</strong></p><hr><h2 id="2-数据库和文件系统的关系"><a href="#2-数据库和文件系统的关系" class="headerlink" title="2. 数据库和文件系统的关系"></a>2. 数据库和文件系统的关系</h2><hr><h3 id="2-1-表在文件系统中的表示"><a href="#2-1-表在文件系统中的表示" class="headerlink" title="2.1 表在文件系统中的表示"></a><strong>2.1</strong> <strong>表在文件系统中的表示</strong></h3><h4 id="2-3-1-InnoDB存储引擎模式"><a href="#2-3-1-InnoDB存储引擎模式" class="headerlink" title="2.3.1 InnoDB存储引擎模式"></a><strong>2.3.1 InnoDB存储引擎模式</strong></h4><p><strong>1.</strong> <strong>表结构</strong></p><p>为了保存表结构，<code>InnoDB</code>在<code>数据目录</code>下对应的数据库子目录下创建了一个专门用于<code>描述表结构的文件</code></p><pre class="line-numbers language-none"><code class="language-none">表名.frm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.</strong> <strong>表中数据和索引</strong></p><p><strong>① 系统表空间（system tablespace）</strong></p><p>默认情况下，InnoDB会在数据目录下创建一个名为<code>ibdata1</code>、大小为<code>12M</code>的<code>自拓展</code>文件，这个文件就是对应的<code>系统表空间</code>在文件系统上的表示。</p><p><strong>② 独立表空间(file-per-table tablespace)</strong></p><p>在MySQL5.6.6以及之后的版本中，InnoDB并不会默认的把各个表的数据存储到系统表空间中，而是为<code>每一个表建立一个独立表空间</code>，也就是说我们创建了多少个表，就有多少个独立表空间。使用<code>独立表空间</code>来存储表数据的话，会在该表所属数据库对应的子目录下创建一个表示该独立表空间的文件，文件名和表名相同。</p><pre class="line-numbers language-none"><code class="language-none">表名.ibd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>MySQL8.0中不再单独提供<code>表名.frm</code>，而是合并在<code>表名.ibd</code>文件中。</p></blockquote><p><strong>③ 系统表空间与独立表空间的设置</strong></p><p>我们可以自己指定使用<code>系统表空间</code>还是<code>独立表空间</code>来存储数据，这个功能由启动参数<code>innodb_file_per_table</code>控制</p><pre class="line-numbers language-none"><code class="language-none">[server] innodb_file_per_table&#x3D;0 # 0：代表使用系统表空间； 1：代表使用独立表空间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>④ 其他类型的表空间</strong></p><p>随着MySQL的发展，除了上述两种老牌表空间之外，现在还新提出了一些不同类型的表空间，比如通用表空间（general tablespace）、临时表空间（temporary tablespace）等。</p><h4 id="2-3-2-MyISAM存储引擎模式"><a href="#2-3-2-MyISAM存储引擎模式" class="headerlink" title="2.3.2 MyISAM存储引擎模式"></a><strong>2.3.2 MyISAM存储引擎模式</strong></h4><p><strong>1.</strong> <strong>表结构</strong></p><p>在存储表结构方面， MyISAM 和 InnoDB 一样，也是在<code>数据目录</code>下对应的数据库子目录下创建了一个专门用于描述表结构的文件</p><pre class="line-numbers language-none"><code class="language-none">表名.frm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.</strong> <strong>表中数据和索引</strong></p><p>在MyISAM中的索引全部都是<code>二级索引</code>，该存储引擎的<code>数据和索引是分开存放</code>的。所以在文件系统中也是使用不同的文件来存储数据文件和索引文件，同时表数据都存放在对应的数据库子目录下。</p><pre class="line-numbers language-none"><code class="language-none">test.frm 存储表结构 #MySQL8.0 改为了 b.xxx.sditest.MYD 存储数据 (MYData) test.MYI 存储索引 (MYIndex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL8其他新特性</title>
      <link href="/2022/07/17/di-18-zhang-mysql8-qi-ta-xin-te-xing/"/>
      <url>/2022/07/17/di-18-zhang-mysql8-qi-ta-xin-te-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="第18章-MySQL8其他新特性"><a href="#第18章-MySQL8其他新特性" class="headerlink" title="第18章_MySQL8其他新特性"></a>第18章_MySQL8其他新特性</h1><h2 id="1-MySQL-8-新特性概述"><a href="#1-MySQL-8-新特性概述" class="headerlink" title="1. MySQL 8 新特性概述"></a>1. MySQL 8 新特性概述</h2><hr><p><code>MySQL从5.7版本直接跳跃发布了8.0版本</code>，可见这是一个令人兴奋的里程碑版本。MySQL 8版本在功能上做了显著的改进与增强，开发者对MySQL的源代码进行了重构，最突出的一点是多MySQL Optimizer优化器进行了改进。不仅在速度上得到了改善，还为用户带来了更好的性能和更棒的体验。</p><h3 id="1-1-MySQL-8-0-新增特性"><a href="#1-1-MySQL-8-0-新增特性" class="headerlink" title="1. 1 MySQL 8. 0 新增特性"></a>1. 1 MySQL 8. 0 新增特性</h3><ol><li><p><strong>更简便的NoSQL支持</strong> NoSQL泛指非关系型数据库和数据存储。随着互联网平台的规模飞速发展，传统的关系型数据库已经越来越不能满足需求。从5.6版本开始，MySQL就开始支持简单的NoSQL存储功能。MySQL 8对这一功能做了优化，以更灵活的方式实现NoSQL功能，不再依赖模式（schema）。</p></li><li><p><strong>更好的索引</strong> 在查询中，正确地使用索引可以提高查询的效率。MySQL 8中新增了<code>隐藏索引</code>和<code>降序索引</code>。隐藏索引可以用来测试去掉索引对查询性能的影响。在查询中混合存在多列索引时，使用降序索引可以提高查询的性能。</p></li><li><p><strong>更完善的JSON支持</strong> MySQL从5.7开始支持原生JSON数据的存储，MySQL 8对这一功能做了优化，增加了聚合函数<code>JSON_ARRAYAGG()</code>和<code>JSON_OBJECTAGG()</code>，将参数聚合为JSON数组或对象，新增了行内操作符 -&gt;&gt;，是列路径运算符 -&gt;的增强，对JSON排序做了提升，并优化了JSON的更新操作。</p></li><li><p><strong>安全和账户管理</strong> MySQL 8中新增了<code>caching_sha2_password</code> 授权插件、角色、密码历史记录和FIPS模式支持，这些特性提高了数据库的安全性和性能，使数据库管理员能够更灵活地进行账户管理工作。</p></li><li><p><strong>InnoDB的变化</strong> <code>InnoDB是MySQL默认的存储引擎</code>，是事务型数据库的首选引擎，支持事务安全表（ACID），支持行锁定和外键。在MySQL 8 版本中，InnoDB在自增、索引、加密、死锁、共享锁等方面做了大量的<code>改进和优化</code>，并且支持原子数据定义语言（DDL），提高了数据安全性，对事务提供更好的支持。</p></li><li><p><strong>数据字典</strong> 在之前的MySQL版本中，字典数据都存储在元数据文件和非事务表中。从MySQL 8开始新增了事务数据字典，在这个字典里存储着数据库对象信息，这些数据字典存储在内部事务表中。</p></li><li><p><strong>原子数据定义语句</strong> MySQL 8开始支持原子数据定义语句（Automic DDL），即<code>原子DDL</code>。目前，只有InnoDB存储引擎支持原子DDL。原子数据定义语句（DDL）将与DDL操作相关的数据字典更新、存储引擎操作、二进制日志写入结合到一个单独的原子事务中，这使得即使服务器崩溃，事务也会提交或回滚。使用支持原子操作的存储引擎所创建的表，在执行DROP TABLE、CREATE TABLE、ALTER TABLE、RENAME TABLE、TRUNCATE TABLE、CREATE TABLESPACE、DROP TABLESPACE等操作时，都支持原子操作，即事务要么完全操作成功，要么失败后回滚，不再进行部分提交。 对于从MySQL 5.7复制到MySQL 8版本中的语句，可以添加<code>IF EXISTS</code>或<code>IF NOT EXISTS</code>语句来避免发生错误。</p></li><li><p><strong>资源管理</strong> MySQL 8开始支持创建和管理资源组，允许将服务器内运行的线程分配给特定的分组，以便线程根据组内可用资源执行。组属性能够控制组内资源，启用或限制组内资源消耗。数据库管理员能够根据不同的工作负载适当地更改这些属性。 目前，CPU时间是可控资源，由“虚拟CPU”这个概念来表示，此术语包含CPU的核心数，超线程，硬件线程等等。服务器在启动时确定可用的虚拟CPU数量。拥有对应权限的数据库管理员可以将这些CPU与资源组关联，并为资源组分配线程。 资源组组件为MySQL中的资源组管理提供了SQL接口。资源组的属性用于定义资源组。MySQL中存在两个默认组，系统组和用户组，默认的组不能被删除，其属性也不能被更改。对于用户自定义的组，资源组创建时可初始化所有的属性，除去名字和类型，其他属性都可在创建之后进行更改。 在一些平台下，或进行了某些MySQL的配置时，资源管理的功能将受到限制，甚至不可用。例如，如果安装了线程池插件，或者使用的是macOS系统，资源管理将处于不可用状态。在FreeBSD和Solaris系统中，资源线程优先级将失效。在Linux系统中，只有配置了CAP_SYS_NICE属性，资源管理优先级才能发挥作用。</p></li><li><p><strong>字符集支持</strong> MySQL 8中默认的字符集由<code>latin1</code>更改为<code>utf8mb4</code>，并首次增加了日语所特定使用的集合，utf8mb4_ja_0900_as_cs。</p></li><li><p><strong>优化器增强</strong> MySQL优化器开始支持隐藏索引和降序索引。隐藏索引不会被优化器使用，验证索引的必要性时不需要删除索引，先将索引隐藏，如果优化器性能无影响就可以真正地删除索引。降序索引允许优化器对多个列进行排序，并且允许排序顺序不一致。</p></li><li><p><strong>公用表表达式</strong> 公用表表达式（Common Table Expressions）简称为CTE，MySQL现在支持递归和非递归两种形式的CTE。CTE通过在SELECT语句或其他特定语句前<code>使用WITH语句对临时结果集</code>进行命名。<br>基础语法如下：</p><pre class="line-numbers language-none"><code class="language-none">WITH cte_name (col_name1,col_name2 ...) AS (Subquery)SELECT * FROM cte_name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Subquery代表子查询，子查询前使用WITH语句将结果集命名为cte_name，在后续的查询中即可使用cte_name进行查询。</p></li><li><p><strong>窗口函数</strong> MySQL 8开始支持窗口函数。在之前的版本中已存在的大部分<code>聚合函数</code>在MySQL 8中也可以作为窗口函数来使用。<br><img src="C:/Users/86188/pic/test/1650771871461.png" alt="1650771871461"></p></li><li><p><strong>正则表达式支持</strong> MySQL在8.0.4以后的版本中采用支持Unicode的国际化组件库实现正则表达式操作，这种方式不仅能提供完全的Unicode支持，而且是多字节安全编码。MySQL增加了REGEXP_LIKE()、EGEXP_INSTR()、REGEXP_REPLACE()和 REGEXP_SUBSTR()等函数来提升性能。另外，regexp_stack_limit和regexp_time_limit 系统变量能够通过匹配引擎来控制资源消耗。</p></li><li><p><strong>内部临时表</strong> <code>TempTable存储引擎取代MEMORY存储引擎成为内部临时表的默认存储引擎</code>。TempTable存储引擎为VARCHAR和VARBINARY列提供高效存储。internal_tmp_mem_storage_engine会话变量定义了内部临时表的存储引擎，可选的值有两个，TempTable和MEMORY，其中TempTable为默认的存储引擎。temptable_max_ram系统配置项定义了TempTable存储引擎可使用的最大内存数量。</p></li><li><p><strong>日志记录</strong> 在MySQL 8中错误日志子系统由一系列MySQL组件构成。这些组件的构成由系统变量log_error_services来配置，能够实现日志事件的过滤和写入。</p></li><li><p><strong>备份锁</strong> 新的备份锁允许在线备份期间执行数据操作语句，同时阻止可能造成快照不一致的操作。新备份锁由 LOCK INSTANCE FOR BACKUP 和 UNLOCK INSTANCE 语法提供支持，执行这些操作需要备份管理员特权。</p></li><li><p><strong>增强的MySQL复制</strong> MySQL 8复制支持对<code>JSON文档</code>进行部分更新的<code>二进制日志记录</code>，该记录<code>使用紧凑的二进制格式</code>，从而节省记录完整JSON文档的空间。当使用基于语句的日志记录时，这种紧凑的日志记录会自动完成，并且可以通过将新的binlog_row_value_options系统变量值设置为PARTIAL_JSON来启用。</p></li></ol><h3 id="1-2-MySQL-8-0-移除的旧特性"><a href="#1-2-MySQL-8-0-移除的旧特性" class="headerlink" title="1. 2 MySQL 8. 0 移除的旧特性"></a>1. 2 MySQL 8. 0 移除的旧特性</h3><p>在MySQL 5.7版本上开发的应用程序如果使用了MySQL8.0 移除的特性，语句可能会失败，或者产生不同的执行结果。为了避免这些问题，对于使用了移除特性的应用，应当尽力修正避免使用这些特性，并尽可能使用替代方法。</p><ol><li><strong>查询缓存</strong> <code>查询缓存已被移除</code>，删除的项有：<br>( 1 ) 语句： FLUSH QUERY CACHE和RESET QUERY CACHE。<br>( 2 ) 系统变量： query_cache_limit、query_cache_min_res_unit、query_cache_size、query_cache_type、query_cache_wlock_invalidate。<br>( 3 ) 状态变量： Qcache_free_blocks、Qcache_free_memory、Qcache_hits、Qcache_inserts、Qcache_lowmem_prunes、Qcache_not_cached、Qcache_queries_in_cache、Qcache_total_blocks。<br>( 4 ) 线程状态： checking privileges on cached query、checking query cache for query、invalidating query cache entries、sending cached result to client、storing result in query cache、waiting for query cache lock。</li><li><strong>加密相关</strong> 删除的加密相关的内容有：ENCODE()、DECODE()、ENCRYPT()、DES_ENCRYPT()和DES_DECRYPT()函数，配置项des-key-file，系统变量have_crypt，FLUSH语句的DES_KEY_FILE选项，HAVE_CRYPT CMake选项。 对于移除的ENCRYPT()函数，考虑使用SHA2()替代，对于其他移除的函数，使用AES_ENCRYPT()和AES_DECRYPT()替代。</li><li><strong>空间函数相关</strong> 在MySQL 5.7版本中，多个空间函数已被标记为过时。这些过时函数在MySQL 8中都已被移除，只保留了对应的ST_和MBR函数。</li><li><strong>\N和NULL</strong> 在SQL语句中，解析器不再将\N视为NULL，所以在SQL语句中应使用NULL代替\N。这项变化不会影响使用LOAD DATA INFILE或者SELECT…INTO OUTFILE操作文件的导入和导出。在这类操作中，NULL仍等同于\N。</li><li><strong>mysql_install_db</strong> 在MySQL分布中，已移除了mysql_install_db程序，数据字典初始化需要调用带着–initialize或者–initialize-insecure选项的mysqld来代替实现。另外，–bootstrap和INSTALL_SCRIPTDIR CMake也已被删除。</li><li><strong>通用分区处理程序</strong> 通用分区处理程序已从MySQL服务中被移除。为了实现给定表分区，表所使用的存储引擎需要自有的分区处理程序。 提供本地分区支持的MySQL存储引擎有两个，即InnoDB和NDB，而在MySQL 8中只支持InnoDB。</li><li><strong>系统和状态变量信息</strong> 在INFORMATION_SCHEMA数据库中，对系统和状态变量信息不再进行维护。GLOBAL_VARIABLES、SESSION_VARIABLES、GLOBAL_STATUS、SESSION_STATUS表都已被删除。另外，系统变量show_compatibility_56也已被删除。被删除的状态变量有Slave_heartbeat_period、Slave_last_heartbeat,Slave_received_heartbeats、Slave_retried_transactions、Slave_running。以上被删除的内容都可使用性能模式中对应的内容进行替代。</li><li><strong>mysql_plugin工具</strong> mysql_plugin工具用来配置MySQL服务器插件，现已被删除，可使用–plugin-load或–plugin-load-add选项在服务器启动时加载插件或者在运行时使用INSTALL PLUGIN语句加载插件来替代该工具。</li></ol><hr><h2 id="2-新特性-1-：窗口函数"><a href="#2-新特性-1-：窗口函数" class="headerlink" title="2. 新特性 1 ：窗口函数"></a>2. 新特性 1 ：窗口函数</h2><hr><h3 id="2-1-使用窗口函数前后对比"><a href="#2-1-使用窗口函数前后对比" class="headerlink" title="2. 1 使用窗口函数前后对比"></a>2. 1 使用窗口函数前后对比</h3><p>假设我现在有这样一个数据表，它显示了某购物网站在每个城市每个区的销售额：</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE sales(    id INT PRIMARY KEY AUTO_INCREMENT,    city VARCHAR( 15 ),    county VARCHAR( 15 ),    sales_value DECIMAL);INSERT INTO sales(city,county,sales_value)VALUES(&#39;北京&#39;,&#39;海淀&#39;,10.00),(&#39;北京&#39;,&#39;朝阳&#39;,20.00),(&#39;上海&#39;,&#39;黄埔&#39;,30.00),(&#39;上海&#39;,&#39;长宁&#39;,10.00);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT * FROM sales;+----+------+--------+-------------+| id | city | county | sales_value |+----+------+--------+-------------+| 1 | 北京 | 海淀 | 10 || 2 | 北京 | 朝阳 | 20 || 3 | 上海 | 黄埔 | 30 || 4 | 上海 | 长宁 | 10 |+----+------+--------+-------------+4 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>需求：</strong> 现在计算这个网站在每个城市的销售总额、在全国的销售总额、每个区的销售额占所在城市销售额中的比率，以及占总销售额中的比率。</p><p>如果用分组和聚合函数，就需要分好几步来计算。</p><p>第一步，计算总销售金额，并存入临时表 a：</p><pre class="line-numbers language-none"><code class="language-none">CREATE TEMPORARY TABLE a -- 创建临时表SELECT SUM(sales_value) AS sales_value -- 计算总计金额FROM sales;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看一下临时表 a ：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT * FROM a;+-------------+| sales_value |+-------------+| 70 |+-------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步，计算每个城市的销售总额并存入临时表 b：</p><pre class="line-numbers language-none"><code class="language-none">CREATE TEMPORARY TABLE b  -- 创建临时表SELECT city,SUM(sales_value) AS sales_value  -- 计算城市销售合计FROM salesGROUP BY city;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查看临时表 b ：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT * FROM b;+------+-------------+| city | sales_value |+------+-------------+| 北京 | 30 || 上海 | 40 |+------+-------------+2 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三步，计算各区的销售占所在城市的总计金额的比例，和占全部销售总计金额的比例。我们可以通过下面的连接查询获得需要的结果：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT s.city AS 城市,s.county AS 区,s.sales_value AS 区销售额,    -&gt; b.sales_value AS 市销售额,s.sales_value&#x2F;b.sales_value AS 市比率,    -&gt; a.sales_value AS 总销售额,s.sales_value&#x2F;a.sales_value AS 总比率    -&gt; FROM sales s    -&gt; JOIN b ON (s.city&#x3D;b.city) -- 连接市统计结果临时表    -&gt; JOIN a -- 连接总计金额临时表    -&gt; ORDER BY s.city,s.county;+------+------+----------+----------+--------+----------+--------+| 城市 | 区 | 区销售额 | 市销售额 | 市比率 | 总销售额 | 总比率 |+------+------+----------+----------+--------+----------+--------+| 上海 | 长宁 | 10 | 40 | 0.2500 | 70 | 0.1429 || 上海 | 黄埔 | 30 | 40 | 0.7500 | 70 | 0.4286 || 北京 | 朝阳 | 20 | 30 | 0.6667 | 70 | 0.2857 || 北京 | 海淀 | 10 | 30 | 0.3333 | 70 | 0.1429 |+------+------+----------+----------+--------+----------+--------+4 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果显示：市销售金额、市销售占比、总销售金额、总销售占比都计算出来了。</p><p>同样的查询，如果用窗口函数，就简单多了。我们可以用下面的代码来实现：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT city AS 城市,county AS 区,sales_value AS 区销售额,    -&gt; SUM(sales_value) OVER(PARTITION BY city) AS 市销售额,  -- 计算市销售额    -&gt; sales_value&#x2F;SUM(sales_value) OVER(PARTITION BY city) AS 市比率,    -&gt; SUM(sales_value) OVER() AS 总销售额, -- 计算总销售额    -&gt; sales_value&#x2F;SUM(sales_value) OVER() AS 总比率    -&gt; FROM sales    -&gt; ORDER BY city,county;+------+------+----------+----------+--------+----------+--------+| 城市 | 区 | 区销售额 | 市销售额 | 市比率 | 总销售额 | 总比率 |+------+------+----------+----------+--------+----------+--------+| 上海 | 长宁 | 10 | 40 | 0.2500 | 70 | 0.1429 || 上海 | 黄埔 | 30 | 40 | 0.7500 | 70 | 0.4286 || 北京 | 朝阳 | 20 | 30 | 0.6667 | 70 | 0.2857 || 北京 | 海淀 | 10 | 30 | 0.3333 | 70 | 0.1429 |+------+------+----------+-----------+--------+----------+--------+4 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果显示，我们得到了与上面那种查询同样的结果。</p><p>使用窗口函数，只用了一步就完成了查询。而且，由于没有用到临时表，执行的效率也更高了。很显然， <strong>在这种需要用到分组统计的结果对每一条记录进行计算的场景下，使用窗口函数更好</strong> 。</p><h3 id="2-2-窗口函数分类"><a href="#2-2-窗口函数分类" class="headerlink" title="2. 2 窗口函数分类"></a>2. 2 窗口函数分类</h3><p>MySQL从 8. 0 版本开始支持窗口函数。窗口函数的作用类似于在查询中对数据进行分组，不同的是，分组操作会把分组的结果聚合成一条记录，而窗口函数是将结果置于每一条数据记录中。</p><p>窗口函数可以分为<code>静态窗口函数</code>和<code>动态窗口函数</code>。</p><ul><li>静态窗口函数的窗口大小是固定的，不会因为记录的不同而不同；</li><li>动态窗口函数的窗口大小会随着记录的不同而变化。</li></ul><p>MySQL官方网站窗口函数的网址为 <a href="https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html#function_row-number">https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html#function_row-number</a> 。</p><p>窗口函数总体上可以分为序号函数、分布函数、前后函数、首尾函数和其他函数，如下表：</p><p><img src="C:/Users/86188/pic/test/1650772535712.png" alt="1650772535712"></p><h3 id="2-3-语法结构"><a href="#2-3-语法结构" class="headerlink" title="2. 3 语法结构"></a>2. 3 语法结构</h3><p>窗口函数的语法结构是：</p><pre class="line-numbers language-none"><code class="language-none">函数 OVER（[PARTITION BY 字段名 ORDER BY 字段名 ASC|DESC]）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者是：</p><pre class="line-numbers language-none"><code class="language-none">函数 OVER 窗口名 ... WINDOW 窗口名 AS （[PARTITION BY 字段名 ORDER BY 字段名 ASC|DESC]）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>OVER 关键字指定函数窗口的范围。<ul><li>如果省略后面括号中的内容，则窗口会包含满足WHERE条件的所有记录，窗口函数会基于所有满足WHERE条件的记录进行计算。</li><li>如果OVER关键字后面的括号不为空，则可以使用如下语法设置窗口。</li></ul></li><li>窗口名：为窗口设置一个别名，用来标识窗口。</li><li>PARTITION BY子句：指定窗口函数按照哪些字段进行分组。分组后，窗口函数可以在每个分组中分别执行。</li><li>ORDER BY子句：指定窗口函数按照哪些字段进行排序。执行排序操作使窗口函数按照排序后的数据记录的顺序进行编号。</li><li>FRAME子句：为分区中的某个子集定义规则，可以用来作为滑动窗口使用。</li></ul><h3 id="2-4-分类讲解"><a href="#2-4-分类讲解" class="headerlink" title="2. 4 分类讲解"></a>2. 4 分类讲解</h3><p>创建表：</p><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE goods(    id INT PRIMARY KEY AUTO_INCREMENT,    category_id INT,    category VARCHAR( 15 ),    NAME VARCHAR( 30 ),    price DECIMAL( 10 , 2 ),    stock INT,    upper_time DATETIME);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加数据：</p><pre class="line-numbers language-none"><code class="language-none">INSERT INTO goods(category_id,category,NAME,price,stock,upper_time)VALUES( 1 , &#39;女装&#x2F;女士精品&#39;, &#39;T恤&#39;, 39.90, 1000 , &#39;2020-11-10 00:00:00&#39;),( 1 , &#39;女装&#x2F;女士精品&#39;, &#39;连衣裙&#39;, 79.90, 2500 , &#39;2020-11-10 00:00:00&#39;),( 1 , &#39;女装&#x2F;女士精品&#39;, &#39;卫衣&#39;, 89.90, 1500 , &#39;2020-11-10 00:00:00&#39;),( 1 , &#39;女装&#x2F;女士精品&#39;, &#39;牛仔裤&#39;, 89.90, 3500 , &#39;2020-11-10 00:00:00&#39;),( 1 , &#39;女装&#x2F;女士精品&#39;, &#39;百褶裙&#39;, 29.90, 500 , &#39;2020-11-10 00:00:00&#39;),( 1 , &#39;女装&#x2F;女士精品&#39;, &#39;呢绒外套&#39;, 399.90, 1200 , &#39;2020-11-10 00:00:00&#39;),( 2 , &#39;户外运动&#39;, &#39;自行车&#39;, 399.90, 1000 , &#39;2020-11-10 00:00:00&#39;),( 2 , &#39;户外运动&#39;, &#39;山地自行车&#39;, 1399.90, 2500 , &#39;2020-11-10 00:00:00&#39;),( 2 , &#39;户外运动&#39;, &#39;登山杖&#39;, 59.90, 1500 , &#39;2020-11-10 00:00:00&#39;),( 2 , &#39;户外运动&#39;, &#39;骑行装备&#39;, 399.90, 3500 , &#39;2020-11-10 00:00:00&#39;),( 2 , &#39;户外运动&#39;, &#39;运动外套&#39;, 799.90, 500 , &#39;2020-11-10 00:00:00&#39;),( 2 , &#39;户外运动&#39;, &#39;滑板&#39;, 499.90, 1200 , &#39;2020-11-10 00:00:00&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面针对goods表中的数据来验证每个窗口函数的功能。</p><h4 id="2-4-1序号函数"><a href="#2-4-1序号函数" class="headerlink" title="2. 4. 1序号函数"></a>2. 4. 1序号函数</h4><ol><li><p><strong>ROW_NUMBER()函数</strong><br>ROW_NUMBER()函数能够对数据中的序号进行顺序显示。<br>举例：查询 goods 数据表中每个商品分类下价格降序排列的各个商品信息。</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT ROW_NUMBER() OVER(PARTITION BY category_id ORDER BY price DESC) AS row_num,    -&gt; id, category_id, category, NAME, price, stock    -&gt; FROM goods;+---------+----+-------------+-------------+------------+---------+-------+| row_num | id | category_id | category | NAME | price | stock |+---------+----+-------------+-------------+------------+---------+-------+| 1 | 6 | 1 | 女装&#x2F;女士精品 | 呢绒外套 |  399.90 | 1200 || 2 | 3 | 1 | 女装&#x2F;女士精品 | 卫衣 | 89.90 | 1500 || 3 | 4 | 1 | 女装&#x2F;女士精品 | 牛仔裤 | 89.90 | 3500 || 4 | 2 | 1 | 女装&#x2F;女士精品 | 连衣裙 | 79.90 | 2500 || 5 | 1 | 1 | 女装&#x2F;女士精品 | T恤 | 39.90 | 1000 || 6 | 5 | 1 | 女装&#x2F;女士精品 | 百褶裙 | 29.90 | 500 || 1 | 8 | 2 | 户外运动 | 山地自行车 | 1399.90 | 2500 || 2 | 11 | 2 | 户外运动 | 运动外套 |  799.90 | 500 || 3 | 12 | 2 | 户外运动 | 滑板 |  499.90 | 1200 || 4 | 7 | 2 | 户外运动 | 自行车 |  399.90 | 1000 || 5 | 10 | 2 | 户外运动 | 骑行装备 |  399.90 | 3500 || 6 | 9 | 2 | 户外运动 | 登山杖 | 59.90 | 1500 |+---------+----+-------------+-------------+------------+---------+-------+12 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例：查询 goods 数据表中每个商品分类下价格最高的 3 种商品信息。</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT *    -&gt; FROM (    -&gt;  SELECT ROW_NUMBER() OVER(PARTITION BY category_id ORDER BY price DESC) AS row_num,    -&gt; id, category_id, category, NAME, price, stock    -&gt;  FROM goods) t    -&gt; WHERE row_num &lt;&#x3D; 3 ;+---------+----+-------------+-------------+------------+---------+-------+| row_num | id | category_id | category | NAME | price | stock |+---------+----+-------------+-------------+------------+---------+-------+| 1 | 6 | 1 | 女装&#x2F;女士精品 | 呢绒外套 |  399.90 | 1200 || 2 | 3 | 1 | 女装&#x2F;女士精品 | 卫衣 | 89.90 | 1500 || 3 | 4 | 1 | 女装&#x2F;女士精品 | 牛仔裤 | 89.90 | 3500 || 1 | 8 | 2 | 户外运动 | 山地自行车 | 1399.90 | 2500 || 2 | 11 | 2 | 户外运动 | 运动外套 |  799.90 | 500 || 3 | 12 | 2 | 户外运动 | 滑板 |  499.90 | 1200 |+---------+----+-------------+------------+------------+----------+-------+6 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在名称为“女装&#x2F;女士精品”的商品类别中，有两款商品的价格为 89. 90 元，分别是卫衣和牛仔裤。两款商品的序号都应该为 2 ，而不是一个为 2 ，另一个为 3 。此时，可以使用RANK()函数和DENSE_RANK()函数解决。</p></li><li><p><strong>RANK()函数</strong><br>使用RANK()函数能够对序号进行并列排序，并且会跳过重复的序号，比如序号为 1 、 1 、 3 。举例：使用RANK()函数获取 goods 数据表中各类别的价格从高到低排序的各商品信息。</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT RANK() OVER(PARTITION BY category_id ORDER BY price DESC) AS row_num,    -&gt; id, category_id, category, NAME, price, stock    -&gt; FROM goods;+---------+----+-------------+---------------+------------+---------+-------+| row_num | id | category_id | category | NAME | price | stock |+---------+----+-------------+---------------+------------+---------+-------+| 1 | 6 | 1 | 女装&#x2F;女士精品 | 呢绒外套 | 399.90 | 1200 || 2 | 3 | 1 | 女装&#x2F;女士精品 | 卫衣 | 89.90 | 1500 || 2 | 4 | 1 | 女装&#x2F;女士精品 | 牛仔裤 | 89.90 | 3500 || 4 | 2 | 1 | 女装&#x2F;女士精品 | 连衣裙 | 79.90 | 2500 || 5 | 1 | 1 | 女装&#x2F;女士精品 | T恤 | 39.90 | 1000 || 6 | 5 | 1 | 女装&#x2F;女士精品 | 百褶裙 | 29.90 | 500 || 1 | 8 | 2 | 户外运动 | 山地自行车 | 1399.90 | 2500 || 2 | 11 | 2 | 户外运动 | 运动外套 | 799.90 | 500 || 3 | 12 | 2 | 户外运动 | 滑板 | 499.90 | 1200 || 4 | 7 | 2 | 户外运动 | 自行车 | 399.90 | 1000 || 4 | 10 | 2 | 户外运动 | 骑行装备 | 399.90 | 3500 || 6 | 9 | 2 | 户外运动 | 登山杖 | 59.90 | 1500 |+---------+----+-------------+---------------+------------+---------+-------+12 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例：使用RANK()函数获取 goods 数据表中类别为“女装&#x2F;女士精品”的价格最高的 4 款商品信息。</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT *    -&gt; FROM(    -&gt;  SELECT RANK() OVER(PARTITION BY category_id ORDER BY price DESC) AS row_num,    -&gt; id, category_id, category, NAME, price, stock    -&gt;  FROM goods) t    -&gt; WHERE category_id &#x3D; 1 AND row_num &lt;&#x3D; 4 ;+---------+----+-------------+---------------+----------+--------+-------+| row_num | id | category_id | category | NAME | price | stock |+---------+----+-------------+---------------+----------+--------+-------+| 1 | 6 | 1 | 女装&#x2F;女士精品 | 呢绒外套 | 399.90 | 1200 || 2 | 3 | 1 | 女装&#x2F;女士精品 | 卫衣 |  89.90 | 1500 || 2 | 4 | 1 | 女装&#x2F;女士精品 | 牛仔裤 |  89.90 | 3500 || 4 | 2 | 1 | 女装&#x2F;女士精品 | 连衣裙 |  79.90 | 2500 |+---------+----+-------------+---------------+----------+--------+-------+4 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，使用RANK()函数得出的序号为 1 、 2 、 2 、 4 ，相同价格的商品序号相同，后面的商品序号是不连续的，跳过了重复的序号。</p></li><li><p><strong>DENSE_RANK()函数</strong><br>DENSE_RANK()函数对序号进行并列排序，并且不会跳过重复的序号，比如序号为1 、1 、2。举例：使用DENSE_RANK()函数获取 goods 数据表中各类别的价格从高到低排序的各商品信息。</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT DENSE_RANK() OVER(PARTITION BY category_id ORDER BY price DESC) AS row_num,    -&gt; id, category_id, category, NAME, price, stock    -&gt; FROM goods;+---------+----+-------------+-------------+------------+---------+-------+| row_num | id | category_id | category | NAME | price | stock |+---------+----+-------------+-------------+------------+---------+-------+| 1 | 6 | 1 | 女装&#x2F;女士精品 | 呢绒外套 | 399.90 | 1200 || 2 | 3 | 1 | 女装&#x2F;女士精品 | 卫衣 | 89.90 | 1500 || 2 | 4 | 1 | 女装&#x2F;女士精品 | 牛仔裤 | 89.90 | 3500 || 3 | 2 | 1 | 女装&#x2F;女士精品 | 连衣裙 | 79.90 | 2500 || 4 | 1 | 1 | 女装&#x2F;女士精品 | T恤 | 39.90 | 1000 || 5 | 5 | 1 | 女装&#x2F;女士精品 | 百褶裙 | 29.90 | 500 || 1 | 8 | 2 | 户外运动 | 山地自行车 | 1399.90 | 2500 || 2 | 11 | 2 | 户外运动 | 运动外套 | 799.90 | 500 || 3 | 12 | 2 | 户外运动 | 滑板 | 499.90 | 1200 || 4 | 7 | 2 | 户外运动 | 自行车 | 399.90 | 1000 || 4 | 10 | 2 | 户外运动 | 骑行装备 | 399.90 | 3500 || 5 | 9 | 2 | 户外运动 | 登山杖 | 59.90 | 1500 |+---------+----+-------------+-------------+------------+---------+-------+12 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举例：使用DENSE_RANK()函数获取 goods 数据表中类别为“女装&#x2F;女士精品”的价格最高的 4 款商品信息。</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT *    -&gt; FROM(    -&gt;  SELECT DENSE_RANK() OVER(PARTITION BY category_id ORDER BY price DESC) AS row_num,    -&gt; id, category_id, category, NAME, price, stock    -&gt;  FROM goods) t    -&gt; WHERE category_id &#x3D; 1 AND row_num &lt;&#x3D; 3 ;+---------+----+-------------+---------------+----------+--------+-------+| row_num | id | category_id | category | NAME | price | stock |+---------+----+-------------+---------------+----------+--------+-------+| 1 | 6 | 1 | 女装&#x2F;女士精品 | 呢绒外套 | 399.90 | 1200 || 2 | 3 | 1 | 女装&#x2F;女士精品 | 卫衣 |  89.90 | 1500 || 2 | 4 | 1 | 女装&#x2F;女士精品 | 牛仔裤 |  89.90 | 3500 || 3 | 2 | 1 | 女装&#x2F;女士精品 | 连衣裙 |  79.90 | 2500 |+---------+----+-------------+---------------+----------+--------+-------+4 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，使用DENSE_RANK()函数得出的行号为 1 、 2 、 2 、 3 ，相同价格的商品序号相同，后面的商品序号是连续的，并且没有跳过重复的序号。</p></li></ol><h4 id="2-4-2-分布函数"><a href="#2-4-2-分布函数" class="headerlink" title="2. 4. 2 分布函数"></a>2. 4. 2 分布函数</h4><ol><li><p><strong>PERCENT_RANK()函数</strong><br>PERCENT_RANK()函数是等级值百分比函数。按照如下方式进行计算。</p><pre class="line-numbers language-none"><code class="language-none">(rank - 1 ) &#x2F; (rows - 1 )<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，rank的值为使用RANK()函数产生的序号，rows的值为当前窗口的总记录数。<br>举例：计算 goods 数据表中名称为“女装&#x2F;女士精品”的类别下的商品的PERCENT_RANK值。</p><pre class="line-numbers language-none"><code class="language-none">#写法一：SELECT RANK() OVER (PARTITION BY category_id ORDER BY price DESC) AS r,PERCENT_RANK() OVER (PARTITION BY category_id ORDER BY price DESC) AS pr,id, category_id, category, NAME, price, stockFROM goodsWHERE category_id &#x3D; 1 ;#写法二：mysql&gt; SELECT RANK() OVER w AS r,    -&gt; PERCENT_RANK() OVER w AS pr,    -&gt; id, category_id, category, NAME, price, stock    -&gt; FROM goods    -&gt; WHERE category_id &#x3D; 1 WINDOW w AS (PARTITION BY category_id ORDER BY price DESC);+---+-----+----+-------------+---------------+----------+--------+-------+| r | pr | id | category_id | category | NAME | price | stock |+---+-----+----+-------------+---------------+----------+--------+-------+| 1 | 0 | 6 | 1 | 女装&#x2F;女士精品 | 呢绒外套 | 399.90 | 1200 || 2 | 0.2 | 3 | 1 | 女装&#x2F;女士精品 | 卫衣 |  89.90 | 1500 || 2 | 0.2 | 4 | 1 | 女装&#x2F;女士精品 | 牛仔裤 |  89.90 | 3500 || 4 | 0.6 | 2 | 1 | 女装&#x2F;女士精品 | 连衣裙 |  79.90 | 2500 || 5 | 0.8 | 1 | 1 | 女装&#x2F;女士精品 | T恤 |  39.90 | 1000 || 6 | 1 | 5 | 1 | 女装&#x2F;女士精品 | 百褶裙 |  29.90 | 500 |+---+-----+----+-------------+---------------+----------+--------+-------+6 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>CUME_DIST()函数</strong><br>CUME_DIST()函数主要用于查询小于或等于某个值的比例。<br>举例：查询goods数据表中小于或等于当前价格的比例。</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT CUME_DIST() OVER(PARTITION BY category_id ORDER BY price ASC) AS cd,    -&gt; id, category, NAME, price    -&gt; FROM goods;+---------------------+----+---------------+------------+---------+| cd | id | category | NAME | price |+---------------------+----+---------------+------------+---------+| 0.16666666666666666 | 5 | 女装&#x2F;女士精品 | 百褶裙 | 29.90 ||  0.3333333333333333 | 1 | 女装&#x2F;女士精品 | T恤 | 39.90 || 0.5 | 2 | 女装&#x2F;女士精品 | 连衣裙 | 79.90 ||  0.8333333333333334 | 3 | 女装&#x2F;女士精品 | 卫衣 | 89.90 ||  0.8333333333333334 | 4 | 女装&#x2F;女士精品 | 牛仔裤 | 89.90 || 1 | 6 | 女装&#x2F;女士精品 | 呢绒外套 |  399.90 || 0.16666666666666666 | 9 | 户外运动 | 登山杖 | 59.90 || 0.5 | 7 | 户外运动 | 自行车 |  399.90 || 0.5 | 10 | 户外运动 | 骑行装备 |  399.90 ||  0.6666666666666666 | 12 | 户外运动 | 滑板 |  499.90 ||  0.8333333333333334 | 11 | 户外运动 | 运动外套 |  799.90 || 1 | 8 | 户外运动 | 山地自行车 | 1399.90 |+---------------------+----+---------------+------------+---------+12 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="2-4-3-前后函数"><a href="#2-4-3-前后函数" class="headerlink" title="2. 4. 3 前后函数"></a>2. 4. 3 前后函数</h4><ol><li><p><strong>LAG(expr,n)函数</strong><br>LAG(expr,n)函数返回当前行的前n行的expr的值。<br>举例：查询goods数据表中前一个商品价格与当前商品价格的差值。</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT id, category, NAME, price, pre_price, price - pre_price AS diff_price    -&gt; FROM (    -&gt;  SELECT id, category, NAME, price,LAG(price, 1 ) OVER w AS pre_price    -&gt;  FROM goods    -&gt; WINDOW w AS (PARTITION BY category_id ORDER BY price)) t;+----+---------------+------------+---------+-----------+------------+| id | category | NAME | price | pre_price | diff_price |+----+---------------+------------+---------+-----------+------------+| 5 | 女装&#x2F;女士精品 | 百褶裙 | 29.90 |  NULL | NULL || 1 | 女装&#x2F;女士精品 | T恤 | 39.90 | 29.90 |  10.00 || 2 | 女装&#x2F;女士精品 | 连衣裙 | 79.90 | 39.90 |  40.00 || 3 | 女装&#x2F;女士精品 | 卫衣 | 89.90 | 79.90 |  10.00 || 4 | 女装&#x2F;女士精品 | 牛仔裤 | 89.90 | 89.90 | 0.00 || 6 | 女装&#x2F;女士精品 | 呢绒外套 |  399.90 | 89.90 | 310.00 || 9 | 户外运动 | 登山杖 | 59.90 |  NULL | NULL || 7 | 户外运动 | 自行车 |  399.90 | 59.90 | 340.00 || 10 | 户外运动 | 骑行装备 |  399.90 |  399.90 | 0.00 || 12 | 户外运动 | 滑板 |  499.90 |  399.90 | 100.00 || 11 | 户外运动 | 运动外套 |  799.90 |  499.90 | 300.00 || 8 | 户外运动 | 山地自行车 | 1399.90 |  799.90 | 600.00 |+----+---------------+------------+---------+-----------+------------+12 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>LEAD(expr,n)函数</strong><br>LEAD(expr,n)函数返回当前行的后n行的expr的值。<br>举例：查询goods数据表中后一个商品价格与当前商品价格的差值。</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT id, category, NAME, behind_price, price,behind_price - price AS diff_price    -&gt; FROM(    -&gt;  SELECT id, category, NAME, price,LEAD(price, 1 ) OVER w AS behind_price    -&gt;  FROM goods WINDOW w AS (PARTITION BY category_id ORDER BY price)) t;+----+---------------+------------+--------------+---------+------------+| id | category | NAME | behind_price | price | diff_price |+----+---------------+------------+--------------+---------+------------+| 5 | 女装&#x2F;女士精品 | 百褶裙 |  39.90 | 29.90 |  10.00 || 1 | 女装&#x2F;女士精品 | T恤 |  79.90 | 39.90 |  40.00 || 2 | 女装&#x2F;女士精品 | 连衣裙 |  89.90 | 79.90 |  10.00 || 3 | 女装&#x2F;女士精品 | 卫衣 |  89.90 | 89.90 | 0.00 || 4 | 女装&#x2F;女士精品 | 牛仔裤 | 399.90 | 89.90 | 310.00 || 6 | 女装&#x2F;女士精品 | 呢绒外套 | NULL |  399.90 | NULL || 9 | 户外运动 | 登山杖 | 399.90 | 59.90 | 340.00 || 7 | 户外运动 | 自行车 | 399.90 |  399.90 | 0.00 || 10 | 户外运动 | 骑行装备 | 499.90 |  399.90 | 100.00 || 12 | 户外运动 | 滑板 | 799.90 |  499.90 | 300.00 || 11 | 户外运动 | 运动外套 |  1399.90 |  799.90 | 600.00 || 8 | 户外运动 | 山地自行车 | NULL | 1399.90 | NULL |+----+---------------+------------+--------------+---------+------------+12 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="2-4-4-首尾函数"><a href="#2-4-4-首尾函数" class="headerlink" title="2. 4. 4 首尾函数"></a>2. 4. 4 首尾函数</h4><ol><li><p><strong>FIRST_VALUE(expr)函数</strong><br>FIRST_VALUE(expr)函数返回第一个expr的值。<br>举例：按照价格排序，查询第 1 个商品的价格信息。</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT id, category, NAME, price, stock,FIRST_VALUE(price) OVER w AS first_price    -&gt; FROM goods WINDOW w AS (PARTITION BY category_id ORDER BY price);+----+---------------+------------+---------+-------+-------------+| id | category | NAME | price | stock | first_price |+----+---------------+------------+---------+-------+-------------+| 5 | 女装&#x2F;女士精品 | 百褶裙 | 29.90 | 500 | 29.90 || 1 | 女装&#x2F;女士精品 | T恤 | 39.90 | 1000 | 29.90 || 2 | 女装&#x2F;女士精品 | 连衣裙 | 79.90 | 2500 | 29.90 || 3 | 女装&#x2F;女士精品 | 卫衣 | 89.90 | 1500 | 29.90 || 4 | 女装&#x2F;女士精品 | 牛仔裤 | 89.90 | 3500 | 29.90 || 6 | 女装&#x2F;女士精品 | 呢绒外套 |  399.90 | 1200 | 29.90 || 9 | 户外运动 | 登山杖 | 59.90 | 1500 | 59.90 || 7 | 户外运动 | 自行车 |  399.90 | 1000 | 59.90 || 10 | 户外运动 | 骑行装备 |  399.90 | 3500 | 59.90 || 12 | 户外运动 | 滑板 |  499.90 | 1200 | 59.90 || 11 | 户外运动 | 运动外套 |  799.90 | 500 | 59.90 || 8 | 户外运动 | 山地自行车 | 1399.90 | 2500 | 59.90 |+----+---------------+------------+---------+-------+-------------+12 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>LAST_VALUE(expr)函数</strong><br>LAST_VALUE(expr)函数返回最后一个expr的值。<br>举例：按照价格排序，查询最后一个商品的价格信息。</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT id, category, NAME, price, stock,LAST_VALUE(price) OVER w AS last_price    -&gt; FROM goods WINDOW w AS (PARTITION BY category_id ORDER BY price);+----+---------------+------------+---------+-------+------------+| id | category | NAME | price | stock | last_price |+----+---------------+------------+---------+-------+------------+| 5 | 女装&#x2F;女士精品 | 百褶裙 | 29.90 | 500 |  29.90 || 1 | 女装&#x2F;女士精品 | T恤 | 39.90 | 1000 |  39.90 || 2 | 女装&#x2F;女士精品 | 连衣裙 | 79.90 | 2500 |  79.90 || 3 | 女装&#x2F;女士精品 | 卫衣 | 89.90 | 1500 |  89.90 || 4 | 女装&#x2F;女士精品 | 牛仔裤 | 89.90 | 3500 |  89.90 || 6 | 女装&#x2F;女士精品 | 呢绒外套 |  399.90 | 1200 | 399.90 || 9 | 户外运动 | 登山杖 | 59.90 | 1500 |  59.90 || 7 | 户外运动 | 自行车 |  399.90 | 1000 | 399.90 || 10 | 户外运动 | 骑行装备 |  399.90 | 3500 | 399.90 || 12 | 户外运动 | 滑板 |  499.90 | 1200 | 499.90 || 11 | 户外运动 | 运动外套 |  799.90 | 500 | 799.90 || 8 | 户外运动 | 山地自行车 | 1399.90 | 2500 |  1399.90 |+----+---------------+------------+---------+-------+------------+12 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="2-4-5-其他函数"><a href="#2-4-5-其他函数" class="headerlink" title="2. 4. 5 其他函数"></a>2. 4. 5 其他函数</h4><ol><li><p><strong>NTH_VALUE(expr,n)函数</strong><br>NTH_VALUE(expr,n)函数返回第n个expr的值。<br>举例：查询goods数据表中排名第 2 和第 3 的价格信息。</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT id, category, NAME, price,NTH_VALUE(price, 2 ) OVER w AS second_price,    -&gt; NTH_VALUE(price, 3 ) OVER w AS third_price    -&gt; FROM goods WINDOW w AS (PARTITION BY category_id ORDER BY price);+----+---------------+------------+---------+--------------+-------------+| id | category | NAME | price | second_price | third_price |+----+---------------+------------+---------+--------------+-------------+| 5 | 女装&#x2F;女士精品 | 百褶裙 | 29.90 | NULL |  NULL || 1 | 女装&#x2F;女士精品 | T恤 | 39.90 |  39.90 |  NULL || 2 | 女装&#x2F;女士精品 | 连衣裙 | 79.90 |  39.90 | 79.90 || 3 | 女装&#x2F;女士精品 | 卫衣 | 89.90 |  39.90 | 79.90 || 4 | 女装&#x2F;女士精品 | 牛仔裤 | 89.90 |  39.90 | 79.90 || 6 | 女装&#x2F;女士精品 | 呢绒外套 |  399.90 |  39.90 | 79.90 || 9 | 户外运动 | 登山杖 | 59.90 | NULL |  NULL || 7 | 户外运动 | 自行车 |  399.90 | 399.90 |  399.90 || 10 | 户外运动 | 骑行装备 |  399.90 | 399.90 |  399.90 || 12 | 户外运动 | 滑板 |  499.90 | 399.90 |  399.90 || 11 | 户外运动 | 运动外套 |  799.90 | 399.90 |  399.90 || 8 | 户外运动 | 山地自行车 | 1399.90 | 399.90 |  399.90 |+----+---------------+------------+---------+--------------+-------------+12 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>NTILE(n)函数</strong><br>NTILE(n)函数将分区中的有序数据分为n个桶，记录桶编号。<br>举例：将goods表中的商品按照价格分为 3 组。</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT NTILE( 3 ) OVER w AS nt,id, category, NAME, price    -&gt; FROM goods WINDOW w AS (PARTITION BY category_id ORDER BY price);+----+----+---------------+------------+---------+| nt | id | category | NAME | price |+----+----+---------------+------------+---------+| 1 | 5 | 女装&#x2F;女士精品 | 百褶裙 | 29.90 || 1 | 1 | 女装&#x2F;女士精品 | T恤 | 39.90 || 2 | 2 | 女装&#x2F;女士精品 | 连衣裙 | 79.90 || 2 | 3 | 女装&#x2F;女士精品 | 卫衣 | 89.90 || 3 | 4 | 女装&#x2F;女士精品 | 牛仔裤 | 89.90 || 3 | 6 | 女装&#x2F;女士精品 | 呢绒外套 |  399.90 || 1 | 9 | 户外运动 | 登山杖 | 59.90 || 1 | 7 | 户外运动 | 自行车 |  399.90 || 2 | 10 | 户外运动 | 骑行装备 |  399.90 || 2 | 12 | 户外运动 | 滑板 |  499.90 || 3 | 11 | 户外运动 | 运动外套 |  799.90 || 3 | 8 | 户外运动 | 山地自行车 | 1399.90 |+----+----+---------------+------------+---------+12 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="2-5-小-结"><a href="#2-5-小-结" class="headerlink" title="2. 5 小 结"></a>2. 5 小 结</h3><p>窗口函数的特点是可以分组，而且可以在分组内排序。另外，窗口函数不会因为分组而减少原表中的行数，这对我们在原表数据的基础上进行统计和排序非常有用。</p><hr><h2 id="3-新特性-2-：公用表表达式"><a href="#3-新特性-2-：公用表表达式" class="headerlink" title="3. 新特性 2 ：公用表表达式"></a>3. 新特性 2 ：公用表表达式</h2><hr><p>公用表表达式（或通用表表达式）简称为CTE（Common Table Expressions）。CTE是一个命名的临时结果集，作用范围是当前语句。CTE可以理解成一个可以复用的子查询，当然跟子查询还是有点区别的，CTE可以引用其他CTE，但子查询不能引用其他子查询。所以，可以考虑代替子查询。</p><p>依据语法结构和执行方式的不同，公用表表达式分为<code>普通公用表表达式</code>和<code>递归公用表表达式</code> 2 种。</p><h3 id="3-1-普通公用表表达式"><a href="#3-1-普通公用表表达式" class="headerlink" title="3. 1 普通公用表表达式"></a>3. 1 普通公用表表达式</h3><p>普通公用表表达式的语法结构是：</p><pre class="line-numbers language-none"><code class="language-none">WITH CTE名称AS （子查询）SELECT|DELETE|UPDATE 语句;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>普通公用表表达式类似于子查询，不过，跟子查询不同的是，它可以被多次引用，而且可以被其他的普通公用表表达式所引用。</p><p>举例：查询员工所在的部门的详细信息。</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; SELECT * FROM departments    -&gt; WHERE department_id IN (    -&gt;  SELECT DISTINCT department_id    -&gt;  FROM employees    -&gt; );+---------------+------------------+------------+-------------+| department_id | department_name | manager_id | location_id |+---------------+------------------+------------+-------------+| 10 | Administration | 200 | 1700 || 20 | Marketing | 201 | 1800 || 30 | Purchasing | 114 | 1700 || 40 | Human Resources | 203 | 2400 || 50 | Shipping | 121 | 1500 || 60 | IT | 103 | 1400 || 70 | Public Relations | 204 | 2700 || 80 | Sales | 145 | 2500 || 90 | Executive | 100 | 1700 || 100 | Finance | 108 | 1700 || 110 | Accounting | 205 | 1700 |+---------------+------------------+------------+-------------+11 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个查询也可以用普通公用表表达式的方式完成：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; WITH emp_dept_id    -&gt; AS (SELECT DISTINCT department_id FROM employees)    -&gt; SELECT *    -&gt; FROM departments d JOIN emp_dept_id e    -&gt; ON d.department_id &#x3D; e.department_id;+---------------+------------------+------------+-------------+---------------+| department_id | department_name | manager_id | location_id | department_id |+---------------+------------------+------------+-------------+---------------+| 90 | Executive | 100 | 1700 | 90 || 60 | IT | 103 | 1400 | 60 || 100 | Finance | 108 | 1700 | 100 || 30 | Purchasing | 114 | 1700 | 30 || 50 | Shipping | 121 | 1500 | 50 || 80 | Sales | 145 | 2500 | 80 || 10 | Administration | 200 | 1700 | 10 || 20 | Marketing | 201 | 1800 | 20 || 40 | Human Resources | 203 | 2400 | 40 || 70 | Public Relations | 204 | 2700 | 70 || 110 | Accounting | 205 | 1700 | 110 |+---------------+------------------+------------+-------------+---------------+11 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子说明，公用表表达式可以起到子查询的作用。以后如果遇到需要使用子查询的场景，你可以在查询之前，先定义公用表表达式，然后在查询中用它来代替子查询。而且，跟子查询相比，公用表表达式有一个优点，就是定义过公用表表达式之后的查询，可以像一个表一样多次引用公用表表达式，而子查询则不能。</p><h3 id="3-2-递归公用表表达式"><a href="#3-2-递归公用表表达式" class="headerlink" title="3. 2 递归公用表表达式"></a>3. 2 递归公用表表达式</h3><p>递归公用表表达式也是一种公用表表达式，只不过，除了普通公用表表达式的特点以外，它还有自己的特点，就是 <strong>可以调用自己</strong> 。它的语法结构是：</p><pre class="line-numbers language-none"><code class="language-none">WITH RECURSIVECTE名称 AS （子查询）SELECT|DELETE|UPDATE 语句;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>递归公用表表达式由 2 部分组成，分别是种子查询和递归查询，中间通过关键字 UNION [ALL]进行连接。这里的 <strong>种子查询，意思就是获得递归的初始值</strong> 。这个查询只会运行一次，以创建初始数据集，之后递归查询会一直执行，直到没有任何新的查询数据产生，递归返回。</p><p><strong>案例：</strong> 针对于我们常用的employees表，包含employee_id，last_name和manager_id三个字段。如果a是b的管理者，那么，我们可以把b叫做a的下属，如果同时b又是c的管理者，那么c就是b的下属，是a的下下属。</p><p>下面我们尝试用查询语句列出所有具有下下属身份的人员信息。</p><p>如果用我们之前学过的知识来解决，会比较复杂，至少要进行 4 次查询才能搞定：</p><ul><li>第一步，先找出初代管理者，就是不以任何别人为管理者的人，把结果存入临时表；</li><li>第二步，找出所有以初代管理者为管理者的人，得到一个下属集，把结果存入临时表；</li><li>第三步，找出所有以下属为管理者的人，得到一个下下属集，把结果存入临时表。</li><li>第四步，找出所有以下下属为管理者的人，得到一个结果集。</li></ul><p>如果第四步的结果集为空，则计算结束，第三步的结果集就是我们需要的下下属集了，否则就必须继续进行第四步，一直到结果集为空为止。比如上面的这个数据表，就需要到第五步，才能得到空结果集。而且，最后还要进行第六步：把第三步和第四步的结果集合并，这样才能最终获得我们需要的结果集。</p><p>如果用递归公用表表达式，就非常简单了。我介绍下具体的思路。</p><ul><li>用递归公用表表达式中的种子查询，找出初代管理者。字段 n 表示代次，初始值为 1 ，表示是第一代管理者。</li><li>用递归公用表表达式中的递归查询，查出以这个递归公用表表达式中的人为管理者的人，并且代次的值加 1 。直到没有人以这个递归公用表表达式中的人为管理者了，递归返回。</li><li>在最后的查询中，选出所有代次大于等于 3 的人，他们肯定是第三代及以上代次的下属了，也就是下下属了。这样就得到了我们需要的结果集。</li></ul><p>这里看似也是 3 步，实际上是一个查询的 3 个部分，只需要执行一次就可以了。而且也不需要用临时表保存中间结果，比刚刚的方法简单多了。</p><p><strong>代码实现：</strong></p><pre class="line-numbers language-none"><code class="language-none">WITH RECURSIVE cteAS(SELECT employee_id,last_name,manager_id, 1 AS n FROM employees WHERE employee_id &#x3D; 100 -- 种子查询，找到第一代领导UNION ALLSELECT a.employee_id,a.last_name,a.manager_id,n+ 1 FROM employees AS a JOIN cteON (a.manager_id &#x3D; cte.employee_id) -- 递归查询，找出以递归公用表表达式的人为领导的人)SELECT employee_id,last_name FROM cte WHERE n &gt;&#x3D; 3 ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总之，递归公用表表达式对于查询一个有共同的根节点的树形结构数据，非常有用。它可以不受层级的限制，轻松查出所有节点的数据。如果用其他的查询方式，就比较复杂了。</p><h3 id="3-3-小-结"><a href="#3-3-小-结" class="headerlink" title="3. 3 小 结"></a>3. 3 小 结</h3><p>公用表表达式的作用是可以替代子查询，而且可以被多次引用。递归公用表表达式对查询有一个共同根节点的树形结构数据非常高效，可以轻松搞定其他查询方式难以处理的查询。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下MySQL的安装与使用</title>
      <link href="/2022/07/17/gao-ji-pian-di-01-zhang-linux-xia-mysql-de-an-zhuang-yu-shi-yong/"/>
      <url>/2022/07/17/gao-ji-pian-di-01-zhang-linux-xia-mysql-de-an-zhuang-yu-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="高级篇-第01章-Linux下MySQL的安装与使用"><a href="#高级篇-第01章-Linux下MySQL的安装与使用" class="headerlink" title="高级篇_第01章_Linux下MySQL的安装与使用"></a>高级篇_第01章_Linux下MySQL的安装与使用</h1><h2 id="1-安装前说明"><a href="#1-安装前说明" class="headerlink" title="1. 安装前说明"></a><strong>1.</strong> <strong>安装前说明</strong></h2><hr><h3 id="1-1-查看是否安装过MySQL"><a href="#1-1-查看是否安装过MySQL" class="headerlink" title="1.1 查看是否安装过MySQL"></a><strong>1.1</strong> <strong>查看是否安装过MySQL</strong></h3><ul><li>如果你是用rpm安装, 检查一下RPM PACKAGE：</li></ul><pre class="line-numbers language-none"><code class="language-none">rpm -qa | grep -i mysql # -i 忽略大小写<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>检查mysql service：</li></ul><pre class="line-numbers language-none"><code class="language-none">systemctl status mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2-MySQL的卸载"><a href="#1-2-MySQL的卸载" class="headerlink" title="1.2 MySQL的卸载"></a><strong>1.2 MySQL的卸载</strong></h3><p><strong>1.</strong> <strong>关闭</strong> <strong>mysql</strong> <strong>服务</strong></p><pre class="line-numbers language-none"><code class="language-none">systemctl stop mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.</strong> <strong>查看当前</strong> <strong>mysql</strong> <strong>安装状况</strong></p><pre class="line-numbers language-none"><code class="language-none">rpm -qa | grep -i mysql# 或yum list installed | grep mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>3.</strong> <strong>卸载上述命令查询出的已安装程序</strong></p><pre class="line-numbers language-none"><code class="language-none">yum remove mysql-xxx mysql-xxx mysql-xxx mysql-xxxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>务必卸载干净，反复执行<code>rpm -qa | grep -i mysql</code>确认是否有卸载残留</p><p><strong>4.</strong> <strong>删除</strong> <strong>mysql</strong> <strong>相关文件</strong></p><ul><li>查找相关文件</li></ul><pre class="line-numbers language-none"><code class="language-none">find &#x2F; -name mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>删除上述命令查找出的相关文件</li></ul><pre class="line-numbers language-none"><code class="language-none">rm -rf xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>5.删除 my.cnf</strong></p><pre class="line-numbers language-none"><code class="language-none">rm -rf &#x2F;etc&#x2F;my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-MySQL的Linux版安装"><a href="#2-MySQL的Linux版安装" class="headerlink" title="2. MySQL的Linux版安装"></a><strong>2. MySQL的Linux版安装</strong></h2><hr><h3 id="2-1-CentOS7下检查MySQL依赖"><a href="#2-1-CentOS7下检查MySQL依赖" class="headerlink" title="2.1 CentOS7下检查MySQL依赖"></a><strong>2.1 CentOS7下检查MySQL依赖</strong></h3><p><strong>1.</strong> <strong>检查&#x2F;tmp临时目录权限（必不可少）</strong></p><p>由于mysql安装过程中，会通过mysql用户在&#x2F;tmp目录下新建tmp_db文件，所以请给&#x2F;tmp较大的权限。执行 ：</p><pre class="line-numbers language-none"><code class="language-none">chmod -R 777 &#x2F;tmp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.</strong> <strong>安装前，检查依赖</strong></p><pre class="line-numbers language-none"><code class="language-none">rpm -qa|grep libaiorpm -qa|grep net-tools<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-2-CentOS7下MySQL安装过程"><a href="#2-2-CentOS7下MySQL安装过程" class="headerlink" title="2.2 CentOS7下MySQL安装过程"></a><strong>2.2 CentOS7下MySQL安装过程</strong></h3><p><strong>1.</strong> <strong>将安装程序拷贝到&#x2F;opt目录下</strong></p><p>在mysql的安装文件目录下执行：（必须按照顺序执行）</p><pre class="line-numbers language-none"><code class="language-none">rpm -ivh mysql-community-common-8.0.25-1.el7.x86_64.rpm rpm -ivh mysql-community-client-plugins-8.0.25-1.el7.x86_64.rpm rpm -ivh mysql-community-libs-8.0.25-1.el7.x86_64.rpm rpm -ivh mysql-community-client-8.0.25-1.el7.x86_64.rpm rpm -ivh mysql-community-server-8.0.25-1.el7.x86_64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>rpm</code>是Redhat Package Manage缩写，通过RPM的管理，用户可以把源代码包装成以rpm为扩展名的文件形式，易于安装。</li><li><code>-i</code>, –install 安装软件包</li><li><code>-v</code>, –verbose 提供更多的详细信息输出</li><li><code>-h</code>, –hash 软件包安装的时候列出哈希标记 (和 -v 一起使用效果更好)，展示进度条</li></ul><blockquote><p>若存在mariadb-libs问题，则执行<strong>yum remove mysql-libs</strong>即可</p></blockquote><h3 id="2-3-查看MySQL版本"><a href="#2-3-查看MySQL版本" class="headerlink" title="2.3 查看MySQL版本"></a><strong>2.3</strong> <strong>查看MySQL版本</strong></h3><pre class="line-numbers language-none"><code class="language-none">mysql --version #或mysqladmin --version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-4-服务的初始化"><a href="#2-4-服务的初始化" class="headerlink" title="2.4 服务的初始化"></a><strong>2.4</strong> <strong>服务的初始化</strong></h3><p>为了保证数据库目录与文件的所有者为 mysql 登录用户，如果你是以 root 身份运行 mysql 服务，需要执行下面的命令初始化：</p><pre class="line-numbers language-none"><code class="language-none">mysqld --initialize --user&#x3D;mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明： –initialize 选项默认以“安全”模式来初始化，则会为 root 用户生成一个密码并将<code>该密码标记为过期</code>，登录后你需要设置一个新的密码。生成的<code>临时密码</code>会往日志中记录一份。</p><p>查看密码：</p><pre class="line-numbers language-none"><code class="language-none">cat &#x2F;var&#x2F;log&#x2F;mysqld.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>root@localhost: 后面就是初始化的密码</p><h3 id="2-5-启动MySQL，查看状态"><a href="#2-5-启动MySQL，查看状态" class="headerlink" title="2.5 启动MySQL，查看状态"></a><strong>2.5</strong> <strong>启动MySQL，查看状态</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#加不加.service后缀都可以 </span>启动：systemctl start mysqld.service 关闭：systemctl stop mysqld.service 重启：systemctl restart mysqld.service 查看状态：systemctl status mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-查看MySQL服务是否自启动"><a href="#2-6-查看MySQL服务是否自启动" class="headerlink" title="2.6 查看MySQL服务是否自启动"></a><strong>2.6</strong> <strong>查看MySQL服务是否自启动</strong></h3><pre class="line-numbers language-none"><code class="language-none">systemctl list-unit-files|grep mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>如不是enabled可以运行如下命令设置自启动</li></ul><pre class="line-numbers language-none"><code class="language-none">systemctl enable mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>如果希望不进行自启动，运行如下命令设置</li></ul><pre class="line-numbers language-none"><code class="language-none">systemctl disable mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-MySQL登录"><a href="#3-MySQL登录" class="headerlink" title="3. MySQL登录"></a><strong>3. MySQL登录</strong></h2><hr><h3 id="3-1-首次登录"><a href="#3-1-首次登录" class="headerlink" title="3.1 首次登录"></a><strong>3.1</strong> <strong>首次登录</strong></h3><p>通过<code>mysql -hlocalhost -P3306 -uroot -p</code>进行登录，在Enter password：录入初始化密码</p><h3 id="3-2-修改密码"><a href="#3-2-修改密码" class="headerlink" title="3.2 修改密码"></a><strong>3.2</strong> <strong>修改密码</strong></h3><pre class="line-numbers language-none"><code class="language-none">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;new_password&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-3-设置远程登录"><a href="#3-3-设置远程登录" class="headerlink" title="3.3 设置远程登录"></a><strong>3.3</strong> <strong>设置远程登录</strong></h3><p><strong>1.</strong> <strong>确认网络</strong></p><p>1.在远程机器上使用ping ip地址<code>保证网络畅通</code></p><p>2.在远程机器上使用telnet命令<code>保证端口号开放</code>访问</p><p><strong>2.</strong> <strong>关闭防火墙或开放端口</strong></p><p><strong>方式一：关闭防火墙</strong></p><ul><li>CentOS6 ：</li></ul><pre class="line-numbers language-none"><code class="language-none">service iptables stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>CentOS7：</li></ul><pre class="line-numbers language-none"><code class="language-none">#开启防火墙systemctl start firewalld.service#查看防火墙状态systemctl status firewalld.service#关闭防火墙systemctl stop firewalld.service#设置开机启用防火墙 systemctl enable firewalld.service #设置开机禁用防火墙 systemctl disable firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方式二：开放端口</strong></p><ul><li>查看开放的端口号</li></ul><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --list-all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>设置开放的端口号</li></ul><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --add-service&#x3D;http --permanentfirewall-cmd --add-port&#x3D;3306&#x2F;tcp --permanent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>重启防火墙</li></ul><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-Linux下修改配置"><a href="#4-Linux下修改配置" class="headerlink" title="4. Linux下修改配置"></a><strong>4. Linux下修改配置</strong></h2><hr><ul><li>修改允许远程登陆</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> mysql<span class="token punctuation">;</span><span class="token keyword">select</span> Host<span class="token punctuation">,</span><span class="token keyword">User</span> <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> host <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token keyword">where</span> <span class="token keyword">user</span> <span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>%</code>是个 通配符 ，如果Host&#x3D;192.168.1.%，那么就表示只要是IP地址前缀为“192.168.1.”的客户端都可以连接。如果<code>Host=%</code>，表示所有IP都有连接权限。</p><p>注意：在生产环境下不能为了省事将host设置为%，这样做会存在安全问题，具体的设置可以根据生产环境的IP进行设置。</p></blockquote><p>配置新连接报错：错误号码 2058，分析是 mysql 密码加密方法变了。</p><p><strong>解决方法一：</strong>升级远程连接工具版本</p><p><strong>解决方法二：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">'root'</span><span class="token variable">@'%'</span> IDENTIFIED <span class="token keyword">WITH</span> mysql_native_password <span class="token keyword">BY</span> <span class="token string">'abc123'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-字符集的相关操作"><a href="#5-字符集的相关操作" class="headerlink" title="5. 字符集的相关操作"></a><strong>5.</strong> <strong>字符集的相关操作</strong></h2><hr><h3 id="5-1-各级别的字符集"><a href="#5-1-各级别的字符集" class="headerlink" title="5.1 各级别的字符集"></a><strong>5.1</strong> <strong>各级别的字符集</strong></h3><pre class="line-numbers language-none"><code class="language-none">show variables like &#39;character%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>character_set_server：服务器级别的字符集</li><li>character_set_database：当前数据库的字符集</li><li>character_set_client：服务器解码请求时使用的字符集</li><li>character_set_connection：服务器处理请求时会把请求字符串从character_set_client转为character_set_connection</li><li>character_set_results：服务器向客户端返回数据时使用的字符集</li></ul><p><strong>小结</strong></p><ul><li>如果<code>创建或修改列</code>时没有显式的指定字符集和比较规则，则该列<code>默认用表的</code>字符集和比较规则</li><li>如果<code>创建表时</code>没有显式的指定字符集和比较规则，则该表<code>默认用数据库的</code>字符集和比较规则</li><li>如果<code>创建数据库时</code>没有显式的指定字符集和比较规则，则该数据库<code>默认用服务器的</code>字符集和比较规则</li></ul><h3 id="5-2-请求到响应过程中字符集的变化"><a href="#5-2-请求到响应过程中字符集的变化" class="headerlink" title="5.2 请求到响应过程中字符集的变化"></a><strong>5.2</strong> <strong>请求到响应过程中字符集的变化</strong></h3><pre class="line-numbers language-none"><code class="language-none">graph TBA(客户端) --&gt; |&quot;使用操作系统的字符集编码请求字符串&quot;| B(从character_set_client转换为character_set_connection)B --&gt; C(从character_set_connection转换为具体的列使用的字符集)C --&gt; D(将查询结果从具体的列上使用的字符集转换为character_set_results)D --&gt; |&quot;使用操作系统的字符集解码响应的字符串&quot;| A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-docker安装MySQL"><a href="#6-docker安装MySQL" class="headerlink" title="6.docker安装MySQL"></a>6.docker安装MySQL</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># docker 中下载 mysql</span>docker pull mysql<span class="token comment">#启动</span>docker run <span class="token comment">--name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=Lzslov123! -d mysql</span><span class="token comment">#进入容器</span>docker <span class="token keyword">exec</span> <span class="token operator">-</span>it mysql bash<span class="token comment">#登录mysql</span>mysql <span class="token operator">-</span>u root <span class="token operator">-</span>p<span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">'root'</span><span class="token variable">@'localhost'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'Lzslov123!'</span><span class="token punctuation">;</span><span class="token comment">#添加远程登录用户</span><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'liaozesong'</span><span class="token variable">@'%'</span> IDENTIFIED <span class="token keyword">WITH</span> mysql_native_password <span class="token keyword">BY</span> <span class="token string">'Lzslov123!'</span><span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'liaozesong'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据知识点汇总</title>
      <link href="/2022/07/14/da-shu-ju-zhi-shi-dian/"/>
      <url>/2022/07/14/da-shu-ju-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="linux常用命令"><a href="#linux常用命令" class="headerlink" title="linux常用命令"></a>linux常用命令</h3><table><thead><tr><th>序号</th><th>命令</th><th>命令解释</th></tr></thead><tbody><tr><td>1</td><td>top &#x2F; free</td><td>查看内存</td></tr><tr><td>2</td><td>df -h</td><td>查看磁盘存储情况</td></tr><tr><td>3</td><td>iotop</td><td>查看磁盘IO读写(yum install iotop安装）</td></tr><tr><td>4</td><td>iotop -o</td><td>直接查看比较高的磁盘读写程序</td></tr><tr><td>5</td><td>netstat -tunlp | grep 端口号</td><td>查看端口占用情况</td></tr><tr><td>6</td><td>uptime</td><td>查看报告系统运行时长及平均负载</td></tr><tr><td>7</td><td>ps -ef</td><td>查看进程</td></tr></tbody></table><h4 id="Shell常用工具"><a href="#Shell常用工具" class="headerlink" title="Shell常用工具"></a>Shell常用工具</h4><p>awk{print $1}；sed；cut；sort；xargs -n</p><p>单引号不取变量值，反引号执行命令，双引号嵌套单引号取变量值</p><hr><h3 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h3><table><thead><tr><th></th><th>hadoop2.x</th><th>Hadoop3.x</th></tr></thead><tbody><tr><td>访问HDFS端口</td><td>50070</td><td>9870</td></tr><tr><td>访问MR执行情况端口</td><td>8088</td><td>8088</td></tr><tr><td>历史服务器</td><td>19888</td><td>19888</td></tr><tr><td>客户端访问集群端口</td><td>9000</td><td>8020</td></tr></tbody></table><h4 id="HDFS读流程"><a href="#HDFS读流程" class="headerlink" title="HDFS读流程"></a>HDFS读流程</h4><ol><li>客户端向NameNode发送请求</li><li>NN返回目标文件的元数据</li><li>客户端向DataNode请求读取数据</li><li>读到数据后关闭FSDataInputStream</li></ol><h4 id="HDFS写流程"><a href="#HDFS写流程" class="headerlink" title="HDFS写流程"></a>HDFS写流程</h4><ol><li>客户端向NN请求上传</li><li>NN判断是否可以上传(权限 &#x2F; 文件if exists)并响应</li><li>Cli请求上传第一个块，请返回DN</li><li>NN根据节点选择，返回DN</li><li>Cli与对应DN建立传输通道</li><li>应答成功后传输数据</li><li>完成后关闭FSDataOutputStream</li></ol><h4 id="HDFS小文件处理"><a href="#HDFS小文件处理" class="headerlink" title="HDFS小文件处理"></a>HDFS小文件处理</h4><p>影响：<br>​1、存储：一个文件占用一个文件块,文件元数据存储在nn内会影响NameNode的寿命<br>​2、计算：一个小文件启用一个MapTask,默认1G</p><p>解决：<br>​1、采用har归档方式<br>​2、文件切片，采用CombineTextInputFormat把多个文件合并到一起统一切片<br>​3、开启JVM重用</p><h4 id="NameNode"><a href="#NameNode" class="headerlink" title="NameNode"></a>NameNode</h4><ul><li>内存是动态分配的，最小1G,每增加100万个block，增加1G内存</li><li>NN会维护一个心跳以确定DN的存在</li></ul><h4 id="纠删码原理"><a href="#纠删码原理" class="headerlink" title="纠删码原理"></a>纠删码原理</h4><p>每3个数据单元，生成2个校验单元，这5个单元中，只要有任意的3个单元存在(不管是数据单元还是校验单元，只要总数&#x3D;3)，就可以得到原始数据。</p><h4 id="MapReduce运行流程"><a href="#MapReduce运行流程" class="headerlink" title="MapReduce运行流程"></a>MapReduce运行流程</h4><p>Cli提交job -&gt;Yarn RM -&gt; TextInputFormat -&gt; kv -&gt; Mapper -&gt; 环形缓冲区 -&gt; Partitioner -&gt; 排序 -&gt; Merge归并 -&gt;Reducer -&gt;Merge </p><h4 id="shuffle及优化"><a href="#shuffle及优化" class="headerlink" title="shuffle及优化"></a>shuffle及优化</h4><ol><li>map后，reduce前(排序-&gt;分区内有序，归约-&gt;combiner，分组)</li><li>不影响业务逻辑下采用Combiner预聚合</li><li>减少溢写次数，修改环形缓冲区大小</li><li>自定义分区，减少数据倾斜</li><li>采用压缩，减少IO</li></ol><h4 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h4><ul><li>Application:Mr申请 -&gt; RM返回路径 -&gt; Mr提交资源 -&gt; 运行AM -&gt; NodeManager -&gt;  运行 -&gt; 注销YarnChild </li><li>Yarn的调度器:FIFO &#x2F; 容量(资源紧张) &#x2F; 公平(并发度)</li></ul><h4 id="数据倾斜"><a href="#数据倾斜" class="headerlink" title="数据倾斜"></a>数据倾斜</h4><ol><li>提前在map将key聚合combine,减少传输</li><li>两阶段聚合(局部聚合+整体聚合：如果key分布在不同mapper:二次mr，第一次将key随机散列到不同reducer进行处理达到负载均衡目的。第二次再根据去掉key的随机前缀，按原key进行reduce处理。)</li><li>实现自定义分区</li><li>增加Reducer，提升并行度</li></ol><hr><h3 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h3><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p>ls &#x2F; get &#x2F; creatae &#x2F; delete</p><h4 id="CAP法则"><a href="#CAP法则" class="headerlink" title="CAP法则"></a>CAP法则</h4><p>一个分布式系统不可能同时满足以下三种：</p><ul><li>一致性(C Consistency)：数据在多个副本之间能够保持数据一致的特性；</li><li>可用性 (A Available)：系统提供的服务一直处于可用的状态；</li><li>分区容错性(P Partition Tolerance)：分布式系统在遇到任何网络分区故障时，仍然需要能够保证对外提供满足一致性和可用性的服务</li></ul><p>ZooKeeper保证的CP</p><ol><li>不能保证每次服务请求的可用性(极端情况消费者程序要重新请求)</li><li>进行Leader选举时集群不可用</li></ol><h4 id="选举机制"><a href="#选举机制" class="headerlink" title="选举机制"></a>选举机制</h4><p>半数机制：2n+1，安装奇数台</p><p>10 &#x2F; 20 &#x2F; 100台服务器–3 &#x2F; 5 &#x2F; 11台安装zookeeper</p><h5 id="第一次选举"><a href="#第一次选举" class="headerlink" title="第一次选举"></a>第一次选举</h5><ol><li>服务器启动发起选举</li><li>首先给自己来一票</li><li>如果服务器状态为LOOKING则交换选票，否则保持</li><li>myid小的改票为下一台</li><li>如果下一台服务器的票数超过半数，立即当选Leader</li><li>后来服务器发动选举，如果有Leader则服从</li></ol><h5 id="非第一次选举"><a href="#非第一次选举" class="headerlink" title="非第一次选举"></a>非第一次选举</h5><p>服务器无法与Leader保持连接：</p><ul><li>服务器试图选举，被告知存在Leader，需要建立连接并状态同步</li></ul><p>集群中不存在Leader：</p><ul><li>EPOCH(任期代号)&gt;事务id大&gt;服务器id</li></ul><h4 id="Follower和Leader状态同步"><a href="#Follower和Leader状态同步" class="headerlink" title="Follower和Leader状态同步"></a>Follower和Leader状态同步</h4><p>当Follower或Leader挂掉会进行状态同步,L和F通过心跳监测机制来感知彼此的情况。</p><p>同步策略：差异化同步(DIFF)、回滚同步(TRUNC)、全量同步(SNAP)</p><ul><li>当Follower挂掉：事务id小于Leader的事务id则差异化，大于则回滚</li><li>当Leader挂掉：以新Leader为主，保证让 followers 同步已提交的提议，丢弃未提交的提议</li></ul><hr><h3 id="Flume"><a href="#Flume" class="headerlink" title="Flume"></a>Flume</h3><p>海量日志采集、聚合和传输的系统</p><p><img src="/../pic/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9F%A5%E8%AF%86%E7%82%B9/1657890222278.png" alt="Flume"></p><h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><p>1.event:基本传输单元-&gt; header|body</p><p>2.taildir source:</p><ul><li>断点续传、多目录；</li><li>不支持递归文件夹读取文件–需要自定义。</li></ul><p>3.channel:</p><ul><li>file channel :数据存储磁盘，可靠性高传输效率低；(可以配置dataDirs指向多个路径，增大吞吐量)–安全</li><li>Memory channel: 数据存储于内存，速度快可靠性差；–速度</li><li>Kafka channel：数据存储在Kafka，基于磁盘，可靠性高速度快，省去了sink阶段；–面向Kafka</li></ul><p>4.HDFS sink:拉取event，送到hdfs</p><p>5.Agent：source、channel、sink组成</p><h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><p>ETL拦截器、时间戳拦截器、自定义拦截器(注意实现Interceptor.Builder)</p><p>拦截器可以不用，但是需要在下一级进行处理。</p><h4 id="Channel选择器"><a href="#Channel选择器" class="headerlink" title="Channel选择器"></a>Channel选择器</h4><ul><li>Replicating：默认选择器(复制)</li><li>Multiplexing：选择性发往指定通道(多路复用)</li></ul><h4 id="Sink"><a href="#Sink" class="headerlink" title="Sink"></a>Sink</h4><ul><li>LoadBalancingSinkProcessor 可以实现负载均衡的功能；</li><li>FailoverSinkProcessor 可以错误恢复的功能</li></ul><h4 id="Flume监控器"><a href="#Flume监控器" class="headerlink" title="Flume监控器"></a>Flume监控器</h4><p>采用Ganglia，如果监控到尝试提交的次数远远大于最终成功的次数，说明Flume运行较差，可以增加内存。</p><h4 id="Flume的事务机制"><a href="#Flume的事务机制" class="headerlink" title="Flume的事务机制"></a>Flume的事务机制</h4><ul><li>使用两个独立的事务分别负责从Source 到 Channel(put)，以及从 Channel 到 Sink(take) 的事件传递;</li><li>数据可能重复(sink发出数据没响应会继续发送)、但不会丢失(事务机制，Memory Channel可能丢)；</li></ul><hr><h3 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h3><h4 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h4><p>生产者、Broker、消费者、Zookeeper(Broker id、ids等)</p><p><img src="/../pic/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9F%A5%E8%AF%86%E7%82%B9/1657890269522.png" alt="Kafka"></p><h4 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h4><ul><li>机器数量&#x3D;2 *(峰值生产速度 * 副本数  &#x2F;  100)+ 1</li><li>副本数：2 &#x2F; 3 -&gt; 提高可靠增加IO</li><li>日志保存(7天 ，建议3天</li><li>硬盘大小&#x3D;数据量 * 副本 * 天数  &#x2F;  70%</li><li>分区数&#x3D;期望吞吐量 &#x2F; min(producer,consumer吞吐量)</li><li>Topic数量&#x3D;日志类型数量</li><li>内存：默认1g</li></ul><h4 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h4><p>面向一个topic</p><ul><li><p>发送方式：同步、异步、带回调函数异步</p></li><li><p>分区分配策略：producer可以指定分区，将数据存储在（key的hash值 % 分区数）号分区中</p></li><li><p>提高吞吐：批次大小(batch.size:16k-&gt;32k) &#x2F; 等待时间(linger.ms:0-&gt;5-100ms) &#x2F; 压缩(compression.type) &#x2F; 缓冲区大小(32m-&gt;64m)</p></li><li><p>数据可靠：</p><p>Ack:</p><ol><li>Ack&#x3D;0:生产者发送消息增加offset，继续生产；数据可能丢失</li><li>Ack&#x3D;1:Leader应答增加offset；</li><li>Ack&#x3D;-1:Leader和ISR队列所有Follwer应答增加offset；数据可能重复</li></ol><p>幂等性(enable.idempotence) :生产者发送的消息Broker端只持久化一条（单分区单会话）</p><p>精确一次&#x3D;  幂等性 +  至少一次( ( ack&#x3D;-1 +  分区副本数&gt;&#x3D;2 + ISR 最小副本数量&gt;&#x3D;2) )+无限重试</p></li><li><p>数据重复：开启事务（ 必须指定transactional.id）或在下一级（分组、开窗）</p></li></ul><h4 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h4><p>与zookeeper交互保证集群运行，版本0.9之后offset保存在topic中。</p><h5 id="服役新节点"><a href="#服役新节点" class="headerlink" title="服役新节点"></a>服役新节点</h5><ol><li>创建一个要均衡的主题</li><li>生成一个负载均衡的计划</li><li>创建副本存储计划</li><li>执行副本存储计划</li><li>验证副本存储计划</li></ol><h5 id="退役旧节点"><a href="#退役旧节点" class="headerlink" title="退役旧节点"></a>退役旧节点</h5><ul><li>生成执行计划，同服役</li></ul><p>Flower挂：踢出isr,其他不影响，上线后读取log里面副本中最小的offset（HW)，直到&gt;&#x3D;HW</p><p>Leader挂：从isr选新，其余follower从新Leader同步</p><h5 id="offset提交"><a href="#offset提交" class="headerlink" title="offset提交"></a>offset提交</h5><p>自动（可能重复消费） &#x2F; 手动（可能漏消费）；</p><p>为避免可以将消费过程与提交offset过程做原子绑定，要求下游支持事务。</p><h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><ul><li><p>拉取数据</p></li><li><p>Consumer Group （CG ）：消费者组，由多个 consumer组成,面向一个topic。</p><p>1.消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个组内消费者消费，一个消费者可以消费多个分区（组内只有自己消费此分区）；</p><p>2.消费者组之间互不影响。所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者</p></li><li><p>再平衡及Range(将TopicAndPartition按照hashCode排序，轮询发给每个消费线程)</p></li><li><p>保证数据有序：开启幂等性-&gt;缓存数量小于5个，会在服务端重新排序 ;关闭幂等性-&gt;缓存数量设为1（因幂等性，所以单分区有序）</p></li><li><p>副本同步队列：zookeeper会维持一个isr队列，Leader挂掉会顺延isr中下一个服务，当心跳超过45s或者处理消息超过5分钟就会认为服务不可用并剔除出isr。</p></li><li><p>数据可靠：手动提交offset</p></li><li><p>可以按照时间消费数据：需要将offset转换为时间戳KafkaUtil.fetchOffsetsWithTimestamp</p></li></ul><h4 id="数据积压"><a href="#数据积压" class="headerlink" title="数据积压"></a>数据积压</h4><p>消费能力不足：增加topic分区数，提升消费者数量，消费者数 &#x3D; 分区数；</p><p>下游处理不及时（生产速度&gt;拉取速度）：提高每批次拉取的数量；</p><h4 id="如何实现高效读写"><a href="#如何实现高效读写" class="headerlink" title="如何实现高效读写"></a>如何实现高效读写</h4><ol><li>本身是分布式集群，同时采用分区技术，并发度高；</li><li>顺序写磁盘：生产者生产数据是追加到log文件的末端；</li><li>读数据采用稀疏索引，可以快速定位</li><li>零复制技术</li></ol><h4 id="单条日志大小"><a href="#单条日志大小" class="headerlink" title="单条日志大小"></a>单条日志大小</h4><p>如果遇到一条消息大于1M,默认情况下可能procuder无法推送或consumer无法消费；</p><p>需要配置server.properties中的replica.fetch.max.bytes（可复制的消息的最大字节数）和message.max.bytes（kafka 会接收单个消息size的最大限制）。需注意接收必须小于等于复制</p><h4 id="过期数据清除"><a href="#过期数据清除" class="headerlink" title="过期数据清除"></a>过期数据清除</h4><p>log.cleanup.policy&#x3D;delete（删除） &#x2F;  compact（压缩）</p><h4 id="数据顺序"><a href="#数据顺序" class="headerlink" title="数据顺序"></a>数据顺序</h4><p>单分区内有序；多分区，分区与分区间无序；</p><p>生产者可以指定key以将数据发送到同一个分区；</p><hr><h3 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h3><p>可以将结构化数据映射成一张数据表,并提供类SQL的查询功能，本质是将SQL语句转化成MapReduce程序；</p><p>Hive元数据默认存储在derby数据库，不支持多客户端访问，所以将元数据存储在MySQL，支持多客户端访问。</p><p><img src="/../pic/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9F%A5%E8%AF%86%E7%82%B9/1657890300277.png" alt="1657890300277"></p><h4 id="与数据库比较"><a href="#与数据库比较" class="headerlink" title="与数据库比较"></a>与数据库比较</h4><ul><li>类似的查询语句；</li><li>数据存储在HDFS；</li><li>数据更新不建议改写；</li><li>执行延迟较高，需要将hql转换为Map Reduce跑job</li><li>数据规模很大；</li></ul><h4 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token punctuation">[</span>EXTERNAL<span class="token punctuation">]</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> table_name <span class="token operator">/</span> <span class="token operator">*</span>创建<span class="token punctuation">[</span>外部<span class="token punctuation">]</span>表<span class="token operator">*</span> <span class="token operator">/</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>col_name data_type <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> col_comment<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">COMMENT</span> table_comment<span class="token punctuation">]</span><span class="token punctuation">[</span>PARTITIONED <span class="token keyword">BY</span> <span class="token punctuation">(</span>col_name data_type <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> col_comment<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token operator">*</span>分区<span class="token operator">*</span> <span class="token operator">/</span> <span class="token punctuation">[</span><span class="token keyword">CLUSTERED</span> <span class="token keyword">BY</span> <span class="token punctuation">(</span>col_name<span class="token punctuation">,</span> col_name<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token operator">*</span>分桶表<span class="token operator">*</span> <span class="token operator">/</span> <span class="token punctuation">[</span>SORTED <span class="token keyword">BY</span> <span class="token punctuation">(</span>col_name <span class="token punctuation">[</span><span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">INTO</span> num_buckets BUCKETS<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token operator">*</span>桶内排序<span class="token operator">*</span> <span class="token operator">/</span> <span class="token punctuation">[</span><span class="token keyword">ROW</span> FORMAT row_format<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token operator">*</span>格式化表<span class="token operator">*</span> <span class="token operator">/</span> <span class="token punctuation">[</span>STORED <span class="token keyword">AS</span> file_format<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token operator">*</span>指定存储文件类型<span class="token operator">*</span> <span class="token operator">/</span> <span class="token punctuation">[</span>LOCATION hdfs_path<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token operator">*</span>指定表在HDFS的路径<span class="token operator">*</span> <span class="token operator">/</span> <span class="token punctuation">[</span>TBLPROPERTIES <span class="token punctuation">(</span>property_name<span class="token operator">=</span>property_value<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">/</span> <span class="token punctuation">[</span><span class="token keyword">AS</span> select_statement<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token operator">*</span>根据查询结果创建表<span class="token operator">*</span> <span class="token operator">/</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"> <span class="token operator">/</span> <span class="token operator">*</span>格式化表种类<span class="token operator">*</span> <span class="token operator">/</span> DELIMITED <span class="token punctuation">[</span><span class="token keyword">FIELDS</span> <span class="token keyword">TERMINATED</span> <span class="token keyword">BY</span> <span class="token keyword">char</span><span class="token punctuation">]</span>  <span class="token operator">/</span> <span class="token operator">*</span>指定分隔符<span class="token operator">*</span> <span class="token operator">/</span> <span class="token punctuation">[</span>COLLECTION ITEMS <span class="token keyword">TERMINATED</span> <span class="token keyword">BY</span> <span class="token keyword">char</span><span class="token punctuation">]</span><span class="token punctuation">[</span>MAP <span class="token keyword">KEYS</span> <span class="token keyword">TERMINATED</span> <span class="token keyword">BY</span> <span class="token keyword">char</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">LINES</span> <span class="token keyword">TERMINATED</span> <span class="token keyword">BY</span> <span class="token keyword">char</span><span class="token punctuation">]</span><span class="token operator">|</span>SERDE serde_name<span class="token punctuation">[</span><span class="token keyword">WITH</span> SERDEPROPERTIES <span class="token punctuation">(</span>property_name<span class="token operator">=</span>property_value<span class="token punctuation">,</span> property_name<span class="token operator">=</span>property_value<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="内部-管理-表和外部表external"><a href="#内部-管理-表和外部表external" class="headerlink" title="内部(管理)表和外部表external"></a>内部(管理)表和外部表external</h4><p>元数据：指向原始数据的路径；原始数据：数据的存储位置</p><table><thead><tr><th></th><th>内部表</th><th>外部表</th></tr></thead><tbody><tr><td>创建</td><td>移动原始数据</td><td>路径记录到元数据</td></tr><tr><td>删除</td><td>元 &#x2F; 原始数据都删</td><td>只删除元数据</td></tr></tbody></table><h4 id="四个By"><a href="#四个By" class="headerlink" title="四个By"></a>四个By</h4><ul><li>Order By：全局排序，只有一个Reducer；</li><li>Sort By：分区内有序；</li><li>Distrbute By：根据指定字段进行分区，将数据划分到不同reduce中，结合sort by使用,distrbute by 在前（例如按学院编号分区，学生学号排序）；</li><li>Cluster By：当Distribute by和Sorts by字段相同时，可以使用Cluster by方式，只能升序；</li></ul><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><ul><li>nvl(val,def_val):返回非空值否则null；</li><li>coalesce(v1,v2,…):返回第一个非空值否则null；</li><li>CASE WHEN THEN ELSE END ：多分支；</li><li>grouping_set:多维分析；</li><li>cast(col as type):格式转换;</li></ul><h5 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h5><ul><li>unix_timestamp:返回当前或指定时间的时间戳；</li><li>year &#x2F; month &#x2F; day &#x2F; hour &#x2F; minute &#x2F; second &#x2F; week:年月日时分秒周；</li><li>datediff：两个日期相差的天数；</li><li>date_add：日期加减天数；</li><li>add_months：日期加减月；</li><li>next_day(date,week): 下周几的日期；</li><li>last_day:当月最后一天；</li><li>date_format(): 格式化日期；</li></ul><h5 id="取整函数"><a href="#取整函数" class="headerlink" title="取整函数"></a>取整函数</h5><ul><li>round： 四舍五入；</li><li>ceil：  向上取整；</li><li>floor： 向下取整；</li><li>rand:随机数；</li></ul><h5 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h5><ul><li>upper： 转大写；</li><li>lower： 转小写；</li><li>length： 长度；</li><li>trim：  前后去空格；</li><li>reverse：反转；</li><li>concat:字符串连接；</li><li>concat_ws:带分隔符字符串连接（只接受string or array<string>）；</li><li>substr:字符串截取；</li><li>get_json_object(string json_string, string path)：解析json函数；</li><li>regexp_replace：使用正则表达式匹配目标字符串，匹配成功后替换；</li></ul><h5 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h5><ul><li>size： 集合中元素的个数；</li><li>spilt:按照指定字符切割返回字符串数组；</li><li>map_keys &#x2F; map_values： 返回map中的key &#x2F; value；</li><li>array_contains: 判断array中是否包含某个元素；</li><li>collect_set(col) &#x2F; collect_list() : 返回去重 &#x2F; 不去重后的汇总array (接受基本数据类型)；</li><li>explode：将array或map炸裂成多行（如果想要与原字段关联需要用到lateral view侧表）；</li><li>LATERAL VIEW udtf(expression) tableAlias AS columnAlias:udtf函数与原字段关联所需，在from表后；</li></ul><h4 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h4><ul><li><a href="https://blog.csdn.net/hello_java_lcl/article/details/106690120">更多</a></li><li><a href="https://cwiki.apache.org/confluence/display/Hive//LanguageManual">官网</a></li></ul><h4 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h4><h5 id="rank排名函数"><a href="#rank排名函数" class="headerlink" title="rank排名函数"></a>rank排名函数</h5><ul><li>RANK() 排序相同时会重复，总数不会变(113)；</li><li>DENSE_RANK() 排序相同时会重复，总数会减少(112)；</li><li>ROW_NUMBER() 会根据顺序计算(123)；</li></ul><h5 id="over-窗口大小"><a href="#over-窗口大小" class="headerlink" title="over()窗口大小"></a>over()窗口大小</h5><ul><li>current row:当前行；</li><li>n preceding &#x2F; following：往前 &#x2F; 后几行；</li><li>unbounded:起点，unbounded preceding：从前面起点，unbounded following：到后面终点；</li><li>LAG &#x2F; LEAD(col,n):往前 &#x2F; 后第n行数据；</li><li>ntile(n):将数据分成n块；</li></ul><h5 id="例"><a href="#例" class="headerlink" title="例"></a>例</h5><p>rank() over(partition by col1,col2 order by col1 desc,col3 asc rows between … and …)</p><h4 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h4><ul><li>UDF：一进一出；</li><li>UDAF：聚集函数，多进一出（max,rank）；</li><li>UDTF： 一进多出;<ol><li>udtf -&gt; 重写3个方法：a. initialize（自定义输出的列名和类型）b. process（将结果返回forward(result)）c. close ;</li><li>上传jar包到hive的classpath下</li><li>创建函数</li><li>使用函数</li></ol></li></ul><h4 id="DML数据操作"><a href="#DML数据操作" class="headerlink" title="DML数据操作"></a>DML数据操作</h4><h5 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h5><ul><li>load data [local] inpath ‘数据的 path’ [overwrite] into table tab_name [partition (partcol1&#x3D;val1,…)]; -&gt;装载数据</li><li>insert [overwrite|into] table tab_name partition(partcol1&#x3D;val1) &lt;查询语句&gt;；-&gt;通过查询插入数据</li><li>create table if not exists tab_name as select；-&gt;建表时加载数据</li><li>location ‘Path’ ;-&gt;建表时指定数据路径</li><li>import table tab_name from ‘Path’; -&gt;export导出后，Import导入</li></ul><h5 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h5><ul><li>insert overwrite [local] directory ‘Path’ &lt;查询语句&gt; ；-&gt;insert导出</li><li>Hadoop中原始数据导出到本地</li><li>hive -f &#x2F; -e 执行语句或者脚本 &gt; file ；-&gt; Linux追加到文件</li><li>export table tab_name to ‘Path’; -&gt;两个 Hadoop 平台集群之间 Hive 表迁移</li><li>Sqoop 导出</li></ul><h4 id="hive优化"><a href="#hive优化" class="headerlink" title="hive优化"></a>hive优化</h4><h5 id="explain查看执行计划"><a href="#explain查看执行计划" class="headerlink" title="explain查看执行计划"></a>explain查看执行计划</h5><p>EXPLAIN [EXTENDED…] query-sql 查看sql[详细]执行计划</p><p>show partitions|functions name 查看分区表|函数情况</p><h5 id="建表（分区-x2F-桶-存储格式-压缩）"><a href="#建表（分区-x2F-桶-存储格式-压缩）" class="headerlink" title="建表（分区 &#x2F; 桶,存储格式,压缩）"></a>建表（分区 &#x2F; 桶,存储格式,压缩）</h5><ol><li><p>分区表</p><p>对应HDFS上的独立文件夹，分区就是分目录；</p><p>分区字段不能是表中存在的数据，可以看作时表的伪列；</p><p>查询时通过where查询指定分区，效率无敌！；</p><ol><li><p>创建</p><p>建表时加入partitioned by (col string)；</p><p>分区表加载数据时，必须指定分区；</p></li><li><p>二级分区</p><p>分区字段增加一个</p></li><li><p>动态分区</p><p>对分区表insert数据时，数据库会根据分区字段将数据插入对应分区。</p><p>配置：开启动态分区功能、设置为非严格模式、在每个 &#x2F; 所有MR节点可以创建多少动态分区、MR Job中，最大可以创建多少个HDFS文件。例：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">table</span> tab_name <span class="token keyword">partition</span><span class="token punctuation">(</span>loc<span class="token punctuation">)</span> <span class="token keyword">select</span> col1<span class="token punctuation">,</span> loc <span class="token keyword">from</span> dept<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>分桶表</p><p>分区针对的是数据的存储路径，分桶针对的是数据文件。</p><ol><li><p>创建</p><p>建表时加入 clustered by(id) into 4 buckets；</p><p>reduce个数设置-1或大于等于分桶数，</p></li><li><p>抽样查询</p><p><code>TABLESAMPLE(BUCKET x OUT OF y)</code> ：x&lt;&#x3D;y</p></li></ol></li><li><p>文件格式</p><ol><li><p>列式存储和行式存储</p><p>行存储更适合查询一整行数据的情况；</p><p>列存储是个查询只需要少数字段情况，由于每个字段数据类型相同，所以更适合压缩；</p></li><li><p>TextFile格式</p><p>默认格式，数据不做压缩耗费资源；行式存储</p></li><li><p>Orc格式</p><p>列式存储</p></li><li><p>Parquet格式</p><p>以二进制方式存储，文件包括数据和元数据；列式存储</p></li></ol></li><li><p>压缩格式</p><table><thead><tr><th>压缩格式</th><th>切片</th></tr></thead><tbody><tr><td>DEFLATE</td><td>否</td></tr><tr><td>Gzip</td><td>否</td></tr><tr><td>bzip2</td><td>是</td></tr><tr><td>LZO</td><td>是</td></tr><tr><td>Snappy</td><td>否</td></tr></tbody></table></li></ol><h5 id="语法优化"><a href="#语法优化" class="headerlink" title="语法优化"></a>语法优化</h5><ul><li><p>多重插入</p><p>如果导入数据时遇到多条sql模式相同并且从同一个表扫描，可以使用多重插入，一次读取，多次插入。</p></li><li><p>行列过滤</p><p>行处理：使用外连接时将副表的过滤条件写到on(副表的查询)中，否则会先全表关联，在进行过滤。</p><p>列处理:只拿需要的列，少用select *，只读取需要的分区。</p></li><li><p>in &#x2F; exists语句</p><p>在sql中多用exists，在hive中用left semi join 实现会更好。</p></li><li><p>小表、大表join(MapJOIN)</p><p>默认开启；</p><p>MAPJION会把小表全部读入内存中，在map阶段直接拿另外一个表的数据和内存中表数据做匹配，由于在map是进行了join操作，省去了reduce运行的效率也会高很多</p></li><li><p>大表、大表Join</p><p>a.空key过滤：如果join条件中有key为异常数据，则条件过滤；</p><p>b.空key转换：可以表中 key 为空的字段赋一个随机的值</p><p>c.SMB：分桶表join</p></li><li><p>笛卡尔积</p><p>join不加on条件或者无效，会使用1个reduce完成笛卡尔积，设置为严格模式，不允许出现笛卡尔积</p></li><li><p>Count(distinct) </p><p>此操作需要一个reduce task完成，可以用group by + count 替换</p></li><li><p>union(去重) union all (不去重)</p></li></ul><h5 id="job优化"><a href="#job优化" class="headerlink" title="job优化"></a>job优化</h5><ol><li><p>map优化</p><p>MapTask数&#x3D;文件数，尽量减少小文件；</p><p>a. 小文件进行合并：在Map前合并小文件(CombineHiveInputFormat)、在输出合并小文件（merge）；</p><p>b. 复杂文件增加Map数：当input的文件都很大，任务逻辑复杂，可以增加Map数(使每个map处理的数据量减少，减小max可以增加map数，增大max可以减少map数)；</p><p>c. 开启map端聚合combiner（不影响最终业务逻辑）；</p></li><li><p>reduce优化</p><p>一个reduce会生成一个文件，启动和初始化也会消耗时间；</p><p>处理大数据量利用合适的Reduce数；使单个Reduce任务处理数据量大小要合适；</p></li><li><p>整体优化</p><p>a.Fetch抓取：在某些情况不会使用MR计算；</p><p>b.小数据集使用本地模式( set hive.exec.mode.local.auto&#x3D;true;)；</p><p>c.数据量大使用并行执行(set hive.exec.parallel&#x3D;true;)；</p><p>d.严格模式(hive.strict.checks)：分区表使用分区过滤、order by 指定limit、笛卡尔积</p><p>e.小文件过多JVM重用</p><p>f.压缩</p></li></ol><h4 id="数据倾斜-1"><a href="#数据倾斜-1" class="headerlink" title="数据倾斜"></a>数据倾斜</h4><p>少数任务相比下执行很慢。</p><h5 id="单表"><a href="#单表" class="headerlink" title="单表"></a>单表</h5><ol><li>Group by -&gt; 进行负载均衡(set hive.groupby.skewindata &#x3D; true;)、map端进行聚合(hive.map.aggr)</li><li>多个相同key导致 -&gt;增加Reduce数量、自定义分区器、加随机数或过滤</li></ol><h5 id="Join数据倾斜优化"><a href="#Join数据倾斜优化" class="headerlink" title="Join数据倾斜优化"></a>Join数据倾斜优化</h5><ol><li>MapJoin,将小表读入内存；</li><li>使用参数：如果join的键对应的记录数超过(hive.skewjoin.key)则进行分拆</li></ol><h4 id="hive分隔符和空值"><a href="#hive分隔符和空值" class="headerlink" title="hive分隔符和空值"></a>hive分隔符和空值</h4><p>在建表时通过<code>FIELDS TERMINATED BY</code> 指定分割符；</p><p>null实际在HDFS中默认存储为’\N’；可以自定义底层用什么表示null；判断使用a is null 或者 a&#x3D;’\N’；处理使用nvl,case,coalcsce；</p><h4 id="引擎对比"><a href="#引擎对比" class="headerlink" title="引擎对比"></a>引擎对比</h4><p>Mr引擎：多job串联，基于磁盘，落盘的地方比较多;</p><p>Spark引擎：Shuffle过程中落盘,兼顾了可靠性和效率;</p><p>Tez引擎：完全基于内存，将多个有依赖的作业转换为一个作业，只需写一次HDFS。</p><hr><h3 id="Sqoop"><a href="#Sqoop" class="headerlink" title="Sqoop"></a>Sqoop</h3><h4 id="sqoop参数"><a href="#sqoop参数" class="headerlink" title="sqoop参数"></a>sqoop参数</h4><pre class="line-numbers language-sqoop" data-language="sqoop"><code class="language-sqoop">&#x2F;opt&#x2F;module&#x2F;sqoop&#x2F;bin&#x2F;sqoop import \--connect \--username \--password \--target-dir \--delete-target-dir \--num-mappers \--fields-terminated-by   \--query   &quot;$2&quot; &#39; and $CONDITIONS;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="导入导出null存储一致性"><a href="#导入导出null存储一致性" class="headerlink" title="导入导出null存储一致性"></a>导入导出null存储一致性</h4><p>hive中null底层表示为’\N’ ，mysql中表示为Null，为保持导入 &#x2F; 出一致：</p><p>导入-&gt;–null-string和–null-non-string</p><p>导出-&gt;–input-null-string和–input-null-non-string</p><h4 id="数据导出一致性"><a href="#数据导出一致性" class="headerlink" title="数据导出一致性"></a>数据导出一致性</h4><p>指导出部分成功数据导致数据出错，使用–staging-table 充当用于暂存导出数据的辅助表以解决</p><h4 id="导出Parquet"><a href="#导出Parquet" class="headerlink" title="导出Parquet"></a>导出Parquet</h4><p>如果是列式存储则不能直接导出。</p><ol><li>创建临时表保存parquet</li><li>将临时表导出</li></ol><hr><h3 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h3><hr><h3 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h3><ul><li>变量和数据类型以及隐式转换（var 变量val 常量）</li><li>流程控制（if-else、for、while）以及模式匹配（switch case  样例类）</li><li>函数式编程(高阶函数、匿名函数、函数柯里化、函数参数以及函数至简原则、闭包)</li><li>面向对象(特质-&gt;第一个用extends后面用with；apply)</li><li>集合（List，Array，Map及函数）</li><li>异常及泛型</li></ul><p><img src="/../pic/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9F%A5%E8%AF%86%E7%82%B9/1657890327787.png" alt="Scala隐式转换"></p><hr><h3 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h3><p>解决海量数据的分析计算；先申请资源，在进行计算；</p><h4 id="运行框架"><a href="#运行框架" class="headerlink" title="运行框架"></a>运行框架</h4><p><img src="/../pic/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9F%A5%E8%AF%86%E7%82%B9/1657890365501.png" alt="Spark"></p><ol><li>构建Application环境，申请资源；</li><li>启动Executor,与Cluster Manager维持心跳；</li><li>Spark Context构建DAG，将 DAG 图分解成多个 Stage,任务调度器将task分发；</li><li>Executor执行任务；</li></ol><h5 id="Driver"><a href="#Driver" class="headerlink" title="Driver"></a>Driver</h5><ul><li>将用户程序转化为作业（job）</li><li>在 Executor 之间调度任务(task)</li><li>跟踪Executor 的执行情况</li><li>通过UI 展示查询运行情况</li><li>算子以外的代码都是在Driver 端执行</li></ul><h5 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h5><ul><li>运行在工作节点（Worker）中的一个JVM 进程，是整个集群中的专门用于计算的节点；</li><li>RDD 直接缓存 Executor 进程内；</li><li>算子里面的代码都是在Executor 端执行</li></ul><h5 id="Master-amp-Worker"><a href="#Master-amp-Worker" class="headerlink" title="Master &amp; Worker"></a>Master &amp; Worker</h5><p>独立部署环境中</p><ul><li>Master是一个进程，负责资源的调度和分配，并进行集群的监控等；</li><li>Worker 运行在集群中的一台服务器上，由 Master 分配资源对数据进行并行的处理和计算；</li></ul><h5 id="ApplicationMaster"><a href="#ApplicationMaster" class="headerlink" title="ApplicationMaster"></a>ApplicationMaster</h5><p>用于向资源调度器申请Container容器，资源与计算的解耦；</p><h4 id="Spark运行模式"><a href="#Spark运行模式" class="headerlink" title="Spark运行模式"></a>Spark运行模式</h4><ul><li>Local：运行在一台机器上。 测试用。</li><li>Standalone：是Spark自身的一个调度系统。 </li><li>Yarn：采用Hadoop的资源调度器</li></ul><h4 id="Spark常用端口号"><a href="#Spark常用端口号" class="headerlink" title="Spark常用端口号"></a>Spark常用端口号</h4><ul><li>4040:spark-shell 任务端口</li><li>7077：内部通讯端口</li><li>8080：任务执行的端口</li><li>18080：历史服务器</li></ul><h4 id="RDD五大属性"><a href="#RDD五大属性" class="headerlink" title="RDD五大属性"></a>RDD五大属性</h4><p>rdd主要是将逻辑封装，生成task发送到executor执行计算</p><ol><li><p>分区列表</p><p>rdd是被分区的，每个分区都会被一个计算任务(Task)处理，用于执行任务时并行计算；</p></li><li><p>每个分区都有计算函数</p><p>使用分区函数对每个分区计算；</p></li><li><p>基于其他rdd的列表</p><p>rdd之间的依赖关系(血缘)：宽依赖(有shuffle)和窄依赖(每个上游rdd最多被下游的一个分区使用-&gt;独生子女)；</p></li><li><p>key-value数据类型的分区器</p><p>当数据为 KV 时，可以通过(Hash分区 &#x2F; Range分区 &#x2F; 用户自定义分区)指定分区；</p></li><li><p>首选位置</p><p>计算数据时，可以根据计算节点的状态选择不同的节点位置进行计算；</p></li></ol><h4 id="RDD转换算子"><a href="#RDD转换算子" class="headerlink" title="RDD转换算子"></a>RDD转换算子</h4><p>value: map &#x2F; mapPartitions &#x2F; mapPartitionsWithIndex &#x2F; flatMap &#x2F; glom &#x2F; groupBy &#x2F; filter &#x2F; sample &#x2F; distinct &#x2F; coalesce &#x2F; repartition &#x2F; sortBy</p><p>双value：intersection &#x2F; union &#x2F; subtract &#x2F; zip</p><p>key-value: partitionBy &#x2F; reduceByKey &#x2F; groupByKey &#x2F; aggregateByKey &#x2F; foldByKey &#x2F; combineByKey &#x2F; sortByKey &#x2F; join &#x2F; leftOuterJoin &#x2F; cogroup</p><h4 id="RDD行动算子"><a href="#RDD行动算子" class="headerlink" title="RDD行动算子"></a>RDD行动算子</h4><p>reduce &#x2F; collect &#x2F; count &#x2F; first &#x2F; take &#x2F; takeOrdered &#x2F; aggregate &#x2F; fold &#x2F; countByKey &#x2F; foreach &#x2F; save相关</p><p>当spark与数据库操作时，由于数据算子内的操作都是在executor端做的，所以需要有闭包的问题，可以使用foreachPartition代替foreach，在前者中获取数据库连接，那样只需要在一个分区内连接一次了。</p><h4 id="RDD-序列化"><a href="#RDD-序列化" class="headerlink" title="RDD 序列化"></a>RDD 序列化</h4><p>在函数式编程中算子内会用到算子外的数据，形成闭包的效果，由于算子里面的代码都是在Executor端执行的，所以要将数据发送到Executor中，所以需要序列化。</p><p>Kryo 序列化框架：</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token comment">// 替换默认的序列化机制</span><span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">"spark.serializer"</span><span class="token punctuation">,</span><span class="token string">"org.apache.spark.serializer.KryoSerializer"</span><span class="token punctuation">)</span><span class="token comment">// 注册需要使用 kryo 序列化的自定义类</span><span class="token punctuation">.</span>registerKryoClasses<span class="token punctuation">(</span>Array<span class="token punctuation">(</span>classOf<span class="token punctuation">[</span>Searcher<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>序列化需要继承Serializable 接口</p><h4 id="RDD-持久化"><a href="#RDD-持久化" class="headerlink" title="RDD 持久化"></a>RDD 持久化</h4><ul><li><p>cache:将数据存储在磁盘、内存等，不切断血缘依赖；</p></li><li><p>checkpoint：将数据存储在HDFS等高可用的文件系统，切断血缘关系；</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">rdd<span class="token punctuation">.</span>cache<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//rdd默MEMORY_ONLY</span>df<span class="token punctuation">.</span>cache<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//dataframe默MEMORY_AND_DISK</span><span class="token comment">// 设置检查点路径</span>sc<span class="token punctuation">.</span>setCheckpointDir<span class="token punctuation">(</span><span class="token string">"./checkpoint1"</span><span class="token punctuation">)</span>rdd<span class="token punctuation">.</span>checkpoint<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建议对checkpoint()的RDD 使用Cache 缓存</p></li></ul><h4 id="累加器"><a href="#累加器" class="headerlink" title="累加器"></a>累加器</h4><p>将Executor 端变量信息聚合到Driver 端。</p><h5 id="系统累加器"><a href="#系统累加器" class="headerlink" title="系统累加器"></a>系统累加器</h5><ol><li>声明<code>sc.longAccumulator(&quot;name&quot;)</code></li><li>使用<code>acc.add()</code></li><li>取值 <code>acc.value</code></li></ol><h5 id="自定义累加器"><a href="#自定义累加器" class="headerlink" title="自定义累加器"></a>自定义累加器</h5><ol><li>继承 AccumulatorV2，并设定泛型</li><li>重写累加器的抽象方法</li></ol><h4 id="广播变量"><a href="#广播变量" class="headerlink" title="广播变量"></a>广播变量</h4><p>向所有工作节点发送一个较大的只读值。</p><ol><li>声明：<code>sc.broadcast(较大的对象)</code></li><li>使用：<code>broadcast.value</code></li></ol><h4 id="任务的划分"><a href="#任务的划分" class="headerlink" title="任务的划分"></a>任务的划分</h4><ul><li>Application：初始化一个SparkContext即生成一个Application；</li><li>Job：一个Action算子就会生成一个Job；</li><li>Stage：Stage等于宽依赖的个数加1；</li><li>Task：一个Stage阶段中，最后一个RDD的分区个数就是Task的个数。</li></ul><h4 id="RDD、DataFrame、DataSet三者的转换"><a href="#RDD、DataFrame、DataSet三者的转换" class="headerlink" title="RDD、DataFrame、DataSet三者的转换"></a>RDD、DataFrame、DataSet三者的转换</h4><p><img src="/../pic/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9F%A5%E8%AF%86%E7%82%B9/1657890061950.png" alt="RDD-DataFrame-DataSet"></p><ul><li>DataFrame每一行的类型固定为Row，通过解析可以获取各个字段值；</li><li>DataSet每一行的类型是不一定的，通过getAS方法或者模式匹配拿出特定字段；</li></ul><h4 id="Spark-Streaming"><a href="#Spark-Streaming" class="headerlink" title="Spark Streaming"></a>Spark Streaming</h4><h5 id="参数调整"><a href="#参数调整" class="headerlink" title="参数调整"></a>参数调整</h5><ul><li>auto.offset.reset -&gt; earliest 从最初始偏移量开始消费数据；</li><li>spark.streaming.kafka.maxRatePerPartition 从kafka分区每秒拉取的条数(延迟)；</li><li>spark.streaming.backpressure.enabled 背压机制，根据延迟动态消费Kafka数据；</li><li>spark.streaming.stopGracefullyOnShutdown 在JVM关闭时正常StreamingContext;</li><li>默认分区数与对接Kafka topic 分区个数一致；</li><li>一个stage耗时由最慢task决定；</li></ul><h5 id="Kafka数据源"><a href="#Kafka数据源" class="headerlink" title="Kafka数据源"></a>Kafka数据源</h5><p>Receiver：需要一个专门executor接收数据然后发到计算executor中，接收数据的Executor和计算的Executor 速度会有所不同，可能会导致内存溢出；</p><p>Direct：使用Kafka的api，Spark Streaming自己就负责追踪消费的offset，并保存在checkpoint中。可以保证数据消费一次且仅消费一次。</p><h5 id="无状态-x2F-有状态转换"><a href="#无状态-x2F-有状态转换" class="headerlink" title="无状态&#x2F;有状态转换"></a>无状态&#x2F;有状态转换</h5><ul><li><p>transform</p><p>将DStream转换为rdd操作；</p></li><li><p>UpdateStateByKey</p><p>需要对检查点目录进行配置，会使用检查点来保存状态；</p></li><li><p>WindowOperations</p><p>在原来SparkStreaming计算批次上封装，增加窗口时长以及滑动步长：必须为采集周期大小的整数倍；</p></li></ul><h4 id="Spark-数据倾斜"><a href="#Spark-数据倾斜" class="headerlink" title="Spark 数据倾斜"></a>Spark 数据倾斜</h4><ul><li><p>表现</p><p>部分任务极慢，任务卡在某个阶段不能结束，任务突然失败</p></li><li><p>原因</p><p>数据激增，Key分布不均，建表连接性差；</p></li><li><p>思路</p><p>数据预处理，异常值过滤；</p><p>数据激增可以单独对这部分数据做两次MR先打散在聚合；</p><p>优化代码逻辑，优化sql(每个行动算子都会增加job,每次shuffle都会增加一个阶段)、调参(Hadoop切片、预聚合、合并，hive中MapJoin等)；</p></li><li><p>定位数据倾斜</p><ol><li>通过web UI或者日志查看task运行情况，定位是哪个stage出现问题；</li><li>代码中在spark或sparkSQL中出现shuffle语言，那么就可以分出前后两个stage，定位出现问题的stage，优化代码逻辑。</li></ol></li><li><p>方法</p><ul><li>hive中ETL处理数据(在hive中预先将key聚合，spark对预处理的hive表操作) -&gt;提升性能但是在hive ETL中还是会倾斜；</li><li>过滤掉少数导致倾斜的key(filter&#x2F;where) -&gt; 适用于倾斜的key少并且对计算本身影响不大的情况;</li><li>提高shuffle操作的并行度(在执行shuffle算子的时候传入参数设置spark.sql.shuffle.partitions，代表了并行度，默认200)-&gt;适用于相同key数据不多情况；</li><li>两阶段聚合（局部聚合+全局聚合）先将key打上随机数前缀后聚合，然后将前缀去掉全局聚合 -&gt; 适用于聚合类的shuffle操作；</li><li>将reduce join转为map join(将较小的rdd直接collect拉到内存，然后对其创建广播变量，遍历较大的rdd与变量合并) -&gt; 适用于大表和小表join的情况；</li><li>将倾斜key打散加前缀join后union合并（采样倾斜key过滤出作为新rdd并加上n以内的随机前缀,将需要join的另一个rdd也过滤出倾斜key膨胀并加上前缀，之后两个rdd进行join；另外两个正常rdd照常join后union合并得到最终join结果）(将另一个rdd膨胀是为了与倾斜key的随机前缀连接上) -&gt; 少量Key倾斜；</li><li>使用随机前缀和扩容RDD进行join（同上但对整个rdd扩容）-&gt; 缓解数据倾斜，对内存资源要求高；</li></ul><p>将多种方案结合：a-&gt;b-&gt;c-&gt;(d&#x2F;e&#x2F;f&#x2F;g)</p></li></ul><hr><p>Flink</p><hr><h3 id="基本算法"><a href="#基本算法" class="headerlink" title="基本算法"></a>基本算法</h3><hr><h3 id="手写HQL"><a href="#手写HQL" class="headerlink" title="手写HQL"></a>手写HQL</h3><h4 id="用户行为路径"><a href="#用户行为路径" class="headerlink" title="用户行为路径"></a>用户行为路径</h4><h5 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h5><p>统计每次跳转的次数使用桑基图展示。</p><ul><li>用户访问路径的可视化通常使用桑基图。如下图所示，该图可真实还原用户的访问路径，包括页面跳转和页面访问次序。</li><li>桑基图需要我们提供每种页面跳转的次数，每个跳转由source&#x2F;target表示，source指跳转起始页面，target表示跳转终到页面。</li><li>注意：<ul><li>source不允许为空，但target可为空</li><li>桑基图所展示的流程不允许存在环</li></ul></li></ul><h5 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h5><p>对source，target分组即可，为了不存在环，将每个用户的访问加前缀以确定步骤。</p><h5 id="语句实现"><a href="#语句实现" class="headerlink" title="语句实现"></a>语句实现</h5><h4 id="用户变动统计"><a href="#用户变动统计" class="headerlink" title="用户变动统计"></a>用户变动统计</h4><h5 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h5><p>统计截至本日流失用户和回流用户的人数</p><ul><li>流失用户：末次活跃时间为7日前的用户</li><li>回流用户：末次活跃时间为今日，上次活跃时间在8日前的用户</li></ul><h5 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h5><p>流失用户数量为截至今日用户最后登录时间为七天前；</p><p>回流用户数量为截至今日为用户最后登录时间且昨天最后登录时间为八天前；</p><h5 id="语句实现-1"><a href="#语句实现-1" class="headerlink" title="语句实现"></a>语句实现</h5><h4 id="连续问题"><a href="#连续问题" class="headerlink" title="连续问题"></a>连续问题</h4><h5 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h5><p>统计连续3天及以上减少碳排放量在100以上的用户</p><h5 id="思路分析-2"><a href="#思路分析-2" class="headerlink" title="思路分析"></a>思路分析</h5><ol><li>按照用户和时间分组求每个用户每天减少碳排量的数量并过滤排放量在100以上；</li><li>按照时间求每个用户的rank；</li><li>将时间减去排名如果相同则时间连续(等差数列)；</li><li>按照用户和时间(等差列)分组求数量大于等于3的记录；</li></ol><h5 id="语句实现-2"><a href="#语句实现-2" class="headerlink" title="语句实现"></a>语句实现</h5><h4 id="分组问题"><a href="#分组问题" class="headerlink" title="分组问题"></a>分组问题</h4><h5 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h5><p>用户连续访问记录时间间隔如果小于60秒，则分为同一组，输出用户的组号。</p><h5 id="思路分析-3"><a href="#思路分析-3" class="headerlink" title="思路分析"></a>思路分析</h5><ol><li>计算上次访问时间与本次访问时间差如果小于60秒，则计数为0，否则为1；</li><li>求和开窗计算用户的计数；</li></ol><h5 id="语句实现-3"><a href="#语句实现-3" class="headerlink" title="语句实现"></a>语句实现</h5><h4 id="间隔连续问题"><a href="#间隔连续问题" class="headerlink" title="间隔连续问题"></a>间隔连续问题</h4><h5 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h5><p>计算每个用户最大的连续登录天数，可以间隔一天。解释：如果一个用户在1,3,5,6登录游戏，则视为连续6天登录。</p><h5 id="思路分析-4"><a href="#思路分析-4" class="headerlink" title="思路分析"></a>思路分析</h5><ol><li>计算上次登录时间与本次登录时间相差天数diff_time；</li><li>如果diff_time&lt;2则为连续登录(分为同一组)，否则重新计数(登录时间超过两天)；</li><li>统计用户在同一组的连续登陆天数(最大时间-最小时间+1)；</li><li>取连续登录天数的最大值；</li></ol><h5 id="语句实现-4"><a href="#语句实现-4" class="headerlink" title="语句实现"></a>语句实现</h5><h4 id="打折日期交叉问题"><a href="#打折日期交叉问题" class="headerlink" title="打折日期交叉问题"></a>打折日期交叉问题</h4><h5 id="问题描述-5"><a href="#问题描述-5" class="headerlink" title="问题描述"></a>问题描述</h5><p> 计算每个品牌总的打折销售天数，注意其中的交叉日期，比如vivo品牌，第一次活动时间为2021-06-05到2021-06-15，第二次活动时间为2021-06-09到2021-06-21其中9号到15号为重复天数，只统计一次，即vivo总打折天数为2021-06-05到2021-06-21共计17天。</p><h5 id="思路分析-5"><a href="#思路分析-5" class="headerlink" title="思路分析"></a>思路分析</h5><ol><li>由于有时间重复，如果某品牌上一个活动的结束日期比下一个活动开始时间大（时间重复），则将下一个活动的开始时间设置为上一个活动结束日期加一（将两个活动时间连接起来）否则没有时间重复问题；</li><li>计算每次活动天数：结束日期-开始日期+1(如果为负数则说明上一个活动时间包括了本次时间，不用加入统计)；</li><li>按照品牌求和活动天数；</li></ol><h5 id="语句实现-5"><a href="#语句实现-5" class="headerlink" title="语句实现"></a>语句实现</h5><h4 id="同时在线问题"><a href="#同时在线问题" class="headerlink" title="同时在线问题"></a>同时在线问题</h4><h5 id="问题描述-6"><a href="#问题描述-6" class="headerlink" title="问题描述"></a>问题描述</h5><p>计算出平台最高峰同时在线的主播人数。</p><h5 id="思路分析-6"><a href="#思路分析-6" class="headerlink" title="思路分析"></a>思路分析</h5><ol><li>可以将开始时间认为人数+1，结束时间人数-1；</li><li>按照时间排序，求截至当前时间的人数cnt_s；</li><li>求最大的cnt_s即为所求；</li></ol><h5 id="语句实现-6"><a href="#语句实现-6" class="headerlink" title="语句实现"></a>语句实现</h5><hr><h3 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h3><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p>索引是一个单独的、存储在磁盘上的数据库结构，包含对数据表里所有记录的引用指针。使用索引可以快速找到在某个或多个列中有一特定值的行。</p><h4 id="索引失效常见情况"><a href="#索引失效常见情况" class="headerlink" title="索引失效常见情况"></a>索引失效常见情况</h4><ul><li>没有符合最左前缀原则；1、2、3</li><li>字段进行了隐私数据类型转换；4、5、6</li><li>走索引没有全表扫描快；7</li></ul><ol><li>sql语句中有or关键字；</li><li>复合索引未用左列字段;</li><li>like以%开头;</li><li>需要类型转换;</li><li>where中索引列有运算;</li><li>where中索引列使用了函数;</li><li>如果mysql觉得全表扫描更快时（数据少）;</li></ol><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><ul><li><h5 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h5></li><li><h5 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h5></li><li><h5 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h5></li><li><h5 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h5></li></ul><h4 id="调优"><a href="#调优" class="headerlink" title="调优"></a>调优</h4><h4 id="Binlog解析工具"><a href="#Binlog解析工具" class="headerlink" title="Binlog解析工具"></a>Binlog解析工具</h4><p>Maxwell是一个能实时读取<a href="https://cloud.tencent.com/product/cdb?from=10680">MySQL</a>二进制日志binlog，并生成 JSON 格式的消息，作为生产者发送给 Kafka，Kinesis、RabbitMQ、Redis、Google Cloud Pub&#x2F;Sub、文件或其它平台的应用程序。</p><hr><h3 id="数据仓库"><a href="#数据仓库" class="headerlink" title="数据仓库"></a>数据仓库</h3><p>面向<strong>分析</strong>的存储系统。</p><h4 id="与数据库区别："><a href="#与数据库区别：" class="headerlink" title="与数据库区别："></a>与数据库区别：</h4><p>数据库是面向事务的设计，数仓是面向<strong>主题</strong>的设计。</p><ul><li>存储：数据库存储在线交易数据，数仓存储一般都是历史数据；</li><li>设计：数据库一般采用符合范式的规则来设计，数仓为了便于查询加入了宽表，虽然增加了冗余但提高了速度；</li><li>目的：数据库为了捕获数据而设计，数仓为了分析数据而设计，他的两个基本元素是维度表和事实表。</li></ul><h4 id="建模"><a href="#建模" class="headerlink" title="建模"></a>建模</h4><h5 id="关系建模"><a href="#关系建模" class="headerlink" title="关系建模"></a>关系建模</h5><p>将数据抽象为两个概念–实体和关系，并用规范化的方式表示出来，关系模型遵守第三范式(表中不允许存在非主属性的传递函数依赖)，数据一致性得到保证。</p><h5 id="维度建模"><a href="#维度建模" class="headerlink" title="维度建模"></a>维度建模</h5><p>以数据分析作为出发点，不遵循第三范式，故存在一定冗余，维度模型面向业务，将业务用事实表和维度表呈现出来。</p><p><strong>维度表</strong>对事实的描述信息，对应世界中的一个对象或者概念，比如日期、地区、用户等；</p><p><strong>事实表</strong>每行数据代表一个业务事件，比如下单、支付、购物车等；</p><h4 id="数仓分层"><a href="#数仓分层" class="headerlink" title="数仓分层"></a>数仓分层</h4><h5 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h5><ul><li>清晰数据结构：让每个数据层都有自己的作用和职责，在使用和维护时能更快的定位和理解；</li><li>复杂问题简化：将复杂问题拆解成多个步骤完成，每层只解决单一的问题；</li><li>统一数据口径：通过数据分层提供统一的数据出口，统一输出口径；</li><li>减少重复开发：规范数据分层，开发一些通用的中间层，减少重复计算；</li></ul><h5 id="原始数据层ODS"><a href="#原始数据层ODS" class="headerlink" title="原始数据层ODS"></a>原始数据层ODS</h5><p>数据源的数据经过抽取、洗净、传输(ETL)进入本层。</p><ul><li>保持数据原貌不做修改，起到备份数据的作用；</li><li>数据采用压缩，减少磁盘存储；</li><li>创建分区表，防止全表扫描；</li></ul><h5 id="明细数据层DWD"><a href="#明细数据层DWD" class="headerlink" title="明细数据层DWD"></a>明细数据层DWD</h5><ul><li>主要对ODS层的数据做一些清洗和规范化的操作，比如说去除空值、脏数据，脱敏等；</li><li>为了提高数据明细层的易用性，该层通常会采用一些维度退化的方法；</li><li>一般dwd层采用最小粒度以便后续统计细粒度的指标；</li><li>一行数据代表一次业务行为；</li></ul><h5 id="服务数据层DWS"><a href="#服务数据层DWS" class="headerlink" title="服务数据层DWS"></a>服务数据层DWS</h5><p>在DWD层对数据做一些轻微的聚合操作，生成一些列的中间结果表，提升公共指标的复用性，减少重复加工的工作，主要存放主题对象当天的汇总行为。</p><h5 id="数据主题层DWT"><a href="#数据主题层DWT" class="headerlink" title="数据主题层DWT"></a>数据主题层DWT</h5><p>在DWM的基础上，整合汇总成分析某个主题域的宽表，存放所有主题的累计行为。</p><h5 id="DIM层"><a href="#DIM层" class="headerlink" title="DIM层"></a>DIM层</h5><ol><li>选择业务过程；</li><li>声明粒度；</li><li>确定维度；</li><li>确定事实；</li></ol><h5 id="数据应用层ADS"><a href="#数据应用层ADS" class="headerlink" title="数据应用层ADS"></a>数据应用层ADS</h5><p>对主题进行指标分析，提供数据产品和数据分析使用的数据，做可视化展示；</p><h4 id="处理过的业务"><a href="#处理过的业务" class="headerlink" title="处理过的业务"></a>处理过的业务</h4><p>大量sql写到Kafka怎么办</p><p>结构化思维：确定目标，资源分析，制定计划。</p><p>薪资是能力的体现</p><p><img src="/../pic/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9F%A5%E8%AF%86%E7%82%B9/1657890398331.png" alt="1657890398331"></p>]]></content>
      
      
      <categories>
          
          <category> big-data </category>
          
      </categories>
      
      
        <tags>
            
            <tag> big-data </tag>
            
            <tag> hadoop </tag>
            
            <tag> zookeeper </tag>
            
            <tag> flume </tag>
            
            <tag> kafka </tag>
            
            <tag> sqoop </tag>
            
            <tag> hive </tag>
            
            <tag> spark </tag>
            
            <tag> MySQL </tag>
            
            <tag> 离线数仓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kettle使用(1)-更换界面logo和文字</title>
      <link href="/2022/07/10/kettle-1-geng-huan-tu-biao-wen-zi/"/>
      <url>/2022/07/10/kettle-1-geng-huan-tu-biao-wen-zi/</url>
      
        <content type="html"><![CDATA[<h1 id="kettle使用-1-更换界面logo和文字"><a href="#kettle使用-1-更换界面logo和文字" class="headerlink" title="kettle使用(1)-更换界面logo和文字"></a>kettle使用(1)-更换界面logo和文字</h1><p>kettle主要用于ETL，因为操作简单、门槛低被很多企业使用，今天来说一下不修改源码如何更改kettle的logo和其中的文字(包括标题)。</p><p>本文中 <code>kettle安装目录</code> 指代为 <code>%kettle%</code> 。</p><p><strong>在 <code>%kettle%\data-integration\lib\</code> 中找到 <code>kettle-ui-swt-9.3.0.0-428.jar</code> ，使用压缩软件查看。</strong></p><h2 id="修改图标"><a href="#修改图标" class="headerlink" title="修改图标"></a>修改图标</h2><p>替换：自己的图标名称与替换的<strong>名称和扩展名</strong>相同。</p><ul><li>更改logo图标：在<code>ui\images\</code> 找到 <code>spoon.png</code>和 <code>spoon.ico</code> ，将自己的图标按照源文件的像素大小替换(为了更加契合)即可。</li><li>更改tab的图标：在<code>ui\images\</code> 找到 <code>kettle_logo_small.png</code> 和 <code>kettle_logo_small.svg</code> ，注意 <code>svg</code> 格式的文件需要进行格式转换才能得到，在网页中搜索 <code>svg格式转换</code> 转换后替换文件即可。</li><li>启动界面图片：<code>\ui\images\kettle_splash.png</code></li><li>启动界面版本信息：<code>\ui\org\pentaho\di\ui\core\dialog\messages\messages_en_US.properties</code>中的<code>SplashDialog.Version</code><br>启动界面license：<code>\ui\org\pentaho\di\ui\core\dialog\license\license.txt</code></li></ul><p>理论上来说，你在这里找到的图标都可以进行修改替换成自己想要的图片。</p><h2 id="修改文字"><a href="#修改文字" class="headerlink" title="修改文字"></a>修改文字</h2><p>kettle界面中的文字在文件中使用<code>字节码</code>保存的，所以我们在其中搜索和修改都是用<code>字节码</code>格式来进行的，在网页搜索<code>字节码在线转换</code>即可。</p><p>编辑 <code>org\pentaho\di\ui\spoon\messages</code> 下<code>messages_zh_CN.properties</code> ，搜索你要替换的文字，将文字替换即可。标题搜索<code>Spoon.Application.Name</code> 替换内容即可。</p><p>举个例子，现在我将 <code>右键转换弹出的新建</code> 两字替换为 <code>再来一个嘛</code> ：</p><p><img src="/../pic/kettle-1%E6%9B%B4%E6%8D%A2%E5%9B%BE%E6%A0%87%E6%96%87%E5%AD%97/1657431509657.png" alt="1657431509657"></p><ol><li><p>将 <code>新建</code> 转换为<code>ASCII</code>格式 <code>\u65b0\u5efa</code>:</p><p><img src="/../pic/kettle-1%E6%9B%B4%E6%8D%A2%E5%9B%BE%E6%A0%87%E6%96%87%E5%AD%97/1657431563581.png" alt="1657431563581"></p></li><li><p>在<code>messages_zh_CN.properties</code> 中搜索转换后的文字：</p><p><img src="/../pic/kettle-1%E6%9B%B4%E6%8D%A2%E5%9B%BE%E6%A0%87%E6%96%87%E5%AD%97/1657431582300.png" alt="1657431582300"></p><p>注意可能搜索结果不唯一，选择查找结果只有你搜索的内容。</p></li><li><p>将 <code>再来一个嘛</code> 转换为ASCII 格式 <code>\u518d\u6765\u4e00\u4e2a\u561b</code> 后替换：</p><p><img src="/../pic/kettle-1%E6%9B%B4%E6%8D%A2%E5%9B%BE%E6%A0%87%E6%96%87%E5%AD%97/1657431601344.png" alt="1657431601344"></p><p><img src="/../pic/kettle-1%E6%9B%B4%E6%8D%A2%E5%9B%BE%E6%A0%87%E6%96%87%E5%AD%97/1657431620281.png" alt="1657431620281"></p></li><li><p>保存退出查看效果：</p><p><img src="/../pic/kettle-1%E6%9B%B4%E6%8D%A2%E5%9B%BE%E6%A0%87%E6%96%87%E5%AD%97/1657431643972.png" alt="1657431643972"></p></li></ol><p>理论上来说，你在这里找到的文字都可以进行修改替换成自己想要的文字；理论上来说，文字相关的文件都在messages文件夹下。</p><p>更多示例：<a href="http://www.kettle.org.cn/category/demo">kettle示例 – Kettle中文网</a></p>]]></content>
      
      
      <categories>
          
          <category> kettle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kettle </tag>
            
            <tag> ETL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kettle使用(2)-使用sql脚本和Java脚本</title>
      <link href="/2022/07/10/kettle-2-shi-yong-sql-he-java-jiao-ben/"/>
      <url>/2022/07/10/kettle-2-shi-yong-sql-he-java-jiao-ben/</url>
      
        <content type="html"><![CDATA[<h1 id="kettle使用-2-使用SQL和JAVA脚本"><a href="#kettle使用-2-使用SQL和JAVA脚本" class="headerlink" title="kettle使用(2)-使用SQL和JAVA脚本"></a>kettle使用(2)-使用SQL和JAVA脚本</h1><h2 id="kettle中执行SQL脚本"><a href="#kettle中执行SQL脚本" class="headerlink" title="kettle中执行SQL脚本"></a>kettle中执行SQL脚本</h2><ul><li>在转换中需要勾选 <strong>执行每一行   变量替换</strong>；</li><li>SQL中如果字段是字符类型的需要加引号 <strong>‘?’</strong> ;</li><li>SQL中的变量用 <strong>?&#x2F;${var}</strong> (测试有问题)代替;</li><li><strong>?<strong>为变量时：在</strong>作为参数的字段</strong>中顺序填入变量(需要一一对应)，定义参数需要将文件作为输入，里面的字段值就是参数；</li><li>${var}为变量时：在<strong>转换属性</strong>的<strong>命名参数</strong>中设置变量；</li></ul><h2 id="kettle中执行Java脚本"><a href="#kettle中执行Java脚本" class="headerlink" title="kettle中执行Java脚本"></a>kettle中执行Java脚本</h2><p>添加变量：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Type</span> <span class="token keyword">var</span> <span class="token operator">=</span> <span class="token string">"randtext"</span><span class="token punctuation">;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Fields<span class="token punctuation">.</span>Out</span><span class="token punctuation">,</span><span class="token string">"var"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span><span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//并在底部'字段'中声明变量var对应类型Type</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>获取输入的字段：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Type</span> <span class="token keyword">var</span> <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Fields<span class="token punctuation">.</span>In</span><span class="token punctuation">,</span> <span class="token string">"a_fieldname"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//表中字段名为a_fieldname的字段</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出字段：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Fields<span class="token punctuation">.</span>Out</span><span class="token punctuation">,</span> <span class="token string">"output_fieldname"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="kettle中设置定时"><a href="#kettle中设置定时" class="headerlink" title="kettle中设置定时"></a>kettle中设置定时</h2><p>在作业的<strong>start</strong>组件设置</p><h2 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h2><p>会在目标数据库生成对应表文件，右上角connect连接就可以了。</p><p>报错：</p><pre class="line-numbers language-none"><code class="language-none">You don&#39;t seem to be getting a connection to the server. Please check the path you&#39;re using and make sure the server is up and running. <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决方法：1.是否缺失jar包；2.相关服务是否开启；3.如果没有对应的R_的表，查看对应用户在资源库是否又建表权限，正确赋权后，删掉原来的数据库连接，重新配置repository即可；4.新建数据库重新配置</p>]]></content>
      
      
      <categories>
          
          <category> kettle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kettle </tag>
            
            <tag> ETL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/07/08/hello-world/"/>
      <url>/2022/07/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Oracle expdp/impdp总结</title>
      <link href="/2022/07/08/oracle-expdp-impdp-zong-jie/"/>
      <url>/2022/07/08/oracle-expdp-impdp-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle-expdp-x2F-impdp总结"><a href="#Oracle-expdp-x2F-impdp总结" class="headerlink" title="Oracle expdp&#x2F;impdp总结"></a>Oracle expdp&#x2F;impdp总结</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>数据泵（expdp，impdp）是Oracle 10g时引入的新技术，兼容了之前的数据导出导入工具（exp，imp）大部分功能，并进一步完善，提供了很多新功能以满足复杂的业务需求。区别于传统的exp，imp工具，数据泵相关命令需在数据库<strong>服务端</strong>执行。</p><p>数据泵属于逻辑迁移，可跨操作系统版本，跨数据库版本。高版本兼容低版本，高版本向低版本导数据，导出时需添加低版本的版本号。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>本篇适用于常用的导出导入命令，如果你只想将本库的数据导出到文件然后将文件导入到库，本篇可以作为参考。</p><p>本例将密码为<strong>test</strong>的用户<strong>C##TEST</strong>中的<strong>testcar</strong>表按照<strong>条件</strong>导出到指定目录，并导入后<strong>更名</strong>为<strong>newtestcar</strong>。</p><ol><li><p>在操作系统创建文件目录用来保存导出的dump文件(Windows系统直接图形化建立路径即可)；</p><pre class="line-numbers language-plsql" data-language="plsql"><code class="language-plsql">mkdir <span class="token operator">-</span>p d<span class="token operator">:</span>\test\dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将目录指定为数据库的目录路径对象；</p><pre class="line-numbers language-plsql" data-language="plsql"><code class="language-plsql"><span class="token keyword">create</span> <span class="token keyword">directory</span> dptest02 <span class="token keyword">as</span> <span class="token string">'d:\test\dump'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>为用户赋予读写目录对象的权限；</p><pre class="line-numbers language-plsql" data-language="plsql"><code class="language-plsql"><span class="token keyword">grant</span> <span class="token keyword">read</span><span class="token punctuation">,</span><span class="token keyword">write</span> <span class="token keyword">on</span> <span class="token keyword">directory</span> dptest02 <span class="token keyword">to</span> <span class="token keyword">C</span>##TEST<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>导出；</p><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">expdp C##TEST<span class="token operator">/</span>test@orcl directory<span class="token operator">=</span>dptest02 tables<span class="token operator">=</span>testcar query<span class="token operator">=</span>\"where car_buy_time between to_date<span class="token punctuation">(</span>'<span class="token number">2018</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">00</span>'<span class="token punctuation">,</span>'yyyy<span class="token operator">-</span>mm<span class="token operator">-</span>dd HH24<span class="token punctuation">:</span>mi<span class="token punctuation">:</span>ss'<span class="token punctuation">)</span> <span class="token operator">and</span> to_date<span class="token punctuation">(</span>'<span class="token number">2019</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">31</span> <span class="token number">23</span><span class="token punctuation">:</span><span class="token number">59</span><span class="token punctuation">:</span><span class="token number">59</span>'<span class="token punctuation">,</span>'yyyy<span class="token operator">-</span>mm<span class="token operator">-</span>dd HH24<span class="token punctuation">:</span>mi<span class="token punctuation">:</span>ss'<span class="token punctuation">)</span>\" dumpfile<span class="token operator">=</span>testcar%U.dmp parallel<span class="token operator">=</span><span class="token number">10</span> job_name<span class="token operator">=</span>jobtest01<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>导入；</p><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">impdp C##TEST<span class="token operator">/</span>test directory<span class="token operator">=</span>dp_test01 dumpfile<span class="token operator">=</span>testcar%U.dmp remap_table<span class="token operator">=</span>C##TEST.testcar<span class="token punctuation">:</span>newtestcar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>总文件113G ,条件导出expdp按照条件导出49G用时25分，impdp导入用时26分，并行10个进程，共231938000行；</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="1、目标新库上的操作"><a href="#1、目标新库上的操作" class="headerlink" title="1、目标新库上的操作"></a>1、目标新库上的操作</h3><p>（1）创建临时表空间</p><pre class="line-numbers language-plsql" data-language="plsql"><code class="language-plsql"><span class="token keyword">create</span> temporary tablespace 用户临时表空间名称 tempfile <span class="token string">'/u01/tablespaces/user_temp.dbf'</span> <span class="token keyword">size</span> <span class="token number">50</span>m autoextend <span class="token keyword">on</span> next <span class="token number">50</span>m maxsize <span class="token number">20480</span>m extent management <span class="token keyword">local</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>备注：根据实际情况调整表空间大小等参数以及规划临时表空间、回滚表空间等相关规划。</p><p>（2）创建数据表空间</p><pre class="line-numbers language-plsql" data-language="plsql"><code class="language-plsql"><span class="token keyword">create</span> tablespace 用户表空间名称 datafile <span class="token string">'/u01/tablespaces/user_data.dbf'</span> <span class="token keyword">size</span> <span class="token number">50</span>m autoextend <span class="token keyword">on</span> next <span class="token number">50</span>m maxsize <span class="token number">20480</span>m extent management <span class="token keyword">local</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）建立用户，并指定默认表空间</p><pre class="line-numbers language-none"><code class="language-none">create user 用户名称 identified by 密码 default tablespace 用户表空间名称 temporary tablespace 用户临时表空间名称;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>（4）给用户授予权限</p><pre class="line-numbers language-none"><code class="language-none">grant connect,resource to 用户名1;grant create database link to 用户名;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意：赋权给多个用户的情况下，各个用户名称间用,分隔即可。</p><p>（5）登录需要创建dblink的用户，创建dblink</p><pre class="line-numbers language-plsql" data-language="plsql"><code class="language-plsql"><span class="token keyword">CREATE</span> DATABASE LINK DBLink名称 <span class="token keyword">CONNECT</span> <span class="token keyword">TO</span> 用户 <span class="token keyword">IDENTIFIED</span> <span class="token keyword">BY</span> 密码 <span class="token keyword">USING</span> <span class="token string">'(DESCRIPTION =(ADDRESS_LIST =(ADDRESS =(PROTOCOL = TCP)(HOST = XXX.XXX.XXX.XXX)(PORT = 1521)))(CONNECT_DATA =(SERVICE_NAME = 实例名)))'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：创建DBLINK默认是用户级别的，对当前用户有效。只有当需要对所有用户有效时，再建立公有的DBlink对象（pulic参数）。</p><h3 id="2、创建数据备份目录（源库和目标库）"><a href="#2、创建数据备份目录（源库和目标库）" class="headerlink" title="2、创建数据备份目录（源库和目标库）"></a>2、创建数据备份目录（源库和目标库）</h3><p>备份目录需要使用操作系统用户创建一个真实的目录，然后登录oracle dba用户，创建逻辑目录，指向该路径并使用户有对其读写权限。这样oracle才能识别这个备份目录。</p><p>（1）在操作系统上建立真实的目录</p><pre class="line-numbers language-none"><code class="language-none">$ mkdir -p d:\test\dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）登录oracle管理员用户</p><pre class="line-numbers language-qlsql" data-language="qlsql"><code class="language-qlsql">SQL&gt; conn &#x2F;as sysdba<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（3）创建逻辑目录</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SQL</span><span class="token operator">></span> <span class="token keyword">create</span> directory dp_name <span class="token keyword">as</span> <span class="token string">'d:\test\dump'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看目录是否已经创建成功：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SQL</span><span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dba_directories<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5、用sys管理员给指定用户赋予在该目录的操作权限</p><pre class="line-numbers language-plsql" data-language="plsql"><code class="language-plsql"><span class="token keyword">SQL</span><span class="token operator">></span> <span class="token keyword">grant</span> <span class="token keyword">read</span><span class="token punctuation">,</span><span class="token keyword">write</span> <span class="token keyword">on</span> <span class="token keyword">directory</span> dp_name <span class="token keyword">to</span> 用户<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="常用语句"><a href="#常用语句" class="headerlink" title="常用语句"></a>常用语句</h2><ul><li>expdp导出</li></ul><pre class="line-numbers language-none"><code class="language-none">1)导出表expdp  tables&#x3D;dbmon.lihaibo_exp dumpfile&#x3D;sms.dmp DIRECTORY&#x3D;dump_dir;2)并发导出parallel，指定job名我们需要特别注意一点，parallel 一定要与 dumpfile&#x3D;...%U.dmp结合 使用，或者有多个表需要同时导出。单表，或者其他诸如network_link方式，指定parallel,也无法开启并发进程expdp scott&#x2F;tiger@orcl directory&#x3D;dpdata1 dumpfile&#x3D;scott3%U.dmp parallel&#x3D;4 job_name&#x3D;scott33)全表expdp scott&#x2F;tiger@orcl TABLES&#x3D;emp,dept dumpfile&#x3D;expdp.dmp DIRECTORY&#x3D;dpdata1;4)导出表，并指定表中的内容expdp scott&#x2F;tiger@orcl directory&#x3D;dpdata1 dumpfile&#x3D;expdp.dmp Tables&#x3D;emp query&#x3D;&quot;WHERE deptno&#x3D;20&quot;;5)导出表空间expdp system&#x2F;manager DIRECTORY&#x3D;dpdata1 DUMPFILE&#x3D;tablespace.dmp TABLESPACES&#x3D;temp,example;6)导出全库expdp system&#x2F;manager DIRECTORY&#x3D;dpdata1 DUMPFILE&#x3D;full.dmp FULL&#x3D;y;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>impdp导入</li></ul><pre class="line-numbers language-none"><code class="language-none">1) 全用户导入impdp scott&#x2F;tiger DIRECTORY&#x3D;dpdata1 DUMPFILE&#x3D;expdp.dmp SCHEMAS&#x3D;scott;2) 用户对象迁移impdp system&#x2F;manager DIRECTORY&#x3D;dump_dir DUMPFILE&#x3D;expdp.dmp TABLES&#x3D;scott.dept REMAP_SCHEMA&#x3D;scott:system; （SCOTT为原用户，system为目标用户）3) 导入指定表空间impdp system&#x2F;manager DIRECTORY&#x3D;dump_dir DUMPFILE&#x3D;tablespace.dmp TABLESPACES&#x3D;example;4) 全库导入impdb system&#x2F;manager DIRECTORY&#x3D;dump_dir DUMPFILE&#x3D;full.dmp FULL&#x3D;y;5) 表已存在的处理impdp system&#x2F;manager DIRECTORY&#x3D;dump_dir DUMPFILE&#x3D;expdp.dmp SCHEMAS&#x3D;system TABLE_EXISTS_ACTION&#x3D;append;6) 表空间迁移impdp system&#x2F;manager directory&#x3D;dump_dir dumpfile&#x3D;remap_tablespace.dmp logfile&#x3D;remap_tablespace.log remap_tablespace&#x3D;A:B (A为原表空间名，B为指定的目标表空间名)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="expdp-x2F-impdp参数说明"><a href="#expdp-x2F-impdp参数说明" class="headerlink" title="expdp&#x2F;impdp参数说明"></a>expdp&#x2F;impdp参数说明</h2><ul><li><p>帮助：</p><blockquote><pre class="line-numbers language-none"><code class="language-none">impdp -helpexpdp help&#x3D;y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote></li><li><p>ATTACH</p></li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none">作用    当我们使用ctrl+C 退出交互式命令时，可使用attach参数重新进入到交互模式语法    ATTACH&#x3D;[schema_name.]job_name    Schema_name用户名,job_name任务名示例    Expdp scott&#x2F;tiger ATTACH&#x3D;scott.export_job<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li>CONTENT</li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none">作用    限制了导出的内容，包括三个级别：全部／数据／元数据（结构）语法   CONTENT&#x3D;&#123;ALL | DATA_ONLY | METADATA_ONLY&#125;   ALL           -- 导出所有数据，包括元数据及数据   DATA_ONLY     -- 只导出数据   METADATA_ONLY -- 只包含元数据，就是创建语句示例   Expdp scott&#x2F;tiger DIRECTORY&#x3D;dump DUMPFILE&#x3D;a.dump CONTENT&#x3D;METADATA_ONLY<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><strong>DIRECTORY</strong></li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none">作用此路径可以理解为实际绝对路径在oracle数据库里的别名，是导出文件的存储位置    路径的创建： create directory &amp;DIRECTORY_NAME AS &#39;&amp;PATH&#39;;    查看已存在路径： select  * from dba_directories;语法    directory&#x3D;[directory_name]示例    Expdp scott&#x2F;tiger DIRECTORY&#x3D;dump_dir DUMPFILE&#x3D;lhb.dump<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><strong>DUMPFILE</strong></li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none">作用    此参数用户命名导出文件，默认是 expdat.dmp. 文件的存储位置如果在文件名前没有指定directory,则会默认存储到directory参数指定的路径下。语法    DUMPFILE&#x3D;[dump_dir:]file_name示例    Expdp scott&#x2F;tiger DIRECTORY&#x3D;dump_dir DUMPFILE&#x3D;dump_dir1:a.dmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li>ESTIMATE</li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none">在使用Expdp进行导出时，Expdp需要计算导出数据大小容量，Oracle可以通过两种方式进行容量估算，一种是通过数据块(blocks)数量、一种是通过统计信息中记录的内容(statistics)估算.语法结构：    EXTIMATE&#x3D;&#123;BLOCKS | STATISTICS&#125;示例：    Expdp scott&#x2F;tiger TABLES&#x3D;emp ESTIMATE&#x3D;STATISTICS DIRECTORY&#x3D;dump_dir DUMPFILE&#x3D;halberd.dump    Expdp scott&#x2F;tiger TABLES&#x3D;emp ESTIMATE&#x3D;BLOCKS DIRECTORY&#x3D;dump_dir DUMPFILE&#x3D;halberd.dump<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li>EXTIMATE_ONLY</li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none">作用    此参数用于统计导出的数据量大小及统计过程耗时长短。语法    EXTIMATE_ONLY&#x3D;&#123;Y | N&#125;示例    Expdp scott&#x2F;tiger ESTIMATE_ONLY&#x3D;y NOLOGFILE&#x3D;y directory&#x3D;dump_dir schemas&#x3D;halberd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li>EXCLUDE</li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none">作用    此参数用于排除不需要导出的内容，如我们进行全库导出，但是不需要导出用户scott，此时需要在exlude后先指定排除类型为schema,再指定具体的schema。具体使用方法见include参数. EXCLUDE与include的使用方法是一样的语法    EXCLUDE&#x3D;object_type[:name_clause] [,object_type[:name_clause] ]    name_clause        &quot;&#x3D;&#39;object_name&#39;&quot;        &quot;in (&#39;object_name&#39;[,&#39;object_name&#39;,....])&quot;        &quot;in (select_clause) &quot;    Object_type对象类型，如：table,view,procedure,schema等    name_clause指定名称的语句,如果不具体指定是哪个对象，则此类所有对象都不导出, select 语句中表名不要加用户名。用户名，通过schemas 指定。示例    expdp scott&#x2F;tiger DIRECTORY&#x3D;dump_dir DUMPFILE&#x3D;halberd.dup EXCLUDE&#x3D;VIEW    expdp scott&#x2F;tiger DIRECTORY&#x3D;dump_dir DUMPFILE&#x3D;halberd.dup EXCLUDE&#x3D;TABLE:\&quot; IN\(\&#39;TEMP\&#39;,\&#39;GRADE\&#39;\)\&quot;    EXCLUDE&#x3D;TABLE:&quot;&#x3D;&#39;APPLICATION_AUDIT&#39;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li>FILESIZE</li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none">作用    用于指定单个导出的数据文件的最大值，与％U一起使用。比如，我们需要导出100G的数据，文件全部存储到一个文件内，在文件传输时，会耗费大量的时间，此时我们就可以使用这个参数，限制每个文件的大小，在传输导出文件时，就可以多个文件同时传送，大大的节省了文件传输时间。提高了工作的效率。语法  FILESIZE&#x3D;integer[B | K | M | G]示例   Expdp scott&#x2F;tiger DIRECTORY&#x3D;dump_dir DUMPFILE&#x3D;halberd%U.dup FILESIZE&#x3D;20g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li>FLASHBACK_SCN／FLASHBACK_TIME</li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none">作用    基于undo 及scn号(时间点)进行的数据导出。使用此参数设置会进行flashback query的功能，查询到对应指定的SCN时的数据，然后进行导出。只要UNDO不被覆盖，无论数据库是否重启，都可以进行导出. flashback_time参数与flashback_scn的原理是一样的。在导出的数据里保持数据的一致性是很有必要的。这个。。我想，没谁傻忽忽的把这两个参数一起使用吧？所以我就不提醒你两个参数不可以同时使用了。语法   FLASHBACK_SCN&#x3D;scn_value   FLASHBACK_TIME 有多种设定值的格式：   flashback_time&#x3D;to_timestamp (localtimestamp)   flashback_time&#x3D;to_timestamp_tz (systimestamp)   flashback_time&#x3D;&quot;TO_TIMESTAMP (&quot;&quot;25-08-2003 14:35:00&quot;&quot;， &quot;&quot;DD-MM-YYYY HH24:MI:SS&quot;&quot;)&quot;  使用此格式可能会遇到ORA-39150错误。示例   Expdp scott&#x2F;tiger DIRECTORY&#x3D;dump_dir DUMPFILE&#x3D;halberd.dmp FLASHBACK_SCN&#x3D; 12345567789   Expdp scott&#x2F;tiger DIRECTORY&#x3D;dump_dir DUMPFILE&#x3D;halberd.dmp FLASHBACK_TIME&#x3D; to_timestamp (localtimestamp)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li>FULL</li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none">作用   指定导出内容为全库导出。这里需要特别注意的是,expdp 不能导出sys用户对象。即使是全库导出也不包含sys用户。语法   FULL&#x3D;&#123;Y | N&#125;示例   expdp \&#39;\&#x2F; as sysdba\&#39; directory&#x3D;dump_dir full&#x3D;y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><strong><span id = "include">INCLUDE</span></strong></li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none">作用    限制范围，指定自己想要的内容，比如要导出某个用户的某张表。语法    INCLUDE &#x3D; object_type[:name_clause],object_type[:name_clause]示例    impdp dbmon&#x2F;dbmon_123 directory&#x3D;dump_dir network_link&#x3D;zjzwb2 SCHEMAS&#x3D;AICBS remap_schema&#x3D;aicbs:aicbsb include&#x3D;table:\&quot;IN\(SELECT TABLE_NAME FROM dbmon.TABLES_TOBE_MASKED\)\&quot;  LOGFILE&#x3D;zjzwb.log transform&#x3D;segment_attributes:n    PARFILE中设置:        INCLUDE&#x3D;table:&quot;in(select table_name from dba_tables where owner&#x3D;&#39;AA&#39;)&quot;        INCLUDE&#x3D;TABLE:&quot;IN(&#39;TEST1&#39;,&#39;TEST2&#39;)&quot;    SHELL环境设置:        INCLUDE&#x3D;TABLE:\&quot;IN\(SELECT TABLE_NAME FROM DBA_TABLES WHERE OWNER&#x3D;\&#39;AA\&#39;\)\&quot;        INCLUDE&#x3D;TABLE:\&quot;IN\(\&#39;TEST1\&#39;,\&#39;TEST2\&#39;\)\&quot;说明    当导入命令在目标端发起时，select 子句所涉及的表要在源端，并且dblink 所使用的用户有访问的权限。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li>JOB_NAME</li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none">作用    指定任务名，如果不指定的话，系统会默认自动命名：SYS_EXPORT_mode_nn语法    JOB_NAME&#x3D;&amp;JOB_NAME其他    查看有哪些expdp&#x2F;impdp job，可以通过dba_datapump_jobs查看，其实你通过v$session.action也可以查看到    大多与attach参数一起使用，重新进行expdp交互命令时使用。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><strong>LOGFILE</strong></li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none">作用： 指定导出日志名称。默认是：expdp.log语法    LOGFILE&#x3D;[DIRECTORY:]file_name   , 如果参数值里没有指定路径，会默认使用directory参数值所指向的路径。    directory ： 存储路径,    file_name :日志文件名示例    expdp scott&#x2F;tiger DIRECTORY&#x3D;dump_dir DUMPFILE&#x3D;halberd.dmp logfile&#x3D;halberd.log    impdp scott&#x2F;tiger DIRECTORY&#x3D;dump_dir DUMPFILE&#x3D;halberd.dmp logfile&#x3D;halberd.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><strong>NETWORK_LINK</strong></li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none">作用    此参数只有在导入（impdp）时使用，可通过本地数据库里的db_link连接到其他数据库A，将数据库A的数据直接导入到本地数据库。中间可节省导出数据文件，传送数据文件的过程。很方便。但是要特别注意，不同版本之间可能会存在问题，比如源库为10g,目标库为11g。使用network_link参数会报错。至于 12C 与低版本之间是否有问题尚未尝试。语法    network_link&#x3D;[db_link]示例    impdp scott&#x2F;tiger DIRECTORY&#x3D;dump_dir DUMPFILE&#x3D;halberd.dmp NETWORK_LINK&#x3D;to_tjj SCHEMAS&#x3D;halberd logfile&#x3D;halberd.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li>NOLOGFILE</li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none">作用    不写导入导出日志，这个笔者是灰常灰常滴不建议设置为“Y”滴。语法    nologfile&#x3D;[y|n]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li>PARALLEL</li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none">作用    指定导出／导入时使用多少个并发，默认是1,如果是单个表则在dumpfile中使用...%U.dmp语法    parallel&#x3D;[digit]示例    expdp \&#39;\&#x2F; as sysdba\&#39; directory&#x3D;dump_dir schemas&#x3D;halberd dumpfile&#x3D;halberd%U.dmp parallel&#x3D;8 logfile&#x3D;halberd.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li>PARFILE</li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none">作用    参数文件，这个参数文件里，存储着一些参数的设置。比如上面说过的，parallel,network_link,等。导出时，可以使用此参数，expdp&#x2F;impdp会自动读取文件中的参数设置，进行操作。语法    PARFILE&#x3D;[directory_path] file_name示例   expdp \&#39;\&#x2F; as sysdba\&#39; parfile&#x3D;halberd.par   cat halberd.par   directory&#x3D;dump_dir                             logfile&#x3D;test.log                               schemas&#x3D;test                                   query&#x3D;&quot;where create_date &gt; last_day(add_months(sysdate,-1)) and create_date &lt;&#x3D; last_day(sysdate)&quot;    transform&#x3D;segment_attributes:n                    network_link&#x3D;to_aibcrm   table_exists_action&#x3D;append                       impdp \&#39;\&#x2F; as sysdba\&#39; parfile&#x3D;test.par<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><strong>QUERY</strong></li></ul><blockquote><pre class="line-numbers language-plsql" data-language="plsql"><code class="language-plsql">作用    此参数指定在导入导出时的限制条件，和<span class="token keyword">SQL</span>语句中的 <span class="token string">"where"</span> 语句是一样儿一样儿滴语法    QUERY<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">[</span>schema<span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>table_name<span class="token operator">:</span><span class="token punctuation">]</span> query_clause<span class="token punctuation">,</span> <span class="token punctuation">[</span>schema<span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>table_name<span class="token operator">:</span><span class="token punctuation">]</span> query_clause<span class="token punctuation">,</span>……<span class="token punctuation">)</span>    CONTENT<span class="token operator">=</span>METADATA_ONLY<span class="token punctuation">,</span> EXTIMATE_ONLY＝Y<span class="token punctuation">,</span>TRANSPORT_TABLESPACES<span class="token punctuation">.</span>示例   Expdp scott<span class="token operator">/</span>tiger <span class="token keyword">directory</span><span class="token operator">=</span>dump dumpfiel<span class="token operator">=</span><span class="token keyword">a</span><span class="token punctuation">.</span>dmp Tables<span class="token operator">=</span>emp query<span class="token operator">=</span>\"<span class="token keyword">where</span> car_buy_time <span class="token keyword">between</span> to_date<span class="token punctuation">(</span><span class="token string">'2018-01-01 0:00:00'</span><span class="token punctuation">,</span><span class="token string">'yyyy-mm-dd HH24:mi:ss'</span><span class="token punctuation">)</span> <span class="token keyword">and</span> to_date<span class="token punctuation">(</span><span class="token string">'2019-12-31 23:59:59'</span><span class="token punctuation">,</span><span class="token string">'yyyy-mm-dd HH24:mi:ss'</span><span class="token punctuation">)</span>\"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><strong>SCHEMAS</strong></li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none">作用    指定导出／导入哪个用户语法    schemas&#x3D;schema_name[,schemaname,....]示例    expdp \&#39;\&#x2F; as sysdba\&#39; directory&#x3D;dump_dir schemas&#x3D;halberd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li>REMAP_SCHEMA</li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none"> 只在导入时使用作用    当把用户A的对象导入到用户（其实应该叫schema，将就看吧）B时，使用此参数，可实现要求格式    remap_schema&#x3D;schema1: schema2示例    impdp \&#39;\&#x2F; as sysdba\&#39; directory&#x3D;dump_dir dumpfile&#x3D;halberd.dmp logfile&#x3D;halberd.log remap_schema&#x3D;scott:halberd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><strong>TABLES</strong></li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none">作用    指定导出哪些表。格式    TABLES&#x3D;[schema.]table_name[:partition_name][,[schema.]table_name[:partition_name]]说明    Schema 表的所有者；table_name表名；partition_name分区名.可以同时导出不同用户的不同的表示例    expdp \&#39;\&#x2F; as sysdba\&#39; directory&#x3D;dump_dir tables&#x3D;emp.emp_no,emp.dept<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><strong>REMAP_TABLE</strong><blockquote><pre class="line-numbers language-none"><code class="language-none">作用    只有在导入时使用，用于将导入的数据表更名。用法    REMAP_TABLE&#x3D;S.a:b说明   S:表所在模式；a: 数据所在的原表空间; b： 目标表空间示例    impdp \&#39;\&#x2F; as sysdba\&#39; directory&#x3D;dump_dir tables&#x3D;emp,dept  remap_table&#x3D;C##TEST.emp:newemp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li><li>TABLESPACES</li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none">作用    指定导出／导入哪个表空间。语法    tablespaces&#x3D;tablespace_name[,tablespace_name,....]示例    expdp \&#39;\&#x2F; as sysdba\&#39; directory&#x3D;dump_dir tablespace&#x3D;user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li>REMAP_TABLESPACE</li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none">作用    只有在导入时使用，用于进行数据的表空间迁移。 把前一个表空间中的对象导入到冒号后面的表空间用法    remap_tablespace&#x3D;a:b说明   a: 数据所在的原表空间; b： 目标表空间示例   impdp \&#39;\&#x2F; as sysdba\&#39; directory&#x3D;dump_dir tables&#x3D;emp.dept remap_tablespace&#x3D;user:user1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li>TRANSPORT_FULL_CHECK</li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none">检查需要进行传输的表空间与其他不需要传输的表空间之间的信赖关系，默认为N。当设置为“Y”时，会对表空间之间的信赖关系进行检查，如A（索引表空间）信赖于B（表数据表空间），那么传输A而不传输B，则会出错，相反则不会报错。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><ul><li>TRANSPORT_TABLESPACES</li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none">作用    列出需要进行数据传输的表空间格式     TRANSPORT_TABLESPACES＝tablespace1[,tablespace2,.............]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li>TRANSFORM</li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none">作用  此参数只在导入时使用，是一个用于设定存储相关的参数,有时候也是相当方便的。假如数据对应的表空间都存在的话，就根本用不到这个参数，但是，假如数据存储的表空间不存在，使用此参数导入到用户默认表空间就可以了。更灵活的，可以使用remap_tablespace参数来指定。格式    transform&#x3D;transform_name:value[bject_type]    transform_name &#x3D; [OID | PCTSPACE | SEGMENT_ATTRIBUTES | STORAGE]:[Y|N]    segment attributes:段属性包括物理属性、存储属性、表空间和日志,Y 值按照导出时的存储属性导入，N时按照用户、表的默认属性导入    storage:默认为Y，只取对象的存储属性作为导入作业的一部分    oid:  owner_id,如果指定oid&#x3D;Y(默认)，则在导入过程中将分配一个新的oid给对象表，这个参数我们基本不用管。    pctspace:通过提供一个正数作为该转换的值，可以增加对象的分配尺寸，并且数据文件尺寸等于pctspace的值(按百分比)示例    transform&#x3D;segment_attributes:n --表示将用户所有对象创建到用户默认表空间，而不再考虑原来的存储属性。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><strong>VERSION</strong></li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none">此参数主要在跨版本之间进行导数据时使用，更具体一点，是在从高版本数据库导入到低版本数据库时使用,从低版本导入到高版本，这个参数是不可用的。默认值是:compatible。此参数基本在导出时使用，导入时基本不可用。VERSION&#x3D;&#123;COMPATIBLE | LATEST | version_string&#125;COMPATIBLE       ： 以参数compatible的值为准，可以通过show parameter 查看compatible参数的值LATEST           ： 以数据库版本为准version_string   ： 指定版本。如： version&#x3D;10.2.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li>SAMPLE</li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none">SAMPLE 抽样 给出导出表数据的百分比，参数值可以取.000001~100（不包括100）。不过导出过程不会和这里给出的百分比一样精确，是一个近似值。 格式： SAMPLE&#x3D;[[schema_name.]table_name:]sample_percent 示例： SAMPLE&#x3D;&quot;HR&quot;.&quot;EMPLOYEES&quot;:50<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><span id="table_exists_action">table_exists_action</span></li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none">此参数只在导入时使用。作用：导入时，假如目标库中已存在对应的表，对于这种情况，提供三种不同的处理方式：append,truncate,skip,replace格式： table_exists_action&#x3D;［append | replace| skip |truncate］说明： append :   追加数据到表中       truncate:  将目标库中的同名表的数据truncate掉。       skip ：      遇到同名表，则跳过，不进行处理，注意：使用此参数值时，与该表相关的所有操作都会skip掉。       replace:    导入过程中，遇到同名表，则替换到目标库的那张表（先drop,再创建）。示例：  table_exists_action&#x3D;replace<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li>SQLFILE</li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none">只在导入时使用！作用： 使用此参数时，主要是将DMP文件中的metadata语句取出到一个单独的SQLfile中，而数据并不导入到数据库中格式： sqlfile&#x3D;&amp;file_name.sql示例： impdp \&#39;\&#x2F; as sysdba\&#39; directory&#x3D;dump_dir dumpfile&#x3D;halberd.dmp logfile&#x3D;halberd.log sqlfile&#x3D;halberd.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><p>legacy mode </p><p>在11g中，才有这种模式。这种模式里兼容了以前版本中的部分参数，如：consistent,reuse_dumpfiles等（其实我现在也就知道这两个参数，哈哈，以后再遇到再补充）</p></li><li><p>consistent</p></li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none">这个是保持数据一致性的一个参数。在11g中使用时，如果设置 consistent&#x3D;true,则会默认转换成 flashback_time参数，时间设置为命令开始执行的那个时间点。格式： consistent&#x3D;[true|false]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><ul><li>reuse_dumpfiles</li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none">作用：重用导出的dmp文件 。假如第一次我们导失败了，虽然导出失败，但是dmp文件 还 是会生成的。在修改导出命令，第二次执行时，就可以 加上这个参数。格式： reuse_dumpfile&#x3D;[true|false]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><ul><li>partition_options</li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none">1 NONE 不对分区做特殊处理。在系统上的分区表一样创建。2 DEPARTITION 每个分区表和子分区表作为一个独立的表创建，名字使用表和分区（子分区）名字的组合。3 MERGE 将所有分区合并到一个表 注意：如果导出时使用了TRANSPORTABLE参数，这里就不能使用NONE和MERGE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="交互式命令"><a href="#交互式命令" class="headerlink" title="交互式命令"></a><span id="jiaohu">交互式命令</span></h2><ol><li><p>连接到对应的job: </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">impdp username<span class="token operator">/</span>password attach<span class="token operator">=</span><span class="token operator">&amp;</span>job_nameexpdp username<span class="token operator">/</span>password attach<span class="token operator">=</span><span class="token operator">&amp;</span>job_name<span class="token comment">--jobname可以在运行任务时指定或者使用sql：</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> DBA_DATAPUMP_JOBS<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查看运行状态： status</p></li><li><p>停止导入导出： kill_job(直接kill 掉进程，不自动退出交互模式)</p></li><li><p>停止导入导出：stop_job（逐一停止job进程的运行，并退出交互模式）</p></li><li><p>修改并发值： parallel</p></li><li><p>退出交互模式： exit &#x2F; exit_client(退出到日志模式，对job无影响)</p></li></ol><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><h3 id="不生成文件直接导入目标数据库"><a href="#不生成文件直接导入目标数据库" class="headerlink" title="不生成文件直接导入目标数据库"></a>不生成文件直接导入目标数据库</h3><ul><li>创建public dblink；</li></ul><pre class="line-numbers language-plsql" data-language="plsql"><code class="language-plsql"><span class="token keyword">CREATE</span> <span class="token keyword">PUBLIC</span> DATABASE LINK <span class="token operator">&lt;</span>pub_link_test1<span class="token operator">></span><span class="token keyword">CONNECT</span> <span class="token keyword">TO</span> <span class="token operator">&lt;</span>username<span class="token operator">></span> <span class="token keyword">IDENTIFIED</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span><span class="token string">"密码"</span><span class="token operator">></span><span class="token keyword">USING</span><span class="token string">'(DESCRIPTION =    (ADDRESS_LIST =      (ADDRESS = (PROTOCOL = TCP)(HOST = &lt;localhost>)(PORT = 1521))    )    (CONNECT_DATA =    (SERVER = DEDICATED)      (SERVICE_NAME = ORCL)    ))'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>对DIRECTORY对应目录有<code> </code> <code>READ</code> &#x2F; <code>WRITE</code> &#x2F; <code>UTL_FILE</code> 权限；</li></ul><pre class="line-numbers language-plsql" data-language="plsql"><code class="language-plsql"><span class="token keyword">CREATE</span> <span class="token keyword">DIRECTORY</span> <span class="token operator">&lt;</span>dp_name<span class="token operator">></span> <span class="token keyword">AS</span> <span class="token operator">&lt;</span><span class="token string">'E:\dptest\test1'</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">READ</span><span class="token punctuation">,</span><span class="token keyword">WRITE</span> <span class="token keyword">ON</span> <span class="token keyword">DIRECTORY</span> <span class="token operator">&lt;</span>dp_name<span class="token operator">></span> <span class="token keyword">TO</span> <span class="token operator">&lt;</span>username<span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">EXECUTE</span> <span class="token keyword">ON</span> SYS<span class="token punctuation">.</span>UTL_FILE <span class="token keyword">TO</span> <span class="token operator">&lt;</span>username<span class="token operator">></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>导入到数据库；</li></ul><pre class="line-numbers language-plsql" data-language="plsql"><code class="language-plsql">impdp <span class="token operator">&lt;</span>username<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>password<span class="token operator">></span><span class="token variable">@orcl</span> <span class="token keyword">directory</span><span class="token operator">=</span><span class="token operator">&lt;</span>dp_name<span class="token operator">></span> tables<span class="token operator">=</span><span class="token operator">&lt;</span><span class="token keyword">C</span>##TEST<span class="token punctuation">.</span>testcar要导入的表<span class="token operator">></span> parallel<span class="token operator">=</span><span class="token number">10</span> network_link<span class="token operator">=</span><span class="token operator">&lt;</span>pub_link_test1<span class="token operator">></span> remap_table<span class="token operator">=</span><span class="token operator">&lt;</span><span class="token keyword">C</span>##TEST<span class="token punctuation">.</span>testcar<span class="token operator">:</span>testfullcar改名<span class="token operator">></span> LOGFILE<span class="token operator">=</span>impdp<span class="token punctuation">.</span>log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>个人测试分开导入导出共花费100min,直接导入数据库40min，速度直接提高2.5倍！</p><ul><li>注意：</li></ul><ol><li>在B服务器数据库创建到A服务器数据库的public db link；</li><li>在system下创建Directory，并赋予其读写权限，同时赋予SYS.UTL_FILE的执行权限；</li><li>执行脚本参数位置。</li></ol><h3 id="导入多张表"><a href="#导入多张表" class="headerlink" title="导入多张表"></a>导入多张表</h3><p>使用**<a href="#include">INCLUDE</a>**参数</p><h3 id="如果存在表将导入文件追加到文件尾-x2F-跳过-x2F-删除"><a href="#如果存在表将导入文件追加到文件尾-x2F-跳过-x2F-删除" class="headerlink" title="如果存在表将导入文件追加到文件尾&#x2F;跳过&#x2F;删除"></a>如果存在表将导入文件追加到文件尾&#x2F;跳过&#x2F;删除</h3><p>使用**<a href="#table_exists_action">table_exists_action</a>**参数：［append | replace| skip |truncate］</p><h3 id="查看进度"><a href="#查看进度" class="headerlink" title="查看进度"></a>查看进度</h3><p>在<a href="#jiaohu">交互式命令</a>里面status可以查看导入百分比等详细信息，导出没有显示百分比；</p><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><h4 id="1、ORA-39112"><a href="#1、ORA-39112" class="headerlink" title="1、ORA-39112"></a>1、ORA-39112</h4><p>导出正常，导入数据时，只成功导入部分记录等数据，另外的部分提数ora 39112错误，经查是因为导出的用户数据中，有部分记录的表用的索引在另一表空间中，该空间还未创建，所以导致该失败。</p><p>解决方法：在导入时，添加参数：RANSFORM&#x3D;segment_attributes:n ，配合table_exists_action&#x3D;replace参数，重新导入即可。</p><p>RANSFORM&#x3D;segment_attributes:n 在导入时，会将数据导入默认的表空间中。</p><p> 补充，造成该问题的可能原因：</p><pre class="line-numbers language-none"><code class="language-none">1、在原来测试库中，目标schema和别的用户相互授权了，可是你导出的dmp中没有包含所有的用户，导入时对应用户没有创建。2、再就是，表空间问题，测试库中的用户下的某个表的索引没有在他的默认表空间里，这样你要在目标端（这里就是生产环境），创建好对应的表空间，就是说如果你在测试库把a用户的下的某个表的权限授给了b,那么你在把a用户用数据泵倒进生产库时，他会在生产库中检测有没有用户ｂ。也要做相同的操作。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2、ORA-39346"><a href="#2、ORA-39346" class="headerlink" title="2、ORA-39346"></a>2、ORA-39346</h4><p>导入过程中，遇到错误”  ORA-39346: data loss in character set conversion for object SCHEMA_EXPORT&#x2F;PROCEDURE&#x2F;PROCEDURE  “</p><p>oracle官方的描述如下：</p><ul><li><strong>Description:</strong> data loss in character set conversion for object string</li><li><strong>Cause:</strong> Oracle Data Pump import converted a metadata object from the export database character set into the target database character set prior to processing the object. Some characters could not be converted to the target database character set and so the default replacement character was used.</li><li><strong>Action:</strong> No specific user action is required. This type of data loss can occur if the target database character set is not a superset of the export databases character set.</li></ul><p> 翻译：不需要特定的用户操作。如果目标数据库字符集不是导出数据库字符集的超集，则可能发生此类数据丢失。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>expdp和impdp是服务端的工具程序，他们只能在Oracle服务端使用，不能在客户端使用。</li><li>impdp&#x2F;expdp组合使用，不可以与exp&#x2F;imp混用。</li><li>导数据之间的数据库字符集必须一致，否则可能出现乱码。</li><li>经过测试一次只能有一个job在运行</li></ul><h2 id="脚本（转自）"><a href="#脚本（转自）" class="headerlink" title="脚本（转自）"></a>脚本（<a href="https://www.cnblogs.com/chinas/p/8300955.html#_label5">转自</a>）</h2><span id="more"></span><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#!&#x2F;bin&#x2F;bash##############################################################################脚本功能：#脚本路径：#使用方法：脚本名称 操作类型参数#############################################################################export NLS_LANG&#x3D;american_america.AL32UTF8export ORACLE_HOME&#x3D;&#x2F;u01&#x2F;app&#x2F;oracle&#x2F;product&#x2F;12.1.0&#x2F;db_1export ORACLE_SID&#x3D;cyrtestdbexport PATH&#x3D;$PATH:$ORACLE_HOME&#x2F;bin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;bin:&#x2F;usr&#x2F;bin&#x2F;X11:&#x2F;usr&#x2F;local&#x2F;bin:.v_date&#x3D;&#96;date +%Y%m%d&#96;v_logfile&#x3D;&#96;echo $(basename  $0) | awk -F &quot;.&quot; &#39;&#123;print $1&quot;.log&quot;&#125;&#39;&#96;  #日志文件名称：脚本所在目录下，脚本名称.logv_usr_1&#x3D;&quot;&quot;            #Oracle用户名、密码v_pwd_1&#x3D;&quot;&quot;v_usr_2&#x3D;&quot;&quot;v_pwd_2&#x3D;&quot;&quot;            v_db_instance&#x3D;&quot;&quot;    #数据库实例名v_backup_dir&#x3D;&quot;&quot;        #Oracle备份目录(全局变量)v_oradir_name&#x3D;&quot;&quot;    #v_tmp_space1&#x3D;&quot;&quot;        #临时表空间、表空间、索引表空间v_tmp_space2&#x3D;&quot;&quot;v_space1&#x3D;&quot;&quot;v_space2&#x3D;&quot;&quot;v_idx_space1&#x3D;&quot;&quot;v_idx_space2&#x3D;&quot;&quot;v_max_size&#x3D;&quot;5120m&quot;    #表空间数据文件最大值v_dblink&#x3D;&quot;&quot;            #dblink名称#记录日志record_log()&#123;    echo -e &#96;date &#39;+%Y-%m-%d %H:%M:%S&#39;&#96; $1 | tee -a $&#123;v_logfile&#125;&#125;#用户数据导出exp_usrdata()&#123;    v_exp_usr&#x3D;$1    v_exp_pwd&#x3D;$2    v_oradir_name&#x3D;$3    cd $&#123;v_backup_dir&#125;    [[ -f $&#123;v_exp_usr&#125;&quot;_&quot;$&#123;v_date&#125;&quot;.dmp&quot; ]] &amp;&amp; rm -rf $&#123;v_exp_usr&#125;&quot;_&quot;$&#123;v_date&#125;&quot;.dmp&quot;    expdp $&#123;v_exp_usr&#125;&#x2F;$&#123;v_exp_pwd&#125; DIRECTORY&#x3D;$&#123;v_oradir_name&#125; DUMPFILE&#x3D;$&#123;v_exp_usr&#125;&quot;_&quot;$&#123;v_date&#125;&quot;.dmp&quot; SCHEMAS&#x3D;$&#123;v_exp_usr&#125; LOGFILE&#x3D;$&#123;v_exp_usr&#125;&quot;_&quot;$&#123;v_date&#125;&quot;.log&quot;&#125;#在目标库上创建数据库备份目录create_bankup_dir()&#123;    #创建操作系统物理路径    [[ -d $&#123;v_backup_dir&#125; ]] &amp;&amp; mkdir -p $&#123;v_backup_dir&#125;    sqlplus -S &#x2F; as sysdba &gt;&gt; $&#123;v_logfile&#125; &lt;&lt;EOF    set heading off feedback off verify off    spool tmp_space_flag.tmp    grant read,write on directory &#39;$&#123;v_oradir_name&#125;&#39; to &#39;$&#123;v_usr_1&#125;&#39;,&#39;$&#123;v_usr_2&#125;&#39;;    spool off    exit;EOF    ##如果当前表空间不存在，则创建，否则退出当前函数    if [[ &#96;grep $&#123;v_oradir_name&#125; tmp_space_flag.tmp | wc -l&#96; -eq 0 ]]; then        record_log &quot;创建备份目录&quot;$1&quot;开始&quot;        sqlplus -S &#x2F; as sysdba &gt;&gt; $&#123;v_logfile&#125; &lt;&lt;EOF        set heading off feedback off verify off        grant read,write on directory &#39;$&#123;v_oradir_name&#125;&#39; to &#39;$&#123;v_usr_1&#125;&#39;,&#39;$&#123;v_usr_2&#125;&#39;;        exit;EOF        record_log &quot;创建备份目录&quot;$1&quot;结束&quot;    else        record_log &quot;创建备份目录&quot;$1&quot;已存在&quot;        return    fi    ##注意清理临时标志文件    [[ -f .&#x2F;tmp_space_flag.tmp ]] &amp;&amp; rm -rf tmp_space_flag.tmp&#125;#创建表空间create_space()&#123;    v_space_name&#x3D;$1    #判断表空间类型（临时表空间或普通表空间）    if [[ &#96;grep TMP $1&#96; -eq 1 ]]; then        v_space_type&#x3D;&quot;temporary&quot;    else        v_space_type&#x3D;&quot;&quot;    fi     sqlplus -S &#x2F; as sysdba &gt;&gt; $&#123;v_logfile&#125; &lt;&lt;EOF    set heading off feedback off verify off    create &#39;$&#123;v_space_type&#125;&#39; tablespace &#39;$&#123;v_space_name&#125;&#39; tempfile &#39;$&#123;v_backup_dir&#125;&#x2F;$&#123;v_space_name&#125;.dbf&#39; size 50m autoextend on next 128k maxsize &#39;$&#123;v_max_size&#125;&#39; extent management local;     exit;EOF&#125;#判断表空间是否存在，若表空间不存在则创建deal_spaces()&#123;    v_space_name&#x3D;$1    sqlplus -S &#x2F; as sysdba &lt;&lt;EOF     set heading off feedback off verify off    spool tmp_space_flag.tmp    select tablespace_name from dba_tablespaces where tablespace_name&#x3D;&#39;$&#123;v_space_name&#125;&#39;;    spool off    exit;EOF    ##如果当前表空间不存在，则创建，否则退出当前函数    if [[ &#96;grep $&#123;v_space_name&#125; tmp_space_flag.tmp | wc -l&#96; -eq 0 ]]; then        record_log &quot;创建表空间&quot;$1&quot;开始&quot;        create_space $&#123;v_space_name&#125;        record_log &quot;创建表空间&quot;$1&quot;结束&quot;    else        record_log &quot;表空间&quot;$1&quot;已存在&quot;        return    fi    ##注意清理临时标志文件    [[ -f .&#x2F;tmp_space_flag.tmp ]] &amp;&amp; rm -rf tmp_space_flag.tmp&#125;#在目标库上创建用户并赋权create_usrs()&#123;    v_create_usr&#x3D;$1        #参数1：用户名    v_create_pwd&#x3D;$2        #参数2：密码    v_create_tmp_space&#x3D;$3         #参数3：临时表空间名称    v_create_space&#x3D;$4        #参数4：表空间名称    sqlplus -S &#x2F; as sysdba &gt;&gt; $&#123;v_logfile&#125; &lt;&lt;EOF    set heading off feedback off verify off    create user &#39;$&#123;v_create_usr&#125;&#39; identified by &#39;$&#123;v_create_pwd&#125;&#39; default tablespace &#39;$&#123;v_create_space&#125;&#39; temporary tablespace &#39;$&#123;v_create_tmp_space&#125;&#39;;    grant connect,resource to &#39;$&#123;v_create_usr&#125;&#39;;    grant exp_full_database to &#39;$&#123;v_create_usr&#125;&#39;;    grant imp_full_database to &#39;$&#123;v_create_usr&#125;&#39;;    grant unlimited tablespace to &#39;$&#123;v_create_usr&#125;&#39;;    exit;EOF&#125;#用户数据导入imp_usrdata()&#123;    v_imp_usr&#x3D;$1    v_imp_pwd&#x3D;$2    v_oradir_name&#x3D;$3    impdp $&#123;v_imp_usr&#125;&#x2F;$&#123;v_imp_pwd&#125; DIRECTORY&#x3D;$&#123;v_oradir_name&#125; DUMPFILE&#x3D;$&#123;v_imp_usr&#125;&quot;_&quot;$&#123;v_date&#125;&quot;.dmp&quot; SCHEMAS&#x3D;$&#123;v_imp_usr&#125; LOGFILE&#x3D;$&#123;v_imp_usr&#125;&quot;_&quot;$&#123;v_date&#125;&quot;.log&quot; table_exists_action&#x3D;replace RANSFORM&#x3D;segment_attributes:n&#125;#删除用户drop_user()&#123;    v_drop_usr&#x3D;$1    #删除用户及用户下的所有数据，删除表空间及表空间下的所有数据    sqlplus -S &#x2F; as sysdba &gt;&gt; $&#123;v_logfile&#125; &lt;&lt;EOF    set heading off feedback off verify off    drop user &#39;$&#123;v_drop_usr&#125;&#39; cascade;    exitEOF&#125;#删除表空间并删除表空间下的数据文件drop_tablespace()&#123;    v_drop_space&#x3D;$1    #删除用户及用户下的所有数据，删除表空间及表空间下的所有数据    sqlplus -S &#x2F; as sysdba &gt;&gt; $&#123;v_logfile&#125; &lt;&lt;EOF    set heading off feedback off verify off    drop tablespace &#39;$&#123;v_drop_space&#125;&#39; including contents and datafiles;    exitEOF    ##操作系统上表空间下的数据文件    [[ -f $&#123;v_backup_dir&#125;&#x2F;$&#123;v_drop_space&#125;.dbf ]] &amp;&amp; rm -rf $&#123;v_backup_dir&#125;&#x2F;$&#123;v_drop_space&#125;.dbf&#125;#创建dblinkcreate_dblink()&#123;    v_clink_usr&#x3D;$1    v_clink_pwd&#x3D;$2    #以管理员身份对创建dblink赋权    sqlplus -S &#x2F; as sysdba &gt;&gt; $&#123;v_logfile&#125; &lt;&lt;EOF    set heading off feedback off verify off    grant create database link to &#39;$&#123;v_clink_usr&#125;&#39;;    exit;EOF    #以普通用户登录创建dblink    sqlplus -S $&#123;v_clink_usr&#125;&#x2F;$&#123;v_clink_pwd&#125;@$&#123;v_db_instance&#125; &gt;&gt; $&#123;v_logfile&#125; &lt;&lt;EOF    set heading off feedback off verify off    CREATE DATABASE LINK $&#123;v_dblink&#125; CONNECT TO &#39;$&#123;v_clink_usr&#125;&#39; IDENTIFIED BY &#39;$&#123;v_clink_pwd&#125;&#39; USING &#39;&#123;v_db_instance&#125;&#39;;    exitEOF&#125;#判断dblink是否存在deal_dblink()&#123;    v_link&#x3D;$1    v_link_usr&#x3D;$2    v_link_pwd&#x3D;$3    sqlplus -S &#x2F; as sysdba &lt;&lt;EOF     set heading off feedback off verify off    spool tmp_space_flag.tmp    select object_name from dba_objects where object_name &#x3D; &#39;$&#123;v_link&#125;&#39;;     spool off    exit;EOF    ##如果当前dblink不存在，则创建，否则退出当前函数    if [[ &#96;grep $&#123;v_space_name&#125; tmp_space_flag.tmp | wc -l&#96; -eq 0 ]]; then        record_log &quot;创建&quot;$1&quot;开始&quot;        create_dblink $&#123;v_link_usr&#125; $&#123;v_link_pwd&#125;        record_log &quot;创建&quot;$1&quot;结束&quot;    else        record_log $1&quot;已存在&quot;        return    fi    ##注意清理临时标志文件    [[ -f .&#x2F;tmp_space_flag.tmp ]] &amp;&amp; rm -rf tmp_space_flag.tmp&#125;#主函数main()&#123;    v_start&#x3D;&#96;date +%s&#96;    if [[ $1 -eq &quot;exp&quot; ]]; then         record_log &quot;bl库导出开始...&quot;        exp_usrdata $&#123;v_usr_1&#125; $&#123;v_pwd_1&#125; $&#123;v_oradir_name&#125;        record_log &quot;bl库导出结束...&quot;        record_log &quot;hx库导出开始...&quot;        exp_usrdata $&#123;v_usr_2&#125; $&#123;v_pwd_2&#125; $&#123;v_oradir_name&#125;        record_log &quot;hx库导出结束...&quot;    elif [[ $1 -eq &quot;pre&quot; ]]; then        #1、创建备份目录        create_bankup_dir        #2、创建表空间        for v_sp in $&#123;v_tmp_space1&#125; $&#123;v_tmp_space2&#125; $&#123;v_space1&#125; $&#123;v_space2&#125; $&#123;v_idx_space1&#125; $&#123;v_idx_space2&#125;; do            deal_spaces $&#123;v_sp&#125;        done        #3、创建用户、赋权        record_log &quot;创建用户开始...&quot;        create_usrs $&#123;v_usr_1&#125; $&#123;v_pwd_1&#125; $&#123;v_tmp_space1&#125; $&#123;v_space1&#125;        create_usrs $&#123;v_usr_2&#125; $&#123;v_pwd_2&#125; $&#123;v_tmp_space2&#125; $&#123;v_space2&#125;        record_log &quot;创建用户结束...&quot;        #4、为hx库创建dblink        record_log &quot;创建dblink开始...&quot;        deal_dblink $&#123;v_dblink&#125; $&#123;v_usr_2&#125; $&#123;v_pwd_2&#125;        record_log &quot;创建dblink结束...&quot;    elif [[ $1 -eq &quot;imp&quot; ]]; then        record_log &quot;bl库导入开始...&quot;        imp_usrdata $&#123;v_usr_1&#125; $&#123;v_pwd_1&#125; $&#123;v_oradir_name&#125;        record_log &quot;bl库导入结束...&quot;        record_log &quot;hx库导入开始...&quot;        imp_usrdata $&#123;v_usr_2&#125; $&#123;v_pwd_2&#125; $&#123;v_oradir_name&#125;        record_log &quot;hx库导入结束...&quot;    elif [[ $1 -eq &quot;clean&quot; ]]; then        read -t 5 -p &quot;确认清除 0-否 1-是&quot; v_num        if [[ $&#123;v_num&#125; -eq 1 ]]; then            record_log &quot;清理数据文件开始...&quot;            for m in $&#123;&#125; $&#123;&#125;; do                drop_user $&#123;m&#125;            done            for n in $&#123;v_tmp_space1&#125; $&#123;v_tmp_space2&#125; $&#123;v_space1&#125; $&#123;v_space2&#125; $&#123;v_idx_space1&#125; $&#123;v_idx_space2&#125;; do                drop_tablespace $&#123;n&#125;            done            record_log &quot;清理数据文件结束...&quot;        else            exit        fi    else        echo &quot;Usage: sh script [exp|clean|pre|imp]&quot;        exit    fi    v_end&#x3D;&#96;date +%s&#96;    v_use_time&#x3D;$[ v_end - v_start ]    record_log &quot;本次脚本运行时间：&quot;$&#123;v_use_time&#125;&quot;秒&quot;&#125;main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle </tag>
            
            <tag> 数据迁移 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
